Python_Function,Description,Unit Test Cases
"def remove_even(l):
    for i in l:
        if i % 2 == 0:
            l.remove(i)
    return l","This function 'remove_even' performs a specific operation.

The function 'remove_even' takes the following parameters: l. It performs operations based on the parameters provided.","def test_remove_even():
    # Add test cases for remove_even
    assert remove_even(...) == expected_output"
def is_palindrome_recursive(s): if len(s) <= 1: return True if s[0] != s[-1]: return False return is_palindrome_recursive(s[1:-1]),"Recursively checks if a string is a palindrome.

This function returns True if the input string s reads the same forwards and backwards using recursion.","def test_is_palindrome_recursive(): assert is_palindrome_recursive(""racecar"") assert not is_palindrome_recursive(""hello"") assert is_palindrome_recursive(""a"")"
"def calculate_area_of_rectangle(length, width): return length * width","Calculates the area of a rectangle.

This function returns the area of a rectangle given its length and width, using the formula length * width.","def test_calculate_area_of_rectangle(): assert calculate_area_of_rectangle(5, 4) == 20 assert calculate_area_of_rectangle(7, 3) == 21 assert calculate_area_of_rectangle(0, 10) == 0"
"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume","This function 'volume_cuboid' performs a specific operation.

The function 'volume_cuboid' takes the following parameters: l, w, h. It performs operations based on the parameters provided.","def test_volume_cuboid():
    # Add test cases for volume_cuboid
    assert volume_cuboid(...) == expected_output"
"def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ","This function 'count_X' performs a specific operation.

The function 'count_X' takes the following parameters: tup, x. It performs operations based on the parameters provided.","def test_count_X():
    # Add test cases for count_X
    assert count_X(...) == expected_output"
"def vowel(text):    vowels = ""aeiuoAEIOU""    print(len([letter for letter in text if letter in vowels]))    print([letter for letter in text if letter in vowels])vowel('w3resource');","""""""
Brief Description:
------------------
vowel function performs a specific operation as described below.

Extended Description:
---------------------
This function, `vowel`, takes 1 parameters: text. It is designed to perform a certain task using these parameters.

Parameters:
-----------
text : type
    Description of text.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> vowel(value)
Expected output
""""""","import unittest

class TestVowel(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = vowel(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = vowel(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def sum_of_positive_numbers(lst): return sum(x for x in lst if x > 0),"Sums the positive numbers in a list.

This function returns the sum of all positive numbers in the list lst.","def test_sum_of_positive_numbers(): assert sum_of_positive_numbers([1, -2, 3, 4]) == 8 assert sum_of_positive_numbers([-1, -3]) == 0 assert sum_of_positive_numbers([10]) == 10"
"def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result","This function 'reverse_string_list' performs a specific operation.

The function 'reverse_string_list' takes the following parameters: stringlist. It performs operations based on the parameters provided.","def test_reverse_string_list():
    # Add test cases for reverse_string_list
    assert reverse_string_list(...) == expected_output"
def find_median(lst): sorted_lst = sorted(lst) n = len(lst) return (sorted_lst[n//2] if n % 2 != 0 else (sorted_lst[n//2 - 1] + sorted_lst[n//2]) / 2) if lst else None,"Finds the median of a list of numbers.

This function returns the median of the sorted list lst. If the list has an odd length, it returns the middle element; if the list has an even length, it returns the average of the two middle elements. If the list is empty, it returns None.","def test_find_median(): assert find_median([3, 1, 2]) == 2 assert find_median([1, 2, 3, 4]) == 2.5 assert find_median([]) == None"
"def index_on_inner_list(list1, list2):    result = [x for x in list1 if x not in list2]    return resultlist1 = [1,2,3,4,5,6,7,8,9,10]list2 = [2,4,6,8]print(""Original lists:"")print(""list1:"", list1)print(""list2:"", list2)print(""\nRemove all elements from 'list1' present in 'list2:"")print(index_on_inner_list(list1, list2))","""""""
Brief Description:
------------------
index_on_inner_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `index_on_inner_list`, takes 2 parameters: list1,  list2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.
list2 : type
    Description of list2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> index_on_inner_list(value, value)
Expected output
""""""","import unittest

class TestIndex_on_inner_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = index_on_inner_list(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = index_on_inner_list(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_list_range(list1, leftrange, rigthrange):
   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]
   return result","This function 'remove_list_range' performs a specific operation.

The function 'remove_list_range' takes the following parameters: list1, leftrange, rigthrange. It performs operations based on the parameters provided.","def test_remove_list_range():
    # Add test cases for remove_list_range
    assert remove_list_range(...) == expected_output"
"def find_Diff(arr,n): 
    arr.sort()  
    count = 0; max_count = 0; min_count = n 
    for i in range(0,(n-1)): 
        if arr[i] == arr[i + 1]: 
            count += 1
            continue
        else: 
            max_count = max(max_count,count) 
            min_count = min(min_count,count) 
            count = 0
    return max_count - min_count ","This function 'find_Diff' performs a specific operation.

The function 'find_Diff' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_find_Diff():
    # Add test cases for find_Diff
    assert find_Diff(...) == expected_output"
"def pascal_triangle(n): result = [[1]]; for i in range(1, n): row = [1]; for j in range(1, i): row.append(result[i-1][j-1] + result[i-1][j]); row.append(1); result.append(row); return result","Generates Pascal's Triangle up to n rows.

This function returns the first n rows of Pascal's Triangle, where each number is the sum of the two directly above it.","def test_pascal_triangle(): assert pascal_triangle(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"
"from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
 return dist","This function 'distance_lat_long' performs a specific operation.

The function 'distance_lat_long' takes the following parameters: slat, slon, elat, elon. It performs operations based on the parameters provided.","def test_distance_lat_long():
    # Add test cases for distance_lat_long
    assert distance_lat_long(...) == expected_output"
"def merge_sorted_lists(lst1, lst2): return sorted(lst1 + lst2)","Merges two sorted lists into one sorted list.

This function returns a new list that combines lst1 and lst2, and sorts the resulting list.","def test_merge_sorted_lists(): assert merge_sorted_lists([1, 3], [2, 4]) == [1, 2, 3, 4] assert merge_sorted_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_sorted_lists([], [5]) == [5]"
"def is_palindrome_number(x): if x < 0: return False; original, reversed_num = x, 0; while x > 0: reversed_num = reversed_num * 10 + x % 10; x //= 10; return original == reversed_num","Checks if a number is a palindrome.

This function returns True if the input integer x is a palindrome, and False otherwise. A number is a palindrome if it reads the same forwards and backwards. It constructs the reverse of the number and compares it to the original.",def test_is_palindrome_number(): assert is_palindrome_number(121) assert not is_palindrome_number(-121) assert not is_palindrome_number(10)
"import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter","This function 'perimeter_pentagon' performs a specific operation.

The function 'perimeter_pentagon' takes the following parameters: a. It performs operations based on the parameters provided.","def test_perimeter_pentagon():
    # Add test cases for perimeter_pentagon
    assert perimeter_pentagon(...) == expected_output"
def count_vowels(s): return sum(1 for char in s.lower() if char in 'aeiou'),"Counts the number of vowels in a string.

This function returns the total number of vowels in the string s. Vowels include 'a', 'e', 'i', 'o', and 'u'.","def test_count_vowels(): assert count_vowels(""hello"") == 2 assert count_vowels(""python"") == 1 assert count_vowels("""") == 0"
"def detect_cycle(head): slow, fast = head, head; while fast and fast.next: slow = slow.next; fast = fast.next.next; if slow == fast: slow = head; while slow != fast: slow = slow.next; fast = fast.next; return slow; return None","Detects if a cycle exists in a linked list.

This function returns the node where the cycle begins in a linked list. It uses Floyd? Tortoise and Hare algorithm to detect the cycle and find the starting node.","def test_detect_cycle(): head = ListNode(3, ListNode(2, ListNode(0, ListNode(-4)))); head.next.next.next.next = head.next; assert detect_cycle(head) == head.next"
"def get_intersection(lst1, lst2): return list(set(lst1) & set(lst2))",Finds intersection between two lists.,"def test_get_intersection(): assert get_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert get_intersection([5, 6], [7, 8]) == [] assert get_intersection([], [1, 2]) == []"
"def accounts_merge(accounts): from collections import defaultdict; parent, email_to_name = {}, {}; def find(x): parent[x] = parent.get(x, x); if parent[x] != x: parent[x] = find(parent[x]); return parent[x]; def union(x, y): parent[find(x)] = find(y); for account in accounts: name = account[0]; for email in account[1:]: email_to_name[email] = name; union(account[1], email); merged_accounts = defaultdict(list); for email in email_to_name: merged_accounts[find(email)].append(email); return [[email_to_name[emails[0]]] + sorted(emails) for emails in merged_accounts.values()]","Merges accounts with the same email addresses.

This function returns a merged list of accounts where accounts with common emails are merged. Each account contains a name and multiple email addresses. It uses union-find to group emails belonging to the same person.","def test_accounts_merge(): accounts = [[""John"", ""johnsmith@mail.com"", ""john00@mail.com""], [""John"", ""johnnybravo@mail.com""], [""John"", ""johnsmith@mail.com"", ""john_newyork@mail.com""], [""Mary"", ""mary@mail.com""]]; assert accounts_merge(accounts) == [[""John"", ""john00@mail.com"", ""john_newyork@mail.com"", ""johnsmith@mail.com""], [""John"", ""johnnybravo@mail.com""], [""Mary"", ""mary@mail.com""]]"
"def Power(num1,num2):  if num2==0:    return 1  return num1*Power(num1, num2-1)num1=int(input(""Enter the base value:""))num2=int(input(""Enter the power value:""))print(""Power of Number Using Recursion is:"",Power(num1,num2))","""""""
Brief Description:
------------------
Power function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Power`, takes 2 parameters: num1, num2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num1 : type
    Description of num1.
num2 : type
    Description of num2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Power(value, value)
Expected output
""""""","import unittest

class TestPower(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Power(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Power(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums","This function 'comb_sort' performs a specific operation.

The function 'comb_sort' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_comb_sort():
    # Add test cases for comb_sort
    assert comb_sort(...) == expected_output"
"def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ","This function 'check_k_elements' performs a specific operation.

The function 'check_k_elements' takes the following parameters: test_list, K. It performs operations based on the parameters provided.","def test_check_k_elements():
    # Add test cases for check_k_elements
    assert check_k_elements(...) == expected_output"
"def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr","This function 'count_Primes_nums' performs a specific operation.

The function 'count_Primes_nums' takes the following parameters: n. It performs operations based on the parameters provided.","def test_count_Primes_nums():
    # Add test cases for count_Primes_nums
    assert count_Primes_nums(...) == expected_output"
"def longest_common_subsequence(text1, text2): dp = [[0] * (len(text2) + 1) for _ in range(len(text1) + 1)]; for i in range(1, len(text1) + 1): for j in range(1, len(text2) + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1; else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]); return dp[-1][-1]","Finds the length of the longest common subsequence between two strings.

This function returns the length of the longest common subsequence (LCS) between two strings text1 and text2. It uses dynamic programming to calculate the LCS in O(n*m) time.","def test_longest_common_subsequence(): assert longest_common_subsequence(""abcde"", ""ace"") == 3 assert longest_common_subsequence(""abc"", ""def"") == 0"
"import heapq as hq
def heap_queue_largest(nums,n):
  largest_nums = hq.nlargest(n, nums)
  return largest_nums","This function 'heap_queue_largest' performs a specific operation.

The function 'heap_queue_largest' takes the following parameters: nums, n. It performs operations based on the parameters provided.","def test_heap_queue_largest():
    # Add test cases for heap_queue_largest
    assert heap_queue_largest(...) == expected_output"
"def longest_word_in_dict(words): words.sort(key=lambda x: (-len(x), x)); word_set = set(words); for word in words: if all(word[:i] in word_set for i in range(1, len(word))): return word; return """"","Finds the longest word in a dictionary.

This function returns the longest word in the input list words that can be built one character at a time by other words in the list. If there are multiple possible results, it returns the lexicographically smallest one.","def test_longest_word_in_dict(): assert longest_word_in_dict([""w"", ""wo"", ""wor"", ""worl"", ""world""]) == ""world"" assert longest_word_in_dict([""a"", ""banana"", ""app"", ""appl"", ""ap"", ""apply"", ""apple""]) == ""apple"""
"def format_currency(amount): return ""${:,.2f}"".format(amount)","Formats a number as currency.

This function returns a string representing the input amount formatted as currency with two decimal places and commas for thousands.","def test_format_currency(): assert format_currency(1234.567) == ""$1,234.57"" assert format_currency(0) == ""$0.00"" assert format_currency(987654.321) == ""$987,654.32"""
def is_prime_palindrome(n): return str(n) == str(n)[::-1] and is_prime(n),"Checks if a number is a prime palindrome.

This function returns True if the number n is both a prime number and a palindrome, meaning it reads the same forwards and backwards.",def test_is_prime_palindrome(): assert is_prime_palindrome(131) assert not is_prime_palindrome(121) assert not is_prime_palindrome(10)
"def remove_k_digits(num, k): stack = []; for digit in num: while k and stack and stack[-1] > digit: stack.pop(); k -= 1; stack.append(digit); return ''.join(stack[:-k or None]).lstrip('0') or '0'","Removes k digits to form the smallest possible number.

This function returns the smallest possible number by removing exactly k digits from the string num. It uses a stack to construct the result while maintaining the smallest possible order.","def test_remove_k_digits(): assert remove_k_digits(""1432219"", 3) == ""1219"" assert remove_k_digits(""10200"", 1) == ""200"""
"def super_seq(X, Y, m, n):
	if (not m):
		return n
	if (not n):
		return m
	if (X[m - 1] == Y[n - 1]):
		return 1 + super_seq(X, Y, m - 1, n - 1)
	return 1 + min(super_seq(X, Y, m - 1, n),	super_seq(X, Y, m, n - 1))","This function 'super_seq' performs a specific operation.

The function 'super_seq' takes the following parameters: X, Y, m, n. It performs operations based on the parameters provided.","def test_super_seq():
    # Add test cases for super_seq
    assert super_seq(...) == expected_output"
def count_battleships(board): count = 0; for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == 'X' and (i == 0 or board[i-1][j] != 'X') and (j == 0 or board[i][j-1] != 'X'): count += 1; return count,"Counts the number of battleships on a board.

This function returns the number of battleships on the input m x n board, where each battleship is represented by consecutive 'X' characters horizontally or vertically. It avoids counting the same battleship more than once.","def test_count_battleships(): board = [[""X"", ""."", ""."", ""X""], [""."", ""."", ""."", ""X""], [""."", ""."", ""."", ""X""]]; assert count_battleships(board) == 2"
"def Total_Hamming_Distance(n):   
    i = 1
    sum = 0
    while (n // i > 0):  
        sum = sum + n // i  
        i = i * 2     
    return sum","This function 'Total_Hamming_Distance' performs a specific operation.

The function 'Total_Hamming_Distance' takes the following parameters: n. It performs operations based on the parameters provided.","def test_Total_Hamming_Distance():
    # Add test cases for Total_Hamming_Distance
    assert Total_Hamming_Distance(...) == expected_output"
"def len_log(list1):
    min=len(list1[0])
    for i in list1:
        if len(i)<min:
            min=len(i)
    return min","This function 'len_log' performs a specific operation.

The function 'len_log' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_len_log():
    # Add test cases for len_log
    assert len_log(...) == expected_output"
"def quickSort(data_list):   quickSortHlp(data_list,0,len(data_list)-1)def quickSortHlp(data_list,first,last):   if first < last:       splitpoint = partition(data_list,first,last)       quickSortHlp(data_list,first,splitpoint-1)       quickSortHlp(data_list,splitpoint+1,last)def partition(data_list,first,last):   pivotvalue = data_list[first]   leftmark = first+1   rightmark = last   done = False   while not done:       while leftmark <= rightmark and data_list[leftmark] <= pivotvalue:           leftmark = leftmark + 1       while data_list[rightmark] >= pivotvalue and rightmark >= leftmark:           rightmark = rightmark -1       if rightmark < leftmark:           done = True       else:           temp = data_list[leftmark]           data_list[leftmark] = data_list[rightmark]           data_list[rightmark] = temp   temp = data_list[first]   data_list[first] = data_list[rightmark]   data_list[rightmark] = temp   return rightmarkdata_list = [54,26,93,17,77,31,44,55,20]quickSort(data_list)print(data_list)","""""""
Brief Description:
------------------
quickSort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `quickSort`, takes 1 parameters: data_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
data_list : type
    Description of data_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> quickSort(value)
Expected output
""""""","import unittest

class TestQuicksort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = quickSort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = quickSort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_on_occurence(lst): 
	dct = {} 
	for i, j in lst: 
		dct.setdefault(i, []).append(j) 
	return ([(i, *dict.fromkeys(j), len(j)) 
				for i, j in dct.items()]) ","This function 'sort_on_occurence' performs a specific operation.

The function 'sort_on_occurence' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_sort_on_occurence():
    # Add test cases for sort_on_occurence
    assert sort_on_occurence(...) == expected_output"
"def ngcd(x,y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i;
        i+=1
    return gcd;
def num_comm_div(x,y):
  n = ngcd(x,y)
  result = 0
  z = int(n**0.5)
  i = 1
  while(i <= z):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result","This function 'ngcd' performs a specific operation.

The function 'ngcd' takes the following parameters: x, y. It performs operations based on the parameters provided.","def test_ngcd():
    # Add test cases for ngcd
    assert ngcd(...) == expected_output"
def sum_of_digits(n): return sum(int(digit) for digit in str(n)),"Calculates the sum of digits of a number.

This function returns the sum of all digits in the input number n.",def test_sum_of_digits(): assert sum_of_digits(123) == 6 assert sum_of_digits(456) == 15 assert sum_of_digits(0) == 0
"def merge_two_bst(t1, t2): if not t1: return t2; if not t2: return t1; t1.val += t2.val; t1.left = merge_two_bst(t1.left, t2.left); t1.right = merge_two_bst(t1.right, t2.right); return t1","Merges two binary search trees.

This function returns a new binary search tree by merging two input trees t1 and t2. For each node that exists in both trees, their values are summed, and the merging continues recursively for left and right children.","def test_merge_two_bst(): t1 = TreeNode(1, TreeNode(3, TreeNode(5)), TreeNode(2)); t2 = TreeNode(2, TreeNode(1, None, TreeNode(4)), TreeNode(3, None, TreeNode(7))); merged = merge_two_bst(t1, t2); assert merged.val == 3 and merged.left.val == 4 and merged.right.val == 5"
"def find_longest_word(words): return max(words, key=len)","Finds the longest word in a list of words.

This function returns the longest word from a list of words. If there are multiple words with the same length, it returns the first one encountered.","def test_find_longest_word(): assert find_longest_word([""apple"", ""banana"", ""cherry""]) == ""banana"" assert find_longest_word([""cat"", ""elephant"", ""tiger""]) == ""elephant"" assert find_longest_word([""a"", ""b"", ""c""]) == ""a"""
"def binary_to_integer(test_tup):
  res = int("""".join(str(ele) for ele in test_tup), 2)
  return (str(res)) ","This function 'binary_to_integer' performs a specific operation.

The function 'binary_to_integer' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_binary_to_integer():
    # Add test cases for binary_to_integer
    assert binary_to_integer(...) == expected_output"
def rotate_matrix(matrix): matrix[:] = [list(row) for row in zip(*matrix[::-1])],"Rotates a matrix by 90 degrees clockwise.

This function modifies the input n x n matrix by rotating it 90 degrees clockwise in-place. It uses matrix transposition and row reversal to achieve the rotation.","def test_rotate_matrix(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_matrix(matrix); assert matrix == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"
"def zigzag_conversion(s, num_rows): if num_rows == 1: return s; rows = [''] * min(num_rows, len(s)); cur_row, going_down = 0, False; for char in s: rows[cur_row] += char; if cur_row == 0 or cur_row == num_rows - 1: going_down = not going_down; cur_row += 1 if going_down else -1; return ''.join(rows)","Converts a string into a zigzag pattern.

This function returns the string s written in a zigzag pattern with num_rows rows. The characters are arranged diagonally and read row by row.","def test_zigzag_conversion(): assert zigzag_conversion(""PAYPALISHIRING"", 3) == ""PAHNAPLSIIGYIR"" assert zigzag_conversion(""AB"", 1) == ""AB"""
"def nth_harmonic_number(n): return sum(1 / i for i in range(1, n + 1))","Computes the nth harmonic number.

This function returns the n-th harmonic number, which is the sum of the reciprocals of the first n natural numbers.",def test_nth_harmonic_number(): assert nth_harmonic_number(3) == 1.8333333333333333 assert nth_harmonic_number(1) == 1 assert nth_harmonic_number(5) == 2.283333333333333
"def map_dictionary(itr, fn):  return dict(zip(itr, map(fn, itr)))print(map_dictionary([1, 2, 3], lambda x: x * x))","""""""
Brief Description:
------------------
map_dictionary function performs a specific operation as described below.

Extended Description:
---------------------
This function, `map_dictionary`, takes 2 parameters: itr,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
itr : type
    Description of itr.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> map_dictionary(value, value)
Expected output
""""""","import unittest

class TestMap_dictionary(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = map_dictionary(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = map_dictionary(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_no (A,N,L,R): 
    count = 0
    for i in range (L,R + 1): 
        if (i % A != 0): 
            count += 1
        if (count == N): 
            break
    return (i) ","This function 'count_no' performs a specific operation.

The function 'count_no' takes the following parameters: A, N, L, R. It performs operations based on the parameters provided.","def test_count_no():
    # Add test cases for count_no
    assert count_no(...) == expected_output"
"def all_permutations(nums): res = []; def backtrack(start): if start == len(nums): res.append(nums[:]); for i in range(start, len(nums)): nums[start], nums[i] = nums[i], nums[start]; backtrack(start + 1); nums[start], nums[i] = nums[i], nums[start]; backtrack(0); return res","Generates all permutations of a list.

This function returns all permutations of the input list nums. It uses backtracking to recursively generate each permutation by swapping elements.","def test_all_permutations(): assert all_permutations([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"
"def is_divisible_by(n, divisor): return n % divisor == 0","Checks if a number is divisible by another number.

This function returns True if n is divisible by divisor, and False otherwise.","def test_is_divisible_by(): assert is_divisible_by(10, 2) assert not is_divisible_by(7, 3) assert is_divisible_by(0, 1)"
"def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even","This function 'first_even' performs a specific operation.

The function 'first_even' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_first_even():
    # Add test cases for first_even
    assert first_even(...) == expected_output"
"def lcopy(xs):
  return xs[:]
","This function 'lcopy' performs a specific operation.

The function 'lcopy' takes the following parameters: xs. It performs operations based on the parameters provided.","def test_lcopy():
    # Add test cases for lcopy
    assert lcopy(...) == expected_output"
"import itertools
def remove_duplicate(list1):
 list.sort(list1)
 remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))
 return remove_duplicate","This function 'remove_duplicate' performs a specific operation.

The function 'remove_duplicate' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_remove_duplicate():
    # Add test cases for remove_duplicate
    assert remove_duplicate(...) == expected_output"
def factorial_recursive(n): if n == 0: return 1 return n * factorial_recursive(n - 1),"Calculates the factorial of a number using recursion.

This function returns the factorial of the input number n by recursively multiplying n by the factorial of n - 1.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(3) == 6
"def unique_Element(arr,n):
    s = set(arr)
    if (len(s) == 1):
        return ('YES')
    else:
        return ('NO')","This function 'unique_Element' performs a specific operation.

The function 'unique_Element' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_unique_Element():
    # Add test cases for unique_Element
    assert unique_Element(...) == expected_output"
"def unique_list(l):  x = []  for a in l:    if a not in x:      x.append(a)  return xprint(unique_list([1,2,3,3,3,3,4,5])) ","""""""
Brief Description:
------------------
unique_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `unique_list`, takes 1 parameters: l. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l : type
    Description of l.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> unique_list(value)
Expected output
""""""","import unittest

class TestUnique_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = unique_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = unique_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def multiply_elements(lst, factor): return [x * factor for x in lst]","Multiplies each element in a list by a factor.

This function returns a new list where each element in lst is multiplied by the given factor.","def test_multiply_elements(): assert multiply_elements([1, 2, 3], 2) == [2, 4, 6] assert multiply_elements([4, 5], 0) == [0, 0] assert multiply_elements([], 10) == []"
"def get_maxgold(gold, m, n): 
    goldTable = [[0 for i in range(n)] 
                        for j in range(m)]   
    for col in range(n-1, -1, -1): 
        for row in range(m):  
            if (col == n-1): 
                right = 0
            else: 
                right = goldTable[row][col+1] 
            if (row == 0 or col == n-1): 
                right_up = 0
            else: 
                right_up = goldTable[row-1][col+1] 
            if (row == m-1 or col == n-1): 
                right_down = 0
            else: 
                right_down = goldTable[row+1][col+1] 
            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) 
    res = goldTable[0][0] 
    for i in range(1, m): 
        res = max(res, goldTable[i][0])  
    return res ","This function 'get_maxgold' performs a specific operation.

The function 'get_maxgold' takes the following parameters: gold, m, n. It performs operations based on the parameters provided.","def test_get_maxgold():
    # Add test cases for get_maxgold
    assert get_maxgold(...) == expected_output"
"NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ","This function 'str_to_list' performs a specific operation.

The function 'str_to_list' takes the following parameters: string. It performs operations based on the parameters provided.","def test_str_to_list():
    # Add test cases for str_to_list
    assert str_to_list(...) == expected_output"
"def permute(nums):  result_perms = [[]]  for n in nums:    new_perms = []    for perm in result_perms:      for i in range(len(perm)+1):        new_perms.append(perm[:i] + [n] + perm[i:])        result_perms = new_perms  return result_permsmy_nums = [1,2,3]print(""Original Cofllection: "",my_nums)print(""Collection of distinct numbers:\n"",permute(my_nums))","""""""
Brief Description:
------------------
permute function performs a specific operation as described below.

Extended Description:
---------------------
This function, `permute`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> permute(value)
Expected output
""""""","import unittest

class TestPermute(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = permute(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = permute(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def search_insert(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; elif nums[mid] < target: left = mid + 1; else: right = mid - 1; return left","Finds the index where a target should be inserted.

This function returns the index at which the target value should be inserted in the sorted list nums. It uses binary search to find the appropriate position.","def test_search_insert(): assert search_insert([1, 3, 5, 6], 5) == 2 assert search_insert([1, 3, 5, 6], 2) == 1"
"def adjac(ele, sub = []): 
  if not ele: 
     yield sub 
  else: 
     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) 
                for idx in adjac(ele[1:], sub + [j])] 
def get_coordinates(test_tup):
  res = list(adjac(test_tup))
  return (res) ","This function 'adjac' performs a specific operation.

The function 'adjac' takes the following parameters: ele, sub = []. It performs operations based on the parameters provided.","def test_adjac():
    # Add test cases for adjac
    assert adjac(...) == expected_output"
def remove_duplicates(lst): return list(set(lst)),"Removes duplicate elements from a list.

This function returns a new list with duplicate elements removed from lst.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates(['a', 'b', 'a']) == ['a', 'b'] assert remove_duplicates([]) == []"
def reverse_linked_list(head): prev = None; current = head; while current: next_node = current.next; current.next = prev; prev = current; current = next_node; return prev,"Reverses a linked list.

This function takes the head of a linked list and returns a new head representing the reversed linked list. It iteratively reverses the direction of the pointers between nodes.","def test_reverse_linked_list(): head = ListNode(1, ListNode(2, ListNode(3))); new_head = reverse_linked_list(head); assert linked_list_to_list(new_head) == [3, 2, 1]"
def get_unique_elements(lst): return list(set(lst)),"Gets unique elements from a list.

This function returns a list of unique elements from the input list lst, removing any duplicates.","def test_get_unique_elements(): assert get_unique_elements([1, 2, 2, 3]) == [1, 2, 3] assert get_unique_elements(['a', 'b', 'a']) == ['a', 'b'] assert get_unique_elements([]) == []"
"def even(num1,num2):  if num1>num2:    return  print(num1,end="" "")  return even(num1+2,num2)num1=2print(""Enter your Limit:"")num2=int(input())print(""All Even number given range are:"")even(num1,num2)","""""""
Brief Description:
------------------
even function performs a specific operation as described below.

Extended Description:
---------------------
This function, `even`, takes 2 parameters: num1, num2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num1 : type
    Description of num1.
num2 : type
    Description of num2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> even(value, value)
Expected output
""""""","import unittest

class TestEven(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = even(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = even(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def merge_k_sorted_lists(lists): import heapq; merged = []; heap = [(lst[0], i, 0) for i, lst in enumerate(lists) if lst]; heapq.heapify(heap); while heap: val, list_idx, elem_idx = heapq.heappop(heap); merged.append(val); if elem_idx + 1 < len(lists[list_idx]): heapq.heappush(heap, (lists[list_idx][elem_idx + 1], list_idx, elem_idx + 1)); return merged","Merges k sorted lists into one sorted list.

This function merges k sorted lists using a min-heap to efficiently find the smallest element across all lists.","def test_merge_k_sorted_lists(): assert merge_k_sorted_lists([[1, 4, 5], [1, 3, 4], [2, 6]]) == [1, 1, 2, 3, 4, 4, 5, 6]"
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1),"Computes the factorial of a number recursively.

This function returns the factorial of the number n using recursion. The factorial of n is the product of all integers from 1 to n.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(1) == 1
def find_duplicates(lst): return list(set(x for x in lst if lst.count(x) > 1)),Finds duplicate elements in a list.,"def test_find_duplicates(): assert find_duplicates([1, 2, 2, 3]) == [2] assert find_duplicates(['a', 'b', 'a']) == ['a'] assert find_duplicates([1, 2, 3]) == []"
"def last_Digit_Factorial(n): 
    if (n == 0): return 1
    elif (n <= 2): return n  
    elif (n == 3): return 6
    elif (n == 4): return 4 
    else: 
      return 0","This function 'last_Digit_Factorial' performs a specific operation.

The function 'last_Digit_Factorial' takes the following parameters: n. It performs operations based on the parameters provided.","def test_last_Digit_Factorial():
    # Add test cases for last_Digit_Factorial
    assert last_Digit_Factorial(...) == expected_output"
def to_uppercase(s): return s.upper(),"Converts a string to uppercase.

This function returns a new string with all characters of the input string s converted to uppercase.","def test_to_uppercase(): assert to_uppercase(""hello"") == ""HELLO"" assert to_uppercase(""world"") == ""WORLD"" assert to_uppercase("""") == """""
"def max_sum_increasing_subsequence(arr, n): 
	max = 0
	msis = [0 for x in range(n)] 
	for i in range(n): 
		msis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
				msis[i] < msis[j] + arr[i]): 
				msis[i] = msis[j] + arr[i] 
	for i in range(n): 
		if max < msis[i]: 
			max = msis[i] 
	return max","This function 'max_sum_increasing_subsequence' performs a specific operation.

The function 'max_sum_increasing_subsequence' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_max_sum_increasing_subsequence():
    # Add test cases for max_sum_increasing_subsequence
    assert max_sum_increasing_subsequence(...) == expected_output"
"def remove_last_n_elements(lst, n): return lst[:-n]","Removes the last n elements from a list.

 This function returns a new list with the last n elements removed from lst.","def test_remove_last_n_elements(): assert remove_last_n_elements([1, 2, 3, 4], 2) == [1, 2] assert remove_last_n_elements([1, 2], 1) == [1] assert remove_last_n_elements([], 1) == []"
"def catalan_number(num):
    if num <=1:
         return 1   
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num-i-1)
    return res_num","This function 'catalan_number' performs a specific operation.

The function 'catalan_number' takes the following parameters: num. It performs operations based on the parameters provided.","def test_catalan_number():
    # Add test cases for catalan_number
    assert catalan_number(...) == expected_output"
"def access_elements(nums, list_index):
    result = [nums[i] for i in list_index]
    return result","This function 'access_elements' performs a specific operation.

The function 'access_elements' takes the following parameters: nums, list_index. It performs operations based on the parameters provided.","def test_access_elements():
    # Add test cases for access_elements
    assert access_elements(...) == expected_output"
"def flatten(S):
    if S == []:
        return S
    if isinstance(S[0], list):
        return flatten(S[0]) + flatten(S[1:])
    return S[:1] + flatten(S[1:])
s=[[1,2],[3,4]]
print(""Flattened list is: "",flatten(s))","""""""
Brief Description:
------------------
flatten function performs a specific operation as described below.

Extended Description:
---------------------
This function, `flatten`, takes 1 parameters: S. It is designed to perform a certain task using these parameters.

Parameters:
-----------
S : type
    Description of S.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> flatten(value)
Expected output
""""""","import unittest

class TestFlatten(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = flatten(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = flatten(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def nth_centered_square_number(n): return n ** 2 + (n - 1) ** 2,"Computes the nth centered square number.

This function returns the n-th centered square number, which is part of a sequence of numbers based on a square.",def test_nth_centered_square_number(): assert nth_centered_square_number(3) == 13 assert nth_centered_square_number(1) == 1 assert nth_centered_square_number(5) == 41
"def gcd_recursive(a, b): return a if b == 0 else gcd_recursive(b, a % b)","Computes the greatest common divisor (GCD) using recursion.

This function returns the greatest common divisor of two integers a and b using recursion and the Euclidean algorithm.","def test_gcd_recursive(): assert gcd_recursive(12, 8) == 4 assert gcd_recursive(17, 13) == 1 assert gcd_recursive(20, 5) == 5"
"def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)","This function 'tuple_intersection' performs a specific operation.

The function 'tuple_intersection' takes the following parameters: test_list1, test_list2. It performs operations based on the parameters provided.","def test_tuple_intersection():
    # Add test cases for tuple_intersection
    assert tuple_intersection(...) == expected_output"
"def sum_digits_single(x) : 
    ans = 0
    while x : 
        ans += x % 10
        x //= 10  
    return ans 
def closest(x) : 
    ans = 0
    while (ans * 10 + 9 <= x) : 
        ans = ans * 10 + 9  
    return ans   
def sum_digits_twoparts(N) : 
    A = closest(N)  
    return sum_digits_single(A) + sum_digits_single(N - A) ","This function 'sum_digits_single' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def majority_element(nums): count, candidate = 0, None; for num in nums: if count == 0: candidate = num; count += 1 if num == candidate else -1; return candidate","Finds the majority element in a list.

This function returns the majority element in the list nums, defined as the element that appears more than half the time. It uses the Boyer-Moore voting algorithm.","def test_majority_element(): assert majority_element([3, 2, 3]) == 3 assert majority_element([2, 2, 1, 1, 1, 2, 2]) == 2"
"def find(lst, fn):  return next(x for x in lst if fn(x)) print(find([1, 2, 3, 4], lambda n: n % 2 == 1))print(find([1, 2, 3, 4], lambda n: n % 2 == 0))","""""""
Brief Description:
------------------
find function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find`, takes 2 parameters: lst,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find(value, value)
Expected output
""""""","import unittest

class TestFind(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def string_compression(chars): index = 0; i = 0; while i < len(chars): char = chars[i]; count = 0; while i < len(chars) and chars[i] == char: i += 1; count += 1; chars[index] = char; index += 1; if count > 1: for digit in str(count): chars[index] = digit; index += 1; return index,"Compresses a list of characters in place.

This function compresses the input list chars by replacing repeated sequences of characters with the character followed by the number of occurrences. It modifies the list in place and returns the new length.","def test_string_compression(): chars = [""a"", ""a"", ""b"", ""b"", ""c"", ""c"", ""c""]; assert string_compression(chars) == 6 assert chars[:6] == [""a"", ""2"", ""b"", ""2"", ""c"", ""3""]"
def square_numbers(lst): return [x**2 for x in lst],"Squares each number in a list.

This function returns a list of squares of each number from the input list lst.","def test_square_numbers(): assert square_numbers([1, 2, 3]) == [1, 4, 9] assert square_numbers([0, 5]) == [0, 25] assert square_numbers([-1, -2]) == [1, 4]"
"import math
def wind_chill(v,t):
 windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)
 return int(round(windchill, 0))","This function 'wind_chill' performs a specific operation.

The function 'wind_chill' takes the following parameters: v, t. It performs operations based on the parameters provided.","def test_wind_chill():
    # Add test cases for wind_chill
    assert wind_chill(...) == expected_output"
"def move_start(nums, offset):  return nums[-offset:] + nums[:-offset] print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 3))print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -3))print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 8))print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -8))print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 7))print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -7))","""""""
Brief Description:
------------------
move_start function performs a specific operation as described below.

Extended Description:
---------------------
This function, `move_start`, takes 2 parameters: nums,  offset. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
offset : type
    Description of offset.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> move_start(value, value)
Expected output
""""""","import unittest

class TestMove_start(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = move_start(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = move_start(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def trapping_rainwater(height): left, right = 0, len(height) - 1; left_max, right_max, water = 0, 0, 0; while left < right: if height[left] < height[right]: if height[left] >= left_max: left_max = height[left]; else: water += left_max - height[left]; left += 1; else: if height[right] >= right_max: right_max = height[right]; else: water += right_max - height[right]; right -= 1; return water","Calculates the total amount of trapped rainwater.

This function returns the total amount of water trapped between the bars represented by the heights in the list height. It uses a two-pointer approach to find trapped water in linear time.","def test_trapping_rainwater(): assert trapping_rainwater([0,1,0,2,1,0,1,3,2,1,2,1]) == 6 assert trapping_rainwater([4,2,0,3,2,5]) == 9"
"def linear_search(alist, key):
    """"""Return index of key in alist. Return -1 if key not present.""""""
    for i in range(len(alist)):
        if alist[i] == key:
            return i
    return -1


alist = input('Enter the list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
key = int(input('The number to search for: '))

index = linear_search(alist, key)
if index < 0:
    print('{} was not found.'.format(key))
else:
    print('{} was found at index {}.'.format(key, index))","""""""
Brief Description:
------------------
linear_search function performs a specific operation as described below.

Extended Description:
---------------------
This function, `linear_search`, takes 2 parameters: alist,  key. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
key : type
    Description of key.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> linear_search(value, value)
Expected output
""""""","import unittest

class TestLinear_search(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = linear_search(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = linear_search(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_min_in_rotated_sorted_array(nums): left, right = 0, len(nums) - 1; while left < right: mid = (left + right) // 2; if nums[mid] > nums[right]: left = mid + 1; else: right = mid; return nums[left]","Finds the minimum element in a rotated sorted array.

This function returns the minimum element from the rotated sorted list nums. It uses binary search to find the pivot where the rotation occurred.","def test_find_min_in_rotated_sorted_array(): assert find_min_in_rotated_sorted_array([3, 4, 5, 1, 2]) == 1 assert find_min_in_rotated_sorted_array([4, 5, 6, 7, 0, 1, 2]) == 0"
def flatten_nested_list(lst): return [item for sublist in lst for item in sublist],"Flattens a nested list.

This function takes a nested list lst and returns a single flattened list containing all elements from the nested lists.","def test_flatten_nested_list(): assert flatten_nested_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_nested_list([[]]) == [] assert flatten_nested_list([[5]]) == [5]"
"def Find_mean(arr,size):  sum=0  for i in range(0, size):    sum+=arr[i]  mean=sum/size  print(""Mean = "",mean)def Find_median(arr,size):  arr.sort()  if size%2==1:    median=arr[size//2]    print(""\nMedian= "",median)  else:    median = (arr[size // 2] + (arr[(size // 2) - 1])) / 2.0    print(""\nMedian= "", median)arr=[]size = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,size):  num = int(input())  arr.append(num)Find_mean(arr,size)Find_median(arr,size)","""""""
Brief Description:
------------------
Find_mean function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Find_mean`, takes 2 parameters: arr, size. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
size : type
    Description of size.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Find_mean(value, value)
Expected output
""""""","import unittest

class TestFind_mean(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Find_mean(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Find_mean(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def is_armstrong_number(n): digits = len(str(n)) return n == sum(int(digit) ** digits for digit in str(n)),"Checks if a number is an Armstrong number.

This function returns True if the input number n is an Armstrong number, which is a number that is equal to the sum of its own digits each raised to the power of the number of digits.",def test_is_armstrong_number(): assert is_armstrong_number(153) assert not is_armstrong_number(123) assert is_armstrong_number(370)
"def first_repeated_char(str1):  for index,c in enumerate(str1):    if str1[:index+1].count(c) > 1:      return c   return ""None""print(first_repeated_char(""abcdabcd""))print(first_repeated_char(""abcd""))","""""""
Brief Description:
------------------
first_repeated_char function performs a specific operation as described below.

Extended Description:
---------------------
This function, `first_repeated_char`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> first_repeated_char(value)
Expected output
""""""","import unittest

class TestFirst_repeated_char(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = first_repeated_char(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = first_repeated_char(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
","This function 'frequency_lists' performs a specific operation.

The function 'frequency_lists' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_frequency_lists():
    # Add test cases for frequency_lists
    assert frequency_lists(...) == expected_output"
"def merge_lists(lst1, lst2): return lst1 + lst2","Merges two lists.

This function concatenates two lists and returns the combined result.","def test_merge_lists(): assert merge_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_lists([], [5]) == [5] assert merge_lists([1], []) == [1]"
"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon","This function 'colon_tuplex' performs a specific operation.

The function 'colon_tuplex' takes the following parameters: tuplex, m, n. It performs operations based on the parameters provided.","def test_colon_tuplex():
    # Add test cases for colon_tuplex
    assert colon_tuplex(...) == expected_output"
"def profit_amount(actual_cost,sale_amount): 
 if(actual_cost > sale_amount):
    amount = actual_cost - sale_amount
    return amount
 else:
    return None","This function 'profit_amount' performs a specific operation.

The function 'profit_amount' takes the following parameters: actual_cost, sale_amount. It performs operations based on the parameters provided.","def test_profit_amount():
    # Add test cases for profit_amount
    assert profit_amount(...) == expected_output"
"def Factorial(num):  if num<=0:    return 1  else:    return num*Factorial(num-1)sum=0def check_StrongNumber(num):  global sum  if (num>0):    fact = 1    rem = num % 10    check_StrongNumber(num // 10)    fact = Factorial(rem)    sum+=fact  return sumnum=int(input(""Enter a number:""))if (check_StrongNumber(num) == num):  print(""It is a strong Number."")else:  print(""It is not a strong Number."")","""""""
Brief Description:
------------------
Factorial function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Factorial`, takes 1 parameters: num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Factorial(value)
Expected output
""""""","import unittest

class TestFactorial(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Factorial(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Factorial(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_bits(n): res = [0] * (n + 1); for i in range(1, n + 1): res[i] = res[i >> 1] + (i & 1); return res","Counts the number of 1's in the binary representation of each number up to n.

This function returns a list where each element at index i represents the number of 1's in the binary representation of the number i, for all i in the range [0, n].","def test_count_bits(): assert count_bits(2) == [0, 1, 1] assert count_bits(5) == [0, 1, 1, 2, 1, 2]"
"def binary_tree_level_order_traversal(root): if not root: return []; result, queue = [], [root]; while queue: level, next_queue = [], []; for node in queue: level.append(node.val); if node.left: next_queue.append(node.left); if node.right: next_queue.append(node.right); result.append(level); queue = next_queue; return result","Performs level-order traversal on a binary tree.

This function returns a list of lists, where each inner list contains the node values at each level of the binary tree root. It uses breadth-first search to traverse the tree level by level.","def test_binary_tree_level_order_traversal(): root = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert binary_tree_level_order_traversal(root) == [[3], [9, 20], [15, 7]]"
"MAX=1000;
def replace_spaces(string):
  string=string.strip()
  i=len(string)
  space_count=string.count(' ')
  new_length = i + space_count*2
  if new_length > MAX:
    return -1
  index = new_length-1
  string=list(string)
  for f in range(i-2, new_length-2):
    string.append('0')
  for j in range(i-1, 0, -1):
    if string[j] == ' ':
      string[index] = '0'
      string[index-1] = '2'
      string[index-2] = '%'
      index=index-3
    else:
      string[index] = string[j]
      index -= 1
  return ''.join(string)","This function 'replace_spaces' performs a specific operation.

The function 'replace_spaces' takes the following parameters: string. It performs operations based on the parameters provided.","def test_replace_spaces():
    # Add test cases for replace_spaces
    assert replace_spaces(...) == expected_output"
"def fibonacci(n): a, b = 0, 1; [a, b := b, a + b for _ in range(n)]",Generates the first n Fibonacci numbers.,"def test_fibonacci(): assert fibonacci(5) == [0, 1, 1, 2, 3] assert fibonacci(1) == [0] assert fibonacci(0) == []"
def filter_even_numbers(lst): return [x for x in lst if x % 2 == 0],Filters even numbers from a list.,"def test_filter_even_numbers(): assert filter_even_numbers([1, 2, 3, 4]) == [2, 4] assert filter_even_numbers([5, 6, 7, 8]) == [6, 8] assert filter_even_numbers([1, 3, 5]) == []"
"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","This function 'add_pairwise' performs a specific operation.

The function 'add_pairwise' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_add_pairwise():
    # Add test cases for add_pairwise
    assert add_pairwise(...) == expected_output"
"def gcd(a,b):
    if(b==0):
        return a
    else:
        return gcd(b,a%b)
a=int(input(""Enter first number:""))
b=int(input(""Enter second number:""))
GCD=gcd(a,b)
print(""GCD is: "")
print(GCD)","""""""
Brief Description:
------------------
gcd function performs a specific operation as described below.

Extended Description:
---------------------
This function, `gcd`, takes 2 parameters: a, b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> gcd(value, value)
Expected output
""""""","import unittest

class TestGcd(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = gcd(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = gcd(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"import heapq
def nth_super_ugly_number(n, primes):
    uglies = [1]
    def gen(prime):
        for ugly in uglies:
            yield ugly * prime
    merged = heapq.merge(*map(gen, primes))
    while len(uglies) < n:
        ugly = next(merged)
        if ugly != uglies[-1]:
            uglies.append(ugly)
    return uglies[-1]","This function 'nth_super_ugly_number' performs a specific operation.

The function 'nth_super_ugly_number' takes the following parameters: n, primes. It performs operations based on the parameters provided.","def test_nth_super_ugly_number():
    # Add test cases for nth_super_ugly_number
    assert nth_super_ugly_number(...) == expected_output"
"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum","This function 'sum_even_and_even_index' performs a specific operation.

The function 'sum_even_and_even_index' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_sum_even_and_even_index():
    # Add test cases for sum_even_and_even_index
    assert sum_even_and_even_index(...) == expected_output"
"def count_list(input_list): 
    return (len(input_list))**2","This function 'count_list' performs a specific operation.

The function 'count_list' takes the following parameters: input_list. It performs operations based on the parameters provided.","def test_count_list():
    # Add test cases for count_list
    assert count_list(...) == expected_output"
"def min_max_game(nums): while len(nums) > 1: new_nums = []; for i in range(len(nums) // 2): if i % 2 == 0: new_nums.append(min(nums[2 * i], nums[2 * i + 1])); else: new_nums.append(max(nums[2 * i], nums[2 * i + 1])); nums = new_nums; return nums[0]","Applies a min-max game to reduce the array.

This function applies a min-max game to reduce the input list nums until only one number remains. In each round, it replaces each pair with either the minimum or the maximum value, alternating between the two.","def test_min_max_game(): assert min_max_game([1, 3, 5, 2, 4, 8, 2, 2]) == 1 assert min_max_game([7, 9, 2, 3]) == 2"
"def word_search(board, word): def dfs(i, j, k): if k == len(word): return True; if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]: return False; temp, board[i][j] = board[i][j], '#'; result = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1); board[i][j] = temp; return result; for i in range(len(board)): for j in range(len(board[0])): if dfs(i, j, 0): return True; return False","Checks if a word exists in a 2D grid of letters.

This function returns True if the word word can be found in the 2D grid board, where the word must be constructed from letters of sequentially adjacent cells, and False otherwise.","def test_word_search(): board = [[""A"",""B"",""C"",""E""], [""S"",""F"",""C"",""S""], [""A"",""D"",""E"",""E""]]; assert word_search(board, ""ABCCED"") assert not word_search(board, ""ABCB"")"
"def remove_last_n(nums, N):    result = nums[:len(nums)-N]    return result    nums = [2,3,9,8,2,0,39,84,2,2,34,2,34,5,3,5]print(""Original lists:"")print(nums)N = 3print(""\nRemove the last"",N,""elements from the said list:"")print(remove_last_n(nums, N))N = 5print(""\nRemove the last"",N,""elements from the said list:"")print(remove_last_n(nums, N))N = 1print(""\nRemove the last"",N,""element from the said list:"")print(remove_last_n(nums, N))","""""""
Brief Description:
------------------
remove_last_n function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_last_n`, takes 2 parameters: nums,  N. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
N : type
    Description of N.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_last_n(value, value)
Expected output
""""""","import unittest

class TestRemove_last_n(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_last_n(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_last_n(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_upper(string):
  return (string.upper())","This function 'is_upper' performs a specific operation.

The function 'is_upper' takes the following parameters: string. It performs operations based on the parameters provided.","def test_is_upper():
    # Add test cases for is_upper
    assert is_upper(...) == expected_output"
"def find_pairs_with_given_sum(nums, target): num_set = set(); pairs = set(); for num in nums: diff = target - num; if diff in num_set: pairs.add((min(num, diff), max(num, diff))); num_set.add(num); return list(pairs)","Finds pairs of numbers that sum to a target.

This function returns a list of unique pairs of numbers from the input list nums that sum to the given target. It uses a set to efficiently check for the complement of each number.","def test_find_pairs_with_given_sum(): assert find_pairs_with_given_sum([2, 4, 3, 5, 7, 8], 9) == [(4, 5), (2, 7)]"
"def merge_two_sorted_lists(l1, l2): dummy = ListNode(0); current = dummy; while l1 and l2: if l1.val < l2.val: current.next = l1; l1 = l1.next; else: current.next = l2; l2 = l2.next; current = current.next; current.next = l1 or l2; return dummy.next","Merges two sorted linked lists.

This function returns a merged linked list from two input sorted linked lists l1 and l2. The merged list is sorted in ascending order.","def test_merge_two_sorted_lists(): l1 = ListNode(1, ListNode(2, ListNode(4))); l2 = ListNode(1, ListNode(3, ListNode(4))); assert linked_list_to_list(merge_two_sorted_lists(l1, l2)) == [1, 1, 2, 3, 4, 4]"
"def remove_negs(num_list): 
    for item in num_list: 
        if item < 0: 
           num_list.remove(item) 
    return num_list","This function 'remove_negs' performs a specific operation.

The function 'remove_negs' takes the following parameters: num_list. It performs operations based on the parameters provided.","def test_remove_negs():
    # Add test cases for remove_negs
    assert remove_negs(...) == expected_output"
"def heterogeneous_list_to_str(lst):    result = ','.join(str(x) for x in lst)    return resulth_data = [""Red"", 100, -50, ""green"", ""w,3,r"", 12.12, False]print(""Original list:"")print(h_data)print(""\nConvert the heterogeneous list of scalars into a string:"")print(heterogeneous_list_to_str(h_data))","""""""
Brief Description:
------------------
heterogeneous_list_to_str function performs a specific operation as described below.

Extended Description:
---------------------
This function, `heterogeneous_list_to_str`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> heterogeneous_list_to_str(value)
Expected output
""""""","import unittest

class TestHeterogeneous_list_to_str(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = heterogeneous_list_to_str(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = heterogeneous_list_to_str(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ","This function 'test_duplicate' performs a specific operation.

The function 'test_duplicate' takes the following parameters: arraynums. It performs operations based on the parameters provided.","def test_test_duplicate():
    # Add test cases for test_duplicate
    assert test_duplicate(...) == expected_output"
"def get_sublist(lst, start, end): return lst[start:end]","Returns a sublist from a list.

This function returns a sublist from the list lst starting at index start and ending at index end.","def test_get_sublist(): assert get_sublist([1, 2, 3, 4], 1, 3) == [2, 3] assert get_sublist([1, 2], 0, 1) == [1] assert get_sublist([], 0, 1) == []"
"def list_of_dicts(marks):    result = map(dict, zip(*[[(key, val) for val in value] for key, value in marks.items()]))    return list(result)marks = {'Science': [88, 89, 62, 95], 'Language': [77, 78, 84, 80]}print(""Original dictionary of lists:"")print(marks)print(""\nSplit said dictionary of lists into list of dictionaries:"")print(list_of_dicts(marks))","""""""
Brief Description:
------------------
list_of_dicts function performs a specific operation as described below.

Extended Description:
---------------------
This function, `list_of_dicts`, takes 1 parameters: marks. It is designed to perform a certain task using these parameters.

Parameters:
-----------
marks : type
    Description of marks.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> list_of_dicts(value)
Expected output
""""""","import unittest

class TestList_of_dicts(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = list_of_dicts(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = list_of_dicts(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_median_sorted_arrays(nums1, nums2): A, B = sorted((nums1, nums2), key=len); m, n = len(A), len(B); imin, imax, half_len = 0, m, (m + n + 1) // 2; while imin <= imax: i = (imin + imax) // 2; j = half_len - i; if i < m and B[j - 1] > A[i]: imin = i + 1; elif i > 0 and A[i - 1] > B[j]: imax = i - 1; else: if i == 0: max_of_left = B[j - 1]; elif j == 0: max_of_left = A[i - 1]; else: max_of_left = max(A[i - 1], B[j - 1]); if (m + n) % 2 == 1: return max_of_left; if i == m: min_of_right = B[j]; elif j == n: min_of_right = A[i]; else: min_of_right = min(A[i], B[j]); return (max_of_left + min_of_right) / 2.0","Finds the median of two sorted arrays.

This function returns the median of two sorted arrays nums1 and nums2. It uses a binary search to partition the two arrays such that the left half contains the smaller elements and the right half contains the larger elements.","def test_find_median_sorted_arrays(): assert find_median_sorted_arrays([1, 3], [2]) == 2.0 assert find_median_sorted_arrays([1, 2], [3, 4]) == 2.5"
"def change_cases(s):  return str(s).upper(), str(s).lower() chrars = {'a', 'b', 'E', 'f', 'a', 'i', 'o', 'U', 'a'}print(""Original Characters:\n"",chrars) result = map(change_cases, chrars)print(""\nAfter converting above characters in upper and lower cases\nand eliminating duplicate letters:"")print(set(result))","""""""
Brief Description:
------------------
change_cases function performs a specific operation as described below.

Extended Description:
---------------------
This function, `change_cases`, takes 1 parameters: s. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s : type
    Description of s.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> change_cases(value)
Expected output
""""""","import unittest

class TestChange_cases(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = change_cases(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = change_cases(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def reverse_Array_Upto_K(input, k): 
  return (input[k-1::-1] + input[k:]) ","This function 'reverse_Array_Upto_K' performs a specific operation.

The function 'reverse_Array_Upto_K' takes the following parameters: input, k. It performs operations based on the parameters provided.","def test_reverse_Array_Upto_K():
    # Add test cases for reverse_Array_Upto_K
    assert reverse_Array_Upto_K(...) == expected_output"
"def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list","This function 'permute_string' performs a specific operation.

The function 'permute_string' takes the following parameters: str. It performs operations based on the parameters provided.","def test_permute_string():
    # Add test cases for permute_string
    assert permute_string(...) == expected_output"
"def is_strobogrammatic(num): mapping = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}; left, right = 0, len(num) - 1; while left <= right: if num[left] not in mapping or mapping[num[left]] != num[right]: return False; left += 1; right -= 1; return True","Checks if a number is strobogrammatic.

This function returns True if the input string num is strobogrammatic, meaning it looks the same when rotated 180 degrees, and False otherwise. It checks digit pairs from the left and right ends of the string.","def test_is_strobogrammatic(): assert is_strobogrammatic(""69"") assert not is_strobogrammatic(""88"")"
"def count_primes(n): if n < 2: return 0; sieve = [True] * n; sieve[0] = sieve[1] = False; for i in range(2, int(n ** 0.5) + 1): if sieve[i]: for j in range(i * i, n, i): sieve[j] = False; return sum(sieve)","Counts prime numbers less than n.

This function returns the count of prime numbers less than n using the Sieve of Eratosthenes.",def test_count_primes(): assert count_primes(10) == 4 assert count_primes(0) == 0 assert count_primes(1) == 0
def nth_cube_number(n): return n ** 3,"Computes the cube of a number.

This function returns the cube of the input number n.",def test_nth_cube_number(): assert nth_cube_number(3) == 27 assert nth_cube_number(1) == 1 assert nth_cube_number(5) == 125
"def extract_unique_characters(s): return ''.join(sorted(set(s), key=s.index))","Extracts unique characters from a string.

This function returns a string of unique characters from s in the order they first appear.","def test_extract_unique_characters(): assert extract_unique_characters(""hello"") == ""helo"" assert extract_unique_characters(""banana"") == ""ban"" assert extract_unique_characters("""") == """""
"def pair_consecutive_elements(lst):    result = [[lst[i], lst[i + 1]] for i in range(len(lst) - 1)]    return resultnums =  [1,2,3,4,5,6]print(""Original lists:"")print(nums)print(""Pair up the consecutive elements of the said list:"")print(pair_consecutive_elements(nums))nums =  [1,2,3,4,5]print(""\nOriginal lists:"")print(nums)print(""Pair up the consecutive elements of the said list:"")print(pair_consecutive_elements(nums))","""""""
Brief Description:
------------------
pair_consecutive_elements function performs a specific operation as described below.

Extended Description:
---------------------
This function, `pair_consecutive_elements`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> pair_consecutive_elements(value)
Expected output
""""""","import unittest

class TestPair_consecutive_elements(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = pair_consecutive_elements(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = pair_consecutive_elements(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def is_even(n): return n % 2 == 0,"Checks if a number is even.

This function returns True if the input number n is even, otherwise False.",def test_is_even(): assert is_even(2) assert not is_even(3) assert is_even(0)
def calculate_mean(lst): return sum(lst) / len(lst) if lst else 0,Calculates the mean of a list of numbers.,"def test_calculate_mean(): assert calculate_mean([1, 2, 3]) == 2 assert calculate_mean([5, 10]) == 7.5 assert calculate_mean([]) == 0"
"def BubbleSort(arr,n):  if(n>0):    for i in range(0,n):      if (arr[i]>arr[i+1]):        temp = arr[i]        arr[i] = arr[i + 1]        arr[i + 1] = temp    BubbleSort(arr, n - 1)arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):  num = int(input())  arr.append(num)BubbleSort(arr, n - 1)print(""After Sorting Array Elements are:"")for i in range(0,n):  print(arr[i],end="" "")","""""""
Brief Description:
------------------
BubbleSort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `BubbleSort`, takes 2 parameters: arr, n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> BubbleSort(value, value)
Expected output
""""""","import unittest

class TestBubblesort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = BubbleSort(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = BubbleSort(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def nth_centered_hexagonal_number(n): return (6 * n ** 2 + 6 * n + 1) // 2,"Computes the nth centered hexagonal number.

This function returns the n-th centered hexagonal number, which is a number in the sequence of centered polygons based on a hexagon.",def test_nth_centered_hexagonal_number(): assert nth_centered_hexagonal_number(3) == 37 assert nth_centered_hexagonal_number(1) == 7 assert nth_centered_hexagonal_number(5) == 91
"def min_path_sum(grid): m, n = len(grid), len(grid[0]); for i in range(1, m): grid[i][0] += grid[i - 1][0]; for j in range(1, n): grid[0][j] += grid[0][j - 1]; for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i - 1][j], grid[i][j - 1]); return grid[-1][-1]","Finds the minimum path sum in a grid.

This function returns the minimum path sum from the top-left corner to the bottom-right corner of a grid, where you can only move right or down. It uses dynamic programming to accumulate the minimum costs.","def test_min_path_sum(): grid = [[1, 3, 1], [1, 5, 1], [4, 2, 1]]; assert min_path_sum(grid) == 7"
def count_words(s): return len(s.split()),Counts the words in a string.,"def test_count_words(): assert count_words(""hello world"") == 2 assert count_words(""is fun"") == 3 assert count_words("""") == 0"
"def fibonacci(n):
    """"""Return the nth Fibonacci number.""""""
    # r[i] will contain the ith Fibonacci number
    r = [-1]*(n + 1)
    return fibonacci_helper(n, r)


def fibonacci_helper(n, r):
    """"""Return the nth Fibonacci number and store the ith Fibonacci number in
    r[i] for 0 <= i <= n.""""""
    if r[n] >= 0:
        return r[n]

    if (n == 0 or n == 1):
        q = n
    else:
        q = fibonacci_helper(n - 1, r) + fibonacci_helper(n - 2, r)
    r[n] = q

    return q


n = int(input('Enter n: '))

ans = fibonacci(n)
print('The nth Fibonacci number:', ans)","""""""
Brief Description:
------------------
fibonacci function performs a specific operation as described below.

Extended Description:
---------------------
This function, `fibonacci`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> fibonacci(value)
Expected output
""""""","import unittest

class TestFibonacci(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = fibonacci(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = fibonacci(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def sum_of_list(lst): return sum(lst),"Computes the sum of all elements in a list.

This function returns the sum of all elements in the list lst.","def test_sum_of_list(): assert sum_of_list([1, 2, 3]) == 6 assert sum_of_list([10, -5, 5]) == 10 assert sum_of_list([]) == 0"
"M = 100
def maxAverageOfPath(cost, N): 
	dp = [[0 for i in range(N + 1)] for j in range(N + 1)] 
	dp[0][0] = cost[0][0] 
	for i in range(1, N): 
		dp[i][0] = dp[i - 1][0] + cost[i][0] 
	for j in range(1, N): 
		dp[0][j] = dp[0][j - 1] + cost[0][j] 
	for i in range(1, N): 
		for j in range(1, N): 
			dp[i][j] = max(dp[i - 1][j], 
						dp[i][j - 1]) + cost[i][j] 
	return dp[N - 1][N - 1] / (2 * N - 1)","This function 'maxAverageOfPath' performs a specific operation.

The function 'maxAverageOfPath' takes the following parameters: cost, N. It performs operations based on the parameters provided.","def test_maxAverageOfPath():
    # Add test cases for maxAverageOfPath
    assert maxAverageOfPath(...) == expected_output"
"def generate_fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b","Generates Fibonacci sequence up to n numbers.

This function yields numbers from the Fibonacci sequence up to n terms.","def test_generate_fibonacci(): assert list(generate_fibonacci(5)) == [0, 1, 1, 2, 3] assert list(generate_fibonacci(3)) == [0, 1, 1] assert list(generate_fibonacci(0)) == []"
"def is_valid_email(email): return ""@"" in email and ""."" in email.split(""@"")[1]","Checks if an email address is valid.

This function returns True if the input email contains ""@"" and a period in the domain part of the email address.","def test_is_valid_email(): assert is_valid_email(""test@example.com"") assert not is_valid_email(""test@.com"") assert not is_valid_email(""testexample.com"")"
"def calculate_perimeter_of_rectangle(length, width): return 2 * (length + width)","Calculates the perimeter of a rectangle.

This function returns the perimeter of a rectangle given its length and width, using the formula 2 * (length + width).","def test_calculate_perimeter_of_rectangle(): assert calculate_perimeter_of_rectangle(5, 4) == 18 assert calculate_perimeter_of_rectangle(7, 3) == 20 assert calculate_perimeter_of_rectangle(0, 10) == 20"
"def remove_element(lst, element): return [x for x in lst if x != element]","Removes all occurrences of an element from a list.

This function returns a new list with all occurrences of element removed from lst.","def test_remove_element(): assert remove_element([1, 2, 3, 2], 2) == [1, 3] assert remove_element(['a', 'b', 'a'], 'a') == ['b'] assert remove_element([], 1) == []"
"def ReverseArray(arr,n):  if(n>0):    i=n-1    print(arr[i], end="" "")    ReverseArray(arr, i)arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):  num = int(input())  arr.append(num)print(""After reversing Array Element Are:"")ReverseArray(arr,n)","""""""
Brief Description:
------------------
ReverseArray function performs a specific operation as described below.

Extended Description:
---------------------
This function, `ReverseArray`, takes 2 parameters: arr, n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> ReverseArray(value, value)
Expected output
""""""","import unittest

class TestReversearray(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = ReverseArray(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = ReverseArray(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def count_digits_in_string(s): return sum(1 for char in s if char.isdigit()),"Counts digits in a string.

This function returns the number of digits in the input string s.","def test_count_digits_in_string(): assert count_digits_in_string(""abc123"") == 3 assert count_digits_in_string(""hello"") == 0 assert count_digits_in_string("""") == 0"
def flatten_list(lst): return [item for sublist in lst for item in sublist],"Flattens a nested list into a single list.

This function returns a single list containing all elements from the nested input list lst, with nested lists expanded into a single level.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([[1], [2, 3], [4]]) == [1, 2, 3, 4] assert flatten_list([]) == []"
def check_palindrome(s): return s == s[::-1],"Checks if a string is a palindrome.

This function checks if a string s is a palindrome. A palindrome is a string that reads the same forwards and backwards.","def test_check_palindrome(): assert check_palindrome(""racecar"") assert not check_palindrome(""hello"") assert check_palindrome(""madam"")"
"import math
def lateralsurface_cone(r,h):
  l = math.sqrt(r * r + h * h)
  LSA = math.pi * r  * l
  return LSA","This function 'lateralsurface_cone' performs a specific operation.

The function 'lateralsurface_cone' takes the following parameters: r, h. It performs operations based on the parameters provided.","def test_lateralsurface_cone():
    # Add test cases for lateralsurface_cone
    assert lateralsurface_cone(...) == expected_output"
"def top_product(nums1, nums2, N):    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]    return resultnums1 = [1, 2, 3, 4, 5, 6]nums2 = [3, 6, 8, 9, 10, 6]print(""Original lists:"")print(nums1)print(nums2,""\n"")N = 3print(N,""Number of largest products from the said two lists:"")print(top_product(nums1, nums2, N))N = 4print(N,""Number of largest products from the said two lists:"")print(top_product(nums1, nums2, N))","""""""
Brief Description:
------------------
top_product function performs a specific operation as described below.

Extended Description:
---------------------
This function, `top_product`, takes 3 parameters: nums1,  nums2,  N. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums1 : type
    Description of nums1.
nums2 : type
    Description of nums2.
N : type
    Description of N.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> top_product(value, value, value)
Expected output
""""""","import unittest

class TestTop_product(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = top_product(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = top_product(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def add_binary(a, b): carry, result = 0, []; a, b = list(a), list(b); while a or b or carry: carry += int(a.pop()) if a else 0; carry += int(b.pop()) if b else 0; result.append(str(carry % 2)); carry //= 2; return ''.join(result[::-1])","Adds two binary numbers.

This function returns the sum of two binary numbers represented as strings a and b, as a binary string. It uses binary addition with a carry.","def test_add_binary(): assert add_binary('11', '1') == '100' assert add_binary('1010', '1011') == '10101' assert add_binary('0', '0') == '0'"
def sum_list(lst): return sum(lst),"Computes the sum of a list of numbers.

This function returns the sum of all the numbers in the list lst.","def test_sum_list(): assert sum_list([1, 2, 3]) == 6 assert sum_list([0, 0, 0]) == 0 assert sum_list([]) == 0"
"def search_insert_position(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; elif nums[mid] < target: left = mid + 1; else: right = mid - 1; return left","Finds the insertion position of a target in a sorted array.

This function returns the index at which the target value should be inserted into the input sorted list nums. If the target is already present, it returns its current index. It uses binary search to find the correct position.","def test_search_insert_position(): assert search_insert_position([1, 3, 5, 6], 5) == 2 assert search_insert_position([1, 3, 5, 6], 2) == 1"
"def power(base, exp): return base ** exp",Computes the power of a number.,"def test_power(): assert power(2, 3) == 8 assert power(5, 0) == 1 assert power(7, 2) == 49"
"def filter_strings(lst, length): return [s for s in lst if len(s) > length]","Filters strings in a list by length.

This function returns a list of strings from the input list lst that have a length greater than the specified length.","def test_filter_strings(): assert filter_strings([""short"", ""longer"", ""longest""], 6) == [""longest""] assert filter_strings([""a"", ""ab"", ""abc""], 1) == [""ab"", ""abc""] assert filter_strings([], 3) == []"
"def find_Min(arr,low,high): 
    while (low < high): 
        mid = low + (high - low) // 2;   
        if (arr[mid] == arr[high]): 
            high -= 1; 
        elif (arr[mid] > arr[high]): 
            low = mid + 1; 
        else: 
            high = mid; 
    return arr[high]; ","This function 'find_Min' performs a specific operation.

The function 'find_Min' takes the following parameters: arr, low, high. It performs operations based on the parameters provided.","def test_find_Min():
    # Add test cases for find_Min
    assert find_Min(...) == expected_output"
"def rotate_matrix(matrix): n = len(matrix); for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j]; matrix[i][j] = matrix[n - j - 1][i]; matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]; matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]; matrix[j][n - i - 1] = temp","Rotates a matrix 90 degrees clockwise.

This function rotates the input square matrix matrix by 90 degrees clockwise in place. It swaps elements in layers, starting from the outermost layer and working inward.","def test_rotate_matrix(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_matrix(matrix); assert matrix == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"
def is_perfect_square(n): return int(n ** 0.5) ** 2 == n,"Checks if a number is a perfect square.

This function returns True if n is a perfect square, meaning there exists an integer whose square is equal to n.",def test_is_perfect_square(): assert is_perfect_square(16) assert not is_perfect_square(15) assert is_perfect_square(0)
"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False","This function 'rearrange_bigger' performs a specific operation.

The function 'rearrange_bigger' takes the following parameters: n. It performs operations based on the parameters provided.","def test_rearrange_bigger():
    # Add test cases for rearrange_bigger
    assert rearrange_bigger(...) == expected_output"
"def nth_fibonacci(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return a","Finds the nth Fibonacci number.

This function computes and returns the n-th Fibonacci number using an iterative approach.",def test_nth_fibonacci(): assert nth_fibonacci(0) == 0 assert nth_fibonacci(1) == 1 assert nth_fibonacci(5) == 5 assert nth_fibonacci(10) == 55
def sum_of_odd_numbers(lst): return sum(x for x in lst if x % 2 != 0),"Sums the odd numbers in a list.

This function returns a new list that combines all elements from both lists lst1 and lst2.","def test_sum_of_odd_numbers(): assert sum_of_odd_numbers([1, 2, 3]) == 4 assert sum_of_odd_numbers([2, 4]) == 0 assert sum_of_odd_numbers([1, 3, 5]) == 9"
def add_string(str1):  length = len(str1)  if length > 2:    if str1[-3:] == 'ing':      str1 += 'ly'    else:      str1 += 'ing'  return str1print(add_string('ab'))print(add_string('abc'))print(add_string('string')),"""""""
Brief Description:
------------------
add_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `add_string`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> add_string(value)
Expected output
""""""","import unittest

class TestAdd_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = add_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = add_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def min_cost_climbing_stairs(cost): n = len(cost); dp = [0] * (n + 1); for i in range(2, n + 1): dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]); return dp[-1]","Finds the minimum cost to climb stairs.

This function returns the minimum cost required to reach the top of the stairs, where each element in the input list cost represents the cost of stepping on that stair. You can climb either one or two stairs at a time.","def test_min_cost_climbing_stairs(): assert min_cost_climbing_stairs([10, 15, 20]) == 15 assert min_cost_climbing_stairs([1, 100, 1, 1, 1, 100, 1, 1, 100, 1]) == 6"
"import re
def split_list(text):
  return (re.findall('[A-Z][^A-Z]*', text))","This function 'split_list' performs a specific operation.

The function 'split_list' takes the following parameters: text. It performs operations based on the parameters provided.","def test_split_list():
    # Add test cases for split_list
    assert split_list(...) == expected_output"
"def longest_consecutive(nums): num_set = set(nums); longest_streak = 0; for num in num_set: if num - 1 not in num_set: current_num = num; current_streak = 1; while current_num + 1 in num_set: current_num += 1; current_streak += 1; longest_streak = max(longest_streak, current_streak); return longest_streak","Finds the length of the longest consecutive sequence in an array.

This function returns the length of the longest consecutive sequence of numbers in the input list nums. It uses a hash set to efficiently find the starting point of each sequence.","def test_longest_consecutive(): assert longest_consecutive([100, 4, 200, 1, 3, 2]) == 4"
"def remove_none(nums):    result = [x for x in nums if x is not None]    return resultnums = [12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]print(""Original list:"")print(nums)print(""\nRemove None value from the said list:"")print(remove_none(nums))","""""""
Brief Description:
------------------
remove_none function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_none`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_none(value)
Expected output
""""""","import unittest

class TestRemove_none(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_none(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_none(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def product(a,b):
    if(a<b):
        return product(b,a)
    elif(b!=0):
        return(a+product(a,b-1))
    else:
        return 0
a=int(input(""Enter first number: ""))
b=int(input(""Enter second number: ""))
print(""Product is: "",product(a,b))","""""""
Brief Description:
------------------
product function performs a specific operation as described below.

Extended Description:
---------------------
This function, `product`, takes 2 parameters: a, b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> product(value, value)
Expected output
""""""","import unittest

class TestProduct(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = product(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = product(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def reverse_words(sentence): return ' '.join(word[::-1] for word in sentence.split()),"Reverses each word in a sentence.

This function returns a new sentence with each word in the original sentence reversed, while preserving the original word order.","def test_reverse_words(): assert reverse_words(""hello world"") == ""olleh dlrow"" assert reverse_words(""is fun"") == ""nohtyp si nuf"" assert reverse_words("""") == """""
def get_keys_of_dict(d): return list(d.keys()),"Gets the keys of a dictionary.

This function returns a list of all keys from the input dictionary d.","def test_get_keys_of_dict(): assert get_keys_of_dict({'a': 1, 'b': 2}) == ['a', 'b'] assert get_keys_of_dict({'x': 10}) == ['x'] assert get_keys_of_dict({}) == []"
def count_consonants(s): return sum(1 for char in s if char.lower() in 'bcdfghjklmnpqrstvwxyz'),"Counts the consonants in a string.

This function takes a string s and counts the number of consonants in it, returning the total count. Consonants are non-vowel letters of the alphabet.","def test_count_consonants(): assert count_consonants(""hello"") == 3 assert count_consonants(""xyz"") == 3 assert count_consonants(""aeiou"") == 0"
"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea","This function 'surfacearea_cube' performs a specific operation.

The function 'surfacearea_cube' takes the following parameters: l. It performs operations based on the parameters provided.","def test_surfacearea_cube():
    # Add test cases for surfacearea_cube
    assert surfacearea_cube(...) == expected_output"
def get_middle_element(lst): return lst[len(lst) // 2] if lst else None,"Gets the middle element of a list.

This function returns the middle element of the input list lst. If the list is empty, it returns None.","def test_get_middle_element(): assert get_middle_element([1, 2, 3]) == 2 assert get_middle_element([1, 2, 3, 4]) == 2 assert get_middle_element([]) is None"
"def intersection_by(a, b, fn):  _b = set(map(fn, b))  return [item for item in a if fn(item) in _b]from math import floorprint(intersection_by([2.1, 1.2], [2.3, 3.4], floor))","""""""
Brief Description:
------------------
intersection_by function performs a specific operation as described below.

Extended Description:
---------------------
This function, `intersection_by`, takes 3 parameters: a,  b,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> intersection_by(value, value, value)
Expected output
""""""","import unittest

class TestIntersection_by(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = intersection_by(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = intersection_by(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def flatten_nested_list(nested_list): flat_list = []; def flatten(lst): for item in lst: if isinstance(item, list): flatten(item); else: flat_list.append(item); flatten(nested_list); return flat_list","Flattens a nested list.

This function recursively flattens a nested list into a single list by unpacking any lists within it.","def test_flatten_nested_list(): assert flatten_nested_list([1, [2, [3, 4]], 5]) == [1, 2, 3, 4, 5] assert flatten_nested_list([]) == []"
"def get_carol(n): 
	result = (2**n) - 1
	return result * result - 2","This function 'get_carol' performs a specific operation.

The function 'get_carol' takes the following parameters: n. It performs operations based on the parameters provided.","def test_get_carol():
    # Add test cases for get_carol
    assert get_carol(...) == expected_output"
"def climbing_stairs(n): a, b = 1, 1; for _ in range(n): a, b = b, a + b; return a","Computes the number of ways to climb stairs.

This function returns the number of distinct ways to climb a staircase with n steps, where each time you can climb 1 or 2 steps. It uses dynamic programming to efficiently calculate the result.",def test_climbing_stairs(): assert climbing_stairs(2) == 2 assert climbing_stairs(3) == 3
"def max_Abs_Diff(arr,n): 
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ","This function 'max_Abs_Diff' performs a specific operation.

The function 'max_Abs_Diff' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_max_Abs_Diff():
    # Add test cases for max_Abs_Diff
    assert max_Abs_Diff(...) == expected_output"
"def format_string(s, *args): return s.format(*args)","Formats a string with specified arguments.

This function returns a formatted string where placeholders in s are replaced with the provided args.","def test_format_string(): assert format_string(""Hello, {}!"", ""world"") == ""Hello, world!"" assert format_string(""I have {} apples and {} oranges."", 3, 5) == ""I have 3 apples and 5 oranges."" assert format_string(""{} + {} = {}"", 1, 2, 3) == ""1 + 2 = 3"""
"def get_values_greater_than(d, threshold): return {k: v for k, v in d.items() if v > threshold}","Gets dictionary items with values greater than a threshold.

This function returns a dictionary containing only the items from the input dictionary d where the value is greater than the specified threshold.","def test_get_values_greater_than(): assert get_values_greater_than({'a': 1, 'b': 2}, 1) == {'b': 2} assert get_values_greater_than({'x': 10, 'y': 5}, 7) == {'x': 10} assert get_values_greater_than({'a': 1}, 2) == {}"
"def count_elements_lists(nums):    nums = [item for sublist in nums for item in sublist]    dic_data = {}    for num in nums:        if num in dic_data.keys():            dic_data[num] += 1        else:            key = num            value = 1            dic_data[key] = value    return dic_datanums = [        [1,2,3,2],        [4,5,6,2],        [7,8,9,5],       ]    print(""Original list of lists:"")print(nums)print(""\nFrequency of the elements in the said list of lists:"")print(count_elements_lists(nums))","""""""
Brief Description:
------------------
count_elements_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_elements_lists`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_elements_lists(value)
Expected output
""""""","import unittest

class TestCount_elements_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_elements_lists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_elements_lists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  if test_str[0] not in vow_list and test_str[1] in vow_list:
    res += 1
  if test_str[-1] not in vow_list and test_str[-2] in vow_list:
    res += 1
  return (res) ","This function 'count_vowels' performs a specific operation.

The function 'count_vowels' takes the following parameters: test_str. It performs operations based on the parameters provided.","def test_count_vowels():
    # Add test cases for count_vowels
    assert count_vowels(...) == expected_output"
"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ","This function 'consecutive_duplicates' performs a specific operation.

The function 'consecutive_duplicates' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_consecutive_duplicates():
    # Add test cases for consecutive_duplicates
    assert consecutive_duplicates(...) == expected_output"
"def fibonacci(n):
  if n == 1 or n == 2:
    return 1
  else:
    return (fibonacci(n - 1) + (fibonacci(n - 2)))","This function 'fibonacci' performs a specific operation.

The function 'fibonacci' takes the following parameters: n. It performs operations based on the parameters provided.","def test_fibonacci():
    # Add test cases for fibonacci
    assert fibonacci(...) == expected_output"
"def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return None","This function 'loss_amount' performs a specific operation.

The function 'loss_amount' takes the following parameters: actual_cost, sale_amount. It performs operations based on the parameters provided.","def test_loss_amount():
    # Add test cases for loss_amount
    assert loss_amount(...) == expected_output"
"def can_construct(ransom_note, magazine): from collections import Counter; ransom_counter = Counter(ransom_note); magazine_counter = Counter(magazine); for char, count in ransom_counter.items(): if magazine_counter[char] < count: return False; return True","Checks if ransom note can be constructed from magazine letters.

This function returns True if the ransom_note can be constructed by using letters from the magazine, and False otherwise. It uses a counter to compare character frequencies between the two strings.","def test_can_construct(): assert can_construct(""a"", ""b"") == False assert can_construct(""aa"", ""aab"") == True"
"def increasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False","This function 'increasing_trend' performs a specific operation.

The function 'increasing_trend' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_increasing_trend():
    # Add test cases for increasing_trend
    assert increasing_trend(...) == expected_output"
"def climb_stairs(n): if n == 1: return 1; first, second = 1, 2; for _ in range(2, n): first, second = second, first + second; return second","Finds the number of ways to climb stairs.

This function returns the number of distinct ways to climb a staircase with n steps, where each time you can climb either 1 or 2 steps. It uses dynamic programming to calculate the number of ways.",def test_climb_stairs(): assert climb_stairs(2) == 2 assert climb_stairs(3) == 3
"def parabola_vertex(a, b, c): 
  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))
  return vertex","This function 'parabola_vertex' performs a specific operation.

The function 'parabola_vertex' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_parabola_vertex():
    # Add test cases for parabola_vertex
    assert parabola_vertex(...) == expected_output"
def average_of_list(lst): return sum(lst) / len(lst) if lst else 0,"Calculates the average of a list of numbers.

This function computes the average (mean) of the numbers in the list lst. If the list is empty, it returns 0.","def test_average_of_list(): assert average_of_list([1, 2, 3]) == 2 assert average_of_list([0, 10]) == 5 assert average_of_list([]) == 0"
"import re 
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
def check_email(email): 
	if(re.search(regex,email)): 
		return (""Valid Email"") 
	else: 
		return (""Invalid Email"") ","This function 'check_email' performs a specific operation.

The function 'check_email' takes the following parameters: email. It performs operations based on the parameters provided.","def test_check_email():
    # Add test cases for check_email
    assert check_email(...) == expected_output"
"def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2","This function 'same_order' performs a specific operation.

The function 'same_order' takes the following parameters: l1, l2. It performs operations based on the parameters provided.","def test_same_order():
    # Add test cases for same_order
    assert same_order(...) == expected_output"
"def div_list(nums1,nums2):
  result = map(lambda x, y: x / y, nums1, nums2)
  return list(result)","This function 'div_list' performs a specific operation.

The function 'div_list' takes the following parameters: nums1, nums2. It performs operations based on the parameters provided.","def test_div_list():
    # Add test cases for div_list
    assert div_list(...) == expected_output"
"def max_consecutive_ones_ii(nums): left = right = max_len = zeros = 0; while right < len(nums): if nums[right] == 0: zeros += 1; while zeros == 2: if nums[left] == 0: zeros -= 1; left += 1; max_len = max(max_len, right - left + 1); right += 1; return max_len","Finds the maximum number of consecutive 1s in a binary array if at most one 0 can be flipped.

This function returns the length of the longest contiguous subarray of 1s in the input binary list nums, where you are allowed to flip at most one 0 to 1. It uses a sliding window approach.","def test_max_consecutive_ones_ii(): assert max_consecutive_ones_ii([1, 0, 1, 1, 0, 1]) == 4"
"def is_subset(arr1, m, arr2, n): 
	hashset = set() 
	for i in range(0, m): 
		hashset.add(arr1[i]) 
	for i in range(0, n): 
		if arr2[i] in hashset: 
			continue
		else: 
			return False
	return True		","This function 'is_subset' performs a specific operation.

The function 'is_subset' takes the following parameters: arr1, m, arr2, n. It performs operations based on the parameters provided.","def test_is_subset():
    # Add test cases for is_subset
    assert is_subset(...) == expected_output"
"def capitalize_first_last_letters(str1):     str1 = result = str1.title()     result =  """"     for word in str1.split():        result += word[:-1] + word[-1].upper() + "" ""     return result[:-1]       print(capitalize_first_last_letters(""python exercises practice solution""))print(capitalize_first_last_letters(""w3resource""))","""""""
Brief Description:
------------------
capitalize_first_last_letters function performs a specific operation as described below.

Extended Description:
---------------------
This function, `capitalize_first_last_letters`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> capitalize_first_last_letters(value)
Expected output
""""""","import unittest

class TestCapitalize_first_last_letters(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = capitalize_first_last_letters(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = capitalize_first_last_letters(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def check_Even_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 0): 
        return True
    else: 
        return False","This function 'check_Even_Parity' performs a specific operation.

The function 'check_Even_Parity' takes the following parameters: x. It performs operations based on the parameters provided.","def test_check_Even_Parity():
    # Add test cases for check_Even_Parity
    assert check_Even_Parity(...) == expected_output"
"def file_copy(src, dest):    with open(src) as f, open(dest, 'w') as d:        d.write(f.read())        file_copy(""untitled0.py"", ""z.py"")        with open('z.py', 'r') as filehandle:            for line in filehandle:                print(line, end = '')","""""""
Brief Description:
------------------
file_copy function performs a specific operation as described below.

Extended Description:
---------------------
This function, `file_copy`, takes 2 parameters: src,  dest. It is designed to perform a certain task using these parameters.

Parameters:
-----------
src : type
    Description of src.
dest : type
    Description of dest.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> file_copy(value, value)
Expected output
""""""","import unittest

class TestFile_copy(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = file_copy(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = file_copy(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()","This function 'start_withp' performs a specific operation.

The function 'start_withp' takes the following parameters: words. It performs operations based on the parameters provided.","def test_start_withp():
    # Add test cases for start_withp
    assert start_withp(...) == expected_output"
"import math 
def find_Digits(n): 
    if (n < 0): 
        return 0;
    if (n <= 1): 
        return 1; 
    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); 
    return math.floor(x) + 1; ","This function 'find_Digits' performs a specific operation.

The function 'find_Digits' takes the following parameters: n. It performs operations based on the parameters provided.","def test_find_Digits():
    # Add test cases for find_Digits
    assert find_Digits(...) == expected_output"
def count_words(s): return len(s.split()),Counts the number of words in a string.,"def test_count_words(): assert count_words(""hello world"") == 2 assert count_words(""one two three"") == 3 assert count_words("""") == 0"
"def max_min_list_tuples(class_students):    return_max = max(class_students,key=lambda item:item[1])[1]    return_min = min(class_students,key=lambda item:item[1])[1]    return return_max, return_min    class_students = [('V', 62), ('VI', 68), ('VII', 72), ('VIII', 70), ('IX', 74), ('X', 65)]print(""Original list with tuples:"")print(class_students)print(""\nMaximum and minimum values of the said list of tuples:"")print(max_min_list_tuples(class_students))","""""""
Brief Description:
------------------
max_min_list_tuples function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_min_list_tuples`, takes 1 parameters: class_students. It is designed to perform a certain task using these parameters.

Parameters:
-----------
class_students : type
    Description of class_students.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_min_list_tuples(value)
Expected output
""""""","import unittest

class TestMax_min_list_tuples(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_min_list_tuples(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_min_list_tuples(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_occurrences(nums):    result = dict(map(lambda el  : (el, list(nums).count(el)), nums))    return resultnums = [3,4,5,8,0,3,8,5,0,3,1,5,2,3,4,2]print(""Original list:"")print(nums)print(""\nCount the occurrences of the items in the said list:"")print(count_occurrences(nums))","""""""
Brief Description:
------------------
count_occurrences function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_occurrences`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_occurrences(value)
Expected output
""""""","import unittest

class TestCount_occurrences(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_occurrences(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_occurrences(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_min_max(lst): return (min(lst), max(lst)) if lst else (None, None)","Returns the minimum and maximum values in a list.

This function returns a tuple containing the minimum and maximum values in the list lst. If the list is empty, it returns (None, None).","def test_find_min_max(): assert find_min_max([1, 2, 3]) == (1, 3) assert find_min_max([5]) == (5, 5) assert find_min_max([]) == (None, None)"
"def check_subset(list1,list2): 
    return all(map(list1.__contains__,list2)) ","This function 'check_subset' performs a specific operation.

The function 'check_subset' takes the following parameters: list1, list2. It performs operations based on the parameters provided.","def test_check_subset():
    # Add test cases for check_subset
    assert check_subset(...) == expected_output"
def count_vowels(s): return sum(1 for char in s.lower() if char in 'aeiou'),"Counts the number of vowels in a string.

This function returns the total number of vowels in the string s. Vowels are the letters 'a', 'e', 'i', 'o', 'u'.","def test_count_vowels(): assert count_vowels(""hello"") == 2 assert count_vowels(""xyz"") == 0 assert count_vowels(""aeiou"") == 5"
def calculate_square_root(n): import math return math.sqrt(n),"Computes the square root of a number.

This function returns the square root of the input number n using the math.sqrt function.",def test_calculate_square_root(): assert calculate_square_root(4) == 2 assert calculate_square_root(9) == 3 assert calculate_square_root(0) == 0
"def integer_to_roman(num): val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]; syms = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]; roman = """"; for i in range(len(val)): while num >= val[i]: roman += syms[i]; num -= val[i]; return roman","Converts an integer to a Roman numeral.

This function converts the input integer num to its corresponding Roman numeral. It iterates through the Roman numeral values and appends symbols to the result string.","def test_integer_to_roman(): assert integer_to_roman(58) == ""LVIII"" assert integer_to_roman(1994) == ""MCMXCIV"""
"def remove_words(list1, charlist):
    new_list = []
    for line in list1:
        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])
        new_list.append(new_words)
    return new_list","This function 'remove_words' performs a specific operation.

The function 'remove_words' takes the following parameters: list1, charlist. It performs operations based on the parameters provided.","def test_remove_words():
    # Add test cases for remove_words
    assert remove_words(...) == expected_output"
"def sum_by(lst, fn):  return sum(map(fn, lst))print(sum_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n']))","""""""
Brief Description:
------------------
sum_by function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_by`, takes 2 parameters: lst,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_by(value, value)
Expected output
""""""","import unittest

class TestSum_by(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_by(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_by(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA","This function 'surfacearea_cone' performs a specific operation.

The function 'surfacearea_cone' takes the following parameters: r, h. It performs operations based on the parameters provided.","def test_surfacearea_cone():
    # Add test cases for surfacearea_cone
    assert surfacearea_cone(...) == expected_output"
"def heap_data(nums, index, heap_size):    largest_num = index    left_index = 2 * index + 1    right_index = 2 * index + 2    if left_index < heap_size and nums[left_index] > nums[largest_num]:        largest_num = left_index    if right_index < heap_size and nums[right_index] > nums[largest_num]:        largest_num = right_index    if largest_num != index:        nums[largest_num], nums[index] = nums[index], nums[largest_num]        heap_data(nums, largest_num, heap_size)def heap_sort(nums):    n = len(nums)    for i in range(n // 2 - 1, -1, -1):        heap_data(nums, i, n)    for i in range(n - 1, 0, -1):        nums[0], nums[i] = nums[i], nums[0]        heap_data(nums, 0, i)    return numsuser_input = input(""Input numbers separated by a comma:\n"").strip()nums = [int(item) for item in user_input.split(',')]heap_sort(nums)print(nums)","""""""
Brief Description:
------------------
heap_data function performs a specific operation as described below.

Extended Description:
---------------------
This function, `heap_data`, takes 3 parameters: nums,  index,  heap_size. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
index : type
    Description of index.
heap_size : type
    Description of heap_size.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> heap_data(value, value, value)
Expected output
""""""","import unittest

class TestHeap_data(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = heap_data(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = heap_data(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def BinaryToDecimal(n):  if n==0:    return 0  else:    return (n% 10 + 2* BinaryToDecimal(n // 10))n=int(input(""Enter the Binary Value:""))print(""Decimal Value of Binary number is:"",BinaryToDecimal(n))","""""""
Brief Description:
------------------
BinaryToDecimal function performs a specific operation as described below.

Extended Description:
---------------------
This function, `BinaryToDecimal`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> BinaryToDecimal(value)
Expected output
""""""","import unittest

class TestBinarytodecimal(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = BinaryToDecimal(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = BinaryToDecimal(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_thrice(x, y, z):     sum = x + y + z       if x == y == z:      sum = sum * 3     return sumprint(sum_thrice(1, 2, 3))print(sum_thrice(3, 3, 3))","""""""
Brief Description:
------------------
sum_thrice function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_thrice`, takes 3 parameters: x,  y,  z. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.
z : type
    Description of z.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_thrice(value, value, value)
Expected output
""""""","import unittest

class TestSum_thrice(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_thrice(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_thrice(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result","This function 'specified_element' performs a specific operation.

The function 'specified_element' takes the following parameters: nums, N. It performs operations based on the parameters provided.","def test_specified_element():
    # Add test cases for specified_element
    assert specified_element(...) == expected_output"
"def max_product(nums): max_prod = min_prod = result = nums[0]; for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod; max_prod = max(num, max_prod * num); min_prod = min(num, min_prod * num); result = max(result, max_prod); return result","Finds the maximum product of a subarray.

This function returns the maximum product that can be obtained from a contiguous subarray of the input list nums. It uses a dynamic programming approach to track the maximum and minimum products up to each element.","def test_max_product(): assert max_product([2, 3, -2, 4]) == 6 assert max_product([-2, 0, -1]) == 0"
"def sliding_window_max(nums, k): from collections import deque; result, dq = [], deque(); for i, num in enumerate(nums): if dq and dq[0] == i - k: dq.popleft(); while dq and nums[dq[-1]] < num: dq.pop(); dq.append(i); if i >= k - 1: result.append(nums[dq[0]]); return result","Finds the maximum value in each sliding window of size k.

This function returns a list of the maximum values in each sliding window of size k as it slides over the input list nums. It uses a deque to keep track of the index of the maximum value in the current window.","def test_sliding_window_max(): assert sliding_window_max([1, 3, -1, -3, 5, 3, 6, 7], 3) == [3, 3, 5, 5, 6, 7]"
"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","This function 'positive_count' performs a specific operation.

The function 'positive_count' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_positive_count():
    # Add test cases for positive_count
    assert positive_count(...) == expected_output"
def get_odd_numbers(lst): return [x for x in lst if x % 2 != 0],Retrieves odd numbers from a list.,"def test_get_odd_numbers(): assert get_odd_numbers([1, 2, 3, 4]) == [1, 3] assert get_odd_numbers([6, 8, 10]) == [] assert get_odd_numbers([1, 3, 5]) == [1, 3, 5]"
"def No_of_cubes(N,K):
    No = 0
    No = (N - K + 1)
    No = pow(No, 3)
    return No","This function 'No_of_cubes' performs a specific operation.

The function 'No_of_cubes' takes the following parameters: N, K. It performs operations based on the parameters provided.","def test_No_of_cubes():
    # Add test cases for No_of_cubes
    assert No_of_cubes(...) == expected_output"
"def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ","This function 'decimal_to_binary' performs a specific operation.

The function 'decimal_to_binary' takes the following parameters: n. It performs operations based on the parameters provided.","def test_decimal_to_binary():
    # Add test cases for decimal_to_binary
    assert decimal_to_binary(...) == expected_output"
"def get_Pairs_Count(arr,n,sum):
    count = 0  
    for i in range(0,n):
        for j in range(i + 1,n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count","This function 'get_Pairs_Count' performs a specific operation.

The function 'get_Pairs_Count' takes the following parameters: arr, n, sum. It performs operations based on the parameters provided.","def test_get_Pairs_Count():
    # Add test cases for get_Pairs_Count
    assert get_Pairs_Count(...) == expected_output"
def word_count(s): return len(s.split()),"Counts the number of words in a string.

This function returns the number of words in the string s, where words are separated by spaces.","def test_word_count(): assert word_count(""hello world"") == 2 assert word_count(""is awesome"") == 3 assert word_count("""") == 0"
"def sort_colors(nums): low, mid, high = 0, 0, len(nums) - 1; while mid <= high: if nums[mid] == 0: nums[low], nums[mid] = nums[mid], nums[low]; low += 1; mid += 1; elif nums[mid] == 1: mid += 1; else: nums[high], nums[mid] = nums[mid], nums[high]; high -= 1","Sorts an array of 0s, 1s, and 2s in place.

This function sorts the input array nums consisting of 0s, 1s, and 2s. It uses the Dutch National Flag algorithm to sort the elements in a single pass.","def test_sort_colors(): nums = [2, 0, 2, 1, 1, 0]; sort_colors(nums); assert nums == [0, 0, 1, 1, 2, 2]"
"import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","This function 'text_match_word' performs a specific operation.

The function 'text_match_word' takes the following parameters: text. It performs operations based on the parameters provided.","def test_text_match_word():
    # Add test cases for text_match_word
    assert text_match_word(...) == expected_output"
"def move_num(test_str):
  res = ''
  dig = ''
  for ele in test_str:
    if ele.isdigit():
      dig += ele
    else:
      res += ele
  res += dig
  return (res) ","This function 'move_num' performs a specific operation.

The function 'move_num' takes the following parameters: test_str. It performs operations based on the parameters provided.","def test_move_num():
    # Add test cases for move_num
    assert move_num(...) == expected_output"
def get_unique_words(s): return list(set(s.split())),"Gets unique words from a string.

This function returns a list of unique words from the input string s, where words are separated by spaces.","def test_get_unique_words(): assert get_unique_words(""hello world hello"") == [""hello"", ""world""] assert get_unique_words(""foo bar foo"") == [""foo"", ""bar""] assert get_unique_words("""") == []"
def reverse_string(s): return s[::-1],"Reverses a string.

This function takes a string s and returns a new string with the characters in reverse order using slicing.","def test_reverse_string(): assert reverse_string(""hello"") == ""olleh"" assert reverse_string("""") == """" assert reverse_string(""Python"") == ""nohtyP"""
"def generate_parentheses(n): result = []; def backtrack(current, open_count, close_count): if len(current) == 2 * n: result.append(current); return; if open_count < n: backtrack(current + ""("", open_count + 1, close_count); if close_count < open_count: backtrack(current + "")"", open_count, close_count + 1); backtrack("""", 0, 0); return result","Generates all valid combinations of parentheses.

This function returns a list of all valid combinations of n pairs of parentheses. It uses backtracking to explore all possibilities.","def test_generate_parentheses(): assert generate_parentheses(3) == [""((()))"", ""(()())"", ""(())()"", ""()(())"", ""()()()""]"
"def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ","This function 'rear_extract' performs a specific operation.

The function 'rear_extract' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_rear_extract():
    # Add test cases for rear_extract
    assert rear_extract(...) == expected_output"
def reverse_string(s): return s[::-1],"Reverses a string.

 This function accepts a string s and returns a new string that contains all the characters from s in reverse order. It assumes the input is a valid string."," def test_reverse_string(): assert reverse_string(""hello"") == ""olleh"" assert reverse_string("""") == """" assert reverse_string(""a"") == ""a"""
"def find_kth_smallest(matrix, k): from heapq import heappop, heappush; n = len(matrix); heap = [(matrix[i][0], i, 0) for i in range(min(k, n))]; for _ in range(k - 1): val, r, c = heappop(heap); if c < n - 1: heappush(heap, (matrix[r][c + 1], r, c + 1)); return heappop(heap)[0]","Finds the k-th smallest element in a sorted matrix.

This function returns the k-th smallest element in a sorted matrix, where each row and each column is sorted in ascending order. It uses a min-heap to find the element efficiently.","def test_find_kth_smallest(): matrix = [[1, 5, 9], [10, 11, 13], [12, 13, 15]]; assert find_kth_smallest(matrix, 8) == 13"
def simplify_path(path): stack = []; for part in path.split('/'): if part == '' or part == '.': continue; elif part == '..': if stack: stack.pop(); else: stack.append(part); return '/' + '/'.join(stack),"Simplifies a Unix file path.

This function returns the simplified version of the input Unix-style file path path. It uses a stack to process directories and handles special components like ""."" and "".."".","def test_simplify_path(): assert simplify_path(""/home//foo/"") == ""/home/foo"" assert simplify_path(""/../"") == ""/"""
"def get_last_n_elements(lst, n): return lst[-n:]","Returns the last n elements from a list.

This function returns a new list containing the last n elements from the input list lst.","def test_get_last_n_elements(): assert get_last_n_elements([1, 2, 3, 4], 2) == [3, 4] assert get_last_n_elements([1], 1) == [1] assert get_last_n_elements([], 1) == []"
"def radix_sort(nums):
    RADIX = 10
    placement = 1
    max_digit = max(nums)

    while placement < max_digit:
      buckets = [list() for _ in range( RADIX )]
      for i in nums:
        tmp = int((i / placement) % RADIX)
        buckets[tmp].append(i)
      a = 0
      for b in range( RADIX ):
        buck = buckets[b]
        for i in buck:
          nums[a] = i
          a += 1
      placement *= RADIX
    return nums","This function 'radix_sort' performs a specific operation.

The function 'radix_sort' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_radix_sort():
    # Add test cases for radix_sort
    assert radix_sort(...) == expected_output"
"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False","This function 'find_substring' performs a specific operation.

The function 'find_substring' takes the following parameters: str1, sub_str. It performs operations based on the parameters provided.","def test_find_substring():
    # Add test cases for find_substring
    assert find_substring(...) == expected_output"
"def reverse_linked_list(head): prev, curr = None, head; while curr: next_node = curr.next; curr.next = prev; prev = curr; curr = next_node; return prev","Reverses a linked list.

This function reverses the input singly linked list and returns the new head. It uses an iterative approach, reversing the direction of each node's next pointer as it traverses the list.","def test_reverse_linked_list(): head = ListNode(1, ListNode(2, ListNode(3, ListNode(4)))); new_head = reverse_linked_list(head); assert new_head.val == 4 and new_head.next.val == 3"
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1),"Recursively computes the factorial of a number.

This function computes the factorial of n using recursion. The factorial of n is the product of all positive integers from 1 to n.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(1) == 1
"def tuple_str_int(test_str):
  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))
  return (res) ","This function 'tuple_str_int' performs a specific operation.

The function 'tuple_str_int' takes the following parameters: test_str. It performs operations based on the parameters provided.","def test_tuple_str_int():
    # Add test cases for tuple_str_int
    assert tuple_str_int(...) == expected_output"
"def generate_parentheses(n): result = []; def backtrack(current, open_count, close_count): if len(current) == 2 * n: result.append(current); return; if open_count < n: backtrack(current + '(', open_count + 1, close_count); if close_count < open_count: backtrack(current + ')', open_count, close_count + 1); backtrack("""", 0, 0); return result","Generates all combinations of well-formed parentheses.

This function returns a list of all valid combinations of n pairs of parentheses. It uses backtracking to explore all possibilities while maintaining the balance between open and close parentheses.","def test_generate_parentheses(): assert generate_parentheses(3) == [""((()))"", ""(()())"", ""(())()"", ""()(())"", ""()()()""] assert generate_parentheses(1) == [""()""]"
"def inversion_elements(test_tup):
  res = tuple(list(map(lambda x: ~x, list(test_tup))))
  return (res) ","This function 'inversion_elements' performs a specific operation.

The function 'inversion_elements' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_inversion_elements():
    # Add test cases for inversion_elements
    assert inversion_elements(...) == expected_output"
def calculate_mean(numbers): return sum(numbers) / len(numbers) if numbers else 0,"Calculates the mean of a list of numbers.

This function returns the average of all numbers in the input list numbers. If the list is empty, it returns 0.","def test_calculate_mean(): assert calculate_mean([1, 2, 3]) == 2 assert calculate_mean([4, 5, 6]) == 5 assert calculate_mean([]) == 0"
"def sum_of_digits(nums):    return sum(int(el) for n in nums for el in str(n) if el.isdigit())nums = [10,2,56]print(""Original tuple: "") print(nums)print(""Sum of digits of each number of the said list of integers:"")print(sum_of_digits(nums))nums = [10,20,4,5,'b',70,'a']print(""\nOriginal tuple: "") print(nums)print(""Sum of digits of each number of the said list of integers:"")print(sum_of_digits(nums))nums = [10,20,-4,5,-70]print(""\nOriginal tuple: "") print(nums)print(""Sum of digits of each number of the said list of integers:"")print(sum_of_digits(nums))","""""""
Brief Description:
------------------
sum_of_digits function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_of_digits`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_of_digits(value)
Expected output
""""""","import unittest

class TestSum_of_digits(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_of_digits(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_of_digits(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def is_power_of_two(n): return (n & (n - 1)) == 0 and n > 0,"Checks if a number is a power of two.

This function returns True if the input number n is a power of two.",def test_is_power_of_two(): assert is_power_of_two(1) assert is_power_of_two(16) assert not is_power_of_two(18)
"def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list","This function 'insert_element' performs a specific operation.

The function 'insert_element' takes the following parameters: list, element. It performs operations based on the parameters provided.","def test_insert_element():
    # Add test cases for insert_element
    assert insert_element(...) == expected_output"
"def maximum_subarray(nums): max_sum = cur_sum = nums[0]; for num in nums[1:]: cur_sum = max(num, cur_sum + num); max_sum = max(max_sum, cur_sum); return max_sum","Finds the maximum sum of a contiguous subarray.

This function returns the maximum sum of a contiguous subarray in the input list nums. It uses Kadane's algorithm to achieve linear time complexity.","def test_maximum_subarray(): assert maximum_subarray([-2,1,-3,4,-1,2,1,-5,4]) == 6 assert maximum_subarray([1]) == 1"
"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n):
        for j in range(1,n-i+1): 
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ","This function 'check_Equality' performs a specific operation.

The function 'check_Equality' takes the following parameters: s. It performs operations based on the parameters provided.","def test_check_Equality():
    # Add test cases for check_Equality
    assert check_Equality(...) == expected_output"
def sort_dict_by_key(d): return dict(sorted(d.items())),"Sorts a dictionary by its keys.

This function returns a dictionary sorted by its keys.","def test_sort_dict_by_key(): assert sort_dict_by_key({'b': 2, 'a': 1}) == {'a': 1, 'b': 2} assert sort_dict_by_key({'x': 10, 'y': 5}) == {'x': 10, 'y': 5} assert sort_dict_by_key({}) == {}"
"def binary_tree_paths(root): def dfs(node, path, paths): if not node: return; path += str(node.val); if not node.left and not node.right: paths.append(path); else: path += ""->""; dfs(node.left, path, paths); dfs(node.right, path, paths); paths = []; dfs(root, """", paths); return paths","Finds all root-to-leaf paths in a binary tree.

This function returns a list of all root-to-leaf paths in the binary tree rooted at root. It uses depth-first search (DFS) to traverse the tree and construct the paths.","def test_binary_tree_paths(): root = TreeNode(1, TreeNode(2, None, TreeNode(5)), TreeNode(3)); assert binary_tree_paths(root) == [""1->2->5"", ""1->3""]"
"def gcd(a, b): while b: a, b = b, a % b return a","Computes the greatest common divisor (GCD) of two numbers.

This function returns the nth pyramidal number, which represents the sum of the squares of the first n natural numbers.","def test_gcd(): assert gcd(12, 8) == 4 assert gcd(17, 13) == 1 assert gcd(100, 25) == 25"
def sum_of_cubes(lst): return sum(x ** 3 for x in lst),Sums the cubes of all elements in a list.,"def test_sum_of_cubes(): assert sum_of_cubes([1, 2, 3]) == 36 assert sum_of_cubes([0]) == 0 assert sum_of_cubes([-1, 2]) == 7"
"def flood_fill(image, sr, sc, new_color): rows, cols = len(image), len(image[0]); color = image[sr][sc]; if color == new_color: return image; def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or image[r][c] != color: return; image[r][c] = new_color; dfs(r+1, c); dfs(r-1, c); dfs(r, c+1); dfs(r, c-1); dfs(sr, sc); return image","Fills an area in an image with a new color using DFS.

This function modifies the image by replacing the color at (sr, sc) and all connected cells with the same color using depth-first search (DFS).","def test_flood_fill(): image = [[1, 1, 1], [1, 1, 0], [1, 0, 1]]; assert flood_fill(image, 1, 1, 2) == [[2, 2, 2], [2, 2, 0], [2, 0, 1]]"
"def product_Equal(n): 
    if n < 10: 
        return False
    prodOdd = 1; prodEven = 1
    while n > 0: 
        digit = n % 10
        prodOdd *= digit 
        n = n//10
        if n == 0: 
            break; 
        digit = n % 10
        prodEven *= digit 
        n = n//10
    if prodOdd == prodEven: 
        return True
    return False","This function 'product_Equal' performs a specific operation.

The function 'product_Equal' takes the following parameters: n. It performs operations based on the parameters provided.","def test_product_Equal():
    # Add test cases for product_Equal
    assert product_Equal(...) == expected_output"
"def list_intersection(lst1, lst2): return list(set(lst1) & set(lst2))","Finds the intersection of two lists.

This function returns a list containing the common elements between two input lists lst1 and lst2, with no duplicates.","def test_list_intersection(): assert list_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert list_intersection([5, 6], [6, 7]) == [6] assert list_intersection([], [1, 2]) == []"
"def find_second_largest(lst): unique_sorted = sorted(set(lst), reverse=True) return unique_sorted[1] if len(unique_sorted) > 1 else None","Finds the second largest element in a list.

This function returns the second largest unique number in the list lst. If there are fewer than two unique elements, it returns None.","def test_find_second_largest(): assert find_second_largest([1, 2, 3]) == 2 assert find_second_largest([5, 5, 5]) == None assert find_second_largest([1]) == None"
def extract_digits(s): return ''.join(char for char in s if char.isdigit()),"Extracts digits from a string.

This function returns a string containing all digit characters from the input string s, with other characters removed.","def test_extract_digits(): assert extract_digits(""a1b2c3"") == ""123"" assert extract_digits(""no digits"") == """" assert extract_digits(""123abc456"") == ""123456"""
"from collections import defaultdict 
def freq_element(test_tup):
  res = defaultdict(int)
  for ele in test_tup:
    res[ele] += 1
  return (str(dict(res))) ","This function 'freq_element' performs a specific operation.

The function 'freq_element' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_freq_element():
    # Add test cases for freq_element
    assert freq_element(...) == expected_output"
"def gcd(a, b): while b: a, b = b, a % b return a","Computes the greatest common divisor of two numbers.

This function uses the Euclidean algorithm to find the greatest common divisor (GCD) of two non-negative integers a and b. The GCD is the largest positive integer that divides both numbers without leaving a remainder.","def test_gcd(): assert gcd(8, 12) == 4 assert gcd(10, 5) == 5 assert gcd(7, 3) == 1"
"def heap_sort(arr): n = len(arr); for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i); for i in range(n - 1, 0, -1): arr[i], arr[0] = arr[0], arr[i]; heapify(arr, i, 0)","Sorts an array using heap sort.

This function sorts the input array arr in ascending order using the heap sort algorithm, which first builds a max heap and then performs a series of swaps.","def test_heap_sort(): arr = [12, 11, 13, 5, 6, 7]; heap_sort(arr); assert arr == [5, 6, 7, 11, 12, 13]"
def capitalize_first_letter(s): return s.capitalize(),"Capitalizes the first letter of a string.

This function returns a new string where the first letter of the input string s is capitalized and the rest of the string is in lowercase.","def test_capitalize_first_letter(): assert capitalize_first_letter(""hello"") == ""Hello"" assert capitalize_first_letter(""WORLD"") == ""World"" assert capitalize_first_letter("""") == """""
"def longest_common_prefix(strs): if not strs: return """"; prefix = strs[0]; for s in strs[1:]: while not s.startswith(prefix): prefix = prefix[:-1]; return prefix","Finds the longest common prefix among strings.

This function returns the longest common prefix shared by all strings in the input list strs. If no common prefix exists, it returns an empty string.","def test_longest_common_prefix(): assert longest_common_prefix([""flower"", ""flow"", ""flight""]) == ""fl"" assert longest_common_prefix([""dog"", ""racecar"", ""car""]) == """""
"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)","This function 'sub_list' performs a specific operation.

The function 'sub_list' takes the following parameters: nums1, nums2. It performs operations based on the parameters provided.","def test_sub_list():
    # Add test cases for sub_list
    assert sub_list(...) == expected_output"
def reverse_string(s): return s[::-1],"Reverses a string.

This function takes a string s and returns a new string with the characters in reverse order.","def test_reverse_string(): assert reverse_string(""hello"") == ""olleh"" assert reverse_string("""") == """" assert reverse_string(""abc"") == ""cba"""
"def is_Two_Alter(s):  
    for i in range (len( s) - 2) : 
        if (s[i] != s[i + 2]) : 
            return False
    if (s[0] == s[1]): 
        return False
    return True","This function 'is_Two_Alter' performs a specific operation.

The function 'is_Two_Alter' takes the following parameters: s. It performs operations based on the parameters provided.","def test_is_Two_Alter():
    # Add test cases for is_Two_Alter
    assert is_Two_Alter(...) == expected_output"
def remove_duplicates(lst): return list(set(lst)),"Removes duplicates from a list.

This function returns a new list containing only the unique elements from the input list lst.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates([5, 5]) == [5] assert remove_duplicates([]) == []"
def find_max_index(lst): return lst.index(max(lst)) if lst else None,"Finds the index of the largest element in a list.

This function returns the index of the largest element in the list lst. If the list is empty, it returns None.","def test_find_max_index(): assert find_max_index([1, 2, 3]) == 2 assert find_max_index([4, 0, 2]) == 0 assert find_max_index([]) == None"
"def valid_sudoku(board): def is_valid_row(row): return len(set(row) - {'.'}) == len([x for x in row if x != '.']); def is_valid_col(board, col_idx): return len(set(board[i][col_idx] for i in range(9)) - {'.'}) == len([board[i][col_idx] for i in range(9) if board[i][col_idx] != '.']); def is_valid_box(board, start_row, start_col): box = [board[i][j] for i in range(start_row, start_row + 3) for j in range(start_col, start_col + 3)]; return len(set(box) - {'.'}) == len([x for x in box if x != '.']); for i in range(9): if not is_valid_row(board[i]) or not is_valid_col(board, i): return False; for i in range(0, 9, 3): for j in range(0, 9, 3): if not is_valid_box(board, i, j): return False; return True","Validates a Sudoku board.

This function checks if a 9x9 Sudoku board is valid according to Sudoku rules (no duplicates in rows, columns, and boxes).","def test_valid_sudoku(): board = [[""5"", ""3"", ""."", ""."", ""7"", ""."", ""."", ""."", "".""], [""6"", ""."", ""."", ""1"", ""9"", ""5"", ""."", ""."", "".""], [""."", ""9"", ""8"", ""."", ""."", ""."", ""."", ""6"", "".""], [""8"", ""."", ""."", ""."", ""6"", ""."", ""."", ""."", ""3""], [""4"", ""."", ""."", ""8"", ""."", ""3"", ""."", ""."", ""1""], [""7"", ""."", ""."", ""."", ""2"", ""."", ""."", ""."", ""6""], [""."", ""6"", ""."", ""."", ""."", ""."", ""2"", ""8"", "".""], [""."", ""."", ""."", ""4"", ""1"", ""9"", ""."", ""."", ""5""], [""."", ""."", ""."", ""."", ""8"", ""."", ""."", ""7"", ""9""]]; assert valid_sudoku(board) == True"
def sum_of_even_digits(n): return sum(int(digit) for digit in str(abs(n)) if int(digit) % 2 == 0),"Sums the even digits of a number.

This function returns the sum of the even digits in the input number n. If n is negative, the sign is ignored.",def test_sum_of_even_digits(): assert sum_of_even_digits(123456) == 12 assert sum_of_even_digits(789) == 8 assert sum_of_even_digits(-246) == 12
"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr","This function 'count_range_in_list' performs a specific operation.

The function 'count_range_in_list' takes the following parameters: li, min, max. It performs operations based on the parameters provided.","def test_count_range_in_list():
    # Add test cases for count_range_in_list
    assert count_range_in_list(...) == expected_output"
"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total","This function 'count_charac' performs a specific operation.

The function 'count_charac' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_count_charac():
    # Add test cases for count_charac
    assert count_charac(...) == expected_output"
"def reverse_list_of_lists(list1):    return list1[::-1]colors = [['orange', 'red'], ['green', 'blue'], ['white', 'black', 'pink']]print(""Original list:"")print(colors)print(""\nReverse said list of lists:"")print(reverse_list_of_lists(colors))nums = [[1,2,3,4], [0,2,4,5], [2,3,4,2,4]]print(""\nOriginal list:"")print(nums)print(""\nReverse said list of lists:"")print(reverse_list_of_lists(nums))","""""""
Brief Description:
------------------
reverse_list_of_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse_list_of_lists`, takes 1 parameters: list1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse_list_of_lists(value)
Expected output
""""""","import unittest

class TestReverse_list_of_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse_list_of_lists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse_list_of_lists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def knapsack(weights, values, capacity): dp = [0] * (capacity + 1); for i in range(len(weights)): for j in range(capacity, weights[i] - 1, -1): dp[j] = max(dp[j], dp[j - weights[i]] + values[i]); return dp[capacity]","Solves the 0/1 knapsack problem.

This function returns the maximum value that can be obtained by selecting items with given weights and values within the given capacity.","def test_knapsack(): assert knapsack([1, 2, 3], [10, 15, 40], 6) == 55 assert knapsack([2, 3], [30, 50], 5) == 50 assert knapsack([1], [100], 0) == 0"
def sum_of_even_numbers(lst): return sum(x for x in lst if x % 2 == 0),"Sums even numbers in a list.

This function returns the median of the list lst. If the list has an odd length, it returns the middle element. If the list has an even length, it returns the average of the two middle elements.","def test_sum_of_even_numbers(): assert sum_of_even_numbers([1, 2, 3, 4]) == 6 assert sum_of_even_numbers([1, 3, 5]) == 0 assert sum_of_even_numbers([0]) == 0"
def sumDigits(n):  if n == 0:    return 0  else:    return n % 10 + sumDigits(int(n / 10))print(sumDigits(345))print(sumDigits(45)),"""""""
Brief Description:
------------------
sumDigits function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sumDigits`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sumDigits(value)
Expected output
""""""","import unittest

class TestSumdigits(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sumDigits(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sumDigits(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def fibonacci_recursive(n): if n <= 1: return n; return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2),"Computes the nth Fibonacci number recursively.

This function returns the nth Fibonacci number using a recursive approach. It follows the recurrence relation F(n) = F(n - 1) + F(n - 2).",def test_fibonacci_recursive(): assert fibonacci_recursive(5) == 5 assert fibonacci_recursive(10) == 55
def sum_of_squares(lst): return sum(x ** 2 for x in lst),Sums the squares of elements in a list.,"def test_sum_of_squares(): assert sum_of_squares([1, 2, 3]) == 14 assert sum_of_squares([0, 1, -1]) == 2 assert sum_of_squares([]) == 0"
def check_palindrome(s): s = ''.join(c.lower() for c in s if c.isalnum()); return s == s[::-1],"Checks if a string is a palindrome, considering only alphanumeric characters.

This function returns True if the input string s is a palindrome when considering only alphanumeric characters and ignoring cases. It filters out non-alphanumeric characters before checking if the string reads the same backward.","def test_check_palindrome(): assert check_palindrome(""A man, a plan, a canal: Panama"") assert not check_palindrome(""race a car"")"
def count_digits_in_string(s): return sum(1 for char in s if char.isdigit()),"Counts the number of digits in a string.

This function returns the total number of digits in the input string s.","def test_count_digits_in_string(): assert count_digits_in_string(""abc123"") == 3 assert count_digits_in_string(""hello"") == 0 assert count_digits_in_string("""") == 0"
"def find_smallest_common_multiple(a, b): from math import gcd return abs(a*b) // gcd(a, b)","Finds the smallest common multiple of two numbers.

This function returns the smallest common multiple of the input numbers a and b using the relationship with their greatest common divisor.","def test_find_smallest_common_multiple(): assert find_smallest_common_multiple(4, 5) == 20 assert find_smallest_common_multiple(7, 3) == 21 assert find_smallest_common_multiple(12, 15) == 60"
"def magic_square_test(my_matrix):    iSize = len(my_matrix[0])    sum_list = []        #Horizontal Part:    sum_list.extend([sum (lines) for lines in my_matrix])       #Vertical Part:    for col in range(iSize):        sum_list.append(sum(row[col] for row in my_matrix))        #Diagonals Part    result1 = 0    for i in range(0,iSize):        result1 +=my_matrix[i][i]    sum_list.append(result1)          result2 = 0    for i in range(iSize-1,-1,-1):        result2 +=my_matrix[i][i]    sum_list.append(result2)    if len(set(sum_list))>1:        return False    return Truem=[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]] print(magic_square_test(m));m=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]print(magic_square_test(m));m=[[2, 7, 6], [9, 5, 1], [4, 3, 7]]print(magic_square_test(m));","""""""
Brief Description:
------------------
magic_square_test function performs a specific operation as described below.

Extended Description:
---------------------
This function, `magic_square_test`, takes 1 parameters: my_matrix. It is designed to perform a certain task using these parameters.

Parameters:
-----------
my_matrix : type
    Description of my_matrix.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> magic_square_test(value)
Expected output
""""""","import unittest

class TestMagic_square_test(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = magic_square_test(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = magic_square_test(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_primes(n): sieve = [True] * n; sieve[:2] = [False, False]; for i in range(2, int(n ** 0.5) + 1): if sieve[i]: for j in range(i * i, n, i): sieve[j] = False; return sum(sieve)","Counts the number of prime numbers less than n.

This function returns the number of prime numbers that are less than the input integer n. It uses the Sieve of Eratosthenes algorithm to find all primes.",def test_count_primes(): assert count_primes(10) == 4 assert count_primes(100) == 25
"def is_prime(n): if n <= 1: return False; for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False; return True","Checks if a number is prime.

This function returns True if the input number n is prime, and False otherwise. It checks divisibility of n by numbers up to the square root of n.",def test_is_prime(): assert is_prime(7) assert not is_prime(4)
def remove_empty_strings(lst): return [s for s in lst if s],"Removes empty strings from a list.

This function returns a list with all empty strings removed from the input list lst.","def test_remove_empty_strings(): assert remove_empty_strings([""a"", """", ""b""]) == [""a"", ""b""] assert remove_empty_strings(["""", """", """"]) == [] assert remove_empty_strings([""a""]) == [""a""]"
"def count_same_pair(nums1, nums2, nums3):    result = sum(m == n == o for m, n, o in zip(nums1, nums2, nums3))    return resultnums1 = [1,2,3,4,5,6,7,8]nums2 = [2,2,3,1,2,6,7,9]nums3 = [2,1,3,1,2,6,7,9]print(""Original lists:"")print(nums1)print(nums2)print(nums3)print(""\nNumber of same pair of the said three given lists:"")print(count_same_pair(nums1, nums2, nums3))","""""""
Brief Description:
------------------
count_same_pair function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_same_pair`, takes 3 parameters: nums1,  nums2,  nums3. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums1 : type
    Description of nums1.
nums2 : type
    Description of nums2.
nums3 : type
    Description of nums3.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_same_pair(value, value, value)
Expected output
""""""","import unittest

class TestCount_same_pair(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_same_pair(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_same_pair(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") ","This function 'check_Equality' performs a specific operation.

The function 'check_Equality' takes the following parameters: str. It performs operations based on the parameters provided.","def test_check_Equality():
    # Add test cases for check_Equality
    assert check_Equality(...) == expected_output"
"def max_of_nth(test_list, N):
  res = max([sub[N] for sub in test_list])
  return (res) ","This function 'max_of_nth' performs a specific operation.

The function 'max_of_nth' takes the following parameters: test_list, N. It performs operations based on the parameters provided.","def test_max_of_nth():
    # Add test cases for max_of_nth
    assert max_of_nth(...) == expected_output"
"def get_values_with_keys(d, keys): return [d[k] for k in keys if k in d]","Gets values for specific keys from a dictionary.

This function returns a list of values from the input dictionary d corresponding to the specified keys.","def test_get_values_with_keys(): assert get_values_with_keys({'a': 1, 'b': 2}, ['a']) == [1] assert get_values_with_keys({'x': 10, 'y': 20}, ['x', 'z']) == [10] assert get_values_with_keys({}, ['a']) == []"
def swap_case(s): return s.swapcase(),"Swaps the case of each character in a string.

This function returns a new string where the case of each character in the string s is swapped (uppercase characters become lowercase, and vice versa).","def test_swap_case(): assert swap_case(""Hello"") == ""hELLO"" assert swap_case(""WORLD"") == ""world"" assert swap_case("""") == """""
"def replace_substring(s, old, new): return s.replace(old, new)","Replaces a substring within a string.

This function returns a new string where all occurrences of the substring old in the input string s are replaced with new.","def test_replace_substring(): assert replace_substring(""hello world"", ""world"", ""there"") == ""hello there"" assert replace_substring(""foo bar foo"", ""foo"", ""baz"") == ""baz bar baz"" assert replace_substring(""test"", ""x"", ""y"") == ""test"""
def reverse_string(str1):    if len(str1) % 4 == 0:       return ''.join(reversed(str1))    return str1print(reverse_string('abcd'))print(reverse_string('python')),"""""""
Brief Description:
------------------
reverse_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse_string`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse_string(value)
Expected output
""""""","import unittest

class TestReverse_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def factorial(n):  if n <= 1:    return 1  else:    return n * (factorial(n - 1))    print(factorial(5)),"""""""
Brief Description:
------------------
factorial function performs a specific operation as described below.

Extended Description:
---------------------
This function, `factorial`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> factorial(value)
Expected output
""""""","import unittest

class TestFactorial(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = factorial(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = factorial(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Repeat(x): 
    _size = len(x) 
    repeated = [] 
    for i in range(_size): 
        k = i + 1
        for j in range(k, _size): 
            if x[i] == x[j] and x[i] not in repeated: 
                repeated.append(x[i]) 
    return repeated ","This function 'Repeat' performs a specific operation.

The function 'Repeat' takes the following parameters: x. It performs operations based on the parameters provided.","def test_Repeat():
    # Add test cases for Repeat
    assert Repeat(...) == expected_output"
"def remove_duplicate_dictionary(list_color):    result = [dict(e) for e in {tuple(d.items()) for d in list_color}]    return resultlist_color = [{'Green': '#008000'}, {'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]print (""Original list with duplicate dictionary:"")print(list_color)print(""\nAfter removing duplicate dictionary of the said list:"")print(remove_duplicate_dictionary(list_color))","""""""
Brief Description:
------------------
remove_duplicate_dictionary function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_duplicate_dictionary`, takes 1 parameters: list_color. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list_color : type
    Description of list_color.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_duplicate_dictionary(value)
Expected output
""""""","import unittest

class TestRemove_duplicate_dictionary(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_duplicate_dictionary(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_duplicate_dictionary(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def product_of_digits(n): return eval('*'.join(str(n))),"Computes the product of digits in a number.

This function returns the product of the digits in the input number n.",def test_product_of_digits(): assert product_of_digits(123) == 6 assert product_of_digits(456) == 120 assert product_of_digits(0) == 0
"def Sort(sub_li): 
    sub_li.sort(key = lambda x: x[1]) 
    return sub_li ","This function 'Sort' performs a specific operation.

The function 'Sort' takes the following parameters: sub_li. It performs operations based on the parameters provided.","def test_Sort():
    # Add test cases for Sort
    assert Sort(...) == expected_output"
"import math
def area_tetrahedron(side):
  area = math.sqrt(3)*(side*side)
  return area","This function 'area_tetrahedron' performs a specific operation.

The function 'area_tetrahedron' takes the following parameters: side. It performs operations based on the parameters provided.","def test_area_tetrahedron():
    # Add test cases for area_tetrahedron
    assert area_tetrahedron(...) == expected_output"
def single_number(nums): result = 0; for num in nums: result ^= num; return result,"Finds the element that appears only once in a list.

This function returns the single number that appears exactly once in the input list nums, where every other number appears twice. It uses bitwise XOR to cancel out the duplicate numbers.","def test_single_number(): assert single_number([2, 2, 1]) == 1 assert single_number([4, 1, 2, 1, 2]) == 4"
def convert_to_int(s): return int(s),"Converts a string to an integer.

This function returns the integer representation of the input string s.","def test_convert_to_int(): assert convert_to_int(""123"") == 123 assert convert_to_int(""0"") == 0 assert convert_to_int(""-456"") == -456"
"import heapq as hq
def heap_queue_smallest(nums,n):
  smallest_nums = hq.nsmallest(n, nums)
  return smallest_nums","This function 'heap_queue_smallest' performs a specific operation.

The function 'heap_queue_smallest' takes the following parameters: nums, n. It performs operations based on the parameters provided.","def test_heap_queue_smallest():
    # Add test cases for heap_queue_smallest
    assert heap_queue_smallest(...) == expected_output"
"def move_Spaces_front(str1):  noSpaces_char = [ch for ch in str1 if ch!=' ']  spaces_char = len(str1) - len(noSpaces_char)  result = ' '*spaces_char  result = '""'+result + ''.join(noSpaces_char)+'""'  return(result)print(move_Spaces_front(""w3resource .  com  ""))print(move_Spaces_front(""   w3resource.com  ""))","""""""
Brief Description:
------------------
move_Spaces_front function performs a specific operation as described below.

Extended Description:
---------------------
This function, `move_Spaces_front`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> move_Spaces_front(value)
Expected output
""""""","import unittest

class TestMove_spaces_front(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = move_Spaces_front(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = move_Spaces_front(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def rotate_image(matrix): matrix[:] = zip(*matrix[::-1]),"Rotates a matrix by 90 degrees.

This function rotates the input 2D matrix by 90 degrees in-place, changing the orientation of all elements.","def test_rotate_image(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_image(matrix); assert matrix == [(7, 4, 1), (8, 5, 2), (9, 6"
def fahrenheit_to_celsius(f): return (f - 32) * 5 / 9,"Converts a temperature from Fahrenheit to Celsius.

This function takes a temperature in Fahrenheit f and converts it to Celsius using the standard formula (f - 32) * 5 / 9.",def test_fahrenheit_to_celsius(): assert fahrenheit_to_celsius(32) == 0 assert fahrenheit_to_celsius(212) == 100 assert fahrenheit_to_celsius(0) == -17.77777777777778
"def remove(string, n):  
      first = string[:n]   
      last = string[n+1:]  
      return first + last
string=raw_input(""Enter the sring:"")
n=int(input(""Enter the index of the character to remove:""))
print(""Modified string:"")
print(remove(string, n))","""""""
Brief Description:
------------------
remove function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove`, takes 2 parameters: string,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
string : type
    Description of string.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove(value, value)
Expected output
""""""","import unittest

class TestRemove(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp  
    return newList ","This function 'swap_List' performs a specific operation.

The function 'swap_List' takes the following parameters: newList. It performs operations based on the parameters provided.","def test_swap_List():
    # Add test cases for swap_List
    assert swap_List(...) == expected_output"
"def count_occurrences(lst, item): return lst.count(item)",Counts occurrences of an item in a list.,"def test_count_occurrences(): assert count_occurrences([1, 2, 3, 2], 2) == 2 assert count_occurrences([4, 4, 4], 4) == 3 assert count_occurrences([1, 2, 3], 4) == 0"
"def factorial(start,end): 
    res = 1 
    for i in range(start,end + 1): 
        res *= i      
    return res 
def sum_of_square(n): 
   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ","This function 'factorial' performs a specific operation.

The function 'factorial' takes the following parameters: start, end. It performs operations based on the parameters provided.","def test_factorial():
    # Add test cases for factorial
    assert factorial(...) == expected_output"
"def unique_values_in_list_of_lists(lst):    result = set(x for l in lst for x in l)    return list(result)nums = [[1,2,3,5], [2,3,5,4], [0,5,4,1], [3,7,2,1], [1,2,1,2]]print(""Original list:"")print(nums)print(""Unique values of the said list of lists:"")print(unique_values_in_list_of_lists(nums))chars = [['h','g','l','k'], ['a','b','d','e','c'], ['j','i','y'], ['n','b','v','c'], ['x','z']]print(""\nOriginal list:"")print(chars)print(""Unique values of the said list of lists:"")print(unique_values_in_list_of_lists(chars))","""""""
Brief Description:
------------------
unique_values_in_list_of_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `unique_values_in_list_of_lists`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> unique_values_in_list_of_lists(value)
Expected output
""""""","import unittest

class TestUnique_values_in_list_of_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = unique_values_in_list_of_lists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = unique_values_in_list_of_lists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def valid_anagram(s, t): return sorted(s) == sorted(t)","Checks if two strings are anagrams of each other.

This function returns True if the input strings s and t are anagrams of each other (i.e., they contain the same characters in a different order), and False otherwise.","def test_valid_anagram(): assert valid_anagram(""anagram"", ""nagaram"") assert not valid_anagram(""rat"", ""car"")"
def count_consonants(s): return sum(1 for char in s.lower() if char in 'bcdfghjklmnpqrstvwxyz'),"Counts the number of consonants in a string.

This function returns the number of consonants in the string s. Consonants are any letters except vowels ('a', 'e', 'i', 'o', 'u').","def test_count_consonants(): assert count_consonants(""hello"") == 3 assert count_consonants(""aeiou"") == 0 assert count_consonants(""xyz"") == 3"
"def alien_order(words): from collections import defaultdict, deque; graph = defaultdict(set); in_degree = {char: 0 for word in words for char in word}; for i in range(len(words) - 1): for c1, c2 in zip(words[i], words[i + 1]): if c1 != c2: if c2 not in graph[c1]: graph[c1].add(c2); in_degree[c2] += 1; break; else: if len(words[i]) > len(words[i + 1]): return """"; queue = deque([char for char in in_degree if in_degree[char] == 0]); result = []; while queue: char = queue.popleft(); result.append(char); for neighbor in graph[char]: in_degree[neighbor] -= 1; if in_degree[neighbor] == 0: queue.append(neighbor); return """".join(result) if len(result) == len(in_degree) else """"","Determines the order of characters in an alien language.

This function returns the correct character order in an alien language given a sorted list of words in that language. It uses topological sorting to find the order.","def test_alien_order(): assert alien_order([""wrt"", ""wrf"", ""er"", ""ett"", ""rftt""]) == ""wertf"" assert alien_order([""z"", ""x"", ""z""]) == """""
"def max_product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return None     
    x = arr[0]; y = arr[1]    
    for i in range(0, arr_len): 
        for j in range(i + 1, arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y   ","This function 'max_product' performs a specific operation.

The function 'max_product' takes the following parameters: arr. It performs operations based on the parameters provided.","def test_max_product():
    # Add test cases for max_product
    assert max_product(...) == expected_output"
"def Reverse_String(str):  if not str:    return str  else:    return Reverse_String(str[1:]) + str[0]str=input(""Enter your String:"")print(""After Reversing String is: "",Reverse_String(str))","""""""
Brief Description:
------------------
Reverse_String function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Reverse_String`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Reverse_String(value)
Expected output
""""""","import unittest

class TestReverse_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Reverse_String(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Reverse_String(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_elim(num):
  count_elim = 0
  for n in num:
    if isinstance(n, tuple):
        break
    count_elim += 1
  return count_elim","This function 'count_elim' performs a specific operation.

The function 'count_elim' takes the following parameters: num. It performs operations based on the parameters provided.","def test_count_elim():
    # Add test cases for count_elim
    assert count_elim(...) == expected_output"
def rotate_matrix_90(matrix): return [list(reversed(col)) for col in zip(*matrix)],"Rotates a matrix by 90 degrees clockwise.

This function returns a new matrix that is a 90-degree clockwise rotation of the input matrix matrix.","def test_rotate_matrix_90(): matrix = [[1, 2], [3, 4]]; assert rotate_matrix_90(matrix) == [[3, 1], [4, 2]] assert rotate_matrix_90([[1]]) == [[1]]"
"def count_of_smaller_numbers_after_self(nums): result, indices = [0] * len(nums), list(range(len(nums))); def merge_sort(start, end): if end <= start: return; mid = (start + end) // 2; merge_sort(start, mid); merge_sort(mid + 1, end); merge(start, end, mid); def merge(start, end, mid): temp = []; i, j = start, mid + 1; count_right = 0; while i <= mid and j <= end: if nums[indices[i]] > nums[indices[j]]: count_right += 1; temp.append(indices[j]); j += 1; else: result[indices[i]] += count_right; temp.append(indices[i]); i += 1; while i <= mid: result[indices[i]] += count_right; temp.append(indices[i]); i += 1; while j <= end: temp.append(indices[j]); j += 1; for k in range(len(temp)): indices[start + k] = temp[k]; merge_sort(0, len(nums) - 1); return result","Counts how many smaller numbers come after each number in the array.

This function returns a list where each element represents the count of smaller numbers that come after it in the input list nums. It uses a modified merge sort algorithm to count inversions.","def test_count_of_smaller_numbers_after_self(): assert count_of_smaller_numbers_after_self([5, 2, 6, 1]) == [2, 1, 1, 0]"
def largest_in_list(lst): return max(lst) if lst else None,"Returns the largest number in a list.

This function returns the largest element in the list lst. If the list is empty, it returns None.","def test_largest_in_list(): assert largest_in_list([1, 2, 3]) == 3 assert largest_in_list([10, 5]) == 10 assert largest_in_list([]) is None"
"def check_Odd_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 1): 
        return True
    else: 
        return False","This function 'check_Odd_Parity' performs a specific operation.

The function 'check_Odd_Parity' takes the following parameters: x. It performs operations based on the parameters provided.","def test_check_Odd_Parity():
    # Add test cases for check_Odd_Parity
    assert check_Odd_Parity(...) == expected_output"
"def factorial_iterative(n): result = 1 for i in range(2, n+1): result *= i return result","Computes the factorial of a number iteratively.

This function calculates the factorial of a non-negative integer n using an iterative approach. The factorial is the product of all positive integers from 1 to n.",def test_factorial_iterative(): assert factorial_iterative(5) == 120 assert factorial_iterative(0) == 1 assert factorial_iterative(3) == 6
"def generate_range(start, end, step=1): return list(range(start, end, step))","Generates a list of numbers with a specific step.

This function returns a list of integers from start to end (excluding end) with a step size of step.","def test_generate_range(): assert generate_range(0, 5) == [0, 1, 2, 3, 4] assert generate_range(1, 10, 2) == [1, 3, 5, 7, 9] assert generate_range(5, 0, -1) == [5, 4, 3, 2, 1]"
def count_vowels(s): return sum(1 for char in s if char.lower() in 'aeiou'),"Counts the number of vowels in a string.

 This function takes a string s and counts the number of vowels (a, e, i, o, u) in the string, ignoring case. It returns the total count of vowels."," def test_count_vowels(): assert count_vowels(""hello"") == 2 assert count_vowels(""xyz"") == 0 assert count_vowels(""AEIOU"") == 5"
"def sum_of_left_leaves(root): def dfs(node, is_left): if not node: return 0; if not node.left and not node.right: return node.val if is_left else 0; return dfs(node.left, True) + dfs(node.right, False); return dfs(root, False)","Computes the sum of left leaves in a binary tree.

This function returns the sum of all left leaves in the binary tree rooted at root. A leaf is considered a left leaf if it is the left child of its parent. It uses depth-first search (DFS) to traverse the tree.","def test_sum_of_left_leaves(): root = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert sum_of_left_leaves(root) == 24"
"def fractional_knapsack(value, weight, capacity):
    """"""Return maximum value of items and their fractional amounts.

    (max_value, fractions) is returned where max_value is the maximum value of
    items with total weight not more than capacity.
    fractions is a list where fractions[i] is the fraction that should be taken
    of item i, where 0 <= i < total number of items.

    value[i] is the value of item i and weight[i] is the weight of item i
    for 0 <= i < n where n is the number of items.

    capacity is the maximum weight.
    """"""
    # index = [0, 1, 2, ..., n - 1] for n items
    index = list(range(len(value)))
    # contains ratios of values to weight
    ratio = [v/w for v, w in zip(value, weight)]
    # index is sorted according to value-to-weight ratio in decreasing order
    index.sort(key=lambda i: ratio[i], reverse=True)

    max_value = 0
    fractions = [0]*len(value)
    for i in index:
        if weight[i] <= capacity:
            fractions[i] = 1
            max_value += value[i]
            capacity -= weight[i]
        else:
            fractions[i] = capacity/weight[i]
            max_value += value[i]*capacity/weight[i]
            break

    return max_value, fractions


n = int(input('Enter number of items: '))
value = input('Enter the values of the {} item(s) in order: '
              .format(n)).split()
value = [int(v) for v in value]
weight = input('Enter the positive weights of the {} item(s) in order: '
               .format(n)).split()
weight = [int(w) for w in weight]
capacity = int(input('Enter maximum weight: '))

max_value, fractions = fractional_knapsack(value, weight, capacity)
print('The maximum value of items that can be carried:', max_value)
print('The fractions in which the items should be taken:', fractions)","""""""
Brief Description:
------------------
fractional_knapsack function performs a specific operation as described below.

Extended Description:
---------------------
This function, `fractional_knapsack`, takes 3 parameters: value,  weight,  capacity. It is designed to perform a certain task using these parameters.

Parameters:
-----------
value : type
    Description of value.
weight : type
    Description of weight.
capacity : type
    Description of capacity.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> fractional_knapsack(value, value, value)
Expected output
""""""","import unittest

class TestFractional_knapsack(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = fractional_knapsack(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = fractional_knapsack(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def string_reverse(str1):    rstr1 = ''    index = len(str1)    while index > 0:        rstr1 += str1[ index - 1 ]        index = index - 1    return rstr1print(string_reverse('1234abcd')),"""""""
Brief Description:
------------------
string_reverse function performs a specific operation as described below.

Extended Description:
---------------------
This function, `string_reverse`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> string_reverse(value)
Expected output
""""""","import unittest

class TestString_reverse(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = string_reverse(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = string_reverse(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Check_Vow(string, vowels): 
    final = [each for each in string if each in vowels] 
    return(len(final)) 
","This function 'Check_Vow' performs a specific operation.

The function 'Check_Vow' takes the following parameters: string, vowels. It performs operations based on the parameters provided.","def test_Check_Vow():
    # Add test cases for Check_Vow
    assert Check_Vow(...) == expected_output"
"def roman_to_integer(s): roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}; total = 0; for i in range(len(s) - 1): if roman[s[i]] < roman[s[i + 1]]: total -= roman[s[i]]; else: total += roman[s[i]]; return total + roman[s[-1]]","Converts a Roman numeral to an integer.

This function returns the integer representation of the input Roman numeral string s. It processes the string from left to right and subtracts values when a smaller numeral appears before a larger one.","def test_roman_to_integer(): assert roman_to_integer(""III"") == 3 assert roman_to_integer(""MCMXCIV"") == 1994"
"def search_2d_matrix(matrix, target): if not matrix or not matrix[0]: return False; rows, cols = len(matrix), len(matrix[0]); low, high = 0, rows * cols - 1; while low <= high: mid = (low + high) // 2; r, c = divmod(mid, cols); if matrix[r][c] == target: return True; elif matrix[r][c] < target: low = mid + 1; else: high = mid - 1; return False","Searches for a target in a 2D matrix.

This function returns True if the target is found in the input 2D matrix, where each row is sorted and the first integer of each row is greater than the last integer of the previous row. It uses binary search to search efficiently.","def test_search_2d_matrix(): matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]]; assert search_2d_matrix(matrix, 3) assert not search_2d_matrix(matrix, 13)"
"def wiggle_sort(nums): nums.sort(); half = (len(nums) + 1) // 2; nums[::2], nums[1::2] = nums[:half][::-1], nums[half:][::-1]","Rearranges numbers in a wiggle fashion (nums[0] < nums[1] > nums[2] < nums[3]...).

This function sorts the input list nums and rearranges it in such a way that nums[0] < nums[1] > nums[2] < nums[3].... It splits the list into two halves and interleaves them.","def test_wiggle_sort(): nums = [1, 5, 1, 1, 6, 4]; wiggle_sort(nums); assert nums == [1, 6, 1, 5, 1, 4]"
"def heapify(arr, n, i): largest = i; left = 2 * i + 1; right = 2 * i + 2; if left < n and arr[left] > arr[largest]: largest = left; if right < n and arr[right] > arr[largest]: largest = right; if largest != i: arr[i], arr[largest] = arr[largest], arr[i]; heapify(arr, n, largest)","Maintains the heap property in a binary heap.

This function modifies the heap arr in place to ensure the heap property is satisfied starting from node i in an array of size n.","def test_heapify(): arr = [4, 10, 3, 5, 1]; heapify(arr, 5, 0); assert arr == [10, 5, 3, 4, 1]"
"def remove_dictionary(colors, r_id):    colors[:] = [d for d in colors if d.get('id') != r_id]    return colorscolors = [{""id"" : ""#FF0000"", ""color"" : ""Red""},           {""id"" : ""#800000"", ""color"" : ""Maroon""},           {""id"" : ""#FFFF00"", ""color"" : ""Yellow""},           {""id"" : ""#808000"", ""color"" : ""Olive""}] print('Original list of dictionary:')print(colors)r_id = ""#FF0000""print(""\nRemove id"",r_id,""from the said list of dictionary:"")print(remove_dictionary(colors, r_id))","""""""
Brief Description:
------------------
remove_dictionary function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_dictionary`, takes 2 parameters: colors,  r_id. It is designed to perform a certain task using these parameters.

Parameters:
-----------
colors : type
    Description of colors.
r_id : type
    Description of r_id.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_dictionary(value, value)
Expected output
""""""","import unittest

class TestRemove_dictionary(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_dictionary(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_dictionary(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Check_Solution(a,b,c): 
    if (2*b*b == 9*a*c): 
        return (""Yes""); 
    else: 
        return (""No""); ","This function 'Check_Solution' performs a specific operation.

The function 'Check_Solution' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_Check_Solution():
    # Add test cases for Check_Solution
    assert Check_Solution(...) == expected_output"
"def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ","This function 'sum_range_list' performs a specific operation.

The function 'sum_range_list' takes the following parameters: list1, m, n. It performs operations based on the parameters provided.","def test_sum_range_list():
    # Add test cases for sum_range_list
    assert sum_range_list(...) == expected_output"
"def num_ways(n, k): if n == 0: return 0; if n == 1: return k; same, diff = 0, k; for i in range(2, n + 1): same, diff = diff, (same + diff) * (k - 1); return same + diff","Finds the number of ways to paint a fence with k colors.

This function returns the number of ways to paint n fence posts using k colors such that no more than two adjacent fence posts have the same color. It uses dynamic programming to compute the solution efficiently.","def test_num_ways(): assert num_ways(3, 2) == 6 assert num_ways(4, 3) == 24"
def sort_list(lst): return sorted(lst),"Sorts a list in ascending order.

This function returns a new list with the elements of lst sorted in ascending order.","def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list(['b', 'a']) == ['a', 'b'] assert sort_list([]) == []"
"def merge_two_sorted_lists(lst1, lst2): return sorted(lst1 + lst2)","Merges two sorted lists into one sorted list.

This function merges two sorted lists lst1 and lst2, and returns a single sorted list.","def test_merge_two_sorted_lists(): assert merge_two_sorted_lists([1, 3], [2, 4]) == [1, 2, 3, 4] assert merge_two_sorted_lists([], [1]) == [1] assert merge_two_sorted_lists([5], []) == [5]"
def all_positive(lst): return all(x > 0 for x in lst),"Checks if all elements in a list are positive.

This function returns True if all numbers in the list lst are greater than 0, and False otherwise.","def test_all_positive(): assert all_positive([1, 2, 3]) assert not all_positive([1, -2, 3]) assert all_positive([])"
"def gcd(a, b): while b: a, b = b, a % b return a","Computes the greatest common divisor of two numbers.

This function uses the Euclidean algorithm to compute the greatest common divisor (GCD) of two numbers a and b.","def test_gcd(): assert gcd(12, 8) == 4 assert gcd(17, 13) == 1 assert gcd(20, 5) == 5"
"def symmetric_difference_by(a, b, fn):  (_a, _b) = (set(map(fn, a)), set(map(fn, b)))  return [item for item in a if fn(item) not in _b] + [item          for item in b if fn(item) not in _a]from math import floorprint(symmetric_difference_by([2.1, 1.2], [2.3, 3.4], floor))","""""""
Brief Description:
------------------
symmetric_difference_by function performs a specific operation as described below.

Extended Description:
---------------------
This function, `symmetric_difference_by`, takes 3 parameters: a,  b,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> symmetric_difference_by(value, value, value)
Expected output
""""""","import unittest

class TestSymmetric_difference_by(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = symmetric_difference_by(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = symmetric_difference_by(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def kth_smallest_in_bst(root, k): def inorder(node): return inorder(node.left) + [node.val] + inorder(node.right) if node else []; return inorder(root)[k - 1]","Finds the k-th smallest element in a binary search tree.

This function returns the k-th smallest element in the binary search tree rooted at root. It uses in-order traversal to collect the elements in sorted order.","def test_kth_smallest_in_bst(): root = TreeNode(3, TreeNode(1, None, TreeNode(2)), TreeNode(4)); assert kth_smallest_in_bst(root, 1) == 1"
"def climb_stairs_with_memo(n, memo={}): if n <= 2: return n; if n not in memo: memo[n] = climb_stairs_with_memo(n - 1, memo) + climb_stairs_with_memo(n - 2, memo); return memo[n]","Finds the number of ways to climb stairs using memoization.

This function returns the number of distinct ways to climb a staircase with n steps, where each time you can climb either 1 or 2 steps. It uses memoization to optimize recursive calls.",def test_climb_stairs_with_memo(): assert climb_stairs_with_memo(5) == 8 assert climb_stairs_with_memo(10) == 89
"def combination_sum(candidates, target): result = []; def backtrack(start, target, path): if target == 0: result.append(path); return; for i in range(start, len(candidates)): if candidates[i] > target: break; backtrack(i, target - candidates[i], path + [candidates[i]]); candidates.sort(); backtrack(0, target, []); return result","Finds all combinations of numbers that sum to a target.

This function returns a list of all combinations of numbers from candidates that sum to target. Each number can be used an unlimited number of times. It uses backtracking to explore possible combinations.","def test_combination_sum(): assert combination_sum([2, 3, 6, 7], 7) == [[2, 2, 3], [7]] assert combination_sum([2, 3, 5], 8) == [[2, 2, 2, 2], [2, 3, 3], [3, 5]]"
"def max_sliding_window(nums, k): from collections import deque; deq, result = deque(), []; for i in range(len(nums)): while deq and nums[deq[-1]] <= nums[i]: deq.pop(); deq.append(i); if deq[0] == i - k: deq.popleft(); if i >= k - 1: result.append(nums[deq[0]]); return result","Finds the maximum in each sliding window of size k.

This function returns a list of the maximum elements for each sliding window of size k in the input list nums. It uses a deque to efficiently keep track of the indices of the maximum elements within the window.","def test_max_sliding_window(): assert max_sliding_window([1, 3, -1, -3, 5, 3, 6, 7], 3) == [3, 3, 5, 5, 6, 7]"
"def is_anagram(str1, str2): return sorted(str1) == sorted(str2)","Checks if two strings are anagrams.

This function returns True if str1 and str2 contain the same characters in any order, making them anagrams of each other.","def test_is_anagram(): assert is_anagram(""listen"", ""silent"") assert not is_anagram(""hello"", ""world"") assert is_anagram(""a"", ""a"")"
def sum_of_even_numbers(lst): return sum(x for x in lst if x % 2 == 0),Sums all the even numbers in a list.,"def test_sum_of_even_numbers(): assert sum_of_even_numbers([1, 2, 3, 4]) == 6 assert sum_of_even_numbers([1, 3, 5]) == 0 assert sum_of_even_numbers([0]) == 0"
"def add_tags(tag, word):	return ""<%s>%s</%s>"" % (tag, word, tag)print(add_tags('i', 'Python'))print(add_tags('b', 'Python Tutorial'))","""""""
Brief Description:
------------------
add_tags function performs a specific operation as described below.

Extended Description:
---------------------
This function, `add_tags`, takes 2 parameters: tag,  word. It is designed to perform a certain task using these parameters.

Parameters:
-----------
tag : type
    Description of tag.
word : type
    Description of word.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> add_tags(value, value)
Expected output
""""""","import unittest

class TestAdd_tags(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = add_tags(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = add_tags(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def word_break(s, word_dict): dp = [False] * (len(s) + 1); dp[0] = True; for i in range(1, len(s) + 1): for word in word_dict: if dp[i - len(word)] and s[i - len(word):i] == word: dp[i] = True; break; return dp[-1]","Determines if a string can be segmented into a space-separated sequence of dictionary words.

This function returns True if the input string s can be segmented into a space-separated sequence of words from the word_dict. It uses dynamic programming to track the possible segmentations.","def test_word_break(): assert word_break(""leetcode"", [""leet"", ""code""]) assert not word_break(""applepenapple"", [""cats"", ""dog""])"
"def matrix_multiplication(A, B): result = [[0] * len(B[0]) for _ in range(len(A))]; for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j]; return result","Multiplies two matrices.

This function returns the product of two matrices A and B. The matrices are assumed to be compatible for multiplication. The function uses triple nested loops to compute the matrix multiplication.","def test_matrix_multiplication(): A = [[1, 2], [3, 4]]; B = [[5, 6], [7, 8]]; assert matrix_multiplication(A, B) == [[19, 22], [43, 50]]"
"def max_profit(price, k):
    n = len(price)
    final_profit = [[None for x in range(n)] for y in range(k + 1)]
    for i in range(k + 1):
        for j in range(n):
            if i == 0 or j == 0:
                final_profit[i][j] = 0
            else:
                max_so_far = 0
                for x in range(j):
                    curr_price = price[j] - price[x] + final_profit[i-1][x]
                    if max_so_far < curr_price:
                        max_so_far = curr_price
                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)
    return final_profit[k][n-1]","This function 'max_profit' performs a specific operation.

The function 'max_profit' takes the following parameters: price, k. It performs operations based on the parameters provided.","def test_max_profit():
    # Add test cases for max_profit
    assert max_profit(...) == expected_output"
"def search_in_rotated_array(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1; else: left = mid + 1; else: if nums[mid] < target <= nums[right]: left = mid + 1; else: right = mid - 1; return -1","Searches for a target in a rotated sorted array.

This function returns the index of the target in a rotated sorted array nums, or -1 if the target is not found. It uses binary search for O(log n) complexity.","def test_search_in_rotated_array(): assert search_in_rotated_array([4, 5, 6, 7, 0, 1, 2], 0) == 4 assert search_in_rotated_array([4, 5, 6, 7, 0, 1, 2], 3) == -1 assert search_in_rotated_array([1], 0) == -1"
"def Average(lst): 
    return sum(lst) / len(lst) ","This function 'Average' performs a specific operation.

The function 'Average' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_Average():
    # Add test cases for Average
    assert Average(...) == expected_output"
"def max_area(height): left, right = 0, len(height) - 1; max_water = 0; while left < right: max_water = max(max_water, min(height[left], height[right]) * (right - left)); if height[left] < height[right]: left += 1; else: right -= 1; return max_water","Finds the maximum area of water trapped between lines.

This function returns the maximum area of water that can be trapped between the vertical lines represented by the input list height. It uses a two-pointer approach to find the maximum area.","def test_max_area(): assert max_area([1, 8, 6, 2, 5, 4, 8, 3, 7]) == 49 assert max_area([1, 1]) == 1"
"from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result","This function 'count_same_pair' performs a specific operation.

The function 'count_same_pair' takes the following parameters: nums1, nums2. It performs operations based on the parameters provided.","def test_count_same_pair():
    # Add test cases for count_same_pair
    assert count_same_pair(...) == expected_output"
"def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ","This function 'opposite_Signs' performs a specific operation.

The function 'opposite_Signs' takes the following parameters: x, y. It performs operations based on the parameters provided.","def test_opposite_Signs():
    # Add test cases for opposite_Signs
    assert opposite_Signs(...) == expected_output"
def dict_to_str(d): return str(d),"Converts a dictionary to a string.

This function returns the string representation of the input dictionary d.","def test_dict_to_str(): assert dict_to_str({'a': 1}) == ""{'a': 1}"" assert dict_to_str({'x': 10}) == ""{'x': 10}"" assert dict_to_str({}) == ""{}"""
"def is_contained_in(l1, l2):  for x in set(l1):    if l1.count(x) > l2.count(x):      return False  return Trueprint(is_contained_in([1, 2], [2, 4, 1]))print(is_contained_in([1], [2, 4, 1]))print(is_contained_in([1, 1], [4, 2, 1]))print(is_contained_in([1, 1], [3, 2, 4, 1, 5, 1]))","""""""
Brief Description:
------------------
is_contained_in function performs a specific operation as described below.

Extended Description:
---------------------
This function, `is_contained_in`, takes 2 parameters: l1,  l2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> is_contained_in(value, value)
Expected output
""""""","import unittest

class TestIs_contained_in(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = is_contained_in(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = is_contained_in(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def fibonacci_iterative(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return a","Computes the nth Fibonacci number iteratively.

This function returns the sum of all elements in the list lst. If the list is empty, it returns 0.",def test_fibonacci_iterative(): assert fibonacci_iterative(0) == 0 assert fibonacci_iterative(1) == 1 assert fibonacci_iterative(5) == 5
"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False","This function 'dif_Square' performs a specific operation.

The function 'dif_Square' takes the following parameters: n. It performs operations based on the parameters provided.","def test_dif_Square():
    # Add test cases for dif_Square
    assert dif_Square(...) == expected_output"
def sum_of_squares(lst): return sum(x ** 2 for x in lst),"Computes the sum of squares of elements in a list.

This function returns the sum of the squares of all elements in the list lst.","def test_sum_of_squares(): assert sum_of_squares([1, 2, 3]) == 14 assert sum_of_squares([0, 1, -1]) == 2 assert sum_of_squares([]) == 0"
"def repeat_string(s, times): return s * times","Repeats a string a specified number of times.

This function returns a new string which is the input string s repeated times times.","def test_repeat_string(): assert repeat_string(""hello"", 3) == ""hellohellohello"" assert repeat_string(""abc"", 0) == """" assert repeat_string(""xyz"", 2) == ""xyzxyz"""
"def matrix_to_list(test_list):
  temp = [ele for sub in test_list for ele in sub]
  res = list(zip(*temp))
  return (str(res))","This function 'matrix_to_list' performs a specific operation.

The function 'matrix_to_list' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_matrix_to_list():
    # Add test cases for matrix_to_list
    assert matrix_to_list(...) == expected_output"
"def count_Rectangles(radius):  
    rectangles = 0 
    diameter = 2 * radius 
    diameterSquare = diameter * diameter 
    for a in range(1, 2 * radius):  
        for b in range(1, 2 * radius): 
            diagnalLengthSquare = (a * a +  b * b)  
            if (diagnalLengthSquare <= diameterSquare) : 
                rectangles += 1
    return rectangles ","This function 'count_Rectangles' performs a specific operation.

The function 'count_Rectangles' takes the following parameters: radius. It performs operations based on the parameters provided.","def test_count_Rectangles():
    # Add test cases for count_Rectangles
    assert count_Rectangles(...) == expected_output"
"def count_occurrences(lst, element): return lst.count(element)",Counts the occurrences of an element in a list.,"def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences(['a', 'b', 'a'], 'a') == 2 assert count_occurrences([], 1) == 0"
"def find_disjoint_intervals(intervals): intervals.sort(key=lambda x: x[1]); last_end = float('-inf'); result = 0; for start, end in intervals: if start >= last_end: result += 1; last_end = end; return result","Finds the maximum number of disjoint intervals.

This function returns the maximum number of non-overlapping intervals from the input list intervals. It sorts the intervals by their end time and selects intervals greedily.","def test_find_disjoint_intervals(): assert find_disjoint_intervals([[1, 3], [2, 4], [3, 5]]) == 2 assert find_disjoint_intervals([[1, 2], [2, 3], [3, 4], [1, 3]]) == 3"
"def shortest_path_binary_matrix(grid): if grid[0][0] or grid[-1][-1]: return -1; n = len(grid); directions = [(1, 1), (1, 0), (0, 1), (1, -1), (-1, 1), (-1, 0), (0, -1), (-1, -1)]; queue = deque([(0, 0, 1)]); while queue: x, y, dist = queue.popleft(); if (x, y) == (n - 1, n - 1): return dist; for dx, dy in directions: nx, ny = x + dx, y + dy; if 0 <= nx < n and 0 <= ny < n and not grid[nx][ny]: grid[nx][ny] = 1; queue.append((nx, ny, dist + 1)); return -1","Finds the shortest path in a binary matrix.

This function returns the length of the shortest path from the top-left to the bottom-right corner in a binary matrix grid, where 0 represents an open cell and 1 represents an obstacle.","def test_shortest_path_binary_matrix(): grid = [[0, 1], [1, 0]]; assert shortest_path_binary_matrix(grid) == 2 grid = [[1, 0], [0, 0]]; assert shortest_path_binary_matrix(grid) == -1"
def find_unique_characters_in_order(s): unique_chars = set(); result = []; for char in s: if char not in unique_chars: unique_chars.add(char); result.append(char); return ''.join(result),"Finds unique characters in a string while preserving order.

This function returns a string containing the unique characters of the input string s, preserving their original order. It uses a set to track the characters that have already been added.","def test_find_unique_characters_in_order(): assert find_unique_characters_in_order(""swiss"") == ""swi"" assert find_unique_characters_in_order(""abca"") == ""abc"""
"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface","This function 'lateralsuface_cylinder' performs a specific operation.

The function 'lateralsuface_cylinder' takes the following parameters: r, h. It performs operations based on the parameters provided.","def test_lateralsuface_cylinder():
    # Add test cases for lateralsuface_cylinder
    assert lateralsuface_cylinder(...) == expected_output"
"def increment_elements(lst, increment): return [x + increment for x in lst]","Increments each element in a list.

This function returns a list where each element from the input list lst is increased by the specified increment value.","def test_increment_elements(): assert increment_elements([1, 2, 3], 1) == [2, 3, 4] assert increment_elements([10], 5) == [15] assert increment_elements([0], -1) == [-1]"
"import math
def radian_degree(degree):
 radian = degree*(math.pi/180)
 return radian","This function 'radian_degree' performs a specific operation.

The function 'radian_degree' takes the following parameters: degree. It performs operations based on the parameters provided.","def test_radian_degree():
    # Add test cases for radian_degree
    assert radian_degree(...) == expected_output"
"def longest_common_subsequence(s1, s2): m, n = len(s1), len(s2); dp = [[0] * (n + 1) for _ in range(m + 1)]; for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1; else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]); return dp[m][n]","Finds the length of the longest common subsequence (LCS) between two strings.

This function returns the length of the LCS between strings s1 and s2 using dynamic programming.","def test_longest_common_subsequence(): assert longest_common_subsequence(""abcde"", ""ace"") == 3 assert longest_common_subsequence(""abc"", ""abc"") == 3 assert longest_common_subsequence(""abc"", ""def"") == 0"
"def count_palindromic_substrings(s): def expand_around_center(left, right): count = 0; while left >= 0 and right < len(s) and s[left] == s[right]: count += 1; left -= 1; right += 1; return count; result = 0; for i in range(len(s)): result += expand_around_center(i, i); result += expand_around_center(i, i + 1); return result","Counts the number of palindromic substrings.

This function returns the total number of palindromic substrings in the input string s. It uses the expand-around-center approach to find palindromes centered at each character or between pairs of characters.","def test_count_palindromic_substrings(): assert count_palindromic_substrings(""abc"") == 3 assert count_palindromic_substrings(""aaa"") == 6"
"def get_max_occuring_char(str1):  ASCII_SIZE = 256  ctr = [0] * ASCII_SIZE  max = -1  ch = ''  for i in str1:    ctr[ord(i)]+=1;   for i in str1:    if max < ctr[ord(i)]:      max = ctr[ord(i)]      ch = i  return chprint(get_max_occuring_char(""Python: Get file creation and modification date/times""))","""""""
Brief Description:
------------------
get_max_occuring_char function performs a specific operation as described below.

Extended Description:
---------------------
This function, `get_max_occuring_char`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> get_max_occuring_char(value)
Expected output
""""""","import unittest

class TestGet_max_occuring_char(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = get_max_occuring_char(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = get_max_occuring_char(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def position_max_min(nums):    max_result = max(enumerate(nums), key=(lambda x: x[1]))    min_result = min(enumerate(nums), key=(lambda x: x[1]))    return max_result,min_resultnums = [12,33,23,10.11,67,89,45,66.7,23,12,11,10.25,54]print(""Original list:"")print(nums)result = position_max_min(nums)print(""\nIndex position and value of the maximum value of the said list:"")print(result[0])print(""\nIndex position and value of the minimum value of the said list:"")print(result[1])","""""""
Brief Description:
------------------
position_max_min function performs a specific operation as described below.

Extended Description:
---------------------
This function, `position_max_min`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> position_max_min(value)
Expected output
""""""","import unittest

class TestPosition_max_min(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = position_max_min(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = position_max_min(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_num(numbers):
    total = 0
    for x in numbers:
        total += x
    return total/len(numbers) ","This function 'sum_num' performs a specific operation.

The function 'sum_num' takes the following parameters: numbers. It performs operations based on the parameters provided.","def test_sum_num():
    # Add test cases for sum_num
    assert sum_num(...) == expected_output"
"def get_gray_codes(n):
    """"""Return n-bit Gray code in a list.""""""
    if n == 0:
        return ['']
    first_half = get_gray_codes(n - 1)
    second_half = first_half.copy()

    first_half = ['0' + code for code in first_half]
    second_half = ['1' + code for code in reversed(second_half)]

    return first_half + second_half


n = int(input('Enter the number of bits: '))
codes = get_gray_codes(n)
print('All {}-bit Gray Codes:'.format(n))
print(codes)","""""""
Brief Description:
------------------
get_gray_codes function performs a specific operation as described below.

Extended Description:
---------------------
This function, `get_gray_codes`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> get_gray_codes(value)
Expected output
""""""","import unittest

class TestGet_gray_codes(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = get_gray_codes(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = get_gray_codes(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Find_Min(lst): 
    minList = min((x) for x in lst) 
    return minList","This function 'Find_Min' performs a specific operation.

The function 'Find_Min' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_Find_Min():
    # Add test cases for Find_Min
    assert Find_Min(...) == expected_output"
"def longest_word(lst): return max(lst, key=len) if lst else """"","Finds the longest word in a list.

This function returns the longest word from the input list lst. If the list is empty, it returns an empty string.","def test_longest_word(): assert longest_word([""cat"", ""elephant"", ""dog""]) == ""elephant"" assert longest_word([]) == """" assert longest_word([""one""]) == ""one"""
"def minimum_in_rotated_array(nums): left, right = 0, len(nums) - 1; while left < right: mid = (left + right) // 2; if nums[mid] > nums[right]: left = mid + 1; else: right = mid; return nums[left]","Finds the minimum element in a rotated sorted array.

This function returns the minimum element in the input rotated sorted array nums. It uses binary search to find the smallest element by comparing the middle element with the rightmost element.","def test_minimum_in_rotated_array(): assert minimum_in_rotated_array([3, 4, 5, 1, 2]) == 1 assert minimum_in_rotated_array([4, 5, 6, 7, 0, 1, 2]) == 0"
"def find_second_largest(lst): unique_sorted_lst = sorted(set(lst), reverse=True) return unique_sorted_lst[1] if len(unique_sorted_lst) > 1 else None","Finds the second largest number in a list.

This function returns the second largest unique value in the list lst. If there are fewer than two unique values, it returns None.","def test_find_second_largest(): assert find_second_largest([3, 1, 2, 4]) == 3 assert find_second_largest([10, 10, 5]) == 5 assert find_second_largest([1]) == None"
def sort_list(lst): return sorted(lst),"Sorts a list in ascending order.

This function returns a new list containing all elements from the input list lst, sorted in ascending order.","def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list([5, 4, 6]) == [4, 5, 6] assert sort_list([]) == []"
"def largest_number(nums): nums = sorted(map(str, nums), key=lambda x: x*10, reverse=True); return str(int(''.join(nums)))","Forms the largest number by arranging the list of integers.

This function returns a string representing the largest number that can be formed by rearranging the integers in the input list nums. It handles cases where the numbers could form leading zeroes.","def test_largest_number(): assert largest_number([10, 2]) == ""210"" assert largest_number([3, 30, 34, 5, 9]) == ""9534330"""
def find_max(lst): return max(lst),"Finds the maximum element in a list.

 This function takes a list of numbers
lst
and returns the maximum element from the list using Python's built-in
max()
function. It assumes the list is non-empty."," def test_find_max(): assert find_max([1, 2, 3, 4]) == 4 assert find_max([-1, -5, 0]) == 0 assert find_max([7]) == 7"
"def add_key_value(d, key, value): d[key] = value; return d","Adds a key-value pair to a dictionary.

This function adds a new key-value pair to the input dictionary d and returns the updated dictionary.","def test_add_key_value(): assert add_key_value({'a': 1}, 'b', 2) == {'a': 1, 'b': 2} assert add_key_value({}, 'x', 10) == {'x': 10} assert add_key_value({'key': 'value'}, 'key', 'new_value') == {'key': 'new_value'}"
"import re
def pass_validity(p):
 x = True
 while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        return True
        x=False
        break

 if x:
    return False","This function 'pass_validity' performs a specific operation.

The function 'pass_validity' takes the following parameters: p. It performs operations based on the parameters provided.","def test_pass_validity():
    # Add test cases for pass_validity
    assert pass_validity(...) == expected_output"
def is_palindrome(s): return s == s[::-1],"Checks if a string is a palindrome.

This function returns True if the input string s reads the same backward as forward, otherwise False.","def test_is_palindrome(): assert is_palindrome(""madam"") assert not is_palindrome(""hello"") assert is_palindrome(""racecar"")"
"def flood_fill(image, sr, sc, new_color): rows, cols = len(image), len(image[0]); color = image[sr][sc]; if color == new_color: return image; def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or image[r][c] != color: return; image[r][c] = new_color; dfs(r+1, c); dfs(r-1, c); dfs(r, c+1); dfs(r, c-1); dfs(sr, sc); return image","Fills a connected region of an image with a new color using DFS.

This function modifies the input 2D list image by replacing the color at position (sr, sc) and all connected cells with the same color using depth-first search (DFS).","def test_flood_fill(): image = [[1, 1, 1], [1, 1, 0], [1, 0, 1]]; assert flood_fill(image, 1, 1, 2) == [[2, 2, 2], [2, 2, 0], [2, 0, 1]]"
def flatten_list(nested_list): return [item for sublist in nested_list for item in sublist],"Flattens a nested list.

This function takes a nested list nested_list (a list of lists) and flattens it into a single list by iterating over each sublist.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([[]]) == [] assert flatten_list([[5], [6, 7]]) == [5, 6, 7]"
"def is_samePatterns(colors, patterns):        if len(colors) != len(patterns):        return False        sdict = {}    pset = set()    sset = set()        for i in range(len(patterns)):        pset.add(patterns[i])        sset.add(colors[i])        if patterns[i] not in sdict.keys():            sdict[patterns[i]] = []        keys = sdict[patterns[i]]        keys.append(colors[i])        sdict[patterns[i]] = keys    if len(pset) != len(sset):        return False       for values in sdict.values():        for i in range(len(values) - 1):            if values[i] != values[i+1]:                return False    return Trueprint(is_samePatterns([""red"",  ""green"",  ""green""], [""a"",  ""b"",  ""b""])) print(is_samePatterns([""red"",  ""green"",  ""greenn""], [""a"",  ""b"",  ""b""])) ","""""""
Brief Description:
------------------
is_samePatterns function performs a specific operation as described below.

Extended Description:
---------------------
This function, `is_samePatterns`, takes 2 parameters: colors,  patterns. It is designed to perform a certain task using these parameters.

Parameters:
-----------
colors : type
    Description of colors.
patterns : type
    Description of patterns.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> is_samePatterns(value, value)
Expected output
""""""","import unittest

class TestIs_samepatterns(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = is_samePatterns(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = is_samePatterns(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def get_last_n_elements(lst, n): return lst[-n:]",Gets the last n elements from a list.,"def test_get_last_n_elements(): assert get_last_n_elements([1, 2, 3, 4], 2) == [3, 4] assert get_last_n_elements([5, 6, 7], 5) == [5, 6, 7] assert get_last_n_elements([], 1) == []"
"import re
def find_char_long(text):
  return (re.findall(r""\b\w{4,}\b"", text))","This function 'find_char_long' performs a specific operation.

The function 'find_char_long' takes the following parameters: text. It performs operations based on the parameters provided.","def test_find_char_long():
    # Add test cases for find_char_long
    assert find_char_long(...) == expected_output"
"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp   
    return newList ","This function 'swap_List' performs a specific operation.

The function 'swap_List' takes the following parameters: newList. It performs operations based on the parameters provided.","def test_swap_List():
    # Add test cases for swap_List
    assert swap_List(...) == expected_output"
"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2","This function 'remove_odd' performs a specific operation.

The function 'remove_odd' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_remove_odd():
    # Add test cases for remove_odd
    assert remove_odd(...) == expected_output"
def nth_factorial(n): return 1 if n == 0 else n * nth_factorial(n - 1),"Computes the factorial of a number recursively.

This function returns the factorial of the input number n using recursion.",def test_nth_factorial(): assert nth_factorial(5) == 120 assert nth_factorial(0) == 1 assert nth_factorial(3) == 6
"def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ","This function 'count_first_elements' performs a specific operation.

The function 'count_first_elements' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_count_first_elements():
    # Add test cases for count_first_elements
    assert count_first_elements(...) == expected_output"
"def find_greatest_common_divisor(a, b): while b: a, b = b, a % b return a","Finds the greatest common divisor (GCD) of two numbers.

This function returns the greatest common divisor of the input numbers a and b using the Euclidean algorithm.","def test_find_greatest_common_divisor(): assert find_greatest_common_divisor(12, 15) == 3 assert find_greatest_common_divisor(100, 25) == 25 assert find_greatest_common_divisor(7, 5) == 1"
"def subset(ar, n): 
    res = 0
    ar.sort() 
    for i in range(0, n) : 
        count = 1
        for i in range(n - 1): 
            if ar[i] == ar[i + 1]: 
                count+=1
            else: 
                break 
        res = max(res, count)  
    return res ","This function 'subset' performs a specific operation.

The function 'subset' takes the following parameters: ar, n. It performs operations based on the parameters provided.","def test_subset():
    # Add test cases for subset
    assert subset(...) == expected_output"
"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])","This function 'max_aggregate' performs a specific operation.

The function 'max_aggregate' takes the following parameters: stdata. It performs operations based on the parameters provided.","def test_max_aggregate():
    # Add test cases for max_aggregate
    assert max_aggregate(...) == expected_output"
"def min_jumps(arr, n):
	jumps = [0 for i in range(n)]
	if (n == 0) or (arr[0] == 0):
		return float('inf')
	jumps[0] = 0
	for i in range(1, n):
		jumps[i] = float('inf')
		for j in range(i):
			if (i <= j + arr[j]) and (jumps[j] != float('inf')):
				jumps[i] = min(jumps[i], jumps[j] + 1)
				break
	return jumps[n-1]","This function 'min_jumps' performs a specific operation.

The function 'min_jumps' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_min_jumps():
    # Add test cases for min_jumps
    assert min_jumps(...) == expected_output"
"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)","This function 'multiples_of_num' performs a specific operation.

The function 'multiples_of_num' takes the following parameters: m, n. It performs operations based on the parameters provided.","def test_multiples_of_num():
    # Add test cases for multiples_of_num
    assert multiples_of_num(...) == expected_output"
"def CheckPrime(i,num):  if num==i:    return 0  else:    if(num%i==0):      return 1    else:      return CheckPrime(i+1,num)num=int(input(""Enter your Number:""))if(CheckPrime(2,num)==0):  print(""It is a Prime Number."")else:  print(""It is not a Prime Number."")","""""""
Brief Description:
------------------
CheckPrime function performs a specific operation as described below.

Extended Description:
---------------------
This function, `CheckPrime`, takes 2 parameters: i, num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
i : type
    Description of i.
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> CheckPrime(value, value)
Expected output
""""""","import unittest

class TestCheckprime(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = CheckPrime(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = CheckPrime(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def chars_mix_up(a, b):  new_a = b[:2] + a[2:]  new_b = a[:2] + b[2:]  return new_a + ' ' + new_bprint(chars_mix_up('abc', 'xyz'))","""""""
Brief Description:
------------------
chars_mix_up function performs a specific operation as described below.

Extended Description:
---------------------
This function, `chars_mix_up`, takes 2 parameters: a,  b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> chars_mix_up(value, value)
Expected output
""""""","import unittest

class TestChars_mix_up(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = chars_mix_up(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = chars_mix_up(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def same_Length(A,B): 
    while (A > 0 and B > 0): 
        A = A / 10; 
        B = B / 10; 
    if (A == 0 and B == 0): 
        return True; 
    return False; ","This function 'same_Length' performs a specific operation.

The function 'same_Length' takes the following parameters: A, B. It performs operations based on the parameters provided.","def test_same_Length():
    # Add test cases for same_Length
    assert same_Length(...) == expected_output"
"def is_value_in_dict(d, value): return value in d.values()","Checks if a value exists in a dictionary.

This function returns True if the value is present in the values of the input dictionary d, otherwise False.","def test_is_value_in_dict(): assert is_value_in_dict({'a': 1}, 1) assert not is_value_in_dict({'b': 2}, 1) assert not is_value_in_dict({}, 1)"
def count_vowels(s): return sum(c in 'aeiouAEIOU' for c in s),"Counts the number of vowels in a string.

This function returns the total number of vowel characters in the input string s.","def test_count_vowels(): assert count_vowels(""hello"") == 2 assert count_vowels(""world"") == 1 assert count_vowels(""AEIOU"") == 5"
"def sieve_of_Eratosthenes(num):    limitn = num+1    not_prime_num = set()    prime_nums = []    for i in range(2, limitn):        if i in not_prime_num:            continue        for f in range(i*2, limitn, i):            not_prime_num.add(f)        prime_nums.append(i)    return prime_numsprint(sieve_of_Eratosthenes(100));","""""""
Brief Description:
------------------
sieve_of_Eratosthenes function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sieve_of_Eratosthenes`, takes 1 parameters: num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sieve_of_Eratosthenes(value)
Expected output
""""""","import unittest

class TestSieve_of_eratosthenes(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sieve_of_Eratosthenes(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sieve_of_Eratosthenes(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def remove_duplicates(lst): return list(set(lst)),"Removes duplicates from a list.

This function returns a new list with duplicate elements removed from the input list lst.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates([1, 1, 1]) == [1] assert remove_duplicates([]) == []"
"def license_key_formatting(s, k): s = s.replace('-', '').upper(); size = len(s); first_group = size % k or k; parts = [s[:first_group]] + [s[i:i + k] for i in range(first_group, size, k)]; return '-'.join(parts)","Formats a license key string.

This function returns the formatted version of the input string s representing a license key, where groups of characters are separated by hyphens and each group contains k characters, except the first group, which may be shorter. The letters are converted to uppercase.","def test_license_key_formatting(): assert license_key_formatting(""5F3Z-2e-9-w"", 4) == ""5F3Z-2E9W"" assert license_key_formatting(""2-5g-3-J"", 2) == ""2-5G-3J"""
"def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]","This function 'max_sum_increasing_subseq' performs a specific operation.

The function 'max_sum_increasing_subseq' takes the following parameters: a, n, index, k. It performs operations based on the parameters provided.","def test_max_sum_increasing_subseq():
    # Add test cases for max_sum_increasing_subseq
    assert max_sum_increasing_subseq(...) == expected_output"
"def average_tuple(nums):    result = tuple(map(lambda x: sum(x) / float(len(x)), zip(*nums)))    return resultnums = ((10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3))print (""Original Tuple: "")print(nums)print(""\nAverage value of the numbers of the said tuple of tuples:\n"",average_tuple(nums))nums = ((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))print (""\nOriginal Tuple: "")print(nums)print(""\nAverage value of the numbers of the said tuple of tuples:\n"",average_tuple(nums))","""""""
Brief Description:
------------------
average_tuple function performs a specific operation as described below.

Extended Description:
---------------------
This function, `average_tuple`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> average_tuple(value)
Expected output
""""""","import unittest

class TestAverage_tuple(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = average_tuple(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = average_tuple(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def extract_vowels(s): return ''.join(c for c in s if c in 'aeiouAEIOU'),"Extracts vowels from a string.

This function returns a new string containing only the vowel characters from the input string s.","def test_extract_vowels(): assert extract_vowels(""hello"") == ""eo"" assert extract_vowels(""Python"") == ""o"" assert extract_vowels(""abcd"") == ""a"""
"def remove_first_n_elements(lst, n): return lst[n:]","Removes the first n elements from a list.

This function returns a new list with the first n elements removed from lst.","def test_remove_first_n_elements(): assert remove_first_n_elements([1, 2, 3, 4], 2) == [3, 4] assert remove_first_n_elements([1, 2], 1) == [2] assert remove_first_n_elements([], 1) == []"
"def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)","This function 'div_even_odd' performs a specific operation.

The function 'div_even_odd' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_div_even_odd():
    # Add test cases for div_even_odd
    assert div_even_odd(...) == expected_output"
"def partition_labels(s): last_index = {char: i for i, char in enumerate(s)}; partitions = []; start = end = 0; for i, char in enumerate(s): end = max(end, last_index[char]); if i == end: partitions.append(i - start + 1); start = i + 1; return partitions","Finds partition labels in a string.

This function returns a list of integers representing the size of partitions in the input string s. Each character appears in at most one partition, and each partition is the largest possible segment where no character appears outside of it.","def test_partition_labels(): assert partition_labels(""ababcbacadefegdehijhklij"") == [9, 7, 8]"
"def next_greater_element_circular(nums): stack, res = [], [-1] * len(nums); n = len(nums); for i in range(2 * n): while stack and nums[stack[-1]] < nums[i % n]: res[stack.pop()] = nums[i % n]; if i < n: stack.append(i); return res","Finds the next greater element in a circular array.

This function returns an array where each element represents the next greater element in the input circular array nums. If there is no next greater element, the corresponding value is -1. It uses a stack to track indices and processes the array twice to handle the circular nature.","def test_next_greater_element_circular(): assert next_greater_element_circular([1, 2, 1]) == [2, -1, 2] assert next_greater_element_circular([3, 8, 4]) == [8, -1, 8]"
"def merge_lists(lst1, lst2): return lst1 + lst2","Merges two lists into one.

This function concatenates two lists lst1 and lst2 and returns the resulting list.","def test_merge_lists(): assert merge_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_lists([], [5]) == [5] assert merge_lists([6], []) == [6]"
"def valid_parentheses(s): stack = []; mapping = {"")"": ""("", ""}"": ""{"", ""]"": ""[""}; for char in s: if char in mapping: top = stack.pop() if stack else ""#""; if mapping[char] != top: return False; else: stack.append(char); return not stack","Checks if parentheses in a string are valid.

This function returns True if the parentheses in the input string s are valid, and False otherwise. It uses a stack to check for balanced and correctly nested parentheses.","def test_valid_parentheses(): assert valid_parentheses(""()"") assert valid_parentheses(""()[]{}"") assert not valid_parentheses(""(]"")"
"def test_prime(n):    if (n==1):        return False    elif (n==2):        return True;    else:        for x in range(2,n):            if(n % x==0):                return False        return True             print(test_prime(9))","""""""
Brief Description:
------------------
test_prime function performs a specific operation as described below.

Extended Description:
---------------------
This function, `test_prime`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> test_prime(value)
Expected output
""""""","import unittest

class TestTest_prime(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = test_prime(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = test_prime(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def common_list_of_lists(lst):    temp = set(lst[0]).intersection(*lst)    return list(temp) nums = [[7,2,3,4,7],[9,2,3,2,5],[8,2,3,4,4]]print(""Original list:"")print(nums)print(""\nCommon elements of the said list of lists:"")print(common_list_of_lists(nums))chars = [['a','b','c'],['b','c','d'],['c','d','e']]print(""\nOriginal list:"")print(chars)print(""\nCommon elements of the said list of lists:"")print(common_list_of_lists(chars))","""""""
Brief Description:
------------------
common_list_of_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `common_list_of_lists`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> common_list_of_lists(value)
Expected output
""""""","import unittest

class TestCommon_list_of_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = common_list_of_lists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = common_list_of_lists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_duplicates_from_string(s): return ''.join(sorted(set(s), key=s.index))","Removes duplicate characters from a string.

This function returns a new string with all duplicate characters removed from the input string s, preserving the original order of characters.","def test_remove_duplicates_from_string(): assert remove_duplicates_from_string(""hello"") == ""helo"" assert remove_duplicates_from_string(""aabbcc"") == ""abc"" assert remove_duplicates_from_string("""") == """""
"def hamming_Distance(n1,n2) : 
    x = n1 ^ n2  
    setBits = 0
    while (x > 0) : 
        setBits += x & 1
        x >>= 1
    return setBits  ","This function 'hamming_Distance' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def max_sum_pair_diff_lessthan_K(arr, N, K): 
	arr.sort() 
	dp = [0] * N 
	dp[0] = 0
	for i in range(1, N): 
		dp[i] = dp[i-1] 
		if (arr[i] - arr[i-1] < K): 
			if (i >= 2): 
				dp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); 
			else: 
				dp[i] = max(dp[i], arr[i] + arr[i-1]); 
	return dp[N - 1]","This function 'max_sum_pair_diff_lessthan_K' performs a specific operation.

The function 'max_sum_pair_diff_lessthan_K' takes the following parameters: arr, N, K. It performs operations based on the parameters provided.","def test_max_sum_pair_diff_lessthan_K():
    # Add test cases for max_sum_pair_diff_lessthan_K
    assert max_sum_pair_diff_lessthan_K(...) == expected_output"
"def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x","This function 'divisor' performs a specific operation.

The function 'divisor' takes the following parameters: n. It performs operations based on the parameters provided.","def test_divisor():
    # Add test cases for divisor
    assert divisor(...) == expected_output"
"def big_diff(nums):
     diff= max(nums)-min(nums)
     return diff","This function 'big_diff' performs a specific operation.

The function 'big_diff' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_big_diff():
    # Add test cases for big_diff
    assert big_diff(...) == expected_output"
"def first_repeated_char_smallest_distance(str1):  temp = {}  for ch in str1:    if ch in temp:      return ch, str1.index(ch);    else:      temp[ch] = 0  return 'None'print(first_repeated_char_smallest_distance(""abcabc""))print(first_repeated_char_smallest_distance(""abcb""))print(first_repeated_char_smallest_distance(""abcc""))print(first_repeated_char_smallest_distance(""abcxxy""))print(first_repeated_char_smallest_distance(""abc""))))","""""""
Brief Description:
------------------
first_repeated_char_smallest_distance function performs a specific operation as described below.

Extended Description:
---------------------
This function, `first_repeated_char_smallest_distance`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> first_repeated_char_smallest_distance(value)
Expected output
""""""","import unittest

class TestFirst_repeated_char_smallest_distance(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = first_repeated_char_smallest_distance(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = first_repeated_char_smallest_distance(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def first_Element(arr,n,k): 
    count_map = {}; 
    for i in range(0, n): 
        if(arr[i] in count_map.keys()): 
            count_map[arr[i]] += 1
        else: 
            count_map[arr[i]] = 1
        i += 1
    for i in range(0, n):  
        if (count_map[arr[i]] == k): 
            return arr[i] 
        i += 1 
    return -1","This function 'first_Element' performs a specific operation.

The function 'first_Element' takes the following parameters: arr, n, k. It performs operations based on the parameters provided.","def test_first_Element():
    # Add test cases for first_Element
    assert first_Element(...) == expected_output"
"def evaluate_rpn(tokens): stack = []; for token in tokens: if token in ""+-*/"": b, a = stack.pop(), stack.pop(); stack.append(eval(f'{a}{token}{b}')); else: stack.append(int(token)); return stack[0]","Evaluates a Reverse Polish Notation (RPN) expression.

This function evaluates the input list tokens that represents a mathematical expression in Reverse Polish Notation (RPN). It uses a stack to perform arithmetic operations in the correct order.","def test_evaluate_rpn(): assert evaluate_rpn([""2"", ""1"", ""+"", ""3"", ""*""]) == 9 assert evaluate_rpn([""4"", ""13"", ""5"", ""/"", ""+""]) == 6"
def convert_to_celsius(fahrenheit): return (fahrenheit - 32) * 5 / 9,"Converts Fahrenheit to Celsius.

This function returns the Celsius equivalent of the input temperature in Fahrenheit.",def test_convert_to_celsius(): assert convert_to_celsius(32) == 0 assert convert_to_celsius(100) == 37.7778 assert convert_to_celsius(212) == 100
"def modify(string):  
  final = """"   
  for i in range(len(string)):  
    if i % 2 == 0:  
      final = final + string[i]  
  return final
string=raw_input(""Enter string:"")
print(""Modified string is:"")
print(modify(string))","""""""
Brief Description:
------------------
modify function performs a specific operation as described below.

Extended Description:
---------------------
This function, `modify`, takes 1 parameters: string. It is designed to perform a certain task using these parameters.

Parameters:
-----------
string : type
    Description of string.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> modify(value)
Expected output
""""""","import unittest

class TestModify(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = modify(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = modify(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ","This function 'count_Occurrence' performs a specific operation.

The function 'count_Occurrence' takes the following parameters: tup, lst. It performs operations based on the parameters provided.","def test_count_Occurrence():
    # Add test cases for count_Occurrence
    assert count_Occurrence(...) == expected_output"
def filter_odd_numbers(lst): return [x for x in lst if x % 2 != 0],Filters odd numbers from a list.,"def test_filter_odd_numbers(): assert filter_odd_numbers([1, 2, 3]) == [1, 3] assert filter_odd_numbers([2, 4, 6]) == [] assert filter_odd_numbers([1, 3, 5]) == [1, 3, 5]"
"def remove_element(nums, val): i = 0; for j in range(len(nums)): if nums[j] != val: nums[i] = nums[j]; i += 1; return i","Removes all instances of a value in place and returns the new length.

This function removes all instances of val in the input list nums in place and returns the new length of the list. It uses two pointers to efficiently shift elements.","def test_remove_element(): nums = [3, 2, 2, 3]; length = remove_element(nums, 3); assert nums[:length] == [2, 2]"
"def DecimalToBinary(n):  if n==0:    return 0  else:    return (n% 2 + 10 * DecimalToBinary(n // 2))n=int(input(""Enter the Decimal Value:""))print(""Binary Value of Decimal number is:"",DecimalToBinary(n))","""""""
Brief Description:
------------------
DecimalToBinary function performs a specific operation as described below.

Extended Description:
---------------------
This function, `DecimalToBinary`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> DecimalToBinary(value)
Expected output
""""""","import unittest

class TestDecimaltobinary(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = DecimalToBinary(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = DecimalToBinary(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n 
    while (temp > 0) :     
        if (count % 2 == 1) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ","This function 'even_bit_toggle_number' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
def find_min_in_list(lst): return min(lst) if lst else None,"Finds the minimum value in a list.

This function returns the minimum value from the input list lst. If the list is empty, it returns None.","def test_find_min_in_list(): assert find_min_in_list([1, 2, 3]) == 1 assert find_min_in_list([7, 4, 6]) == 4 assert find_min_in_list([]) is None"
"def sum_lists_diff_length(test_list):    result =  [sum(x) for x in zip(*map(lambda x:x+[0]*max(map(len, test_list)) if len(x)<max(map(len, test_list)) else x, test_list))]    return resultnums = [[1,2,4],[2,4,4],[1,2]]print(""\nOriginal list:"")print(nums)print(""Sum said lists with different lengths:"")print(sum_lists_diff_length(nums))nums = [[1],[2,4,4],[1,2],[4]]print(""\nOriginal list:"")print(nums)print(""Sum said lists with different lengths:"")print(sum_lists_diff_length(nums))","""""""
Brief Description:
------------------
sum_lists_diff_length function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_lists_diff_length`, takes 1 parameters: test_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
test_list : type
    Description of test_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_lists_diff_length(value)
Expected output
""""""","import unittest

class TestSum_lists_diff_length(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_lists_diff_length(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_lists_diff_length(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def is_sorted(lst): return lst == sorted(lst),"Checks if a list is sorted.

This function checks whether the list lst is sorted in ascending order. It returns True if the list is sorted, otherwise False.","def test_is_sorted(): assert is_sorted([1, 2, 3]) assert not is_sorted([3, 1, 2]) assert is_sorted([])"
def minimum_moves_to_equal_array_elements(nums): min_num = min(nums); return sum(num - min_num for num in nums),"Calculates the minimum moves to equalize an array.

This function returns the minimum number of moves required to make all elements in the input list nums equal, where a move involves incrementing n - 1 elements by 1.","def test_minimum_moves_to_equal_array_elements(): assert minimum_moves_to_equal_array_elements([1, 2, 3]) == 3 assert minimum_moves_to_equal_array_elements([1, 1, 1]) == 0"
"def deserialize(data): def dfs(nodes): val = nodes.pop(0); if val == ""None"": return None; node = TreeNode(int(val)); node.left = dfs(nodes); node.right = dfs(nodes); return node; return dfs(data.split("",""))","Deserializes a string back into a binary tree.

This function deserializes the input string back into a binary tree. The string should be in the format generated by a pre-order traversal from the serialize function.","def test_deserialize(): data = ""1,2,None,None,3,4,None,None,5,None,None,""; root = deserialize(data); assert serialize(root) == data"
"def count_range_in_list(li, min, max):	ctr = 0	for x in li:		if min <= x <= max:			ctr += 1	return ctrlist1 = [10,20,30,40,40,40,70,80,99]print(count_range_in_list(list1, 40, 100))list2 = ['a','b','c','d','e','f']print(count_range_in_list(list2, 'a', 'e'))","""""""
Brief Description:
------------------
count_range_in_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_range_in_list`, takes 3 parameters: li,  min,  max. It is designed to perform a certain task using these parameters.

Parameters:
-----------
li : type
    Description of li.
min : type
    Description of min.
max : type
    Description of max.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_range_in_list(value, value, value)
Expected output
""""""","import unittest

class TestCount_range_in_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_range_in_list(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_range_in_list(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_anagram(str1, str2): return sorted(str1) == sorted(str2)","Checks if two strings are anagrams.

This function takes two strings str1 and str2 and checks if they are anagrams by comparing their sorted characters. An anagram is a word formed by rearranging the letters of another word.","def test_is_anagram(): assert is_anagram(""listen"", ""silent"") assert not is_anagram(""hello"", ""world"") assert is_anagram(""evil"", ""vile"")"
"def calculate_power(base, exponent): return base ** exponent",Computes the power of a number.,"def test_calculate_power(): assert calculate_power(2, 3) == 8 assert calculate_power(3, 2) == 9 assert calculate_power(5, 0) == 1"
"def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)","This function 'smallest_missing' performs a specific operation.

The function 'smallest_missing' takes the following parameters: A, left_element, right_element. It performs operations based on the parameters provided.","def test_smallest_missing():
    # Add test cases for smallest_missing
    assert smallest_missing(...) == expected_output"
"def sum_arr(arr,size):
   if (size == 0):
     return 0
   else:
     return arr[size-1] + sum_arr(arr,size-1)
n=int(input(""Enter the number of elements for list:""))
a=[]
for i in range(0,n):
    element=int(input(""Enter element:""))
    a.append(element)
print(""The list is:"")
print(a)
print(""Sum of items in list:"")
b=sum_arr(a,n)
print(b)","""""""
Brief Description:
------------------
sum_arr function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_arr`, takes 2 parameters: arr, size. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
size : type
    Description of size.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_arr(value, value)
Expected output
""""""","import unittest

class TestSum_arr(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_arr(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_arr(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def introsort(alist):
    maxdepth = (len(alist).bit_length() - 1)*2
    introsort_helper(alist, 0, len(alist), maxdepth)

def introsort_helper(alist, start, end, maxdepth):
    if end - start <= 1:
        return
    elif maxdepth == 0:
        heapsort(alist, start, end)
    else:
        p = partition(alist, start, end)
        introsort_helper(alist, start, p + 1, maxdepth - 1)
        introsort_helper(alist, p + 1, end, maxdepth - 1)

def partition(alist, start, end):
    pivot = alist[start]
    i = start - 1
    j = end

    while True:
        i = i + 1
        while alist[i] < pivot:
            i = i + 1
        j = j - 1
        while alist[j] > pivot:
            j = j - 1

        if i >= j:
            return j

        swap(alist, i, j)

def swap(alist, i, j):
    alist[i], alist[j] = alist[j], alist[i]

def heapsort(alist, start, end):
    build_max_heap(alist, start, end)
    for i in range(end - 1, start, -1):
        swap(alist, start, i)
        max_heapify(alist, index=0, start=start, end=i)

def build_max_heap(alist, start, end):
    def parent(i):
        return (i - 1)//2
    length = end - start
    index = parent(length - 1)
    while index >= 0:
        max_heapify(alist, index, start, end)
        index = index - 1

def max_heapify(alist, index, start, end):
    def left(i):
        return 2*i + 1
    def right(i):
        return 2*i + 2

    size = end - start
    l = left(index)
    r = right(index)
    if (l < size and alist[start + l] > alist[start + index]):
        largest = l
    else:
        largest = index
    if (r < size and alist[start + r] > alist[start + largest]):
        largest = r
    if largest != index:
        swap(alist, start + largest, start + index)
        max_heapify(alist, largest, start, end)


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
introsort(alist)
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
introsort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `introsort`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> introsort(value)
Expected output
""""""","import unittest

class TestIntrosort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = introsort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = introsort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def pair_OR_Sum(arr,n) : 
    ans = 0 
    for i in range(0,n) :    
        for j in range(i + 1,n) :   
            ans = ans + (arr[i] ^ arr[j])          
    return ans ","This function 'pair_OR_Sum' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
def generate_power_of_two(n): return [2**i for i in range(n)],"Generates the first n powers of two.

This function returns a list of the first n powers of two.","def test_generate_power_of_two(): assert generate_power_of_two(3) == [1, 2, 4] assert generate_power_of_two(5) == [1, 2, 4, 8, 16] assert generate_power_of_two(0) == []"
def extract_numbers(s): return [int(word) for word in s.split() if word.isdigit()],Extracts numbers from a string.,"def test_extract_numbers(): assert extract_numbers(""hello 123 world 456"") == [123, 456] assert extract_numbers(""no numbers here"") == [] assert extract_numbers(""42 56"") == [42, 56]"
"import re
def find_char(text):
  return (re.findall(r""\b\w{3,5}\b"", text))","This function 'find_char' performs a specific operation.

The function 'find_char' takes the following parameters: text. It performs operations based on the parameters provided.","def test_find_char():
    # Add test cases for find_char
    assert find_char(...) == expected_output"
"def find_max_subarray(alist, start, end):
    """"""Returns (l, r, m) such that alist[l:r] is the maximum subarray in
    A[start:end] with sum m. Here A[start:end] means all A[x] for start <= x <
    end.""""""
    # base case
    if start == end - 1:
        return start, end, alist[start]
    else:
        mid = (start + end)//2
        left_start, left_end, left_max = find_max_subarray(alist, start, mid)
        right_start, right_end, right_max = find_max_subarray(alist, mid, end)
        cross_start, cross_end, cross_max = find_max_crossing_subarray(alist, start, mid, end)
        if (left_max > right_max and left_max > cross_max):
            return left_start, left_end, left_max
        elif (right_max > left_max and right_max > cross_max):
            return right_start, right_end, right_max
        else:
            return cross_start, cross_end, cross_max

def find_max_crossing_subarray(alist, start, mid, end):
    """"""Returns (l, r, m) such that alist[l:r] is the maximum subarray within
    alist with start <= l < mid <= r < end with sum m. The arguments start, mid,
    end must satisfy start <= mid <= end.""""""
    sum_left = float('-inf')
    sum_temp = 0
    cross_start = mid
    for i in range(mid - 1, start - 1, -1):
        sum_temp = sum_temp + alist[i]
        if sum_temp > sum_left:
            sum_left = sum_temp
            cross_start = i

    sum_right = float('-inf')
    sum_temp = 0
    cross_end = mid + 1
    for i in range(mid, end):
        sum_temp = sum_temp + alist[i]
        if sum_temp > sum_right:
            sum_right = sum_temp
            cross_end = i + 1
    return cross_start, cross_end, sum_left + sum_right

alist = input('Enter the list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
start, end, maximum = find_max_subarray(alist, 0, len(alist))
print('The maximum subarray starts at index {}, ends at index {}'
      ' and has sum {}.'.format(start, end - 1, maximum))","""""""
Brief Description:
------------------
find_max_subarray function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_max_subarray`, takes 3 parameters: alist,  start,  end. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
start : type
    Description of start.
end : type
    Description of end.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_max_subarray(value, value, value)
Expected output
""""""","import unittest

class TestFind_max_subarray(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_max_subarray(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_max_subarray(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def create_largest_number(lst):    if all(val == 0 for val in lst):        return '0'    result = ''.join(sorted((str(val) for val in lst), reverse=False,                      key=lambda i: i*( len(str(min(lst))) * 2 // len(i))))    return resultnums = [3, 40, 41, 43, 74, 9]print(""Original list:"")print(nums)print(""Smallest possible number using the elements of the said list of positive integers:"")print(create_largest_number(nums))nums = [10, 40, 20, 30, 50, 60]print(""\nOriginal list:"")print(nums)print(""Smallest possible number using the elements of the said list of positive integers:"")print(create_largest_number(nums))nums = [8, 4, 2, 9, 5, 6, 1, 0]print(""\nOriginal list:"")print(nums)print(""Smallest possible number using the elements of the said list of positive integers:"")print(create_largest_number(nums))","""""""
Brief Description:
------------------
create_largest_number function performs a specific operation as described below.

Extended Description:
---------------------
This function, `create_largest_number`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> create_largest_number(value)
Expected output
""""""","import unittest

class TestCreate_largest_number(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = create_largest_number(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = create_largest_number(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def bubble_sort(alist):
    for i in range(len(alist) - 1, 0, -1):
        no_swap = True
        for j in range(0, i):
            if alist[j + 1] < alist[j]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]
                no_swap = False
        if no_swap:
            return


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
bubble_sort(alist)
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
bubble_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `bubble_sort`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> bubble_sort(value)
Expected output
""""""","import unittest

class TestBubble_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = bubble_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = bubble_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result","This function 'extract_string' performs a specific operation.

The function 'extract_string' takes the following parameters: str, l. It performs operations based on the parameters provided.","def test_extract_string():
    # Add test cases for extract_string
    assert extract_string(...) == expected_output"
"def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum","This function 'sum' performs a specific operation.

The function 'sum' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_sum():
    # Add test cases for sum
    assert sum(...) == expected_output"
def to_lowercase(s): return s.lower(),"Converts a string to lowercase.

 This function returns a new string where all characters are converted to lowercase.","def test_to_lowercase(): assert to_lowercase(""HELLO"") == ""hello"" assert to_lowercase(""world"") == ""world"" assert to_lowercase("""") == """""
"def second_largest(numbers):  if (len(numbers)<2):    return  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):    return  dup_items = set()  uniq_items = []  for x in numbers:    if x not in dup_items:      uniq_items.append(x)      dup_items.add(x)  uniq_items.sort()      return  uniq_items[-2]   print(second_largest([1,2,3,4,4]))print(second_largest([1, 1, 1, 0, 0, 0, 2, -2, -2]))print(second_largest([2,2]))print(second_largest([1]))","""""""
Brief Description:
------------------
second_largest function performs a specific operation as described below.

Extended Description:
---------------------
This function, `second_largest`, takes 1 parameters: numbers. It is designed to perform a certain task using these parameters.

Parameters:
-----------
numbers : type
    Description of numbers.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> second_largest(value)
Expected output
""""""","import unittest

class TestSecond_largest(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = second_largest(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = second_largest(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def factorial_iterative(n): result = 1 for i in range(1, n + 1): result *= i return result","Computes factorial using iteration.

This function calculates the factorial of n using an iterative approach, where the factorial is the product of all positive integers up to n.",def test_factorial_iterative(): assert factorial_iterative(5) == 120 assert factorial_iterative(0) == 1 assert factorial_iterative(1) == 1
"def spiral_matrix(n): matrix = [[0] * n for _ in range(n)]; num, left, right, top, bottom = 1, 0, n - 1, 0, n - 1; while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num; num += 1; top += 1; for i in range(top, bottom + 1): matrix[i][right] = num; num += 1; right -= 1; for i in range(right, left - 1, -1): matrix[bottom][i] = num; num += 1; bottom -= 1; for i in range(bottom, top - 1, -1): matrix[i][left] = num; num += 1; left += 1; return matrix","Generates an n x n matrix filled with elements in spiral order.

This function returns an n x n matrix filled with the integers from 1 to n^2, arranged in spiral order starting from the top-left corner. It uses a four-pointer approach to fill the matrix layer by layer.","def test_spiral_matrix(): assert spiral_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]] assert spiral_matrix(1) == [[1]]"
def get_largest_element(lst): return max(lst) if lst else None,Finds the largest element in a list.,"def test_get_largest_element(): assert get_largest_element([1, 2, 3]) == 3 assert get_largest_element([-1, -2, -3]) == -1 assert get_largest_element([]) is None"
def count_words(s): return len(s.split()),Counts the number of words in a string.,"def test_count_words(): assert count_words(""hello world"") == 2 assert count_words(""programming"") == 2 assert count_words("""") == 0"
def find_max(lst): return max(lst) if lst else None,Finds the maximum element in a list.,"def test_find_max(): assert find_max([1, 2, 3]) == 3 assert find_max([10, 5, 7]) == 10 assert find_max([]) is None"
def power_of_three(n): return n > 0 and 1162261467 % n == 0,"Determines if a number is a power of three.

This function returns True if the input number n is a power of three, and False otherwise. It uses the largest power of three that fits in an integer.",def test_power_of_three(): assert power_of_three(27) assert not power_of_three(0) assert power_of_three(1)
"import re
def removezero_ip(ip):
 string = re.sub('\.[0]*', '.', ip)
 return string
","This function 'removezero_ip' performs a specific operation.

The function 'removezero_ip' takes the following parameters: ip. It performs operations based on the parameters provided.","def test_removezero_ip():
    # Add test cases for removezero_ip
    assert removezero_ip(...) == expected_output"
"def count_integer(list1):    ctr = 0    for i in list1:        if isinstance(i, int):            ctr = ctr + 1    return ctrlist1 = [1, 'abcd', 3, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]print(""Original list:"")print(list1)print(""\nNumber of integers in the said mixed list:"")print(count_integer(list1))","""""""
Brief Description:
------------------
count_integer function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_integer`, takes 1 parameters: list1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_integer(value)
Expected output
""""""","import unittest

class TestCount_integer(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_integer(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_integer(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def capitalize_words(s): return ' '.join(word.capitalize() for word in s.split()),"Capitalizes the first letter of each word in a string.

This function returns the input string s with each word capitalized (i.e., the first letter of each word is uppercase).","def test_capitalize_words(): assert capitalize_words(""hello world"") == ""Hello World"" assert capitalize_words(""is fun"") == ""Is Fun"" assert capitalize_words(""capitalize me"") == ""Capitalize Me"""
def sum_of_odd_numbers(lst): return sum(x for x in lst if x % 2 != 0),"Sums the odd numbers in a list.

This function returns the sum of all odd numbers in the list lst.","def test_sum_of_odd_numbers(): assert sum_of_odd_numbers([1, 2, 3, 4]) == 4 assert sum_of_odd_numbers([2, 4, 6]) == 0 assert sum_of_odd_numbers([1, 3, 5]) == 9"
"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)","This function 'sum_negativenum' performs a specific operation.

The function 'sum_negativenum' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_sum_negativenum():
    # Add test cases for sum_negativenum
    assert sum_negativenum(...) == expected_output"
def calculate_median(lst): from statistics import median return median(lst),"Calculates the median of a list.

This function returns the median of the input list lst using Python's built-in statistics.median function.","def test_calculate_median(): assert calculate_median([1, 3, 2]) == 2 assert calculate_median([1, 2, 3, 4]) == 2.5 assert calculate_median([]) == None"
"def check_string(str1):    messg = [    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]    result = [x for x in [i(str1) for i in messg] if x != True]    if not result:        result.append('Valid string.')    return result    s = input(""Input the string: "")print(check_string(s))","""""""
Brief Description:
------------------
check_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `check_string`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> check_string(value)
Expected output
""""""","import unittest

class TestCheck_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = check_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = check_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)","This function 'max_length_list' performs a specific operation.

The function 'max_length_list' takes the following parameters: input_list. It performs operations based on the parameters provided.","def test_max_length_list():
    # Add test cases for max_length_list
    assert max_length_list(...) == expected_output"
"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))","This function 'sequence' performs a specific operation.

The function 'sequence' takes the following parameters: n. It performs operations based on the parameters provided.","def test_sequence():
    # Add test cases for sequence
    assert sequence(...) == expected_output"
"def rotate_array_left(arr, k): n = len(arr); k %= n; return arr[k:] + arr[:k]","Rotates an array to the left by k positions.

This function rotates the input array arr to the left by k positions. It handles cases where k is larger than the length of the array using modulo arithmetic.","def test_rotate_array_left(): assert rotate_array_left([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2] assert rotate_array_left([0, 1, 2], 4) == [1, 2, 0]"
"def check_permutation(str1, str2):
  n1=len(str1)
  n2=len(str2)
  if(n1!=n2):
    return False
  a=sorted(str1)
  str1="" "".join(a)
  b=sorted(str2)
  str2="" "".join(b)
  for i in range(0, n1, 1):
    if(str1[i] != str2[i]):
      return False
  return True","This function 'check_permutation' performs a specific operation.

The function 'check_permutation' takes the following parameters: str1, str2. It performs operations based on the parameters provided.","def test_check_permutation():
    # Add test cases for check_permutation
    assert check_permutation(...) == expected_output"
"def reverse_list_lists(lists):
    for l in lists:
        l.sort(reverse = True)
    return lists ","This function 'reverse_list_lists' performs a specific operation.

The function 'reverse_list_lists' takes the following parameters: lists. It performs operations based on the parameters provided.","def test_reverse_list_lists():
    # Add test cases for reverse_list_lists
    assert reverse_list_lists(...) == expected_output"
"def longest_item(*args):  return max(args, key = len)print(longest_item('this', 'is', 'a', 'Green'))  print(longest_item([1, 2, 3], [1, 2], [1, 2, 3, 4, 5])) print(longest_item([1, 2, 3, 4], 'Red'))","""""""
Brief Description:
------------------
longest_item function performs a specific operation as described below.

Extended Description:
---------------------
This function, `longest_item`, takes 1 parameters: *args. It is designed to perform a certain task using these parameters.

Parameters:
-----------
*args : type
    Description of *args.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> longest_item(value)
Expected output
""""""","import unittest

class TestLongest_item(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = longest_item(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = longest_item(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def pythagoras(opposite_side,adjacent_side,hypotenuse):        if opposite_side == str(""x""):            return (""Opposite = "" + str(((hypotenuse**2) - (adjacent_side**2))**0.5))        elif adjacent_side == str(""x""):            return (""Adjacent = "" + str(((hypotenuse**2) - (opposite_side**2))**0.5))        elif hypotenuse == str(""x""):            return (""Hypotenuse = "" + str(((opposite_side**2) + (adjacent_side**2))**0.5))        else:            return ""You know the answer!""    print(pythagoras(3,4,'x'))print(pythagoras(3,'x',5))print(pythagoras('x',4,5))print(pythagoras(3,4,5))","""""""
Brief Description:
------------------
pythagoras function performs a specific operation as described below.

Extended Description:
---------------------
This function, `pythagoras`, takes 3 parameters: opposite_side, adjacent_side, hypotenuse. It is designed to perform a certain task using these parameters.

Parameters:
-----------
opposite_side : type
    Description of opposite_side.
adjacent_side : type
    Description of adjacent_side.
hypotenuse : type
    Description of hypotenuse.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> pythagoras(value, value, value)
Expected output
""""""","import unittest

class TestPythagoras(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = pythagoras(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = pythagoras(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i]; j = i - 1; while j >= 0 and key < arr[j]: arr[j + 1] = arr[j]; j -= 1; arr[j + 1] = key","Sorts an array using insertion sort.

This function sorts the input array arr using insertion sort, which builds a sorted array one element at a time by shifting larger elements.","def test_insertion_sort(): arr = [12, 11, 13, 5, 6]; insertion_sort(arr); assert arr == [5, 6, 11, 12, 13]"
"def check_greater(arr, number):
  arr.sort()
  if number > arr[-1]:
    return ('Yes, the entered number is greater than those in the array')
  else:
    return ('No, entered number is less than those in the array')","This function 'check_greater' performs a specific operation.

The function 'check_greater' takes the following parameters: arr, number. It performs operations based on the parameters provided.","def test_check_greater():
    # Add test cases for check_greater
    assert check_greater(...) == expected_output"
"def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)","This function 'odd_bit_set_number' performs a specific operation.

The function 'odd_bit_set_number' takes the following parameters: n. It performs operations based on the parameters provided.","def test_odd_bit_set_number():
    # Add test cases for odd_bit_set_number
    assert odd_bit_set_number(...) == expected_output"
def capitalize_first(s): return s.capitalize(),"Capitalizes the first letter of a string.

This function capitalizes the first character of the string s, converting the rest of the characters to lowercase.","def test_capitalize_first(): assert capitalize_first(""hello"") == ""Hello"" assert capitalize_first(""WORLD"") == ""World"" assert capitalize_first("""") == """""
"def unique_paths(m, n): dp = [[1] * n for _ in range(m)]; for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1]; return dp[-1][-1]","Finds the number of unique paths in a grid.

This function returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. You can only move either down or right at any point.","def test_unique_paths(): assert unique_paths(3, 7) == 28 assert unique_paths(3, 2) == 3"
"def is_prime(n): if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True","Checks if a number is prime.

 This function takes an integer n and checks if it's a prime number. A prime number is divisible only by 1 and itself. The function returns True if n is prime and False otherwise.",def test_is_prime(): assert is_prime(2) == True assert is_prime(4) == False assert is_prime(17) == True
"def product_of_range(start, end): result = 1 for i in range(start, end + 1): result *= i return result","Computes the product of all integers in a range.

This function returns the product of all integers from start to end (inclusive).","def test_product_of_range(): assert product_of_range(1, 3) == 6 assert product_of_range(5, 5) == 5 assert product_of_range(0, 3) == 0"
"import re
def camel_to_snake(text):
  str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
  return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()","This function 'camel_to_snake' performs a specific operation.

The function 'camel_to_snake' takes the following parameters: text. It performs operations based on the parameters provided.","def test_camel_to_snake():
    # Add test cases for camel_to_snake
    assert camel_to_snake(...) == expected_output"
def rotate_image(matrix): matrix[:] = [list(row) for row in zip(*matrix[::-1])],"Rotates a 2D matrix 90 degrees clockwise.

This function rotates the input 2D matrix in place by 90 degrees clockwise. It first transposes the matrix and then reverses each row.","def test_rotate_image(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_image(matrix); assert matrix == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"
"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume","This function 'volume_sphere' performs a specific operation.

The function 'volume_sphere' takes the following parameters: r. It performs operations based on the parameters provided.","def test_volume_sphere():
    # Add test cases for volume_sphere
    assert volume_sphere(...) == expected_output"
"def factorial_iter(n): result = 1 for i in range(1, n + 1): result *= i return result","Calculates the factorial of a number using iteration.

This function returns the factorial of the input number n by iterating from 1 to n and multiplying the values.",def test_factorial_iter(): assert factorial_iter(5) == 120 assert factorial_iter(0) == 1 assert factorial_iter(3) == 6
"from array import array
def negative_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x < 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","This function 'negative_count' performs a specific operation.

The function 'negative_count' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_negative_count():
    # Add test cases for negative_count
    assert negative_count(...) == expected_output"
def find_duplicate(nums): slow = fast = nums[0]; while True: slow = nums[slow]; fast = nums[nums[fast]]; if slow == fast: break; slow = nums[0]; while slow != fast: slow = nums[slow]; fast = nums[fast]; return slow,"Finds the duplicate number in an array.

This function returns the duplicate number in the input list nums, where each integer is between 1 and n and appears once except for one duplicate. It uses Floyd's Tortoise and Hare algorithm to detect the cycle caused by the duplicate number.","def test_find_duplicate(): assert find_duplicate([1, 3, 4, 2, 2]) == 2 assert find_duplicate([3, 1, 3, 4, 2]) == 3"
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1),"Recursively computes the factorial of a number.

This function calculates the factorial of n using recursion. The factorial of n is the product of all positive integers up to n.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(3) == 6
"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result","This function 'max_occurrences' performs a specific operation.

The function 'max_occurrences' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_max_occurrences():
    # Add test cases for max_occurrences
    assert max_occurrences(...) == expected_output"
"def cyclically_iteration(lst,spec_index):    result = []    length = len(lst)    for i in range(length):        element_index = spec_index % length        result.append(lst[element_index])        spec_index += 1    return resultchars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']print(""Original list:"")print(chars)spec_index = 3print(""\nIterate the said  list cyclically on specific index position"",spec_index,"":"")print(cyclically_iteration(chars,spec_index))spec_index = 5print(""\nIterate the said  list cyclically on specific index position"",spec_index,"":"")print(cyclically_iteration(chars,spec_index))","""""""
Brief Description:
------------------
cyclically_iteration function performs a specific operation as described below.

Extended Description:
---------------------
This function, `cyclically_iteration`, takes 2 parameters: lst, spec_index. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
spec_index : type
    Description of spec_index.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> cyclically_iteration(value, value)
Expected output
""""""","import unittest

class TestCyclically_iteration(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = cyclically_iteration(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = cyclically_iteration(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]
   tuple1 = [t for t in tuple1 if t]
   return tuple1","This function 'remove_empty' performs a specific operation.

The function 'remove_empty' takes the following parameters: tuple1. It performs operations based on the parameters provided.","def test_remove_empty():
    # Add test cases for remove_empty
    assert remove_empty(...) == expected_output"
"def palindrome_lambda(texts):
  result = list(filter(lambda x: (x == """".join(reversed(x))), texts))
  return result","This function 'palindrome_lambda' performs a specific operation.

The function 'palindrome_lambda' takes the following parameters: texts. It performs operations based on the parameters provided.","def test_palindrome_lambda():
    # Add test cases for palindrome_lambda
    assert palindrome_lambda(...) == expected_output"
def find_largest_in_nested_lists(lst): return max(max(sublist) for sublist in lst if sublist),"Finds the largest element in nested lists.

This function takes a list of lists lst and returns the largest element from all sublists. It skips any empty sublists.","def test_find_largest_in_nested_lists(): assert find_largest_in_nested_lists([[1, 2], [3, 4]]) == 4 assert find_largest_in_nested_lists([[], [7, 8]]) == 8 assert find_largest_in_nested_lists([[5], [2, 3]]) == 5"
"def is_Even(n) : 
    if (n^1 == n+1) :
        return True; 
    else :
        return False; ","This function 'is_Even' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def string_list_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result","This function 'string_list_to_tuple' performs a specific operation.

The function 'string_list_to_tuple' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_string_list_to_tuple():
    # Add test cases for string_list_to_tuple
    assert string_list_to_tuple(...) == expected_output"
"def remove_newlines(fname):    flist = open(fname).readlines()    return [s.rstrip('\n') for s in flist]print(remove_newlines(""test.txt""))","""""""
Brief Description:
------------------
remove_newlines function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_newlines`, takes 1 parameters: fname. It is designed to perform a certain task using these parameters.

Parameters:
-----------
fname : type
    Description of fname.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_newlines(value)
Expected output
""""""","import unittest

class TestRemove_newlines(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_newlines(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_newlines(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def min_window_substring(s, t): from collections import Counter; t_count = Counter(t); current_count = Counter(); start = 0; min_len = float('inf'); result = """"; formed = 0; for end in range(len(s)): current_count[s[end]] += 1; if current_count[s[end]] == t_count[s[end]]: formed += 1; while formed == len(t_count): if end - start + 1 < min_len: min_len = end - start + 1; result = s[start:end + 1]; current_count[s[start]] -= 1; if current_count[s[start]] < t_count[s[start]]: formed -= 1; start += 1; return result","Finds the minimum window substring that contains all characters of another string.

This function returns the smallest substring of s that contains all the characters of t. It uses a sliding window approach to find the valid substring and keep track of character frequencies.","def test_min_window_substring(): assert min_window_substring(""ADOBECODEBANC"", ""ABC"") == ""BANC"""
"import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res ","This function 'sumofFactors' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
def list_length(lst): return len(lst),Returns the length of a list.,"def test_list_length(): assert list_length([1, 2, 3]) == 3 assert list_length([]) == 0 assert list_length(['a', 'b', 'c']) == 3"
"def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part","This function 'sort_mixed_list' performs a specific operation.

The function 'sort_mixed_list' takes the following parameters: mixed_list. It performs operations based on the parameters provided.","def test_sort_mixed_list():
    # Add test cases for sort_mixed_list
    assert sort_mixed_list(...) == expected_output"
"def second_smallest(numbers):  if (len(numbers)<2):    return  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):    return  dup_items = set()  uniq_items = []  for x in numbers:    if x not in dup_items:      uniq_items.append(x)      dup_items.add(x)  uniq_items.sort()      return  uniq_items[1]   print(second_smallest([1, 2, -8, -2, 0, -2]))print(second_smallest([1, 1, 0, 0, 2, -2, -2]))print(second_smallest([1, 1, 1, 0, 0, 0, 2, -2, -2]))print(second_smallest([2,2]))print(second_smallest([2]))","""""""
Brief Description:
------------------
second_smallest function performs a specific operation as described below.

Extended Description:
---------------------
This function, `second_smallest`, takes 1 parameters: numbers. It is designed to perform a certain task using these parameters.

Parameters:
-----------
numbers : type
    Description of numbers.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> second_smallest(value)
Expected output
""""""","import unittest

class TestSecond_smallest(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = second_smallest(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = second_smallest(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def add_two_numbers(l1, l2): dummy = ListNode(0); curr, carry = dummy, 0; while l1 or l2 or carry: x = l1.val if l1 else 0; y = l2.val if l2 else 0; carry, out = divmod(x + y + carry, 10); curr.next = ListNode(out); curr = curr.next; l1 = l1.next if l1 else None; l2 = l2.next if l2 else None; return dummy.next","Adds two numbers represented as linked lists.

This function returns the sum of two numbers where each number is represented as a linked list. The digits are stored in reverse order, and each node contains a single digit.","def test_add_two_numbers(): l1 = ListNode(2, ListNode(4, ListNode(3))); l2 = ListNode(5, ListNode(6, ListNode(4))); assert linked_list_to_list(add_two_numbers(l1, l2)) == [7, 0, 8]"
"def diagonal_traverse(matrix): if not matrix: return []; res, m, n, d = [], len(matrix), len(matrix[0]), 1; row, col = 0, 0; for _ in range(m * n): res.append(matrix[row][col]); if d == 1: if col == n - 1: row += 1; d = -1; elif row == 0: col += 1; d = -1; else: row -= 1; col += 1; else: if row == m - 1: col += 1; d = 1; elif col == 0: row += 1; d = 1; else: row += 1; col -= 1; return res","Returns all elements of a matrix in diagonal order.

This function returns the elements of the input matrix in diagonal order, starting from the top-left corner and alternating between diagonals. It handles boundary conditions to switch between upward and downward diagonals.","def test_diagonal_traverse(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; assert diagonal_traverse(matrix) == [1, 2, 4, 7, 5, 3, 6, 8, 9]"
"def binary_search(alist, start, end, key):
    """"""Search key in alist[start... end - 1].""""""
    if not start < end:
        return -1

    mid = (start + end)//2
    if alist[mid] < key:
        return binary_search(alist, mid + 1, end, key)
    elif alist[mid] > key:
        return binary_search(alist, start, mid, key)
    else:
        return mid


alist = input('Enter the sorted list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
key = int(input('The number to search for: '))

index = binary_search(alist, 0, len(alist), key)
if index < 0:
    print('{} was not found.'.format(key))
else:
    print('{} was found at index {}.'.format(key, index))","""""""
Brief Description:
------------------
binary_search function performs a specific operation as described below.

Extended Description:
---------------------
This function, `binary_search`, takes 4 parameters: alist,  start,  end,  key. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
start : type
    Description of start.
end : type
    Description of end.
key : type
    Description of key.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> binary_search(value, value, value, value)
Expected output
""""""","import unittest

class TestBinary_search(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = binary_search(value, value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = binary_search(None, None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ","This function 'minimum' performs a specific operation.

The function 'minimum' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_minimum():
    # Add test cases for minimum
    assert minimum(...) == expected_output"
"def sum_nums(x, y,m,n):
    sum_nums= x + y
    if sum_nums in range(m, n):
        return 20
    else:
        return sum_nums","This function 'sum_nums' performs a specific operation.

The function 'sum_nums' takes the following parameters: x, y, m, n. It performs operations based on the parameters provided.","def test_sum_nums():
    # Add test cases for sum_nums
    assert sum_nums(...) == expected_output"
"def find_lcm(num1, num2): 
	if(num1>num2): 
		num = num1 
		den = num2 
	else: 
		num = num2 
		den = num1 
	rem = num % den 
	while (rem != 0): 
		num = den 
		den = rem 
		rem = num % den 
	gcd = den 
	lcm = int(int(num1 * num2)/int(gcd)) 
	return lcm 
def get_lcm(l):
  num1 = l[0]
  num2 = l[1]
  lcm = find_lcm(num1, num2)
  for i in range(2, len(l)):
    lcm = find_lcm(lcm, l[i])
  return lcm ","This function 'find_lcm' performs a specific operation.

The function 'find_lcm' takes the following parameters: num1, num2. It performs operations based on the parameters provided.","def test_find_lcm():
    # Add test cases for find_lcm
    assert find_lcm(...) == expected_output"
def count_spaces(s): return s.count(' '),"Counts the spaces in a string.

This function returns the number of space characters in the input string s.","def test_count_spaces(): assert count_spaces(""hello world"") == 1 assert count_spaces(""a b c"") == 2 assert count_spaces("""") == 0"
"import re
def remove_all_spaces(text):
 return (re.sub(r'\s+', '',text))","This function 'remove_all_spaces' performs a specific operation.

The function 'remove_all_spaces' takes the following parameters: text. It performs operations based on the parameters provided.","def test_remove_all_spaces():
    # Add test cases for remove_all_spaces
    assert remove_all_spaces(...) == expected_output"
"def wiggle_sort(arra_nums):    for i, _ in enumerate(arra_nums):        if (i % 2 == 1) == (arra_nums[i - 1] > arra_nums[i]):            arra_nums[i - 1], arra_nums[i] = arra_nums[i], arra_nums[i - 1]    return arra_numsprint(""Input the array elements: "")arra_nums = list(map(int, input().split()))print(""Original unsorted array:"")print(arra_nums)print(""The said array after applying Wiggle sort:"")print(wiggle_sort(arra_nums))","""""""
Brief Description:
------------------
wiggle_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `wiggle_sort`, takes 1 parameters: arra_nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arra_nums : type
    Description of arra_nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> wiggle_sort(value)
Expected output
""""""","import unittest

class TestWiggle_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = wiggle_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = wiggle_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def test_includes_all(nums, lsts):  for x in lsts:    if x not in nums:      return False  return Trueprint(test_includes_all([10, 20, 30, 40, 50, 60], [20, 40]))print(test_includes_all([10, 20, 30, 40, 50, 60], [20, 80]))","""""""
Brief Description:
------------------
test_includes_all function performs a specific operation as described below.

Extended Description:
---------------------
This function, `test_includes_all`, takes 2 parameters: nums,  lsts. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
lsts : type
    Description of lsts.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> test_includes_all(value, value)
Expected output
""""""","import unittest

class TestTest_includes_all(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = test_includes_all(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = test_includes_all(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_of_even_numbers(n): return sum(i for i in range(2, n + 1, 2))","Sums even numbers up to n.

This function returns the sum of all even numbers from 1 to n inclusive.",def test_sum_of_even_numbers(): assert sum_of_even_numbers(10) == 30 assert sum_of_even_numbers(5) == 6 assert sum_of_even_numbers(0) == 0
"def add_binary(a, b): result, carry, i, j = [], 0, len(a) - 1, len(b) - 1; while i >= 0 or j >= 0 or carry: total = carry; if i >= 0: total += int(a[i]); if j >= 0: total += int(b[j]); result.append(str(total % 2)); carry = total // 2; i -= 1; j -= 1; return ''.join(reversed(result))","Adds two binary strings.

This function returns the sum of two binary strings a and b as a binary string. It simulates binary addition by iterating from the end of both strings and keeping track of the carry.","def test_add_binary(): assert add_binary(""11"", ""1"") == ""100"" assert add_binary(""1010"", ""1011"") == ""10101"""
"def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v","This function 'rgb_to_hsv' performs a specific operation.

The function 'rgb_to_hsv' takes the following parameters: r, g, b. It performs operations based on the parameters provided.","def test_rgb_to_hsv():
    # Add test cases for rgb_to_hsv
    assert rgb_to_hsv(...) == expected_output"
"from collections import Counter
import re
def n_common_words(text,n):
  words = re.findall('\w+',text)
  n_common_words= Counter(words).most_common(n)
  return list(n_common_words)","This function 'n_common_words' performs a specific operation.

The function 'n_common_words' takes the following parameters: text, n. It performs operations based on the parameters provided.","def test_n_common_words():
    # Add test cases for n_common_words
    assert n_common_words(...) == expected_output"
"def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))","Checks if a number is prime.

This function returns True if the input number n is a prime number (i.e., greater than 1 and not divisible by any number other than 1 and itself).",def test_is_prime(): assert is_prime(2) assert is_prime(5) assert not is_prime(4)
"def remove_kth_element(list1, L):
    return  list1[:L-1] + list1[L:]","This function 'remove_kth_element' performs a specific operation.

The function 'remove_kth_element' takes the following parameters: list1, L. It performs operations based on the parameters provided.","def test_remove_kth_element():
    # Add test cases for remove_kth_element
    assert remove_kth_element(...) == expected_output"
"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median","This function 'median_trapezium' performs a specific operation.

The function 'median_trapezium' takes the following parameters: base1, base2, height. It performs operations based on the parameters provided.","def test_median_trapezium():
    # Add test cases for median_trapezium
    assert median_trapezium(...) == expected_output"
def is_palindrome(s): return s == s[::-1],"Checks if a string is a palindrome.

This function checks whether the string s reads the same forwards and backwards, returning True if it does, and False otherwise.","def test_is_palindrome(): assert is_palindrome(""radar"") assert not is_palindrome(""hello"") assert is_palindrome(""a"")"
"def swap_Element(arr,i,j):  temp = arr[i]  arr[i] = arr[j]  arr[j] = tempdef Decreasing_sort_element(arr,n):  if(n>0):    for i in range(0,n):      if (arr[i] <= arr[n - 1]):        swap_Element(arr, i, n - 1)    Decreasing_sort_element(arr, n - 1)def printArr(arr,n):  for i in range(0, n):    print(arr[i],end="" "")arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):  num = int(input())  arr.append(num)Decreasing_sort_element(arr,n)print(""After Decreasing order sort Array Elements are:"")printArr(arr, n)","""""""
Brief Description:
------------------
swap_Element function performs a specific operation as described below.

Extended Description:
---------------------
This function, `swap_Element`, takes 3 parameters: arr, i, j. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
i : type
    Description of i.
j : type
    Description of j.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> swap_Element(value, value, value)
Expected output
""""""","import unittest

class TestSwap_element(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = swap_Element(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = swap_Element(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def binary_tree_inorder_traversal(root): result, stack = [], []; while stack or root: while root: stack.append(root); root = root.left; node = stack.pop(); result.append(node.val); root = node.right; return result","Performs inorder traversal of a binary tree.

This function returns a list of node values from an inorder traversal of a binary tree rooted at root. It uses an iterative approach with a stack.","def test_binary_tree_inorder_traversal(): root = TreeNode(1, None, TreeNode(2, TreeNode(3), None)); assert binary_tree_inorder_traversal(root) == [1, 3, 2]"
"def moveSpaces(str1):     no_spaces = [char for char in str1 if char!=' ']       space= len(str1) - len(no_spaces)    # Create string with spaces    result = ' '*space        return result + ''.join(no_spaces)  s1 = ""Python Exercises""print(""Original String:\n"",s1)print(""\nAfter moving all spaces to the front:"")print(moveSpaces(s1))","""""""
Brief Description:
------------------
moveSpaces function performs a specific operation as described below.

Extended Description:
---------------------
This function, `moveSpaces`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> moveSpaces(value)
Expected output
""""""","import unittest

class TestMovespaces(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = moveSpaces(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = moveSpaces(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def sum_of_digits_is_prime(n): from sympy import isprime return isprime(sum(int(digit) for digit in str(abs(n)))),"Checks if the sum of the digits of a number is prime.

This function returns True if the sum of the digits of the input number n is a prime number, and False otherwise.",def test_sum_of_digits_is_prime(): assert sum_of_digits_is_prime(123) assert not sum_of_digits_is_prime(456) assert sum_of_digits_is_prime(37)
def reverse_words(s): return ' '.join(s.split()[::-1]),"Reverses the order of words in a string.

This function reverses the order of words in the input string s, while preserving the order of characters within each word.","def test_reverse_words(): assert reverse_words(""hello world"") == ""world hello"" assert reverse_words(""a b c"") == ""c b a"" assert reverse_words("""") == """""
"def longest_palindromic_subsequence(s): n = len(s); dp = [[0] * n for _ in range(n)]; for i in range(n): dp[i][i] = 1; for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1; if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2; else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]); return dp[0][-1]","Finds the length of the longest palindromic subsequence in a string.

This function returns the length of the longest subsequence in the input string s that is also a palindrome. It uses dynamic programming to find the longest palindromic subsequence.","def test_longest_palindromic_subsequence(): assert longest_palindromic_subsequence(""bbbab"") == 4 assert longest_palindromic_subsequence(""cbbd"") == 2"
def remove_whitespace(s): return ''.join(s.split()),"Removes all whitespace from a string.

This function returns a new string with all whitespace characters removed from the input string s.","def test_remove_whitespace(): assert remove_whitespace("" he llo "") == ""hello"" assert remove_whitespace(""a b c"") == ""abc"" assert remove_whitespace("" "") == """""
def find_minimum(lst): return min(lst) if lst else None,"Finds the smallest element in a list.

This function checks whether a number n is a palindrome, meaning it reads the same forwards and backwards.","def test_find_minimum(): assert find_minimum([5, 2, 9]) == 2 assert find_minimum([1]) == 1 assert find_minimum([]) == None"
"def unique_permutations(nums): result = []; nums.sort(); def backtrack(start): if start == len(nums): result.append(nums[:]); return; for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue; nums[start], nums[i] = nums[i], nums[start]; backtrack(start + 1); nums[start], nums[i] = nums[i], nums[start]; backtrack(0); return result","Generates all unique permutations of a list.

This function returns all unique permutations of the input list nums, ensuring that there are no duplicate permutations. It uses backtracking to explore all possibilities and skips duplicates.","def test_unique_permutations(): assert unique_permutations([1, 1, 2]) == [[1, 1, 2], [1, 2, 1], [2, 1, 1]] assert unique_permutations([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"
"import re
pattern = 'fox'
text = 'The quick brown fox jumps over the lazy dog.'
def find_literals(text, pattern):
  match = re.search(pattern, text)
  s = match.start()
  e = match.end()
  return (match.re.pattern, s, e)","This function 'find_literals' performs a specific operation.

The function 'find_literals' takes the following parameters: text, pattern. It performs operations based on the parameters provided.","def test_find_literals():
    # Add test cases for find_literals
    assert find_literals(...) == expected_output"
def get_dict_values(d): return list(d.values()),"Retrieves the values of a dictionary as a list.

This function returns a list of values from the input dictionary d.","def test_get_dict_values(): assert get_dict_values({'a': 1, 'b': 2}) == [1, 2] assert get_dict_values({'x': 10}) == [10] assert get_dict_values({}) == []"
"def tuple_to_float(test_tup):
  res = float('.'.join(str(ele) for ele in test_tup))
  return (res) ","This function 'tuple_to_float' performs a specific operation.

The function 'tuple_to_float' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_tuple_to_float():
    # Add test cases for tuple_to_float
    assert tuple_to_float(...) == expected_output"
def file_read(fname):        with open(fname) as f:                #Content_list is the list that contains the read lines.                     content_list = f.readlines()                print(content_list)file_read(\'test.txt\'),"""""""
Brief Description:
------------------
file_read function performs a specific operation as described below.

Extended Description:
---------------------
This function, `file_read`, takes 1 parameters: fname. It is designed to perform a certain task using these parameters.

Parameters:
-----------
fname : type
    Description of fname.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> file_read(value)
Expected output
""""""","import unittest

class TestFile_read(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = file_read(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = file_read(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def is_palindrome(s): return s == s[::-1],"Checks if a string is a palindrome.

 This function accepts a string s and returns True if the string reads the same backward as forward (i.e., is a palindrome). Otherwise, it returns False.","def test_is_palindrome(): assert is_palindrome(""madam"") assert not is_palindrome(""hello"") assert is_palindrome(""racecar"")"
"def max_path_sum_binary_tree(root): def helper(node): nonlocal max_sum; if not node: return 0; left_gain = max(helper(node.left), 0); right_gain = max(helper(node.right), 0); max_sum = max(max_sum, node.val + left_gain + right_gain); return node.val + max(left_gain, right_gain); max_sum = float('-inf'); helper(root); return max_sum","Finds the maximum path sum in a binary tree.

This function returns the maximum path sum in the binary tree rooted at root. A path can be any sequence of nodes connected by edges, starting and ending at any node. The function uses recursion to calculate the maximum gain from each node.","def test_max_path_sum_binary_tree(): root = TreeNode(1, TreeNode(2), TreeNode(3)); assert max_path_sum_binary_tree(root) == 6"
"def valid_palindrome(s): i, j = 0, len(s) - 1; while i < j: if s[i] != s[j]: return s[i:j] == s[i:j][::-1] or s[i+1:j+1] == s[i+1:j+1][::-1]; i += 1; j -= 1; return True","Determines if a string can become a palindrome by deleting at most one character.

This function returns True if the input string s can be transformed into a palindrome by deleting at most one character, and False otherwise. It uses a two-pointer approach to find the mismatch and checks the remaining substring.","def test_valid_palindrome(): assert valid_palindrome(""abca"") assert not valid_palindrome(""abc"")"
"def parallel_lines(line1, line2):
  return line1[0]/line1[1] == line2[0]/line2[1]","This function 'parallel_lines' performs a specific operation.

The function 'parallel_lines' takes the following parameters: line1, line2. It performs operations based on the parameters provided.","def test_parallel_lines():
    # Add test cases for parallel_lines
    assert parallel_lines(...) == expected_output"
"def unique_paths(m, n): dp = [[1] * n for _ in range(m)]; for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1]; return dp[m - 1][n - 1]","Finds the number of unique paths in a grid.

This function returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid, where you can only move right or down. It uses dynamic programming to calculate the number of paths.","def test_unique_paths(): assert unique_paths(3, 7) == 28 assert unique_paths(3, 2) == 3"
"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; ","This function 'highest_Power_of_2' performs a specific operation.

The function 'highest_Power_of_2' takes the following parameters: n. It performs operations based on the parameters provided.","def test_highest_Power_of_2():
    # Add test cases for highest_Power_of_2
    assert highest_Power_of_2(...) == expected_output"
def count_characters(s): return len(s),Counts the number of characters in a string.,"def test_count_characters(): assert count_characters(""hello"") == 5 assert count_characters(""world"") == 5 assert count_characters("""") == 0"
"def climb_stairs_with_obstacles(n, obstacles): if obstacles[0]: return 0; dp = [0] * (n + 1); dp[0], dp[1] = 1, 1; for i in range(2, n + 1): if obstacles[i - 1]: dp[i] = 0; else: dp[i] = dp[i - 1] + dp[i - 2]; return dp[n]","Finds the number of ways to climb stairs with obstacles.

This function returns the number of ways to climb n stairs with obstacles, where obstacles[i] is True if step i+1 is blocked. It uses dynamic programming to calculate the possible paths.","def test_climb_stairs_with_obstacles(): assert climb_stairs_with_obstacles(3, [False, False, False]) == 3 assert climb_stairs_with_obstacles(3, [False, True, False]) == 1"
"def round_num(n,m):
    a = (n //m) * m
    b = a + m
    return (b if n - a > b - n else a)","This function 'round_num' performs a specific operation.

The function 'round_num' takes the following parameters: n, m. It performs operations based on the parameters provided.","def test_round_num():
    # Add test cases for round_num
    assert round_num(...) == expected_output"
"def flatten_dict(d): result = {} for k, v in d.items(): if isinstance(v, dict): result.update(flatten_dict(v)) else: result[k] = v return result","Flattens a nested dictionary.

This function returns a flattened dictionary where nested dictionaries are merged into a single level, with keys from nested dictionaries combined with their parent keys.","def test_flatten_dict(): assert flatten_dict({'a': {'b': 1}, 'c': 2}) == {'b': 1, 'c': 2} assert flatten_dict({'x': 10, 'y': {'z': 20}}) == {'x': 10, 'z': 20} assert flatten_dict({}) == {}"
"def find_index_of_element(lst, value): return lst.index(value) if value in lst else -1","Finds the index of an element in a list.

This function returns the index of the first occurrence of the value in the list lst. If the value is not found, it returns -1.","def test_find_index_of_element(): assert find_index_of_element([1, 2, 3], 2) == 1 assert find_index_of_element([1, 2, 3], 4) == -1 assert find_index_of_element([], 1) == -1"
"def length_Of_Last_Word(a): 
    l = 0
    x = a.strip() 
    for i in range(len(x)): 
        if x[i] == "" "": 
            l = 0
        else: 
            l += 1
    return l ","This function 'length_Of_Last_Word' performs a specific operation.

The function 'length_Of_Last_Word' takes the following parameters: a. It performs operations based on the parameters provided.","def test_length_Of_Last_Word():
    # Add test cases for length_Of_Last_Word
    assert length_Of_Last_Word(...) == expected_output"
"def count_occurrences(lst, value): return lst.count(value)","Counts occurrences of a value in a list.

This function takes a list lst and a value value, and returns the number of times the value occurs in the list using the count() method.","def test_count_occurrences(): assert count_occurrences([1, 2, 3, 1], 1) == 2 assert count_occurrences([4, 5, 6], 7) == 0 assert count_occurrences([], 1) == 0"
"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1","This function 'drop_empty' performs a specific operation.

The function 'drop_empty' takes the following parameters: dict1. It performs operations based on the parameters provided.","def test_drop_empty():
    # Add test cases for drop_empty
    assert drop_empty(...) == expected_output"
"def get_key(dict): 
    list = [] 
    for key in dict.keys(): 
        list.append(key)           
    return list","This function 'get_key' performs a specific operation.

The function 'get_key' takes the following parameters: dict. It performs operations based on the parameters provided.","def test_get_key():
    # Add test cases for get_key
    assert get_key(...) == expected_output"
"def sort_list(lst, reverse=False): return sorted(lst, reverse=reverse)","Sorts a list with optional reverse order.

This function returns a sorted version of the input list lst, with an option to sort in descending order if reverse is True.","def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list([3, 1, 2], reverse=True) == [3, 2, 1] assert sort_list([]) == []"
"def frequency(a,x): 
    count = 0  
    for i in a: 
        if i == x: count += 1
    return count ","This function 'frequency' performs a specific operation.

The function 'frequency' takes the following parameters: a, x. It performs operations based on the parameters provided.","def test_frequency():
    # Add test cases for frequency
    assert frequency(...) == expected_output"
"def is_multiple(x, y): return x % y == 0","Checks if one number is a multiple of another.

This function returns True if x is a multiple of y, otherwise False.","def test_is_multiple(): assert is_multiple(10, 2) assert not is_multiple(7, 3) assert is_multiple(20, 5)"
"def set_to_tuple(s):
  t = tuple(sorted(s))
  return (t)","This function 'set_to_tuple' performs a specific operation.

The function 'set_to_tuple' takes the following parameters: s. It performs operations based on the parameters provided.","def test_set_to_tuple():
    # Add test cases for set_to_tuple
    assert set_to_tuple(...) == expected_output"
"def sum_Of_Subarray_Prod(arr,n):
    ans = 0
    res = 0
    i = n - 1
    while (i >= 0):
        incr = arr[i]*(1 + res)
        ans += incr
        res = incr
        i -= 1
    return (ans)","This function 'sum_Of_Subarray_Prod' performs a specific operation.

The function 'sum_Of_Subarray_Prod' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_sum_Of_Subarray_Prod():
    # Add test cases for sum_Of_Subarray_Prod
    assert sum_Of_Subarray_Prod(...) == expected_output"
"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter","This function 'circle_circumference' performs a specific operation.

The function 'circle_circumference' takes the following parameters: r. It performs operations based on the parameters provided.","def test_circle_circumference():
    # Add test cases for circle_circumference
    assert circle_circumference(...) == expected_output"
def remove_non_alpha(s): return ''.join(char for char in s if char.isalpha()),"Removes non-alphabetic characters from a string.

This function returns a new string consisting only of alphabetic characters from the original string s.","def test_remove_non_alpha(): assert remove_non_alpha(""abc123"") == ""abc"" assert remove_non_alpha(""hello!"") == ""hello"" assert remove_non_alpha("""") == """""
"def longest_consecutive_sequence(nums): num_set, longest = set(nums), 0; for num in nums: if num - 1 not in num_set: current_num, current_streak = num, 1; while current_num + 1 in num_set: current_num += 1; current_streak += 1; longest = max(longest, current_streak); return longest","Finds the longest consecutive sequence in an array.

This function returns the length of the longest consecutive sequence of numbers in the input list nums. It uses a set to efficiently check for consecutive numbers.","def test_longest_consecutive_sequence(): assert longest_consecutive_sequence([100, 4, 200, 1, 3, 2]) == 4 assert longest_consecutive_sequence([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9"
def is_list_empty(lst): return len(lst) == 0,"Checks if a list is empty.

This function returns True if the input list lst is empty, otherwise False.",def test_is_list_empty(): assert is_list_empty([]) assert not is_list_empty([1]) assert not is_list_empty([0])
def sum_of_cubes(lst): return sum(x ** 3 for x in lst),Computes the sum of cubes of list elements.,"def test_sum_of_cubes(): assert sum_of_cubes([1, 2, 3]) == 36 assert sum_of_cubes([2, 3]) == 35 assert sum_of_cubes([]) == 0"
"def word_ladder(begin_word, end_word, word_list): from collections import deque; word_list = set(word_list); if end_word not in word_list: return 0; queue = deque([(begin_word, 1)]); while queue: word, length = queue.popleft(); if word == end_word: return length; for i in range(len(word)): for c in 'abcdefghijklmnopqrstuvwxyz': new_word = word[:i] + c + word[i + 1:]; if new_word in word_list: word_list.remove(new_word); queue.append((new_word, length + 1)); return 0","Finds the length of the shortest transformation sequence from begin_word to end_word.

This function returns the length of the shortest transformation sequence from begin_word to end_word, where each transformation must change exactly one letter and the resulting word must be in the word list.","def test_word_ladder(): assert word_ladder(""hit"", ""cog"", [""hot"", ""dot"", ""dog"", ""lot"", ""log"", ""cog""]) == 5 assert word_ladder(""hit"", ""cog"", [""hot"", ""dot"", ""dog"", ""lot"", ""log""]) == 0"
"def min_cost_tickets(days, costs): dp = [0] * (days[-1] + 1); day_set = set(days); for i in range(1, len(dp)): if i not in day_set: dp[i] = dp[i - 1]; else: dp[i] = min(dp[i - 1] + costs[0], dp[max(0, i - 7)] + costs[1], dp[max(0, i - 30)] + costs[2]); return dp[-1]","Finds the minimum cost to cover all travel days with tickets.

This function returns the minimum cost to cover all travel days using tickets with durations of 1, 7, and 30 days. It uses dynamic programming to compute the minimum cost for each day.","def test_min_cost_tickets(): assert min_cost_tickets([1, 4, 6, 7, 8, 20], [2, 7, 15]) == 11 assert min_cost_tickets([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], [2, 7, 15]) == 17"
"def split_lines(s):  return s.split('\n')print(""Original string:"")print(""This\nis a\nmultiline\nstring.\n"")print(""Split the said multiline string into a list of lines:"")print(split_lines('This\nis a\nmultiline\nstring.\n'))","""""""
Brief Description:
------------------
split_lines function performs a specific operation as described below.

Extended Description:
---------------------
This function, `split_lines`, takes 1 parameters: s. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s : type
    Description of s.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> split_lines(value)
Expected output
""""""","import unittest

class TestSplit_lines(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = split_lines(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = split_lines(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def filter_data(students):    result = {k: s for k, s in students.items() if s[0] >=6.0 and s[1] >=70}    return result     students = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}print(""Original Dictionary:"")print(students)print(""\nHeight > 6ft and Weight> 70kg:"")print(filter_data(students))","""""""
Brief Description:
------------------
filter_data function performs a specific operation as described below.

Extended Description:
---------------------
This function, `filter_data`, takes 1 parameters: students. It is designed to perform a certain task using these parameters.

Parameters:
-----------
students : type
    Description of students.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> filter_data(value)
Expected output
""""""","import unittest

class TestFilter_data(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = filter_data(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = filter_data(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def two_sum(nums, target): seen = {}; for i, num in enumerate(nums): diff = target - num; if diff in seen: return [seen[diff], i]; seen[num] = i","Finds indices of two numbers that add up to the target.

This function returns the indices of the two numbers in the list nums that add up to the given target. It uses a hash map for efficient lookup.","def test_two_sum(): assert two_sum([2, 7, 11, 15], 9) == [0, 1]"
"def merge_dicts(dict1, dict2): result = dict1.copy() result.update(dict2) return result","Merges two dictionaries.

This function takes two dictionaries dict1 and dict2 and merges them into one dictionary. If there are duplicate keys, the values from dict2 will overwrite those from dict1.","def test_merge_dicts(): assert merge_dicts({""a"": 1}, {""b"": 2}) == {""a"": 1, ""b"": 2} assert merge_dicts({""a"": 1}, {""a"": 3}) == {""a"": 3} assert merge_dicts({}, {}) == {}"
"def calculate_area_of_rectangle(width, height): return width * height","Calculates the area of a rectangle.

This function returns the area of a rectangle given its width and height.","def test_calculate_area_of_rectangle(): assert calculate_area_of_rectangle(2, 3) == 6 assert calculate_area_of_rectangle(5, 4) == 20 assert calculate_area_of_rectangle(7, 2) == 14"
def count_words(s): return len(s.split()),"Counts the words in a string.

 This function takes a string""
s
and returns the number of words it contains by splitting the string by whitespace and counting the resulting substrings."," def test_count_words(): assert count_words(""Hello world"") == 2 assert count_words("""") == 0 assert count_words(""one two three"") == 3"
"def merge_two_sorted_arrays(nums1, m, nums2, n): while m > 0 and n > 0: if nums1[m - 1] > nums2[n - 1]: nums1[m + n - 1] = nums1[m - 1]; m -= 1; else: nums1[m + n - 1] = nums2[n - 1]; n -= 1; if n > 0: nums1[:n] = nums2[:n]","Merges two sorted arrays into one.

This function merges two sorted arrays, nums1 and nums2, in-place. The result is stored in nums1, which has enough space to accommodate both arrays.","def test_merge_two_sorted_arrays(): nums1 = [1, 2, 3, 0, 0, 0]; merge_two_sorted_arrays(nums1, 3, [2, 5, 6], 3); assert nums1 == [1, 2, 2, 3, 5, 6]"
"def get_sublist(lst, start, end): return lst[start:end]","Returns a sublist from a list.

This function returns a sublist of the list lst, starting at index start and ending at index end (exclusive).","def test_get_sublist(): assert get_sublist([1, 2, 3, 4], 1, 3) == [2, 3] assert get_sublist([1], 0, 1) == [1] assert get_sublist([], 0, 1) == []"
"def min_max(lst): return (min(lst), max(lst)) if lst else (None, None)","Finds the minimum and maximum values in a list.

This function returns a tuple containing the minimum and maximum values of the list lst. If the list is empty, it returns (None, None).","def test_min_max(): assert min_max([1, 2, 3]) == (1, 3) assert min_max([10]) == (10, 10) assert min_max([]) == (None, None)"
def group_anagrams(strs): from collections import defaultdict; groups = defaultdict(list); for s in strs: key = ''.join(sorted(s)); groups[key].append(s); return list(groups.values()),"Groups anagrams from a list of strings.

This function returns a list of lists, where each sublist contains strings from the input strs that are anagrams of each other. It uses a hash map to group the strings by their sorted character sequence.","def test_group_anagrams(): assert group_anagrams([""eat"", ""tea"", ""tan"", ""ate"", ""nat"", ""bat""]) == [[""eat"", ""tea"", ""ate""], [""tan"", ""nat""], [""bat""]]"
"def check_AutomorphicNumber(num):  sqr = num * num  if (num > 0):    if (num % 10 != sqr % 10):      return -1    else:      check_AutomorphicNumber(num // 10)      return 0  return 0num=int(input(""Enter a number:""))if (check_AutomorphicNumber(num) == 0):  print(""It is an Automorphic Number."")else:  print(""It is not an Automorphic Number."")","""""""
Brief Description:
------------------
check_AutomorphicNumber function performs a specific operation as described below.

Extended Description:
---------------------
This function, `check_AutomorphicNumber`, takes 1 parameters: num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> check_AutomorphicNumber(value)
Expected output
""""""","import unittest

class TestCheck_automorphicnumber(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = check_AutomorphicNumber(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = check_AutomorphicNumber(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_char(string,char):
 count = 0
 for i in range(len(string)):
    if(string[i] == char):
        count = count + 1
 return count","This function 'count_char' performs a specific operation.

The function 'count_char' takes the following parameters: string, char. It performs operations based on the parameters provided.","def test_count_char():
    # Add test cases for count_char
    assert count_char(...) == expected_output"
"def find_min(nums): left, right = 0, len(nums) - 1; while left < right: mid = (left + right) // 2; if nums[mid] > nums[right]: left = mid + 1; else: right = mid; return nums[left]","Finds the minimum element in a rotated sorted array.

This function returns the minimum element in the input rotated sorted array nums. It uses binary search to find the pivot where the array rotation occurs.","def test_find_min(): assert find_min([3, 4, 5, 1, 2]) == 1 assert find_min([4, 5, 6, 7, 0, 1, 2]) == 0"
"def min_length(list1):
   min_length = min(len(x) for x in  list1 )  
   min_list = min((x) for x in   list1)
   return(min_length, min_list)     ","This function 'min_length' performs a specific operation.

The function 'min_length' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_min_length():
    # Add test cases for min_length
    assert min_length(...) == expected_output"
"def valid_parentheses(s): stack = []; mapping = {')': '(', '}': '{', ']': '['}; for char in s: if char in mapping: top_element = stack.pop() if stack else '#'; if mapping[char] != top_element: return False; else: stack.append(char); return not stack",Checks if parentheses are valid.,"def test_valid_parentheses(): assert valid_parentheses(""()"") assert valid_parentheses(""()[]{}"") assert not valid_parentheses(""(]"")"
"def product_except_self(nums): result = [1] * len(nums); left = 1; for i in range(len(nums)): result[i] = left; left *= nums[i]; right = 1; for i in range(len(nums) - 1, -1, -1): result[i] *= right; right *= nums[i]; return result","Returns product of array except itself.

This function returns a new list where each element at index i is the product of all elements in the input list nums except the one at i, without using division.","def test_product_except_self(): assert product_except_self([1, 2, 3, 4]) == [24, 12, 8, 6] assert product_except_self([0, 1, 2, 3]) == [6, 0, 0, 0] assert product_except_self([1]) == [1]"
"def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1","This function 'get_Odd_Occurrence' performs a specific operation.

The function 'get_Odd_Occurrence' takes the following parameters: arr, arr_size. It performs operations based on the parameters provided.","def test_get_Odd_Occurrence():
    # Add test cases for get_Odd_Occurrence
    assert get_Odd_Occurrence(...) == expected_output"
"def find_odd_occurring(alist):
    """"""Return the element that occurs odd number of times in alist.

    alist is a list in which all elements except one element occurs an even
    number of times.
    """"""
    ans = 0

    for element in alist:
        ans ^= element

    return ans


alist = input('Enter the list: ').split()
alist = [int(i) for i in alist]
ans = find_odd_occurring(alist)
print('The element that occurs odd number of times:', ans)","""""""
Brief Description:
------------------
find_odd_occurring function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_odd_occurring`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_odd_occurring(value)
Expected output
""""""","import unittest

class TestFind_odd_occurring(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_odd_occurring(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_odd_occurring(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def multiply_list_elements(lst, factor): return [x * factor for x in lst]","Multiplies each element in a list by a factor.

This function returns a new list where each element from the input list lst is multiplied by the given factor.","def test_multiply_list_elements(): assert multiply_list_elements([1, 2, 3], 2) == [2, 4, 6] assert multiply_list_elements([4, 5], 0) == [0, 0] assert multiply_list_elements([], 3) == []"
"def collatz(n):
    while n > 1:
        print(n, end=' ')
        if (n % 2):
            # n is odd
            n = 3*n + 1
        else:
            # n is even
            n = n//2
    print(1, end='')


n = int(input('Enter n: '))
print('Sequence: ', end='')
collatz(n)","""""""
Brief Description:
------------------
collatz function performs a specific operation as described below.

Extended Description:
---------------------
This function, `collatz`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> collatz(value)
Expected output
""""""","import unittest

class TestCollatz(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = collatz(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = collatz(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def flatten_dict(d): return {k: v for subdict in d.values() for k, v in subdict.items()}","Flattens a dictionary of dictionaries.

This function returns a single dictionary containing all key-value pairs from the nested dictionaries within the input dictionary d.","def test_flatten_dict(): assert flatten_dict({'a': {'x': 1}, 'b': {'y': 2}}) == {'x': 1, 'y': 2} assert flatten_dict({'a': {'a1': 1}, 'b': {'b1': 2}}) == {'a1': 1, 'b1': 2} assert flatten_dict({}) == {}"
def sum_of_square_roots(lst): return sum(x ** 0.5 for x in lst if x >= 0),"Sums the square roots of non-negative numbers in a list.

This function returns the sum of the square roots of all non-negative numbers in the input list lst.","def test_sum_of_square_roots(): assert sum_of_square_roots([1, 4, 9]) == 6.0 assert sum_of_square_roots([-1, -2]) == 0.0 assert sum_of_square_roots([0, 16]) == 4.0"
"def decapitalize_first_letter(s, upper_rest = False):  return ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])]) print(decapitalize_first_letter('Java Script'))print(decapitalize_first_letter('Python'))","""""""
Brief Description:
------------------
decapitalize_first_letter function performs a specific operation as described below.

Extended Description:
---------------------
This function, `decapitalize_first_letter`, takes 2 parameters: s,  upper_rest = False. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s : type
    Description of s.
upper_rest = False : type
    Description of upper_rest = False.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> decapitalize_first_letter(value, value)
Expected output
""""""","import unittest

class TestDecapitalize_first_letter(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = decapitalize_first_letter(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = decapitalize_first_letter(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_element(lst, item): return [x for x in lst if x != item]","Removes all occurrences of an item from a list.

This function returns a new list with all instances of item removed from the input list lst.","def test_remove_element(): assert remove_element([1, 2, 2, 3], 2) == [1, 3] assert remove_element(['a', 'b', 'a'], 'a') == ['b'] assert remove_element([], 1) == []"
"def get_substring(s, start, end): return s[start:end]","Extracts a substring from a string.

This function returns a substring from the input string s, starting at index start and ending at index end.","def test_get_substring(): assert get_substring(""hello"", 1, 4) == ""ell"" assert get_substring(""world"", 0, 5) == ""world"" assert get_substring(""test"", 2, 2) == """""
def get_unique_values(d): return list(set(d.values())),"Gets unique values from a dictionary.

This function returns a list of unique values from the input dictionary d.","def test_get_unique_values(): assert get_unique_values({'a': 1, 'b': 2}) == [1, 2] assert get_unique_values({'x': 10, 'y': 10}) == [10] assert get_unique_values({'a': 1}) == [1]"
"def get_first_n_elements(lst, n): return lst[:n]","Gets the first n elements from a list.

This function returns a new list containing the first n elements from the input list lst.","def test_get_first_n_elements(): assert get_first_n_elements([1, 2, 3, 4], 2) == [1, 2] assert get_first_n_elements([5, 6, 7], 5) == [5, 6, 7] assert get_first_n_elements([], 1) == []"
def check_if_palindrome(s): s = ''.join(c.lower() for c in s if c.isalnum()); return s == s[::-1],"Checks if a string is a palindrome, ignoring non-alphanumeric characters.

This function returns True if the input string s is a palindrome, ignoring non-alphanumeric characters and case, and False otherwise. It first filters out non-alphanumeric characters, then checks if the filtered string reads the same forwards and backwards.","def test_check_if_palindrome(): assert check_if_palindrome(""A man, a plan, a canal: Panama"") assert not check_if_palindrome(""race a car"")"
def multiply_list_elements(lst): result = 1 for x in lst: result *= x return result,"Multiplies all elements in a list.

This function returns the product of all the elements in the list lst. If the list is empty, it returns 1.","def test_multiply_list_elements(): assert multiply_list_elements([2, 3, 4]) == 24 assert multiply_list_elements([5]) == 5 assert multiply_list_elements([]) == 1"
def sort_list(lst): return sorted(lst),"Sorts a list in ascending order.

This function returns a new list with the elements of the input list lst sorted in ascending order.","def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list([]) == [] assert sort_list([5]) == [5]"
"def parallelogram_area(b,h):
  area=b*h
  return area","This function 'parallelogram_area' performs a specific operation.

The function 'parallelogram_area' takes the following parameters: b, h. It performs operations based on the parameters provided.","def test_parallelogram_area():
    # Add test cases for parallelogram_area
    assert parallelogram_area(...) == expected_output"
def is_odd(n): return n % 2 != 0,"Checks if a number is odd.

This function returns True if n is an odd number, and False otherwise.",def test_is_odd(): assert is_odd(3) assert not is_odd(4) assert is_odd(1)
"import sys 
def solve(a,n):   
    mx = -sys.maxsize - 1
    for j in range(1,n):  
        if (mx > a[j]):  
            return False  
        mx = max(mx,a[j - 1])    
    return True","This function 'solve' performs a specific operation.

The function 'solve' takes the following parameters: a, n. It performs operations based on the parameters provided.","def test_solve():
    # Add test cases for solve
    assert solve(...) == expected_output"
"def printValues():
	l = list()
	for i in range(1,31):
		l.append(i**2)
	print(l)
	","""""""
Brief Description:
------------------
printValues function performs a specific operation as described below.

Extended Description:
---------------------
This function, `printValues`, takes 0 parameters: none. It is designed to perform a certain task using these parameters.

Parameters:
-----------

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> printValues()
Expected output
""""""","import unittest

class TestPrintvalues(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = printValues()
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = printValues()
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def get_range(start, end): return list(range(start, end + 1))","Generates a list of integers in a range.

This function returns a list of integers starting from start to end, inclusive.","def test_get_range(): assert get_range(1, 3) == [1, 2, 3] assert get_range(5, 5) == [5] assert get_range(3, 1) == [3, 2, 1]"
"def calculate_difference(x, y): return x - y","Calculates the difference between two numbers.

This function returns the result of subtracting y from x.","def test_calculate_difference(): assert calculate_difference(5, 3) == 2 assert calculate_difference(10, 10) == 0 assert calculate_difference(7, 9) == -2"
"def flatten_list(nested_list): result = []; def flatten(sublist): for item in sublist: if isinstance(item, list): flatten(item); else: result.append(item); flatten(nested_list); return result","Flattens a nested list.

This function takes a nested list and returns a flattened version of it, where all nested lists are recursively unpacked into a single list.","def test_flatten_list(): assert flatten_list([1, [2, [3, 4], 5], 6]) == [1, 2, 3, 4, 5, 6]"
"def is_abundant_number(n): return sum(i for i in range(1, n) if n % i == 0) > n","Checks if a number is abundant.

This function returns True if the sum of the divisors of the number n (excluding n itself) is greater than n, indicating that n is an abundant number.",def test_is_abundant_number(): assert is_abundant_number(12) assert not is_abundant_number(8) assert is_abundant_number(18)
"def rob(nums): if not nums: return 0; if len(nums) <= 2: return max(nums); prev1, prev2 = 0, 0; for num in nums: prev1, prev2 = max(prev2 + num, prev1), prev1; return prev1","Maximizes the amount of money that can be robbed without robbing two adjacent houses.

This function returns the maximum amount of money that can be robbed from the list of houses nums, where adjacent houses cannot both be robbed. It uses dynamic programming to track loot amounts.","def test_rob(): assert rob([1, 2, 3, 1]) == 4 assert rob([2, 7, 9, 3, 1]) == 12"
"def find_minimum(lst): return min(lst, default=None)",Finds the minimum value in a list.,"def test_find_minimum(): assert find_minimum([1, 2, 3]) == 1 assert find_minimum([-1, -2]) == -2 assert find_minimum([]) == None"
"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count","This function 'freq_count' performs a specific operation.

The function 'freq_count' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_freq_count():
    # Add test cases for freq_count
    assert freq_count(...) == expected_output"
def find_second_largest(lst): return sorted(set(lst))[-2] if len(set(lst)) > 1 else None,"Finds the second largest value in a list.

This function returns the second largest unique value from the input list lst. If there are fewer than two unique values, it returns None.","def test_find_second_largest(): assert find_second_largest([1, 2, 3]) == 2 assert find_second_largest([7, 4, 4, 6]) == 6 assert find_second_largest([1, 1]) is None"
def is_odd(n): return n % 2 != 0,"Checks if a number is odd.

This function returns True if the input number n is odd, otherwise False.",def test_is_odd(): assert is_odd(1) assert not is_odd(2) assert is_odd(13)
def remove_whitespace(s): return ''.join(s.split()),"Removes all whitespace from a string.

This function returns the input string s with all whitespace characters removed.","def test_remove_whitespace(): assert remove_whitespace("" h e llo "") == ""hello"" assert remove_whitespace("" "") == """" assert remove_whitespace(""a b c"") == ""abc"""
"def max_path_sum(root): def helper(node): if not node: return (float('-inf'), 0); left_max, left_single = helper(node.left); right_max, right_single = helper(node.right); max_single = max(left_single + node.val, right_single + node.val, node.val); max_top = max(max_single, left_single + node.val + right_single); return (max(max_top, left_max, right_max), max_single); return helper(root)[0]","Finds the maximum path sum in a binary tree.

This function returns the maximum sum of any path in the binary tree rooted at root. A path can start and end at any node, and it includes at least one node.","def test_max_path_sum(): root = TreeNode(1, TreeNode(2), TreeNode(3)); assert max_path_sum(root) == 6 root = TreeNode(-10, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert max_path_sum(root) == 42"
def sum_of_odd_numbers(lst): return sum(x for x in lst if x % 2 != 0),"Sums the odd numbers in a list.

This function takes a list of integers lst and returns the sum of all odd numbers in the list.","def test_sum_of_odd_numbers(): assert sum_of_odd_numbers([1, 2, 3, 4]) == 4 assert sum_of_odd_numbers([6, 8, 10]) == 0 assert sum_of_odd_numbers([7, 7, 7]) == 21"
"def int_to_roman(num): val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]; syb = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]; roman = """"; for i in range(len(val)): while num >= val[i]: roman += syb[i]; num -= val[i]; return roman","Converts an integer to a Roman numeral.

This function converts the input integer num to its corresponding Roman numeral. It iterates through predefined values and symbols to construct the Roman numeral.","def test_int_to_roman(): assert int_to_roman(3) == ""III"" assert int_to_roman(58) == ""LVIII"" assert int_to_roman(1994) == ""MCMXCIV"""
"def is_prime(n): if n < 2: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True","Checks if a number is prime.

This function checks whether a number n is prime. A prime number is greater than 1 and divisible only by 1 and itself.",def test_is_prime(): assert is_prime(7) assert not is_prime(4) assert not is_prime(1)
"def subarray_sum_equals_k(nums, k): count = 0; prefix_sum = 0; prefix_sum_count = {0: 1}; for num in nums: prefix_sum += num; count += prefix_sum_count.get(prefix_sum - k, 0); prefix_sum_count[prefix_sum] = prefix_sum_count.get(prefix_sum, 0) + 1; return count","Finds the number of subarrays that sum to k.

This function returns the number of contiguous subarrays in the input list nums that sum to k. It uses a hash map to track the prefix sum and its frequency to efficiently count valid subarrays.","def test_subarray_sum_equals_k(): assert subarray_sum_equals_k([1, 1, 1], 2) == 2 assert subarray_sum_equals_k([1, 2, 3], 3) == 2"
def get_even_numbers(lst): return [x for x in lst if x % 2 == 0],"Extracts even numbers from a list.

This function returns a list of even numbers from the input list lst.","def test_get_even_numbers(): assert get_even_numbers([1, 2, 3]) == [2] assert get_even_numbers([2, 4, 6]) == [2, 4, 6] assert get_even_numbers([1, 3, 5, 7]) == []"
"import re
def remove_parenthesis(items):
 for item in items:
    return (re.sub(r"" ?\([^)]+\)"", """", item))","This function 'remove_parenthesis' performs a specific operation.

The function 'remove_parenthesis' takes the following parameters: items. It performs operations based on the parameters provided.","def test_remove_parenthesis():
    # Add test cases for remove_parenthesis
    assert remove_parenthesis(...) == expected_output"
"def combination_sum_iii(k, n): res = []; def backtrack(start, target, path): if len(path) == k and target == 0: res.append(path[:]); return; for i in range(start, 10): if target - i < 0: break; backtrack(i + 1, target - i, path + [i]); backtrack(1, n, []); return res","Finds all valid combinations of k numbers that sum to n.

This function returns all valid combinations of k numbers that sum to n, where only numbers 1 through 9 can be used, and each combination should be unique. It uses backtracking to generate the combinations.","def test_combination_sum_iii(): assert combination_sum_iii(3, 7) == [[1, 2, 4]] assert combination_sum_iii(3, 9) == [[1, 2, 6], [1, 3, 5], [2, 3, 4]]"
def factorial(n): return 1 if n == 0 else n * factorial(n - 1),Computes the factorial of a number.,def test_factorial(): assert factorial(0) == 1 assert factorial(5) == 120 assert factorial(3) == 6
"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False","This function '__init__' performs a specific operation.

The function '__init__' takes the following parameters: self, data. It performs operations based on the parameters provided.","def test___init__():
    # Add test cases for __init__
    assert __init__(...) == expected_output"
"def permute(nums): result = []; def backtrack(start=0): if start == len(nums): result.append(nums[:]); for i in range(start, len(nums)): nums[start], nums[i] = nums[i], nums[start]; backtrack(start + 1); nums[start], nums[i] = nums[i], nums[start]; backtrack(); return result","Generates all permutations of a list.

This function returns all possible permutations of the input list nums using a backtracking approach to generate permutations.","def test_permute(): assert permute([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"
def square_of_sum(n): return sum(range(n + 1)) ** 2,"Computes the square of the sum of the first n natural numbers.

This function computes the sum of the first n natural numbers and returns the square of the result.",def test_square_of_sum(): assert square_of_sum(3) == 36 assert square_of_sum(1) == 1 assert square_of_sum(0) == 0
"def sum_difference(n):
    sumofsquares = 0
    squareofsum = 0
    for num in range(1, n+1):
        sumofsquares += num * num
        squareofsum += num
    squareofsum = squareofsum ** 2
    return squareofsum - sumofsquares","This function 'sum_difference' performs a specific operation.

The function 'sum_difference' takes the following parameters: n. It performs operations based on the parameters provided.","def test_sum_difference():
    # Add test cases for sum_difference
    assert sum_difference(...) == expected_output"
def sort_list(lst): return sorted(lst),"Sorts a list.

This function returns a new list with elements from the input list lst sorted in ascending order.","def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list([10, 5, 8]) == [5, 8, 10] assert sort_list([]) == []"
"def int_to_roman( num):
        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]
        syb = [""M"", ""CM"", ""D"", ""CD"",""C"", ""XC"", ""L"", ""XL"",""X"", ""IX"", ""V"", ""IV"",""I""]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num","This function 'int_to_roman' performs a specific operation.

The function 'int_to_roman' takes the following parameters: num. It performs operations based on the parameters provided.","def test_int_to_roman():
    # Add test cases for int_to_roman
    assert int_to_roman(...) == expected_output"
"def remove_all_occurrences(lst, item): return [x for x in lst if x != item]","Removes all occurrences of an item from a list.

This function returns a new list with all occurrences of the input item removed from the input list lst.","def test_remove_all_occurrences(): assert remove_all_occurrences([1, 2, 2, 3], 2) == [1, 3] assert remove_all_occurrences([1, 1, 1], 1) == [] assert remove_all_occurrences([], 1) == []"
"def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False","This function 'all_Bits_Set_In_The_Given_Range' performs a specific operation.

The function 'all_Bits_Set_In_The_Given_Range' takes the following parameters: n, l, r. It performs operations based on the parameters provided.","def test_all_Bits_Set_In_The_Given_Range():
    # Add test cases for all_Bits_Set_In_The_Given_Range
    assert all_Bits_Set_In_The_Given_Range(...) == expected_output"
def isPalindrome(string):	left_pos = 0	right_pos = len(string) - 1		while right_pos >= left_pos:		if not string[left_pos] == string[right_pos]:			return False		left_pos += 1		right_pos -= 1	return Trueprint(isPalindrome('aza')) ,"""""""
Brief Description:
------------------
isPalindrome function performs a specific operation as described below.

Extended Description:
---------------------
This function, `isPalindrome`, takes 1 parameters: string. It is designed to perform a certain task using these parameters.

Parameters:
-----------
string : type
    Description of string.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> isPalindrome(value)
Expected output
""""""","import unittest

class TestIspalindrome(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = isPalindrome(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = isPalindrome(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def binary_search(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; elif nums[mid] < target: left = mid + 1; else: right = mid - 1; return -1","Performs binary search on a sorted list.

This function returns the index of target in the sorted input list nums. If the target is not found, it returns -1. It uses binary search with a time complexity of O(log n).","def test_binary_search(): assert binary_search([1, 2, 3, 4, 5], 3) == 2 assert binary_search([1, 2, 3, 4, 5], 6) == -1"
def count_words(s): return len(s.split()),"Counts words in a string.

This function returns the number of words in the input string s, where words are separated by spaces.","def test_count_words(): assert count_words(""hello world"") == 2 assert count_words(""is fun"") == 3 assert count_words("""") == 0"
def is_odd_length(s): return len(s) % 2 != 0,"Checks if the length of a string is odd.

This function returns True if the length of the input string s is odd and False otherwise.","def test_is_odd_length(): assert is_odd_length(""hello"") assert not is_odd_length(""world"") assert is_odd_length(""python"")"
"def get_perrin(n):
  if (n == 0):
    return 3
  if (n == 1):
    return 0
  if (n == 2):
    return 2 
  return get_perrin(n - 2) + get_perrin(n - 3)","This function 'get_perrin' performs a specific operation.

The function 'get_perrin' takes the following parameters: n. It performs operations based on the parameters provided.","def test_get_perrin():
    # Add test cases for get_perrin
    assert get_perrin(...) == expected_output"
"def nth_super_ugly_number(n, primes): ugly_numbers = [1]; indices = [0] * len(primes); next_multiples = list(primes); for _ in range(1, n): next_ugly = min(next_multiples); ugly_numbers.append(next_ugly); for i in range(len(primes)): if next_multiples[i] == next_ugly: indices[i] += 1; next_multiples[i] = primes[i] * ugly_numbers[indices[i]]; return ugly_numbers[-1]","Finds the n-th super ugly number.

This function returns the n-th super ugly number, where super ugly numbers are positive integers whose prime factors are in the input list primes. It uses dynamic programming and a min-heap to generate the sequence.","def test_nth_super_ugly_number(): assert nth_super_ugly_number(12, [2, 7, 13, 19]) == 32 assert nth_super_ugly_number(1, [2, 3, 5]) == 1"
"def get_first_n_chars(s, n): return s[:n]","Gets the first n characters from a string.

This function returns a substring consisting of the first n characters of the input string s.","def test_get_first_n_chars(): assert get_first_n_chars(""hello"", 3) == ""hel"" assert get_first_n_chars(""world"", 5) == ""world"" assert get_first_n_chars(""test"", 10) == ""test"""
"def l_strs_to_l_chars(lst):    result = [i for element in lst for i in element]    return resultcolors = [""red"", ""white"", ""a"", ""b"", ""black"", ""f""]print(""Original list:"")print(colors)print(""\nConvert the said list of strings and characters to a single list of characters:"")print(l_strs_to_l_chars(colors))","""""""
Brief Description:
------------------
l_strs_to_l_chars function performs a specific operation as described below.

Extended Description:
---------------------
This function, `l_strs_to_l_chars`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> l_strs_to_l_chars(value)
Expected output
""""""","import unittest

class TestL_strs_to_l_chars(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = l_strs_to_l_chars(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = l_strs_to_l_chars(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_indices(lst, value): return [i for i, x in enumerate(lst) if x == value]","Finds indices of a value in a list.

This function returns a list of indices where the specified value appears in the input list lst.","def test_find_indices(): assert find_indices([1, 2, 3, 2], 2) == [1, 3] assert find_indices(['a', 'b', 'a'], 'a') == [0, 2] assert find_indices([1, 1, 1], 2) == []"
def char_count(s): return {char: s.count(char) for char in set(s)},"Counts character occurrences in a string.

This function returns a dictionary where the keys are characters from the string s, and the values are the counts of those characters.","def test_char_count(): assert char_count(""hello"") == {'h': 1, 'e': 1, 'l': 2, 'o': 1} assert char_count(""aaa"") == {'a': 3} assert char_count("""") == {}"
"def is_triangleexists(a,b,c): 
    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): 
        if((a + b)>= c or (b + c)>= a or (a + c)>= b): 
            return True 
        else:
            return False
    else:
        return False","This function 'is_triangleexists' performs a specific operation.

The function 'is_triangleexists' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_is_triangleexists():
    # Add test cases for is_triangleexists
    assert is_triangleexists(...) == expected_output"
