python_function,Description,groundtruth_unit_test
"def find_longest_conseq_subseq(arr, n): 
	ans = 0
	count = 0
	arr.sort() 
	v = [] 
	v.append(arr[0]) 
	for i in range(1, n): 
		if (arr[i] != arr[i - 1]): 
			v.append(arr[i]) 
	for i in range(len(v)): 
		if (i > 0 and v[i] == v[i - 1] + 1): 
			count += 1
		else: 
			count = 1
		ans = max(ans, count) 
	return ans ","This function 'find_longest_conseq_subseq' performs a specific operation.

The function 'find_longest_conseq_subseq' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_find_longest_conseq_subseq():
    # Add test cases for find_longest_conseq_subseq
    assert find_longest_conseq_subseq(...) == expected_output"
"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] == arr[j]): 
                cnt += 1; 
    return cnt; ","This function 'count_Pairs' performs a specific operation.

The function 'count_Pairs' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_count_Pairs():
    # Add test cases for count_Pairs
    assert count_Pairs(...) == expected_output"
"def cut_rod(p, n):
    """"""Take a list p of prices and the rod length n and return lists r and s.
    r[i] is the maximum revenue that you can get and s[i] is the length of the
    first piece to cut from a rod of length i.""""""
    # r[i] is the maximum revenue for rod length i
    # r[i] = -1 means that r[i] has not been calculated yet
    r = [-1]*(n + 1)
    r[0] = 0

    # s[i] is the length of the initial cut needed for rod length i
    # s[0] is not needed
    s = [-1]*(n + 1)

    for i in range(1, n + 1):
        q = -1
        for j in range(1, i + 1):
            temp = p[j] + r[i - j]
            if q < temp:
                q = temp
                s[i] = j
        r[i] = q

    return r, s


n = int(input('Enter the length of the rod in inches: '))

# p[i] is the price of a rod of length i
# p[0] is not needed, so it is set to None
p = [None]
for i in range(1, n + 1):
    price = input('Enter the price of a rod of length {} in: '.format(i))
    p.append(int(price))

r, s = cut_rod(p, n)
print('The maximum revenue that can be obtained:', r[n])
print('The rod needs to be cut into length(s) of ', end='')
while n > 0:
    print(s[n], end=' ')
    n -= s[n]","""""""
Brief Description:
------------------
cut_rod function performs a specific operation as described below.

Extended Description:
---------------------
This function, `cut_rod`, takes 2 parameters: p,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
p : type
    Description of p.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> cut_rod(value, value)
Expected output
""""""","import unittest

class TestCut_rod(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = cut_rod(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = cut_rod(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_sublist(lst, sublist): return all(item in lst for item in sublist)","Checks if one list is a sublist of another.

This function returns True if all elements of sublist are present in the list lst, and False otherwise.","def test_is_sublist(): assert is_sublist([1, 2, 3, 4], [2, 3]) assert not is_sublist([1, 2, 3], [4]) assert is_sublist([], [])"
"def count_Rotation(arr,n):   
    for i in range (1,n): 
        if (arr[i] < arr[i - 1]): 
            return i  
    return 0","This function 'count_Rotation' performs a specific operation.

The function 'count_Rotation' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_count_Rotation():
    # Add test cases for count_Rotation
    assert count_Rotation(...) == expected_output"
"import re
def find_long_word(text):
  return (re.findall(r""\b\w{5}\b"", text))","This function 'find_long_word' performs a specific operation.

The function 'find_long_word' takes the following parameters: text. It performs operations based on the parameters provided.","def test_find_long_word():
    # Add test cases for find_long_word
    assert find_long_word(...) == expected_output"
"def find_angle(a,b):
 c = 180 - (a + b)
 return c
","This function 'find_angle' performs a specific operation.

The function 'find_angle' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_find_angle():
    # Add test cases for find_angle
    assert find_angle(...) == expected_output"
"def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ","This function 'odd_Equivalent' performs a specific operation.

The function 'odd_Equivalent' takes the following parameters: s, n. It performs operations based on the parameters provided.","def test_odd_Equivalent():
    # Add test cases for odd_Equivalent
    assert odd_Equivalent(...) == expected_output"
def longest_common_prefix(strs): if not strs: return ""; prefix = strs[0]; for s in strs[1:]: while not s.startswith(prefix): prefix = prefix[:-1]; if not prefix: return ""; return prefix,"Finds the longest common prefix among a list of strings.

This function returns the longest common prefix among the input list strs. If there is no common prefix, it returns an empty string.","def test_longest_common_prefix(): assert longest_common_prefix([""flower"",""flow"",""flight""]) == ""fl"" assert longest_common_prefix([""dog"",""racecar"",""car""]) == """""
"def insert_sting_middle(str, word):	return str[:2] + word + str[2:]print(insert_sting_middle('[[]]', 'Python'))print(insert_sting_middle('{{}}', 'PHP'))print(insert_sting_middle('<<>>', 'HTML'))","""""""
Brief Description:
------------------
insert_sting_middle function performs a specific operation as described below.

Extended Description:
---------------------
This function, `insert_sting_middle`, takes 2 parameters: str,  word. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.
word : type
    Description of word.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> insert_sting_middle(value, value)
Expected output
""""""","import unittest

class TestInsert_sting_middle(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = insert_sting_middle(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = insert_sting_middle(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_points_on_line(points): from collections import defaultdict; def gcd(a, b): while b: a, b = b, a % b; return a; max_points = 0; for i in range(len(points)): slope_count = defaultdict(int); duplicates = 1; for j in range(i + 1, len(points)): dx, dy = points[j][0] - points[i][0], points[j][1] - points[i][1]; if dx == 0 and dy == 0: duplicates += 1; else: g = gcd(dx, dy); slope = (dy // g, dx // g); slope_count[slope] += 1; max_points = max(max_points, max(slope_count.values(), default=0) + duplicates); return max_points","Finds the maximum number of points that lie on the same straight line.

This function returns the maximum number of points from the input list points that lie on the same straight line. It uses a hash map to count slopes between points and finds the greatest number of collinear points.","def test_max_points_on_line(): assert max_points_on_line([[1, 1], [2, 2], [3, 3]]) == 3 assert max_points_on_line([[1, 1], [3, 2], [5, 3], [4, 1], [2, 3], [1, 4]]) == 4"
"def access_elements(nums, list_index):    result = [nums[i] for i in list_index]    return resultnums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]print (""Original list:"")print(nums)list_index = [0,3,5,7,10]print(""Index list:"")print(list_index)print(""\nItems with specified index of the said list:"")print(access_elements(nums, list_index))","""""""
Brief Description:
------------------
access_elements function performs a specific operation as described below.

Extended Description:
---------------------
This function, `access_elements`, takes 2 parameters: nums,  list_index. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
list_index : type
    Description of list_index.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> access_elements(value, value)
Expected output
""""""","import unittest

class TestAccess_elements(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = access_elements(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = access_elements(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_maximum(lst): return max(lst, default=None)",Finds the maximum value in a list.,"def test_find_maximum(): assert find_maximum([1, 2, 3]) == 3 assert find_maximum([-1, -2]) == -1 assert find_maximum([]) == None"
"def sort_colors(nums): low, high, mid = 0, len(nums) - 1, 0; while mid <= high: if nums[mid] == 0: nums[low], nums[mid] = nums[mid], nums[low]; low += 1; mid += 1; elif nums[mid] == 2: nums[high], nums[mid] = nums[mid], nums[high]; high -= 1; else: mid += 1","Sorts an array of colors represented as 0s, 1s, and 2s.

This function sorts the input list nums consisting of 0s, 1s, and 2s, which represent different colors. It uses the Dutch National Flag algorithm to sort the colors in place.","def test_sort_colors(): nums = [2, 0, 2, 1, 1, 0]; sort_colors(nums); assert nums == [0, 0, 1, 1, 2, 2]"
"def get_pairs_count(arr, n, sum):
    count = 0 
    for i in range(0, n):
        for j in range(i + 1, n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count","This function 'get_pairs_count' performs a specific operation.

The function 'get_pairs_count' takes the following parameters: arr, n, sum. It performs operations based on the parameters provided.","def test_get_pairs_count():
    # Add test cases for get_pairs_count
    assert get_pairs_count(...) == expected_output"
def generate_square_numbers(n): return [i**2 for i in range(n)],"Generates a list of square numbers up to n.

This function returns a list of squares of numbers from 0 to n-1.","def test_generate_square_numbers(): assert generate_square_numbers(3) == [0, 1, 4] assert generate_square_numbers(5) == [0, 1, 4, 9, 16] assert generate_square_numbers(0) == []"
"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))","This function 'snake_to_camel' performs a specific operation.

The function 'snake_to_camel' takes the following parameters: word. It performs operations based on the parameters provided.","def test_snake_to_camel():
    # Add test cases for snake_to_camel
    assert snake_to_camel(...) == expected_output"
"def flatten_nested_list(lst): result = [] for item in lst: if isinstance(item, list): result.extend(flatten_nested_list(item)) else: result.append(item) return result","Flattens a nested list.

This function returns a flat list that contains all elements from the nested input list lst.","def test_flatten_nested_list(): assert flatten_nested_list([1, [2, [3]], 4]) == [1, 2, 3, 4] assert flatten_nested_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_nested_list([]) == []"
"def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result","This function 'count_samepair' performs a specific operation.

The function 'count_samepair' takes the following parameters: list1, list2, list3. It performs operations based on the parameters provided.","def test_count_samepair():
    # Add test cases for count_samepair
    assert count_samepair(...) == expected_output"
"from collections import defaultdict 
def get_unique(test_list):
  res = defaultdict(list)
  for sub in test_list:
    res[sub[1]].append(sub[0])
  res = dict(res)
  res_dict = dict()
  for key in res:
    res_dict[key] = len(list(set(res[key])))
  return (str(res_dict)) ","This function 'get_unique' performs a specific operation.

The function 'get_unique' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_get_unique():
    # Add test cases for get_unique
    assert get_unique(...) == expected_output"
def convert_to_binary(n): return bin(n)[2:],"Converts an integer to binary.

This function converts the integer n to a binary string representation (without the '0b' prefix).",def test_convert_to_binary(): assert convert_to_binary(10) == "1010" assert convert_to_binary(0) == "0" assert convert_to_binary(255) == "11111111"
"def is_octagonal(n): 
	return 3 * n * n - 2 * n ","This function 'is_octagonal' performs a specific operation.

The function 'is_octagonal' takes the following parameters: n. It performs operations based on the parameters provided.","def test_is_octagonal():
    # Add test cases for is_octagonal
    assert is_octagonal(...) == expected_output"
def length_of_last_word(s): return len(s.rstrip().split(' ')[-1]),"Returns the length of the last word in a string.

This function returns the length of the last word in the input string s, ignoring any trailing spaces.",def test_length_of_last_word(): assert length_of_last_word("Hello World") == 5 assert length_of_last_word(" fly me to the moon ") == 4
def flatten_list(nested_list): return [item for sublist in nested_list for item in sublist],"Flattens a nested list.

 This function takes a list of lists"," def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([[], [5]]) == [5] assert flatten_list([[1], [2], [3]]) == [1, 2, 3]"
"import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area","This function 'area_pentagon' performs a specific operation.

The function 'area_pentagon' takes the following parameters: a. It performs operations based on the parameters provided.","def test_area_pentagon():
    # Add test cases for area_pentagon
    assert area_pentagon(...) == expected_output"
"def balanced_binary_tree(root): def height(node): if not node: return 0; left = height(node.left); right = height(node.right); if left == -1 or right == -1 or abs(left - right) > 1: return -1; return max(left, right) + 1; return height(root) != -1","Checks if a binary tree is height-balanced.

This function returns True if the binary tree rooted at root is height-balanced, and False otherwise. A height-balanced binary tree is one in which the height difference between the left and right subtrees is at most 1 for every node.","def test_balanced_binary_tree(): root = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert balanced_binary_tree(root) root_unbalanced = TreeNode(1, TreeNode(2, TreeNode(3))); assert not balanced_binary_tree(root_unbalanced)"
"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result","This function 'common_in_nested_lists' performs a specific operation.

The function 'common_in_nested_lists' takes the following parameters: nestedlist. It performs operations based on the parameters provided.","def test_common_in_nested_lists():
    # Add test cases for common_in_nested_lists
    assert common_in_nested_lists(...) == expected_output"
"def list_intersection(lst1, lst2): return list(set(lst1) & set(lst2))","Returns the intersection of two lists.

This function returns a list of elements that are common to both lists lst1 and lst2, removing duplicates.","def test_list_intersection(): assert list_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert list_intersection([5, 6], [7, 8]) == [] assert list_intersection([], [1]) == []"
"def max_of_two( x, y ):
    if x > y:
        return x
    return y","This function 'max_of_two' performs a specific operation.

The function 'max_of_two' takes the following parameters: x, y. It performs operations based on the parameters provided.","def test_max_of_two():
    # Add test cases for max_of_two
    assert max_of_two(...) == expected_output"
"def find_first_unique_character(s): from collections import Counter; count = Counter(s); for i, char in enumerate(s): if count[char] == 1: return i; return -1","Finds the first unique character in a string.

This function returns the index of the first non-repeating character in the input string s, or -1 if all characters repeat. It uses a Counter to count the occurrences of each character.",def test_find_first_unique_character(): assert find_first_unique_character("leetcode") == 0 assert find_first_unique_character("loveleetcode") == 2 assert find_first_unique_character("aabb") == -1
def convert_to_float(s): return float(s),"Converts a string to a float.

This function returns the float value of the input string s.",def test_convert_to_float(): assert convert_to_float("123.45") == 123.45 assert convert_to_float("0.0") == 0.0 assert convert_to_float("-456.78") == -456.78
"def sum(x, y, z):    if x == y or y == z or x==z:        sum = 0    else:        sum = x + y + z    return sumprint(sum(2, 1, 2))print(sum(3, 2, 2))print(sum(2, 2, 2))print(sum(1, 2, 3))","""""""
Brief Description:
------------------
sum function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum`, takes 3 parameters: x,  y,  z. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.
z : type
    Description of z.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum(value, value, value)
Expected output
""""""","import unittest

class TestSum(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def reverse_string_words(text):    for line in text.split('\n'):        return(' '.join(line.split()[::-1]))print(reverse_string_words("The quick brown fox jumps over the lazy dog."))print(reverse_string_words("Python Exercises.")),"""""""
Brief Description:
------------------
reverse_string_words function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse_string_words`, takes 1 parameters: text. It is designed to perform a certain task using these parameters.

Parameters:
-----------
text : type
    Description of text.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse_string_words(value)
Expected output
""""""","import unittest

class TestReverse_string_words(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse_string_words(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse_string_words(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_remainder(arr, lens, n): 
    mul = 1
    for i in range(lens):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ","This function 'find_remainder' performs a specific operation.

The function 'find_remainder' takes the following parameters: arr, lens, n. It performs operations based on the parameters provided.","def test_find_remainder():
    # Add test cases for find_remainder
    assert find_remainder(...) == expected_output"
def fibonacci_recursive(n): return n if n <= 1 else fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2),"Computes the nth Fibonacci number recursively.

This function returns the nth Fibonacci number using recursion. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two.",def test_fibonacci_recursive(): assert fibonacci_recursive(0) == 0 assert fibonacci_recursive(1) == 1 assert fibonacci_recursive(5) == 5
def sum_of_cubed_digits(n): return sum(int(digit) ** 3 for digit in str(abs(n))),"Sums the cubes of the digits of a number.

This function returns the sum of the cubes of each digit in the input number n. If n is negative, the sign is ignored.",def test_sum_of_cubed_digits(): assert sum_of_cubed_digits(123) == 36 assert sum_of_cubed_digits(-456) == 189 assert sum_of_cubed_digits(0) == 0
"import re 
regex = '[a-zA-z0-9]$'
def check_alphanumeric(string): 
	if(re.search(regex, string)): 
		return (""Accept"") 
	else: 
		return (""Discard"") ","This function 'check_alphanumeric' performs a specific operation.

The function 'check_alphanumeric' takes the following parameters: string. It performs operations based on the parameters provided.","def test_check_alphanumeric():
    # Add test cases for check_alphanumeric
    assert check_alphanumeric(...) == expected_output"
"def merge_lists(lst1, lst2): return lst1 + lst2","Merges two lists.

This function concatenates two lists lst1 and lst2, returning a single combined list.","def test_merge_lists(): assert merge_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_lists([], [1]) == [1] assert merge_lists([2], []) == [2]"
"def palindrome_partitioning(s): result = []; def backtrack(start, path): if start == len(s): result.append(path[:]); return; for i in range(start + 1, len(s) + 1): if s[start:i] == s[start:i][::-1]: backtrack(i, path + [s[start:i]]); backtrack(0, []); return result","Finds all possible palindrome partitions of a string.

This function returns a list of all possible ways to partition the input string s such that each substring is a palindrome. It uses backtracking to explore all possible partitions.","def test_palindrome_partitioning(): assert palindrome_partitioning(""aab"") == [[""a"", ""a"", ""b""], [""aa"", ""b""]] assert palindrome_partitioning(""civic"") == [[""c"", ""i"", ""v"", ""i"", ""c""], [""civic""]]"
def extract_digits(s): return [int(char) for char in s if char.isdigit()],"Extracts digits from a string.

This function returns a list of digits found in the string s. Non-digit characters are ignored.","def test_extract_digits(): assert extract_digits(""abc123"") == [1, 2, 3] assert extract_digits(""456xyz"") == [4, 5, 6] assert extract_digits(""no digits"") == []"
"def Seq_Linear(seq_nums):
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  if len(set(seq_nums)) == 1: 
    return ""Linear Sequence""
  else:
    return ""Non Linear Sequence""","This function 'Seq_Linear' performs a specific operation.

The function 'Seq_Linear' takes the following parameters: seq_nums. It performs operations based on the parameters provided.","def test_Seq_Linear():
    # Add test cases for Seq_Linear
    assert Seq_Linear(...) == expected_output"
"def lcs_of_three(X, Y, Z, m, n, o): 
	L = [[[0 for i in range(o+1)] for j in range(n+1)] 
		for k in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			for k in range(o+1): 
				if (i == 0 or j == 0 or k == 0): 
					L[i][j][k] = 0
				elif (X[i-1] == Y[j-1] and
					X[i-1] == Z[k-1]): 
					L[i][j][k] = L[i-1][j-1][k-1] + 1
				else: 
					L[i][j][k] = max(max(L[i-1][j][k], 
					L[i][j-1][k]), 
									L[i][j][k-1]) 
	return L[m][n][o]","This function 'lcs_of_three' performs a specific operation.

The function 'lcs_of_three' takes the following parameters: X, Y, Z, m, n, o. It performs operations based on the parameters provided.","def test_lcs_of_three():
    # Add test cases for lcs_of_three
    assert lcs_of_three(...) == expected_output"
"def alien_order(words): from collections import defaultdict, deque; adj = defaultdict(set); in_degree = {c: 0 for word in words for c in word}; for i in range(len(words) - 1): word1, word2 = words[i], words[i + 1]; min_len = min(len(word1), len(word2)); if word1[:min_len] == word2[:min_len] and len(word1) > len(word2): return """"; for j in range(min_len): if word1[j] != word2[j]: if word2[j] not in adj[word1[j]]: adj[word1[j]].add(word2[j]); in_degree[word2[j]] += 1; break; zero_in_degree_queue = deque([c for c in in_degree if in_degree[c] == 0]); order = []; while zero_in_degree_queue: c = zero_in_degree_queue.popleft(); order.append(c); for neighbor in adj[c]: in_degree[neighbor] -= 1; if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor); return """".join(order) if len(order) == len(in_degree) else """"","Finds the order of characters in an alien dictionary.

This function returns the order of characters in the alien language based on a list of words. It builds a graph from the characters and performs topological sorting to derive the order.","def test_alien_order(): assert alien_order([""wrt"", ""wrf"", ""er"", ""ett"", ""rftt""]) == ""wertf"" assert alien_order([""z"", ""x"", ""z""]) == """""
def reverse_string(s): return s[::-1],"Reverses a string.

 This function returns a new string with the characters of s in reverse order.",def test_reverse_string(): assert reverse_string("hello") == "olleh" assert reverse_string("world") == "dlrow" assert reverse_string("") == ""
def sum_of_odd_numbers(lst): return sum(x for x in lst if x % 2 != 0),Sums all odd numbers in a list.,"def test_sum_of_odd_numbers(): assert sum_of_odd_numbers([1, 2, 3]) == 4 assert sum_of_odd_numbers([2, 4, 6]) == 0 assert sum_of_odd_numbers([1, 3, 5]) == 9"
"def check_Validity(a,b,c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True        ","This function 'check_Validity' performs a specific operation.

The function 'check_Validity' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_check_Validity():
    # Add test cases for check_Validity
    assert check_Validity(...) == expected_output"
def product_of_elements(lst): result = 1 for x in lst: result *= x return result,"Computes the product of all elements in a list.

This function multiplies all the elements of the list lst and returns the result. If the list is empty, it returns 1.","def test_product_of_elements(): assert product_of_elements([2, 3, 4]) == 24 assert product_of_elements([1, 0]) == 0 assert product_of_elements([]) == 1"
"def zip_lists(lst1, lst2): return list(zip(lst1, lst2))","Zips two lists into a list of tuples.

This function returns a list of tuples, where each tuple contains elements from lst1 and lst2 at the same index.","def test_zip_lists(): assert zip_lists([1, 2], ['a', 'b']) == [(1, 'a'), (2, 'b')] assert zip_lists([1], [2]) == [(1, 2)] assert zip_lists([], []) == []"
def extract_numbers_from_string(s): return [int(num) for num in s.split() if num.isdigit()],"Extracts numbers from a string.

This function returns a list of integers extracted from the input string s, ignoring non-numeric parts.","def test_extract_numbers_from_string(): assert extract_numbers_from_string(""hello 123 world 456"") == [123, 456] assert extract_numbers_from_string(""no numbers here"") == [] assert extract_numbers_from_string(""42 is the answer"") == [42]"
"def largest_rectangle_histogram(heights): stack, max_area = [], 0; for i, h in enumerate(heights + [0]): while stack and heights[stack[-1]] > h: height = heights[stack.pop()]; width = i if not stack else i - stack[-1] - 1; max_area = max(max_area, height * width); stack.append(i); return max_area","Finds the largest rectangle in a histogram.

This function returns the area of the largest rectangle that can be formed from the heights of bars in a histogram represented by the input list heights. It uses a stack to calculate the area efficiently.","def test_largest_rectangle_histogram(): assert largest_rectangle_histogram([2, 1, 5, 6, 2, 3]) == 10 assert largest_rectangle_histogram([2, 4]) == 4"
"import math
def volume_tetrahedron(num):
	volume = (num ** 3 / (6 * math.sqrt(2)))	
	return round(volume, 2)","This function 'volume_tetrahedron' performs a specific operation.

The function 'volume_tetrahedron' takes the following parameters: num. It performs operations based on the parameters provided.","def test_volume_tetrahedron():
    # Add test cases for volume_tetrahedron
    assert volume_tetrahedron(...) == expected_output"
def sum_of_even_numbers(lst): return sum(x for x in lst if x % 2 == 0),Sums the even numbers in a list.,"def test_sum_of_even_numbers(): assert sum_of_even_numbers([1, 2, 3, 4]) == 6 assert sum_of_even_numbers([1, 3, 5]) == 0 assert sum_of_even_numbers([0]) == 0"
"def uncommon_chars_concat(s1, s2):             set1 = set(s1)      set2 = set(s2)        common_chars = list(set1 & set2)      result = [ch for ch in s1 if ch not in common_chars] + [ch for ch in s2 if ch not in common_chars]      return(''.join(result))s1 = 'abcdpqr's2 = 'xyzabcd'print(""Original Substrings:\n"",s1+""\n"",s2)print(""\nAfter concatenating uncommon characters:"")print(uncommon_chars_concat(s1, s2))","""""""
Brief Description:
------------------
uncommon_chars_concat function performs a specific operation as described below.

Extended Description:
---------------------
This function, `uncommon_chars_concat`, takes 2 parameters: s1,  s2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s1 : type
    Description of s1.
s2 : type
    Description of s2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> uncommon_chars_concat(value, value)
Expected output
""""""","import unittest

class TestUncommon_chars_concat(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = uncommon_chars_concat(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = uncommon_chars_concat(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_ugly(n): if n <= 0: return False; for factor in [2, 3, 5]: while n % factor == 0: n //= factor; return n == 1","Determines if a number is an ""ugly"" number.

This function returns True if the input integer n is an ""ugly"" number (i.e., its prime factors are limited to 2, 3, and 5) and False otherwise.",def test_is_ugly(): assert is_ugly(6) assert not is_ugly(14)
"def find_First_Missing(array,start,end): 
    if (start > end): 
        return end + 1
    if (start != array[start]): 
        return start; 
    mid = int((start + end) / 2) 
    if (array[mid] == mid): 
        return find_First_Missing(array,mid+1,end) 
    return find_First_Missing(array,start,mid) ","This function 'find_First_Missing' performs a specific operation.

The function 'find_First_Missing' takes the following parameters: array, start, end. It performs operations based on the parameters provided.","def test_find_First_Missing():
    # Add test cases for find_First_Missing
    assert find_First_Missing(...) == expected_output"
"def find_peak_element(nums): left, right = 0, len(nums) - 1; while left < right: mid = (left + right) // 2; if nums[mid] < nums[mid + 1]: left = mid + 1; else: right = mid; return left","Finds a peak element in the array.

This function returns the index of any peak element in the input list nums. A peak element is an element greater than or equal to its neighbors.","def test_find_peak_element(): assert find_peak_element([1, 2, 3, 1]) == 2 assert find_peak_element([1, 2, 1, 3, 5, 6, 4]) in [1, 5]"
def most_frequent_element(nums): from collections import Counter; return Counter(nums).most_common(1)[0][0],"Finds the most frequent element in a list.

This function returns the most frequent element in the input list nums. It uses Python's collections.Counter to count the frequency of each element and returns the most common one.","def test_most_frequent_element(): assert most_frequent_element([1, 3, 3, 2, 2, 3]) == 3 assert most_frequent_element([1, 1, 2, 2, 3]) == 1"
"def find_Min_Sum(num): 
    sum = 0
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num 
    return sum","This function 'find_Min_Sum' performs a specific operation.

The function 'find_Min_Sum' takes the following parameters: num. It performs operations based on the parameters provided.","def test_find_Min_Sum():
    # Add test cases for find_Min_Sum
    assert find_Min_Sum(...) == expected_output"
"def check_palindrome_permutation(s): from collections import Counter; count = Counter(s.replace("" "", """").lower()); odd_count = sum(1 for x in count.values() if x % 2 != 0); return odd_count <= 1","Checks if a string can be permuted to form a palindrome.

This function returns True if the input string s can be permuted to form a palindrome, and False otherwise. It counts the frequency of each character and checks if at most one character has an odd frequency.",def test_check_palindrome_permutation(): assert check_palindrome_permutation("Tact Coa") assert not check_palindrome_permutation("Hello")
def is_alphanumeric(s): return s.isalnum(),"Checks if a string is alphanumeric.

This function returns True if the string s consists only of alphanumeric characters (letters and numbers) and False otherwise.",def test_is_alphanumeric(): assert is_alphanumeric("hello123") assert not is_alphanumeric("hello!") assert is_alphanumeric("123")
"def No_of_Triangle(N,K):
    if (N < K):
        return -1;
    else:
        Tri_up = 0;
        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;
        Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;
        return Tri_up + Tri_down;","This function 'No_of_Triangle' performs a specific operation.

The function 'No_of_Triangle' takes the following parameters: N, K. It performs operations based on the parameters provided.","def test_No_of_Triangle():
    # Add test cases for No_of_Triangle
    assert No_of_Triangle(...) == expected_output"
def count_words(s): return len(s.split()),Counts the number of words in a string.,def test_count_words(): assert count_words("hello world") == 2 assert count_words("a quick brown fox") == 4 assert count_words("") == 0
"def bifurcate(colors, filter):  return [    [x for x, flag in zip(colors, filter) if flag],    [x for x, flag in zip(colors, filter) if not flag]  ]print(bifurcate(['red', 'green', 'blue', 'pink'], [True, True, False, True]))","""""""
Brief Description:
------------------
bifurcate function performs a specific operation as described below.

Extended Description:
---------------------
This function, `bifurcate`, takes 2 parameters: colors,  filter. It is designed to perform a certain task using these parameters.

Parameters:
-----------
colors : type
    Description of colors.
filter : type
    Description of filter.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> bifurcate(value, value)
Expected output
""""""","import unittest

class TestBifurcate(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = bifurcate(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = bifurcate(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_odd(n) : 
    if (n^1 == n-1) :
        return True; 
    else :
        return False; ","This function 'is_odd' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def remove_whitespace(s): return s.replace(' ', '')","Removes all whitespace from a string.

This function returns a new string where all spaces are removed from the input string s.",def test_remove_whitespace(): assert remove_whitespace("hello world") == "helloworld" assert remove_whitespace(" a b c ") == "abc" assert remove_whitespace("") == ""
"def find_exponentio(test_tup1, test_tup2):
  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res)
","This function 'find_exponentio' performs a specific operation.

The function 'find_exponentio' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_find_exponentio():
    # Add test cases for find_exponentio
    assert find_exponentio(...) == expected_output"
def flatten_list_of_lists(lst): return [item for sublist in lst for item in sublist],"Flattens a list of lists into a single list.

This function returns a single list containing all elements from the nested input list lst, which is a list of lists.","def test_flatten_list_of_lists(): assert flatten_list_of_lists([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list_of_lists([['a'], ['b', 'c']]) == ['a', 'b', 'c'] assert flatten_list_of_lists([]) == []"
"def combinations_list(colors):    if len(colors) == 0:        return [[]]    result = []    for el in combinations_list(colors[1:]):        result += [el, el+[colors[0]]]    return resultcolors = ['orange', 'red', 'green', 'blue']print(""Original list:"")print(colors)print(""\nAll possible combinations of the said list?? elements:"")print(combinations_list(colors))","""""""
Brief Description:
------------------
combinations_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `combinations_list`, takes 1 parameters: colors. It is designed to perform a certain task using these parameters.

Parameters:
-----------
colors : type
    Description of colors.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> combinations_list(value)
Expected output
""""""","import unittest

class TestCombinations_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = combinations_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = combinations_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_of_three(num1,num2,num3): 
    if (num1 >= num2) and (num1 >= num3):
       lnum = num1
    elif (num2 >= num1) and (num2 >= num3):
       lnum = num2
    else:
       lnum = num3
    return lnum","This function 'max_of_three' performs a specific operation.

The function 'max_of_three' takes the following parameters: num1, num2, num3. It performs operations based on the parameters provided.","def test_max_of_three():
    # Add test cases for max_of_three
    assert max_of_three(...) == expected_output"
"def solve_sudoku(board): def is_valid(board, r, c, num): for i in range(9): if board[i][c] == num or board[r][i] == num: return False; block_row, block_col = 3 * (r // 3), 3 * (c // 3); for i in range(block_row, block_row + 3): for j in range(block_col, block_col + 3): if board[i][j] == num: return False; return True; def solve(): for r in range(9): for c in range(9): if board[r][c] == '.': for num in '123456789': if is_valid(board, r, c, num): board[r][c] = num; if solve(): return True; board[r][c] = '.'; return False; return True; solve()","Solves a Sudoku puzzle using backtracking.

This function solves the input 9x9 Sudoku board in place using a backtracking algorithm. It fills in the empty cells while ensuring that the board remains valid according to Sudoku rules.","def test_solve_sudoku(): board = [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]; solve_sudoku(board); assert board == [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""],[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""],[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""],[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""],[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""],[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""],[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""],[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""],[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]]"
"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums","This function 'filter_oddnumbers' performs a specific operation.

The function 'filter_oddnumbers' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_filter_oddnumbers():
    # Add test cases for filter_oddnumbers
    assert filter_oddnumbers(...) == expected_output"
"def swap_pairs(head): dummy = ListNode(0); dummy.next = head; prev, curr = dummy, head; while curr and curr.next: next_pair = curr.next.next; second = curr.next; second.next = curr; curr.next = next_pair; prev.next = second; prev = curr; curr = next_pair; return dummy.next","Swaps every two adjacent nodes in a linked list.

This function swaps every two adjacent nodes in the input linked list head. It uses iteration to modify the pointers and returns the new head of the list.","def test_swap_pairs(): head = ListNode(1, ListNode(2, ListNode(3, ListNode(4)))); new_head = swap_pairs(head); assert linked_list_to_list(new_head) == [2, 1, 4, 3]"
"def  gnome_sort(nums):    if len(nums) <= 1:        return nums            i = 1        while i < len(nums):        if nums[i-1] <= nums[i]:            i += 1        else:            nums[i-1], nums[i] = nums[i], nums[i-1]            i -= 1            if (i == 0):                i = 1           user_input = input(""Input numbers separated by a comma:\n"").strip()nums = [int(item) for item in user_input.split(',')]gnome_sort(nums)print(nums)","""""""
Brief Description:
------------------
gnome_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `gnome_sort`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> gnome_sort(value)
Expected output
""""""","import unittest

class TestGnome_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = gnome_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = gnome_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def unique_sublists(input_list):    result ={}    for l in input_list:         result.setdefault(tuple(l), list()).append(1)     for a, b in result.items():         result[a] = sum(b)    return resultlist1 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] print(""Original list:"")print(list1)  print(""Number of unique lists of the said list:"")print(unique_sublists(list1)) color1 = [[""green"", ""orange""], [""black""], [""green"", ""orange""], [""white""]]print(""\nOriginal list:"")print(color1)  print(""Number of unique lists of the said list:"")print(unique_sublists(color1))","""""""
Brief Description:
------------------
unique_sublists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `unique_sublists`, takes 1 parameters: input_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input_list : type
    Description of input_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> unique_sublists(value)
Expected output
""""""","import unittest

class TestUnique_sublists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = unique_sublists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = unique_sublists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def calculate_mean(lst): return sum(lst) / len(lst) if lst else 0,"Computes the mean of a list.

This function returns the average value of all elements in the input list lst. If the list is empty, it returns 0.","def test_calculate_mean(): assert calculate_mean([1, 2, 3]) == 2 assert calculate_mean([4, 5, 6]) == 5 assert calculate_mean([]) == 0"
"def roman_to_int(s): values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}; total = 0; for i in range(len(s)): if i > 0 and values[s[i]] > values[s[i - 1]]: total += values[s[i]] - 2 * values[s[i - 1]]; else: total += values[s[i]]; return total","Converts a Roman numeral to an integer.

This function converts the input Roman numeral string s to an integer. It uses a dictionary to map Roman symbols to their integer values and handles the subtractive notation by checking the previous symbol.",def test_roman_to_int(): assert roman_to_int("III") == 3 assert roman_to_int("IV") == 4 assert roman_to_int("IX") == 9
def average_of_list(lst): return sum(lst) / len(lst) if lst else None,"Computes the average of a list.

This function returns the average (mean) of the numbers in the list lst. If the list is empty, it returns None.","def test_average_of_list(): assert average_of_list([1, 2, 3]) == 2 assert average_of_list([10, 20]) == 15 assert average_of_list([]) == None"
"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x","This function 'multiple_to_single' performs a specific operation.

The function 'multiple_to_single' takes the following parameters: L. It performs operations based on the parameters provided.","def test_multiple_to_single():
    # Add test cases for multiple_to_single
    assert multiple_to_single(...) == expected_output"
"import re
def extract_quotation(text1):
  return (re.findall(r'""(.*?)""', text1))","This function 'extract_quotation' performs a specific operation.

The function 'extract_quotation' takes the following parameters: text1. It performs operations based on the parameters provided.","def test_extract_quotation():
    # Add test cases for extract_quotation
    assert extract_quotation(...) == expected_output"
"def duplicate_letters(text):	word_list = text.split()	for word in word_list:		if len(word) > len(set(word)):			return False	return Truetext = ""Filter out the factorials of the said list.""print(""Original text:"")print(text)print(""Check whether any word in the said sting contains duplicate characrters or not!"")print(duplicate_letters(text))text = ""Python Exercise.""print(""\nOriginal text:"")print(text)print(""Check whether any word in the said sting contains duplicate characrters or not!"")print(duplicate_letters(text))text = ""The wait is over.""print(""\nOriginal text:"")print(text)print(""Check whether any word in the said sting contains duplicate characrters or not!"")print(duplicate_letters(text))","""""""
Brief Description:
------------------
duplicate_letters function performs a specific operation as described below.

Extended Description:
---------------------
This function, `duplicate_letters`, takes 1 parameters: text. It is designed to perform a certain task using these parameters.

Parameters:
-----------
text : type
    Description of text.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> duplicate_letters(value)
Expected output
""""""","import unittest

class TestDuplicate_letters(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = duplicate_letters(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = duplicate_letters(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_happy(n): def get_next(num): return sum(int(x) ** 2 for x in str(num)); slow, fast = n, get_next(n); while fast != 1 and slow != fast: slow = get_next(slow); fast = get_next(get_next(fast)); return fast == 1","Determines if a number is happy.

This function returns True if the input number n is a happy number. A happy number is a number that eventually reaches 1 after repeatedly replacing it with the sum of the squares of its digits.",def test_is_happy(): assert is_happy(19) assert not is_happy(2)
"def multiple(m, n):	return True if m % n == 0 else Falseprint(multiple(20, 5))print(multiple(7, 2))","""""""
Brief Description:
------------------
multiple function performs a specific operation as described below.

Extended Description:
---------------------
This function, `multiple`, takes 2 parameters: m,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
m : type
    Description of m.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> multiple(value, value)
Expected output
""""""","import unittest

class TestMultiple(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = multiple(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = multiple(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_valid_parentheses(s): stack = []; mapping = {')': '(', '}': '{', ']': '['}; for char in s: if char in mapping: top_element = stack.pop() if stack else '#'; if mapping[char] != top_element: return False; else: stack.append(char); return not stack","Checks if parentheses are valid.

This function returns True if the input string s contains valid pairs of parentheses, brackets, or braces, otherwise False. It uses a stack to track unmatched opening parentheses.",def test_is_valid_parentheses(): assert is_valid_parentheses("()") assert is_valid_parentheses("()[]{}") assert not is_valid_parentheses("(]")
"def count_pairs(arr, n, k):
  count=0;
  for i in range(0,n):
    for j in range(i+1, n):
      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
        count += 1
  return count","This function 'count_pairs' performs a specific operation.

The function 'count_pairs' takes the following parameters: arr, n, k. It performs operations based on the parameters provided.","def test_count_pairs():
    # Add test cases for count_pairs
    assert count_pairs(...) == expected_output"
"def GFG(name, num):
print(""Hello from "", name + ', ' + num)


GFG(""geeks for geeks"", ""25"")","""""""
Brief Description:
------------------
GFG function performs a specific operation as described below.

Extended Description:
---------------------
This function, `GFG`, takes 2 parameters: name,  num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
name : type
    Description of name.
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> GFG(value, value)
Expected output
""""""","import unittest

class TestGfg(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = GFG(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = GFG(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def list_length(lst): return len(lst),Returns the length of a list.,"def test_list_length(): assert list_length([1, 2, 3]) == 3 assert list_length([]) == 0 assert list_length([5, 6, 7, 8]) == 4"
"def remove_whitespace(s): return s.replace("" "", """")","Removes all whitespace from a string.

This function returns a new string with all spaces removed from the input string s.",def test_remove_whitespace(): assert remove_whitespace("hello world") == "helloworld" assert remove_whitespace(" abc ") == "abc" assert remove_whitespace("") == ""
def remove_duplicates(lst): return list(set(lst)),"Removes duplicates from a list.

This function returns a list with all duplicate values removed from the input list lst.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates(['a', 'b', 'a']) == ['a', 'b'] assert remove_duplicates([]) == []"
def convert_to_lowercase(s): return s.lower(),"Converts a string to lowercase.

This function returns a new string with all characters in the input string s converted to lowercase.",def test_convert_to_lowercase(): assert convert_to_lowercase("HELLO") == "hello" assert convert_to_lowercase("world") == "world" assert convert_to_lowercase("PyThOn") == "python"
"def amicable_numbers_sum(limit):    if not isinstance(limit, int):        return ""Input is not an integer!""    if limit < 1:        return ""Input must be bigger than 0!""    amicables = set()    for num in range(2, limit+1):        if num in amicables:            continue        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])        if num == sum_fact2 and num != sum_fact:            amicables.add(num)            amicables.add(sum_fact2)    return sum(amicables)print(amicable_numbers_sum(9999))print(amicable_numbers_sum(999))print(amicable_numbers_sum(99))","""""""
Brief Description:
------------------
amicable_numbers_sum function performs a specific operation as described below.

Extended Description:
---------------------
This function, `amicable_numbers_sum`, takes 1 parameters: limit. It is designed to perform a certain task using these parameters.

Parameters:
-----------
limit : type
    Description of limit.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> amicable_numbers_sum(value)
Expected output
""""""","import unittest

class TestAmicable_numbers_sum(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = amicable_numbers_sum(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = amicable_numbers_sum(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list","This function 'shell_sort' performs a specific operation.

The function 'shell_sort' takes the following parameters: my_list. It performs operations based on the parameters provided.","def test_shell_sort():
    # Add test cases for shell_sort
    assert shell_sort(...) == expected_output"
"import sys 
def min_coins(coins, m, V): 
    if (V == 0): 
        return 0
    res = sys.maxsize 
    for i in range(0, m): 
        if (coins[i] <= V): 
            sub_res = min_coins(coins, m, V-coins[i]) 
            if (sub_res != sys.maxsize and sub_res + 1 < res): 
                res = sub_res + 1  
    return res ","This function 'min_coins' performs a specific operation.

The function 'min_coins' takes the following parameters: coins, m, V. It performs operations based on the parameters provided.","def test_min_coins():
    # Add test cases for min_coins
    assert min_coins(...) == expected_output"
"def findRotations(str1, str2):

# To count left rotations
# of string
x = 0

# To count right rotations
# of string
y = 0
m = str1

while True:

# left rotating the string
m = m[len(m)-1] + m[:len(m)-1]

# checking if rotated and
# actual string are equal.
if(m == str2):
x += 1
break

else:
x += 1
if x > len(str2) :
break

while True:

# right rotating the string
str1 = str1[1:len(str1)]+str1[0]

# checking if rotated and actual
# string are equal.
if(str1 == str2):
y += 1
break

else:
y += 1
if y > len(str2):
break

if x < len(str2):

# printing the minimum
# number of rotations.
print(min(x,y))

else:
print(""given strings are not of same kind"")

# Driver code
findRotations('sgeek', 'geeks')","""""""
Brief Description:
------------------
findRotations function performs a specific operation as described below.

Extended Description:
---------------------
This function, `findRotations`, takes 2 parameters: str1,  str2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.
str2 : type
    Description of str2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> findRotations(value, value)
Expected output
""""""","import unittest

class TestFindrotations(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = findRotations(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = findRotations(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))","This function 'split_lowerstring' performs a specific operation.

The function 'split_lowerstring' takes the following parameters: text. It performs operations based on the parameters provided.","def test_split_lowerstring():
    # Add test cases for split_lowerstring
    assert split_lowerstring(...) == expected_output"
"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ","This function 'ncr_modp' performs a specific operation.

The function 'ncr_modp' takes the following parameters: n, r, p. It performs operations based on the parameters provided.","def test_ncr_modp():
    # Add test cases for ncr_modp
    assert ncr_modp(...) == expected_output"
"def gray_to_binary(n):
    """"""Convert Gray codeword to binary and return it.""""""
    n = int(n, 2) # convert to int

    mask = n
    while mask != 0:
        mask >>= 1
        n ^= mask

    # bin(n) returns n's binary representation with a '0b' prefixed
    # the slice operation is to remove the prefix
    return bin(n)[2:]


g = input('Enter Gray codeword: ')
b = gray_to_binary(g)
print('In binary:', b)","""""""
Brief Description:
------------------
gray_to_binary function performs a specific operation as described below.

Extended Description:
---------------------
This function, `gray_to_binary`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> gray_to_binary(value)
Expected output
""""""","import unittest

class TestGray_to_binary(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = gray_to_binary(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = gray_to_binary(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def square_numbers(lst): return [x**2 for x in lst],"Squares each number in a list.

This function returns a new list with each element from the input list lst squared.","def test_square_numbers(): assert square_numbers([1, 2, 3]) == [1, 4, 9] assert square_numbers([4, 5]) == [16, 25] assert square_numbers([]) == []"
"def shell_sort(arr): gap = len(arr) // 2; while gap > 0: for i in range(gap, len(arr)): temp = arr[i]; j = i; while j >= gap and arr[j - gap] > temp: arr[j] = arr[j - gap]; j -= gap; arr[j] = temp; gap //= 2","Sorts an array using shell sort algorithm.

This function sorts the input array arr using the shell sort algorithm, which is an optimization of insertion sort that allows the exchange of far apart elements by progressively reducing gaps.","def test_shell_sort(): arr = [12, 34, 54, 2, 3]; shell_sort(arr); assert arr == [2, 3, 12, 34, 54]"
def find_median(lst): sorted_lst = sorted(lst) n = len(sorted_lst) return (sorted_lst[n // 2] if n % 2 != 0 else (sorted_lst[n // 2 - 1] + sorted_lst[n // 2]) / 2) if lst else None,"Finds the median of a list.

This function returns the median of the input list lst. If the length of the list is odd, it returns the middle element; if it is even, it returns the average of the two middle elements.","def test_find_median(): assert find_median([1, 2, 3]) == 2 assert find_median([1, 2, 3, 4]) == 2.5 assert find_median([]) == None"
"def add_val_to_list(lst, add_val):    result = lst    result = [x+add_val for x in result]       return result    nums = [3,8,9,4,5,0,5,0,3]print(""Original lists:"")print(nums)add_val = 3print(""\nAdd"",add_val,""to each element in the said list:"")print(add_val_to_list(nums, add_val))nums = [3.2,8,9.9,4.2,5,0.1,5,3.11,0]print(""\nOriginal lists:"")print(nums)add_val = .51print(""\nAdd"",add_val,""to each element in the said list:"")print(add_val_to_list(nums, add_val))","""""""
Brief Description:
------------------
add_val_to_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `add_val_to_list`, takes 2 parameters: lst,  add_val. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
add_val : type
    Description of add_val.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> add_val_to_list(value, value)
Expected output
""""""","import unittest

class TestAdd_val_to_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = add_val_to_list(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = add_val_to_list(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def floor_Min(A,B,N):
    x = max(B - 1,N)
    return (A*x) // B","This function 'floor_Min' performs a specific operation.

The function 'floor_Min' takes the following parameters: A, B, N. It performs operations based on the parameters provided.","def test_floor_Min():
    # Add test cases for floor_Min
    assert floor_Min(...) == expected_output"
"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
        return change_date_format(dt)","This function 'change_date_format' performs a specific operation.

The function 'change_date_format' takes the following parameters: dt. It performs operations based on the parameters provided.","def test_change_date_format():
    # Add test cases for change_date_format
    assert change_date_format(...) == expected_output"
def remove_duplicates(lst): return list(set(lst)),"Removes duplicates from a list.

This function takes a list lst and returns a new list with all duplicate elements removed by converting the list to a set and back to a list.","def test_remove_duplicates(): assert remove_duplicates([1, 1, 2]) == [1, 2] assert remove_duplicates([]) == [] assert remove_duplicates([3, 3, 3]) == [3]"
def square_numbers(lst): return [x ** 2 for x in lst],"Squares each element in a list.

This function returns a new list where each element from the input list lst is squared.","def test_square_numbers(): assert square_numbers([1, 2, 3]) == [1, 4, 9] assert square_numbers([0, -1]) == [0, 1] assert square_numbers([]) == []"
def square_numbers(lst): return [x ** 2 for x in lst],"Squares every number in a list.

This function takes a list lst and returns a new list where each element is squared.","def test_square_numbers(): assert square_numbers([1, 2, 3]) == [1, 4, 9] assert square_numbers([0, -1]) == [0, 1] assert square_numbers([]) == []"
"def search_rotated_array(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1; else: left = mid + 1; else: if nums[mid] < target <= nums[right]: left = mid + 1; else: right = mid - 1; return -1","Searches for a target in a rotated sorted array.

This function returns the index of target in the rotated sorted array nums, or -1 if it is not found. It uses binary search while accounting for the rotated nature of the array.","def test_search_rotated_array(): assert search_rotated_array([4, 5, 6, 7, 0, 1, 2], 0) == 4 assert search_rotated_array([4, 5, 6, 7, 0, 1, 2], 3) == -1"
def get_file_extension(filename): return filename.split('.')[-1],"Extracts the file extension from a filename.

This function returns the file extension of the input filename by splitting it at the last period.",def test_get_file_extension(): assert get_file_extension("file.txt") == "txt" assert get_file_extension("archive.tar.gz") == "gz" assert get_file_extension("no_extension") == "no_extension"
"import re
def remove_splchar(text): 
 pattern = re.compile('[\W_]+')
 return (pattern.sub('', text))","This function 'remove_splchar' performs a specific operation.

The function 'remove_splchar' takes the following parameters: text. It performs operations based on the parameters provided.","def test_remove_splchar():
    # Add test cases for remove_splchar
    assert remove_splchar(...) == expected_output"
"def last_occurrence(l1, ch):    return ''.join(l1).rindex(ch)chars = ['s','d','f','s','d','f','s','f','k','o','p','i','w','e','k','c']print(""Original list:"")print(chars)ch = 'f'print(""Last occurrence of"",ch,""in the said list:"")print(last_occurrence(chars, ch))ch = 'c'print(""Last occurrence of"",ch,""in the said list:"")print(last_occurrence(chars, ch))ch = 'k'print(""Last occurrence of"",ch,""in the said list:"")print(last_occurrence(chars, ch))ch = 'w'print(""Last occurrence of"",ch,""in the said list:"")print(last_occurrence(chars, ch)) ","""""""
Brief Description:
------------------
last_occurrence function performs a specific operation as described below.

Extended Description:
---------------------
This function, `last_occurrence`, takes 2 parameters: l1,  ch. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
ch : type
    Description of ch.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> last_occurrence(value, value)
Expected output
""""""","import unittest

class TestLast_occurrence(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = last_occurrence(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = last_occurrence(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def maximum_gap(nums): if len(nums) < 2: return 0; min_num, max_num = min(nums), max(nums); bucket_size = max(1, (max_num - min_num) // (len(nums) - 1)); bucket_count = (max_num - min_num) // bucket_size + 1; buckets = [[None, None] for _ in range(bucket_count)]; for num in nums: idx = (num - min_num) // bucket_size; if buckets[idx][0] is None: buckets[idx][0] = buckets[idx][1] = num; else: buckets[idx][0] = min(buckets[idx][0], num); buckets[idx][1] = max(buckets[idx][1], num); max_gap, prev_max = 0, min_num; for bucket in buckets: if bucket[0] is not None: max_gap = max(max_gap, bucket[0] - prev_max); prev_max = bucket[1]; return max_gap","Finds the maximum gap between sorted elements in an array.

This function returns the maximum gap between successive elements in the sorted form of the input array nums. It uses bucket sorting for linear time complexity.","def test_maximum_gap(): assert maximum_gap([3, 6, 9, 1]) == 3 assert maximum_gap([10]) == 0"
"def get_noOfways(n):
    if (n == 0):
        return 0;
    if (n == 1):
        return 1; 
    return get_noOfways(n - 1) + get_noOfways(n - 2);","This function 'get_noOfways' performs a specific operation.

The function 'get_noOfways' takes the following parameters: n. It performs operations based on the parameters provided.","def test_get_noOfways():
    # Add test cases for get_noOfways
    assert get_noOfways(...) == expected_output"
def find_second_largest(lst): return sorted(set(lst))[-2],"Finds the second-largest element in a list.

This function takes a list lst, removes duplicates, sorts the list, and returns the second-largest element. Assumes the list has at least two unique elements.","def test_find_second_largest(): assert find_second_largest([3, 1, 2, 4]) == 3 assert find_second_largest([10, 10, 5, 7]) == 7 assert find_second_largest([1, 2]) == 1"
def find_min(lst): return min(lst) if lst else None,"Finds the smallest element in a list.

This function returns the smallest element in the list lst. If the list is empty, it returns None.","def test_find_min(): assert find_min([1, 2, 3]) == 1 assert find_min([10, 5, 7]) == 5 assert find_min([]) == None"
"def func():

# defining local variable
a_variable = 0

# using locals() function
# for checking existence in symbol table
is_local_var = ""a_variable"" in locals()

# printing result
print(is_local_var)

# driver code
func()","""""""
Brief Description:
------------------
func function performs a specific operation as described below.

Extended Description:
---------------------
This function, `func`, takes 0 parameters: none. It is designed to perform a certain task using these parameters.

Parameters:
-----------

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> func()
Expected output
""""""","import unittest

class TestFunc(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = func()
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = func()
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def reverse_list(lst): return lst[::-1],Reverses the order of elements in a list.,"def test_reverse_list(): assert reverse_list([1, 2, 3]) == [3, 2, 1] assert reverse_list(['a', 'b']) == ['b', 'a'] assert reverse_list([]) == []"
"def is_valid_sudoku(board): def is_valid_row(row): return len(set(row) - {'.'}) == len([x for x in row if x != '.']); def is_valid_col(board, col_idx): return len(set(board[i][col_idx] for i in range(9)) - {'.'}) == len([board[i][col_idx] for i in range(9) if board[i][col_idx] != '.']); def is_valid_box(board, start_row, start_col): box = [board[i][j] for i in range(start_row, start_row + 3) for j in range(start_col, start_col + 3)]; return len(set(box) - {'.'}) == len([x for x in box if x != '.']); for i in range(9): if not is_valid_row(board[i]) or not is_valid_col(board, i): return False; for i in range(0, 9, 3): for j in range(0, 9, 3): if not is_valid_box(board, i, j): return False; return True","Validates a Sudoku board.

This function returns True if the input 9x9 Sudoku board is valid according to Sudoku rules, ensuring no repeated numbers in rows, columns, or 3x3 boxes.","def test_is_valid_sudoku(): board = [[""5"", ""3"", ""."", ""."", ""7"", ""."", ""."", ""."", "".""], [""6"", ""."", ""."", ""1"", ""9"", ""5"", ""."", ""."", "".""], [""."", ""9"", ""8"", ""."", ""."", ""."", ""."", ""6"", "".""], [""8"", ""."", ""."", ""."", ""6"", ""."", ""."", ""."", ""3""], [""4"", ""."", ""."", ""8"", ""."", ""3"", ""."", ""."", ""1""], [""7"", ""."", ""."", ""."", ""2"", ""."", ""."", ""."", ""6""], [""."", ""6"", ""."", ""."", ""."", ""."", ""2"", ""8"", "".""], [""."", ""."", ""."", ""4"", ""1"", ""9"", ""."", ""."", ""5""], [""."", ""."", ""."", ""."", ""8"", ""."", ""."", ""7"", ""9""]]; assert is_valid_sudoku(board)"
"import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list","This function 'remove' performs a specific operation.

The function 'remove' takes the following parameters: list. It performs operations based on the parameters provided.","def test_remove():
    # Add test cases for remove
    assert remove(...) == expected_output"
def convert_to_lowercase(s): return s.lower(),"Converts a string to lowercase.

This function returns a new string where all characters from the input string s are converted to lowercase.",def test_convert_to_lowercase(): assert convert_to_lowercase("HELLO") == "hello" assert convert_to_lowercase("Python") == "python" assert convert_to_lowercase("") == ""
"def count_Fac(n):  
    m = n 
    count = 0
    i = 2
    while((i * i) <= m): 
        total = 0
        while (n % i == 0): 
            n /= i 
            total += 1 
        temp = 0
        j = 1
        while((temp + j) <= total): 
            temp += j 
            count += 1
            j += 1 
        i += 1
    if (n != 1): 
        count += 1 
    return count ","This function 'count_Fac' performs a specific operation.

The function 'count_Fac' takes the following parameters: n. It performs operations based on the parameters provided.","def test_count_Fac():
    # Add test cases for count_Fac
    assert count_Fac(...) == expected_output"
def remove_whitespace(s): return s.strip(),"Removes leading and trailing whitespace from a string.

This function removes any leading or trailing whitespace characters from the string s using the strip() method.",def test_remove_whitespace(): assert remove_whitespace(" hello ") == "hello" assert remove_whitespace("world") == "world" assert remove_whitespace(" ") == ""
def sum_of_squares(lst): return sum(x ** 2 for x in lst),"Computes the sum of squares of a list of numbers.

This function takes a list of numbers lst and returns the sum of the squares of its elements.","def test_sum_of_squares(): assert sum_of_squares([1, 2, 3]) == 14 assert sum_of_squares([0]) == 0 assert sum_of_squares([-1, -2]) == 5"
"def alternate_elements(list_data):    result=[]    for item in list_data[::2]:        result.append(item)    return result colors = [""red"", ""black"", ""white"", ""green"", ""orange""]print(""Original list:"")print(colors)print(""List with alternate elements from the said list:"")print(alternate_elements(colors))nums = [2,0,3,4,0,2,8,3,4,2]print(""\nOriginal list:"")print(nums)print(""List with alternate elements from the said list:"")print(alternate_elements(nums))","""""""
Brief Description:
------------------
alternate_elements function performs a specific operation as described below.

Extended Description:
---------------------
This function, `alternate_elements`, takes 1 parameters: list_data. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list_data : type
    Description of list_data.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> alternate_elements(value)
Expected output
""""""","import unittest

class TestAlternate_elements(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = alternate_elements(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = alternate_elements(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def count_odd_numbers(lst): return sum(1 for x in lst if x % 2 != 0),"Counts the odd numbers in a list.

This function returns the number of odd numbers in the list lst.","def test_count_odd_numbers(): assert count_odd_numbers([1, 2, 3, 4]) == 2 assert count_odd_numbers([2, 4, 6]) == 0 assert count_odd_numbers([1, 3, 5]) == 3"
"def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1","This function 'remove_spaces' performs a specific operation.

The function 'remove_spaces' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_remove_spaces():
    # Add test cases for remove_spaces
    assert remove_spaces(...) == expected_output"
"def lowest_common_ancestor(root, p, q): if not root or root == p or root == q: return root; left = lowest_common_ancestor(root.left, p, q); right = lowest_common_ancestor(root.right, p, q); if left and right: return root; return left if left else right","Finds the lowest common ancestor of two nodes in a binary tree.

This function returns the lowest common ancestor (LCA) of two nodes p and q in the binary tree rooted at root. The LCA is the deepest node that is an ancestor of both p and q.","def test_lowest_common_ancestor(): root = TreeNode(3, TreeNode(5, TreeNode(6), TreeNode(2, TreeNode(7), TreeNode(4))), TreeNode(1, TreeNode(0), TreeNode(8))); p, q = root.left, root.left.right.right; assert lowest_common_ancestor(root, p, q) == root.left"
"def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr","This function 're_arrange_array' performs a specific operation.

The function 're_arrange_array' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_re_arrange_array():
    # Add test cases for re_arrange_array
    assert re_arrange_array(...) == expected_output"
"def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","This function 'eulerian_num' performs a specific operation.

The function 'eulerian_num' takes the following parameters: n, m. It performs operations based on the parameters provided.","def test_eulerian_num():
    # Add test cases for eulerian_num
    assert eulerian_num(...) == expected_output"
"def count_vowels_consonants(s): vowels = sum(1 for char in s.lower() if char in 'aeiou') consonants = sum(1 for char in s.lower() if char.isalpha() and char not in 'aeiou') return vowels, consonants","Counts vowels and consonants in a string.

This function returns the number of vowels and consonants in the string s.","def test_count_vowels_consonants(): assert count_vowels_consonants(""hello"") == (2, 3) assert count_vowels_consonants(""aeiou"") == (5, 0) assert count_vowels_consonants(""xyz"") == (0, 3)"
"def max_sliding_window(nums, k): deque, res = [], []; for i, num in enumerate(nums): if deque and deque[0] == i - k: deque.pop(0); while deque and nums[deque[-1]] < num: deque.pop(); deque.append(i); if i >= k - 1: res.append(nums[deque[0]]); return res","Finds the maximum element in each sliding window of size k.

This function returns a list of the maximum elements in each sliding window of size k in the input list nums. It uses a deque to maintain the indices of potential maximums in the current window.","def test_max_sliding_window(): assert max_sliding_window([1, 3, -1, -3, 5, 3, 6, 7], 3) == [3, 3, 5, 5, 6, 7] assert max_sliding_window([1, -1], 1) == [1, -1]"
"from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ","This function 'check_occurences' performs a specific operation.

The function 'check_occurences' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_check_occurences():
    # Add test cases for check_occurences
    assert check_occurences(...) == expected_output"
def nth_oblong_number(n): return n * (n + 1),"Computes the nth oblong number.

This function returns the n-th oblong number, which is the product of n and n + 1.",def test_nth_oblong_number(): assert nth_oblong_number(3) == 12 assert nth_oblong_number(1) == 2 assert nth_oblong_number(5) == 30
"def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter","This function 'perimeter_triangle' performs a specific operation.

The function 'perimeter_triangle' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_perimeter_triangle():
    # Add test cases for perimeter_triangle
    assert perimeter_triangle(...) == expected_output"
"def sort_dict_by_value(d): return dict(sorted(d.items(), key=lambda item: item[1]))","Sorts a dictionary by its values.

This function returns a new dictionary sorted by the values of the input dictionary d.","def test_sort_dict_by_value(): assert sort_dict_by_value({'a': 2, 'b': 1}) == {'b': 1, 'a': 2} assert sort_dict_by_value({'x': 5, 'y': 3}) == {'y': 3, 'x': 5} assert sort_dict_by_value({}) == {}"
def near_thousand(n):      return ((abs(1000 - n) <= 100) or (abs(2000 - n) <= 100))print(near_thousand(1000))print(near_thousand(900))print(near_thousand(800))   print(near_thousand(2200)),"""""""
Brief Description:
------------------
near_thousand function performs a specific operation as described below.

Extended Description:
---------------------
This function, `near_thousand`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> near_thousand(value)
Expected output
""""""","import unittest

class TestNear_thousand(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = near_thousand(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = near_thousand(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def format_date(year, month, day): return f""{year:04}-{month:02}-{day:02}""","Formats a date as a string.

This function returns a string representing the date in ""YYYY-MM-DD"" format using the provided year, month, and day.","def test_format_date(): assert format_date(2024, 9, 10) == ""2024-09-10"" assert format_date(2000, 1, 1) == ""2000-01-01"" assert format_date(1999, 12, 31) == ""1999-12-31"""
def nth_prime(n): primes = [] i = 2 while len(primes) < n: if all(i % p != 0 for p in primes): primes.append(i) i += 1 return primes[-1],"Finds the nth prime number.

This function computes the nth prime number by iterating and checking for primality until n primes are found.",def test_nth_prime(): assert nth_prime(1) == 2 assert nth_prime(5) == 11 assert nth_prime(10) == 29
"def generate_prime_numbers(n): primes = [] for num in range(2, n + 1): if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)): primes.append(num) return primes","Generates a list of prime numbers up to n.

This function returns a list of all prime numbers less than or equal to the input number n.","def test_generate_prime_numbers(): assert generate_prime_numbers(10) == [2, 3, 5, 7] assert generate_prime_numbers(1) == [] assert generate_prime_numbers(20) == [2, 3, 5, 7, 11, 13, 17, 19]"
"def match_words(words):  ctr = 0  for word in words:    if len(word) > 1 and word[0] == word[-1]:      ctr += 1  return ctrprint(match_words(['abc', 'xyz', 'aba', '1221']))","""""""
Brief Description:
------------------
match_words function performs a specific operation as described below.

Extended Description:
---------------------
This function, `match_words`, takes 1 parameters: words. It is designed to perform a certain task using these parameters.

Parameters:
-----------
words : type
    Description of words.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> match_words(value)
Expected output
""""""","import unittest

class TestMatch_words(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = match_words(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = match_words(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def pancake_sort(nums):    arr_len = len(nums)    while arr_len > 1:        mi = nums.index(max(nums[0:arr_len]))        nums = nums[mi::-1] + nums[mi+1:len(nums)]        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]        arr_len -= 1    return numsuser_input = input(""Input numbers separated by a comma:\n"").strip()nums = [int(item) for item in user_input.split(',')]print(pancake_sort(nums))","""""""
Brief Description:
------------------
pancake_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `pancake_sort`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> pancake_sort(value)
Expected output
""""""","import unittest

class TestPancake_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = pancake_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = pancake_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","This function 'concatenate_elements' performs a specific operation.

The function 'concatenate_elements' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_concatenate_elements():
    # Add test cases for concatenate_elements
    assert concatenate_elements(...) == expected_output"
"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ","This function 'even_Power_Sum' performs a specific operation.

The function 'even_Power_Sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_even_Power_Sum():
    # Add test cases for even_Power_Sum
    assert even_Power_Sum(...) == expected_output"
"def count_tuplex(tuplex,value):  
  count = tuplex.count(value)
  return count","This function 'count_tuplex' performs a specific operation.

The function 'count_tuplex' takes the following parameters: tuplex, value. It performs operations based on the parameters provided.","def test_count_tuplex():
    # Add test cases for count_tuplex
    assert count_tuplex(...) == expected_output"
"def tuples_to_list_str(lst):    result = [(""%s ""*len(el)%el).strip() for el in lst]    return result   colors = [('red', 'green'), ('black', 'white'), ('orange', 'pink')]print(""Original list of tuples:"")print(colors)print(""\nConvert the said list of tuples to a list of strings:"")print(tuples_to_list_str(colors))names = [('Laiba','Delacruz'), ('Mali','Stacey','Drummond'), ('Raja','Welch'), ('Saarah','Stone')]print(""\nOriginal list of tuples:"")print(names)print(""\nConvert the said list of tuples to a list of strings:"")print(tuples_to_list_str(names))","""""""
Brief Description:
------------------
tuples_to_list_str function performs a specific operation as described below.

Extended Description:
---------------------
This function, `tuples_to_list_str`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> tuples_to_list_str(value)
Expected output
""""""","import unittest

class TestTuples_to_list_str(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = tuples_to_list_str(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = tuples_to_list_str(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def filter_data(students,h,w):
    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}
    return result    ","This function 'filter_data' performs a specific operation.

The function 'filter_data' takes the following parameters: students, h, w. It performs operations based on the parameters provided.","def test_filter_data():
    # Add test cases for filter_data
    assert filter_data(...) == expected_output"
def count_zeros(n): return str(n).count('0'),"Counts the number of zeros in a number.

This function returns the number of zero digits in the input number n.",def test_count_zeros(): assert count_zeros(1001) == 2 assert count_zeros(123) == 0 assert count_zeros(100000) == 5
"def find_Max(arr,low,high): 
    if (high < low): 
        return arr[0] 
    if (high == low): 
        return arr[low] 
    mid = low + (high - low) // 2 
    if (mid < high and arr[mid + 1] < arr[mid]): 
        return arr[mid] 
    if (mid > low and arr[mid] < arr[mid - 1]): 
        return arr[mid - 1]  
    if (arr[low] > arr[mid]): 
        return find_Max(arr,low,mid - 1) 
    else: 
        return find_Max(arr,mid + 1,high) ","This function 'find_Max' performs a specific operation.

The function 'find_Max' takes the following parameters: arr, low, high. It performs operations based on the parameters provided.","def test_find_Max():
    # Add test cases for find_Max
    assert find_Max(...) == expected_output"
"def flatten_nested_list(nestedList): def flatten_generator(nested): for i in nested: if isinstance(i, list): yield from flatten_generator(i); else: yield i; return list(flatten_generator(nestedList))","Flattens a nested list.

This function returns a flattened version of the input nestedList, where each nested list is recursively unpacked into a single list of elements. It uses a generator to handle arbitrary nesting.","def test_flatten_nested_list(): assert flatten_nested_list([1, [2, [3, 4], 5], 6]) == [1, 2, 3, 4, 5, 6]"
"def unique_paths_iii(grid): def dfs(x, y, remain): if not (0 <= x < len(grid)) or not (0 <= y < len(grid[0])) or grid[x][y] < 0: return 0; if grid[x][y] == 2: return remain == 0; temp, grid[x][y] = grid[x][y], -2; paths = dfs(x+1, y, remain-1) + dfs(x-1, y, remain-1) + dfs(x, y+1, remain-1) + dfs(x, y-1, remain-1); grid[x][y] = temp; return paths; start_x = start_y = 0; empty_cells = 1; for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: start_x, start_y = i, j; if grid[i][j] == 0: empty_cells += 1; return dfs(start_x, start_y, empty_cells)","Counts all unique paths from start to end in a grid.

This function returns the number of unique paths from the start cell to the end cell in the input grid grid, where the path must visit all non-obstacle cells exactly once. It uses depth-first search (DFS) to explore all paths.","def test_unique_paths_iii(): grid = [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 2, -1]]; assert unique_paths_iii(grid) == 2"
def reverse_each_word(s): return ' '.join(word[::-1] for word in s.split()),"Reverses each word in a sentence.

This function takes a string s and reverses each word individually, while preserving the order of words in the sentence.",def test_reverse_each_word(): assert reverse_each_word("hello world") == "olleh dlrow" assert reverse_each_word("abc def") == "cba fed" assert reverse_each_word("") == ""
"def sort_tuple(tup): 
	lst = len(tup) 
	for i in range(0, lst): 
		for j in range(0, lst-i-1): 
			if (tup[j][-1] > tup[j + 1][-1]): 
				temp = tup[j] 
				tup[j]= tup[j + 1] 
				tup[j + 1]= temp 
	return tup","This function 'sort_tuple' performs a specific operation.

The function 'sort_tuple' takes the following parameters: tup. It performs operations based on the parameters provided.","def test_sort_tuple():
    # Add test cases for sort_tuple
    assert sort_tuple(...) == expected_output"
def string_to_list(s): return list(s),"Converts a string to a list of characters.

This function returns a list of characters from the string s, with each character becoming an element in the list.","def test_string_to_list(): assert string_to_list(""hello"") == ['h', 'e', 'l', 'l', 'o'] assert string_to_list("""") == [] assert string_to_list(""abc"") == ['a', 'b', 'c']"
"def rotate_array(nums, k): k %= len(nums); nums[:] = nums[-k:] + nums[:-k]","Rotates an array by k steps.

This function rotates the input array nums by k steps to the right, modifying the array in place.","def test_rotate_array(): arr = [1, 2, 3, 4, 5, 6, 7]; rotate_array(arr, 3); assert arr == [5, 6, 7, 1, 2, 3, 4]"
def is_even(n): return n % 2 == 0,"Checks if a number is even.

This function returns True if n is an even number, and False otherwise.",def test_is_even(): assert is_even(4) assert not is_even(5) assert is_even(0)
def sum_of_squares_of_digits(n): return sum(int(digit) ** 2 for digit in str(abs(n))),"Sums the squares of digits in a number.

This function returns the sum of the squares of each digit in the number n.",def test_sum_of_squares_of_digits(): assert sum_of_squares_of_digits(123) == 14 assert sum_of_squares_of_digits(0) == 0 assert sum_of_squares_of_digits(-456) == 77
"def remove_none(nums):    result = filter(lambda v: v is not None, nums)    return list(result)nums = [12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]print(""Original list:"")print(nums)print(""\nRemove None value from the said list:"")print(remove_none(nums))","""""""
Brief Description:
------------------
remove_none function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_none`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_none(value)
Expected output
""""""","import unittest

class TestRemove_none(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_none(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_none(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def get_length_of_string(s): return len(s),"Returns the length of a string.

This function returns the number of characters in the input string s.",def test_get_length_of_string(): assert get_length_of_string("hello") == 5 assert get_length_of_string("world") == 5 assert get_length_of_string("") == 0
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1),"Computes the factorial of a number using recursion.

This function returns the factorial of n by recursively multiplying n by the factorial of n - 1.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(3) == 6
def remove_vowels(s): return ''.join([char for char in s if char.lower() not in 'aeiou']),"Removes vowels from a string.

This function removes all vowel characters (a, e, i, o, u) from the string s and returns the resulting string.",def test_remove_vowels(): assert remove_vowels("hello") == "hll" assert remove_vowels("world") == "wrld" assert remove_vowels("") == ""
"def count_occurrences_of_char(s, char): return s.count(char)","Counts the occurrences of a specific character in a string.

This function returns the n-th Fibonacci number using an iterative approach. The Fibonacci sequence starts with 0 and 1, where each subsequent number is the sum of the previous two.","def test_count_occurrences_of_char(): assert count_occurrences_of_char(""hello"", ""l"") == 2 assert count_occurrences_of_char(""abc"", ""d"") == 0 assert count_occurrences_of_char("""", ""a"") == 0"
"def StringLength(str, i):  if (str[i] == '\0'):    return 0  else:    return (1 + StringLength(str, i + 1))str=input(""Enter your String:"")str+='\0'print(""Length of the String is: "",StringLength(str,0))","""""""
Brief Description:
------------------
StringLength function performs a specific operation as described below.

Extended Description:
---------------------
This function, `StringLength`, takes 2 parameters: str,  i. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.
i : type
    Description of i.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> StringLength(value, value)
Expected output
""""""","import unittest

class TestStringlength(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = StringLength(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = StringLength(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def string_to_list(s): return list(s),"Converts a string into a list of characters.

This function returns a list where each element is a character from the string s.","def test_string_to_list(): assert string_to_list(""hello"") == ['h', 'e', 'l', 'l', 'o'] assert string_to_list("""") == [] assert string_to_list(""abc"") == ['a', 'b', 'c']"
"def flatten_dict(d): return {k: v for k, v in d.items() if not isinstance(v, dict)}","Flattens a dictionary by removing nested dictionaries.

This function returns a new dictionary that includes only key-value pairs where the value is not a dictionary. Nested dictionaries are excluded.","def test_flatten_dict(): assert flatten_dict({'a': 1, 'b': {'c': 2}}) == {'a': 1} assert flatten_dict({'x': 3, 'y': 4}) == {'x': 3, 'y': 4} assert flatten_dict({'a': {'b': 5}}) == {}"
"def sort_mixed_list(mixed_list):    int_part = sorted([i for i in mixed_list if type(i) is int])    str_part = sorted([i for i in mixed_list if type(i) is str])    return int_part + str_partmixed_list = [19,'red',12,'green','blue', 10,'white','green',1]print(""Original list:"")print(mixed_list)print(""\nSort the said  mixed list of integers and strings:"")print(sort_mixed_list(mixed_list))","""""""
Brief Description:
------------------
sort_mixed_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_mixed_list`, takes 1 parameters: mixed_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
mixed_list : type
    Description of mixed_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_mixed_list(value)
Expected output
""""""","import unittest

class TestSort_mixed_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_mixed_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_mixed_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def get_dict_values(d): return list(d.values()),Retrieves values from a dictionary.,"def test_get_dict_values(): assert get_dict_values({'a': 1, 'b': 2}) == [1, 2] assert get_dict_values({'x': 10}) == [10] assert get_dict_values({}) == []"
"def permutation_coefficient(n, k): 
	P = [[0 for i in range(k + 1)] 
			for j in range(n + 1)] 
	for i in range(n + 1): 
		for j in range(min(i, k) + 1): 
			if (j == 0): 
				P[i][j] = 1
			else: 
				P[i][j] = P[i - 1][j] + ( 
						j * P[i - 1][j - 1]) 
			if (j < k): 
				P[i][j + 1] = 0
	return P[n][k] ","This function 'permutation_coefficient' performs a specific operation.

The function 'permutation_coefficient' takes the following parameters: n, k. It performs operations based on the parameters provided.","def test_permutation_coefficient():
    # Add test cases for permutation_coefficient
    assert permutation_coefficient(...) == expected_output"
def extract_numbers(s): return [int(c) for c in s if c.isdigit()],"Extracts numbers from a string.

This function returns a list of integers found in the input string s.","def test_extract_numbers(): assert extract_numbers(""abc123"") == [1, 2, 3] assert extract_numbers(""no numbers"") == [] assert extract_numbers(""4a5b6"") == [4, 5, 6]"
"def add_two_numbers(a, b): return a + b","Adds two numbers.

 This function takes two numerical inputs a and b and returns their sum. It assumes the inputs are integers or floats."," def test_add_two_numbers(): assert add_two_numbers(2, 3) == 5 assert add_two_numbers(-1, 1) == 0 assert add_two_numbers(0, 0) == 0"
def nth_centered_heptagonal_number(n): return (7 * n ** 2 + 7 * n + 2) // 2,"Computes the nth centered heptagonal number.

This function returns the n-th centered heptagonal number, which is a number in the sequence of centered polygons based on a heptagon.",def test_nth_centered_heptagonal_number(): assert nth_centered_heptagonal_number(3) == 49 assert nth_centered_heptagonal_number(1) == 8 assert nth_centered_heptagonal_number(5) == 121
"def no_of_argu(*args):

# using len() method in args to count
return(len(args))




a = 1
b = 3


# arguments passed
n = no_of_argu(1, 2, 4, a)


# result printed
print("" The number of arguments are: "", n)","""""""
Brief Description:
------------------
no_of_argu function performs a specific operation as described below.

Extended Description:
---------------------
This function, `no_of_argu`, takes 1 parameters: *args. It is designed to perform a certain task using these parameters.

Parameters:
-----------
*args : type
    Description of *args.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> no_of_argu(value)
Expected output
""""""","import unittest

class TestNo_of_argu(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = no_of_argu(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = no_of_argu(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def find_max(lst): return max(lst) if lst else None,Finds the largest element in a list.,"def test_find_max(): assert find_max([1, 2, 3]) == 3 assert find_max([10, 5, 7]) == 10 assert find_max([]) == None"
def get_unique_elements(lst): return list(set(lst)),"Returns the unique elements in a list.

This function returns a list of the unique elements from the list lst, removing duplicates.","def test_get_unique_elements(): assert get_unique_elements([1, 2, 2, 3]) == [1, 2, 3] assert get_unique_elements([5, 5, 5]) == [5] assert get_unique_elements([]) == []"
"def square_perimeter(a):
  perimeter=4*a
  return perimeter","This function 'square_perimeter' performs a specific operation.

The function 'square_perimeter' takes the following parameters: a. It performs operations based on the parameters provided.","def test_square_perimeter():
    # Add test cases for square_perimeter
    assert square_perimeter(...) == expected_output"
"def minimize_lateness(ttimes, dtimes):
    """"""Return minimum max lateness and the schedule to obtain it.

    (min_lateness, schedule) is returned.

    Lateness of a request i is L(i) = finish time of i - deadline of if
    request i finishes after its deadline.
    The maximum lateness is the maximum value of L(i) over all i.
    min_lateness is the minimum value of the maximum lateness that can be
    achieved by optimally scheduling the requests.

    schedule is a list that contains the indexes of the requests ordered such
    that minimum maximum lateness is achieved.

    ttime[i] is the time taken to complete request i.
    dtime[i] is the deadline of request i.
    """"""
    # index = [0, 1, 2, ..., n - 1] for n requests
    index = list(range(len(dtimes)))
    # sort according to deadlines
    index.sort(key=lambda i: dtimes[i])

    min_lateness = 0
    start_time = 0
    for i in index:
        min_lateness = max(min_lateness,
                           (ttimes[i] + start_time) - dtimes[i])
        start_time += ttimes[i]

    return min_lateness, index


n = int(input('Enter number of requests: '))
ttimes = input('Enter the time taken to complete the {} request(s) in order: '
              .format(n)).split()
ttimes = [int(tt) for tt in ttimes]
dtimes = input('Enter the deadlines of the {} request(s) in order: '
               .format(n)).split()
dtimes = [int(dt) for dt in dtimes]

min_lateness, schedule = minimize_lateness(ttimes, dtimes)
print('The minimum maximum lateness:', min_lateness)
print('The order in which the requests should be scheduled:', schedule)","""""""
Brief Description:
------------------
minimize_lateness function performs a specific operation as described below.

Extended Description:
---------------------
This function, `minimize_lateness`, takes 2 parameters: ttimes,  dtimes. It is designed to perform a certain task using these parameters.

Parameters:
-----------
ttimes : type
    Description of ttimes.
dtimes : type
    Description of dtimes.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> minimize_lateness(value, value)
Expected output
""""""","import unittest

class TestMinimize_lateness(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = minimize_lateness(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = minimize_lateness(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def bucket_sort(arr): max_val = max(arr); size = max_val / len(arr); buckets = [[] for _ in range(len(arr))]; for i in range(len(arr)): j = int(arr[i] / size); if j != len(arr): buckets[j].append(arr[i]); else: buckets[len(arr) - 1].append(arr[i]); for i in range(len(arr)): insertion_sort(buckets[i]); k = 0; for i in range(len(arr)): for j in range(len(buckets[i])): arr[k] = buckets[i][j]; k += 1,"Sorts an array using bucket sort.

This function sorts the input array arr using bucket sort, which distributes elements into buckets based on their values and then sorts each bucket individually.","def test_bucket_sort(): arr = [0.897, 0.565, 0.656, 0.123, 0.665, 0.343]; bucket_sort(arr); assert arr == [0.123, 0.343, 0.565, 0.656, 0.665, 0.897]"
"def diff_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even-first_odd)","This function 'diff_even_odd' performs a specific operation.

The function 'diff_even_odd' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_diff_even_odd():
    # Add test cases for diff_even_odd
    assert diff_even_odd(...) == expected_output"
"def is_anagram(s1, s2): return sorted(s1) == sorted(s2)","Checks if two strings are anagrams.

This function returns True if s1 and s2 are anagrams, meaning they contain the same characters in any order, and False otherwise.","def test_is_anagram(): assert is_anagram(""listen"", ""silent"") assert not is_anagram(""hello"", ""world"") assert is_anagram(""evil"", ""vile"")"
"import math
def sum_gp(a,n,r):
 total = (a * (1 - math.pow(r, n ))) / (1- r)
 return total","This function 'sum_gp' performs a specific operation.

The function 'sum_gp' takes the following parameters: a, n, r. It performs operations based on the parameters provided.","def test_sum_gp():
    # Add test cases for sum_gp
    assert sum_gp(...) == expected_output"
"def is_divisible(a, b): return a % b == 0","Checks if a number is divisible by another number.

This function takes two numbers a and b and returns True if a is divisible by b, otherwise it returns False.","def test_is_divisible(): assert is_divisible(10, 2) assert not is_divisible(10, 3) assert is_divisible(0, 5)"
"def find_divisors(n): return [i for i in range(1, n + 1) if n % i == 0]","Finds all divisors of a number.

This function returns a list of all divisors of the input number n.","def test_find_divisors(): assert find_divisors(6) == [1, 2, 3, 6] assert find_divisors(10) == [1, 2, 5, 10] assert find_divisors(13) == [1, 13]"
"def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]  
  return test_list","This function 'move_first' performs a specific operation.

The function 'move_first' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_move_first():
    # Add test cases for move_first
    assert move_first(...) == expected_output"
def find_duplicates(lst): return list(set([x for x in lst if lst.count(x) > 1])),"Finds duplicate elements in a list.

 This function accepts a list""
lst
and returns a new list of all elements that appear more than once in the input list. Duplicates are only included once in the result."," def test_find_duplicates(): assert find_duplicates([1, 2, 3, 2, 4, 4]) == [2, 4] assert find_duplicates([5, 6, 7]) == [] assert find_duplicates([1, 1, 1]) == [1]"
def all_unique(lst): return len(lst) == len(set(lst)),"Checks if all elements in a list are unique.

This function returns True if all elements in the list lst are unique, and False if there are any duplicates.","def test_all_unique(): assert all_unique([1, 2, 3]) assert not all_unique([1, 1, 2]) assert all_unique([])"
"def cast_list(val):  return list(val) if isinstance(val, (tuple, list, set, dict)) else [val]d1 = [1]print(type(d1))print(cast_list(d1)) d2 = ('Red', 'Green')print(type(d2))print(cast_list(d2)) d3 = {'Red', 'Green'}print(type(d3))print(cast_list(d3))d4 = {1: 'Red', 2: 'Green', 3: 'Black'}print(type(d4))print(cast_list(d4))","""""""
Brief Description:
------------------
cast_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `cast_list`, takes 1 parameters: val. It is designed to perform a certain task using these parameters.

Parameters:
-----------
val : type
    Description of val.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> cast_list(value)
Expected output
""""""","import unittest

class TestCast_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = cast_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = cast_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"from itertools import combinations 
def find_combinations(test_list):
  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]
  return (res) ","This function 'find_combinations' performs a specific operation.

The function 'find_combinations' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_find_combinations():
    # Add test cases for find_combinations
    assert find_combinations(...) == expected_output"
"def find_longest_word(s): return max(s.split(), key=len)","Finds the longest word in a string.

This function returns the longest word in the input string s, where words are defined as sequences of characters separated by spaces.",def test_find_longest_word(): assert find_longest_word("the quick brown fox") == "quick" assert find_longest_word("hello world") == "hello" assert find_longest_word("a b c d") == "d"
def count_non_space_characters(s): return sum(1 for char in s if not char.isspace()),"Counts non-space characters in a string.

This function returns the number of non-space characters in the string s.",def test_count_non_space_characters(): assert count_non_space_characters("hello world") == 10 assert count_non_space_characters("a b c") == 3 assert count_non_space_characters("") == 0
"def split_string(s, delimiter): return s.split(delimiter)","Splits a string by a delimiter.

This function takes a string s and splits it into a list of substrings using the specified delimiter.","def test_split_string(): assert split_string(""a,b,c"", "","") == [""a"", ""b"", ""c""] assert split_string(""hello world"", "" "") == [""hello"", ""world""] assert split_string("""", "","") == [""""]"
"def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True","This function 'is_Sum_Of_Powers_Of_Two' performs a specific operation.

The function 'is_Sum_Of_Powers_Of_Two' takes the following parameters: n. It performs operations based on the parameters provided.","def test_is_Sum_Of_Powers_Of_Two():
    # Add test cases for is_Sum_Of_Powers_Of_Two
    assert is_Sum_Of_Powers_Of_Two(...) == expected_output"
def remove_duplicates(lst): return list(dict.fromkeys(lst)),"Removes duplicates from a list while preserving order.

This function removes all duplicate elements from the list lst while preserving the original order.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates([5, 5, 5]) == [5] assert remove_duplicates([]) == []"
"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return (str(res)) ","This function 'count_bidirectional' performs a specific operation.

The function 'count_bidirectional' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_count_bidirectional():
    # Add test cases for count_bidirectional
    assert count_bidirectional(...) == expected_output"
"def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True","Checks if a number is prime.

This function returns True if n is a prime number, and False otherwise. A prime number is a number greater than 1 with no positive divisors other than 1 and itself.",def test_is_prime(): assert is_prime(2) assert not is_prime(4) assert is_prime(7)
def find_max(lst): return max(lst),"Finds the maximum value in a list.

This function returns the maximum value among the elements in the input list lst.","def test_find_max(): assert find_max([1, 2, 3]) == 3 assert find_max([10, 20, 30]) == 30 assert find_max([-5, -1, -3]) == -1"
def calculate_median(lst): sorted_lst = sorted(lst) n = len(sorted_lst) mid = n // 2 return (sorted_lst[mid] + sorted_lst[-mid-1]) / 2 if n % 2 == 0 else sorted_lst[mid],"Calculates the median of a list of numbers.

This function returns the median of the numbers in the input list lst, sorted in ascending order.","def test_calculate_median(): assert calculate_median([1, 2, 3]) == 2 assert calculate_median([1, 2, 3, 4]) == 2.5 assert calculate_median([]) == 0"
"def get_common_elements(lst1, lst2): return list(set(lst1) & set(lst2))",Finds common elements between two lists.,"def test_get_common_elements(): assert get_common_elements([1, 2, 3], [3, 4, 5]) == [3] assert get_common_elements([1, 2], [3, 4]) == [] assert get_common_elements([1, 2, 3], [2, 3, 4]) == [2, 3]"
"def min_coin_change(coins, amount): dp = [float('inf')] * (amount + 1); dp[0] = 0; for coin in coins: for i in range(coin, amount + 1): dp[i] = min(dp[i], dp[i - coin] + 1); return dp[amount] if dp[amount] != float('inf') else -1","Solves the minimum coin change problem.

This function returns the minimum number of coins required to make up the amount amount using the available denominations coins.","def test_min_coin_change(): assert min_coin_change([1, 2, 5], 11) == 3 assert min_coin_change([2], 3) == -1 assert min_coin_change([1], 0) == 0"
"def sort_sublists(input_list):    result = list(map(sorted, input_list))     return resultcolor1 = [[""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]]print(""\nOriginal list:"")print(color1)  print(""\nAfter sorting each sublist of the said list of lists:"")print(sort_sublists(color1))","""""""
Brief Description:
------------------
sort_sublists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_sublists`, takes 1 parameters: input_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input_list : type
    Description of input_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_sublists(value)
Expected output
""""""","import unittest

class TestSort_sublists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_sublists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_sublists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def power(a,b):	if b==0:		return 1	elif a==0:		return 0	elif b==1:		return a	else:		return a*power(a,b-1)print(power(3,4))","""""""
Brief Description:
------------------
power function performs a specific operation as described below.

Extended Description:
---------------------
This function, `power`, takes 2 parameters: a, b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> power(value, value)
Expected output
""""""","import unittest

class TestPower(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = power(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = power(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def grouping_dictionary(l):    result = {}    for k, v in l:         result.setdefault(k, []).append(v)    return resultcolors = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]print(""Original list:"")print(colors)print(""\nGrouping a sequence of key-value pairs into a dictionary of lists:"")print(grouping_dictionary(colors))","""""""
Brief Description:
------------------
grouping_dictionary function performs a specific operation as described below.

Extended Description:
---------------------
This function, `grouping_dictionary`, takes 1 parameters: l. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l : type
    Description of l.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> grouping_dictionary(value)
Expected output
""""""","import unittest

class TestGrouping_dictionary(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = grouping_dictionary(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = grouping_dictionary(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_valid_sudoku(board): def is_valid_unit(unit): return len(unit) == len(set(unit)); for row in board: if not is_valid_unit([x for x in row if x != "".""]): return False; for col in zip(*board): if not is_valid_unit([x for x in col if x != "".""]): return False; for i in range(0, 9, 3): for j in range(0, 9, 3): if not is_valid_unit([board[x][y] for x in range(i, i + 3) for y in range(j, j + 3) if board[x][y] != "".""]): return False; return True","Validates a Sudoku board.

This function returns True if the given 9x9 Sudoku board is valid according to the rules of Sudoku, where each row, column, and 3x3 box must contain the numbers 1-9 without repetition.","def test_is_valid_sudoku(): board = [[""5"", ""3"", ""."", ""."", ""7"", ""."", ""."", ""."", "".""], [""6"", ""."", ""."", ""1"", ""9"", ""5"", ""."", ""."", "".""], [""."", ""9"", ""8"", ""."", ""."", ""."", ""."", ""6"", "".""], [""8"", ""."", ""."", ""."", ""6"", ""."", ""."", ""."", ""3""], [""4"", ""."", ""."", ""8"", ""."", ""3"", ""."", ""."", ""1""], [""7"", ""."", ""."", ""."", ""2"", ""."", ""."", ""."", ""6""], [""."", ""6"", ""."", ""."", ""."", ""."", ""2"", ""8"", "".""], [""."", ""."", ""."", ""4"", ""1"", ""9"", ""."", ""."", ""5""], [""."", ""."", ""."", ""."", ""8"", ""."", ""."", ""7"", ""9""]]; assert is_valid_sudoku(board) == True"
def capitalize_words(s): return ' '.join([word.capitalize() for word in s.split()]),"Capitalizes each word in a string.

This function returns a new string where each word in the input string s is capitalized.",def test_capitalize_words(): assert capitalize_words("hello world") == "Hello World" assert capitalize_words("is fun") == "Is Fun" assert capitalize_words("") == ""
"def neg_count(list):
  neg_count= 0
  for num in list: 
    if num <= 0: 
      neg_count += 1
  return neg_count ","This function 'neg_count' performs a specific operation.

The function 'neg_count' takes the following parameters: list. It performs operations based on the parameters provided.","def test_neg_count():
    # Add test cases for neg_count
    assert neg_count(...) == expected_output"
"def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) ","This function 'find_missing' performs a specific operation.

The function 'find_missing' takes the following parameters: ar, N. It performs operations based on the parameters provided.","def test_find_missing():
    # Add test cases for find_missing
    assert find_missing(...) == expected_output"
def count_vowels(s): return sum(1 for char in s if char.lower() in 'aeiou'),"Counts the number of vowels in a string.

This function returns the number of vowels in the string s, considering both uppercase and lowercase vowels.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("world") == 1 assert count_vowels("") == 0
"def frequency_Of_Smallest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] < mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ","This function 'frequency_Of_Smallest' performs a specific operation.

The function 'frequency_Of_Smallest' takes the following parameters: n, arr. It performs operations based on the parameters provided.","def test_frequency_Of_Smallest():
    # Add test cases for frequency_Of_Smallest
    assert frequency_Of_Smallest(...) == expected_output"
def nth_square_number(n): return n ** 2,"Computes the square of a number.

This function returns the square of the input number n.",def test_nth_square_number(): assert nth_square_number(3) == 9 assert nth_square_number(1) == 1 assert nth_square_number(5) == 25
"def odd_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))","This function 'odd_position' performs a specific operation.

The function 'odd_position' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_odd_position():
    # Add test cases for odd_position
    assert odd_position(...) == expected_output"
"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ","This function 'next_Power_Of_2' performs a specific operation.

The function 'next_Power_Of_2' takes the following parameters: n. It performs operations based on the parameters provided.","def test_next_Power_Of_2():
    # Add test cases for next_Power_Of_2
    assert next_Power_Of_2(...) == expected_output"
"def not_poor(str1):  snot = str1.find('not')  spoor = str1.find('poor')    if spoor > snot and snot>0 and spoor>0:    str1 = str1.replace(str1[snot:(spoor+4)], 'good')    return str1  else:    return str1print(not_poor('The lyrics is not that poor!'))print(not_poor('The lyrics is poor!'))","""""""
Brief Description:
------------------
not_poor function performs a specific operation as described below.

Extended Description:
---------------------
This function, `not_poor`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> not_poor(value)
Expected output
""""""","import unittest

class TestNot_poor(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = not_poor(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = not_poor(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_alpha_dig_spl(string):
  alphabets=digits = special = 0
  for i in range(len(string)):
    if(string[i].isalpha()):
        alphabets = alphabets + 1
    elif(string[i].isdigit()):
        digits = digits + 1
    else:
        special = special + 1
  return (alphabets,digits,special)   ","This function 'count_alpha_dig_spl' performs a specific operation.

The function 'count_alpha_dig_spl' takes the following parameters: string. It performs operations based on the parameters provided.","def test_count_alpha_dig_spl():
    # Add test cases for count_alpha_dig_spl
    assert count_alpha_dig_spl(...) == expected_output"
def sort_list(lst): return sorted(lst),Sorts a list.,"def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list([5, 2, 9]) == [2, 5, 9] assert sort_list([]) == []"
def is_alpha_numeric(s): return s.isalnum(),"Checks if a string is alphanumeric.

 This function returns True if the string s consists only of alphanumeric characters (letters and digits), and False otherwise.",def test_is_alpha_numeric(): assert is_alpha_numeric("hello123") assert not is_alpha_numeric("hello!") assert not is_alpha_numeric("")
"def find_peak(nums): left, right = 0, len(nums) - 1; while left < right: mid = (left + right) // 2; if nums[mid] < nums[mid + 1]: left = mid + 1; else: right = mid; return left","Finds a peak element in an array.

This function returns the index of a peak element in the input list nums, where a peak element is one that is greater than its neighbors. It uses binary search to find the peak efficiently.","def test_find_peak(): assert find_peak([1, 2, 3, 1]) == 2 assert find_peak([1, 2, 1, 3, 5, 6, 4]) in [1, 5]"
"def count_occurrences(lst, value): return lst.count(value)",Counts occurrences of a value in a list.,"def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences([1, 1, 1], 1) == 3 assert count_occurrences([], 1) == 0"
def product_of_list(lst): result = 1 for x in lst: result *= x return result,"Computes the product of all elements in a list.

This function calculates the product of all numbers in the list lst. If the list is empty, it returns 1.","def test_product_of_list(): assert product_of_list([1, 2, 3]) == 6 assert product_of_list([4]) == 4 assert product_of_list([]) == 1"
def bucket_sort(arr): max_val = max(arr); size = max_val // len(arr) + 1; buckets = [[] for _ in range(size)]; for i in arr: buckets[i // size].append(i); for bucket in buckets: bucket.sort(); result = []; for bucket in buckets: result.extend(bucket); for i in range(len(arr)): arr[i] = result[i],"Sorts an array using bucket sort algorithm.

This function sorts the input array arr using the bucket sort algorithm, which distributes elements into buckets and then sorts each bucket individually before combining them into a sorted array.","def test_bucket_sort(): arr = [30, 40, 10, 80, 5, 12, 70, 45]; bucket_sort(arr); assert arr == [5, 10, 12, 30, 40, 45, 70, 80]"
"def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element","This function 'check_element' performs a specific operation.

The function 'check_element' takes the following parameters: list, element. It performs operations based on the parameters provided.","def test_check_element():
    # Add test cases for check_element
    assert check_element(...) == expected_output"
def count_vowels(s): return sum(1 for char in s.lower() if char in 'aeiou'),Counts the vowels in a string.,def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("aeiou") == 5 assert count_vowels("xyz") == 0
"def extract_symmetric(test_list):
  temp = set(test_list) & {(b, a) for a, b in test_list}
  res = {(a, b) for a, b in temp if a < b}
  return (res) ","This function 'extract_symmetric' performs a specific operation.

The function 'extract_symmetric' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_extract_symmetric():
    # Add test cases for extract_symmetric
    assert extract_symmetric(...) == expected_output"
"def arc_length(d,a):
    pi=22/7
    if a >= 360:
        return None
    arclength = (pi*d) * (a/360)
    return arclength","This function 'arc_length' performs a specific operation.

The function 'arc_length' takes the following parameters: d, a. It performs operations based on the parameters provided.","def test_arc_length():
    # Add test cases for arc_length
    assert arc_length(...) == expected_output"
"import re
def fill_spaces(text):
  return (re.sub(""[ ,.]"", "":"", text))","This function 'fill_spaces' performs a specific operation.

The function 'fill_spaces' takes the following parameters: text. It performs operations based on the parameters provided.","def test_fill_spaces():
    # Add test cases for fill_spaces
    assert fill_spaces(...) == expected_output"
"INT_BITS = 32
def left_Rotate(n,d):   
    return (n << d)|(n >> (INT_BITS - d))  ","This function 'left_Rotate' performs a specific operation.

The function 'left_Rotate' takes the following parameters: n, d. It performs operations based on the parameters provided.","def test_left_Rotate():
    # Add test cases for left_Rotate
    assert left_Rotate(...) == expected_output"
"def rotate_image_90(matrix): n = len(matrix); for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]; for row in matrix: row.reverse()","Rotates a 2D matrix 90 degrees clockwise.

This function modifies the input 2D matrix in place by rotating it 90 degrees clockwise. It first transposes the matrix and then reverses each row to achieve the rotation.","def test_rotate_image_90(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_image_90(matrix); assert matrix == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"
"def position_max(list1):
    max_val = max(list1)
    max_result = [i for i, j in enumerate(list1) if j == max_val]
    return max_result","This function 'position_max' performs a specific operation.

The function 'position_max' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_position_max():
    # Add test cases for position_max
    assert position_max(...) == expected_output"
"def list_to_string(lst): return ''.join(map(str, lst))","Converts a list of elements to a string.

This function returns a string that concatenates all the elements in the list lst, converting each element to a string.","def test_list_to_string(): assert list_to_string([1, 2, 3]) == ""123"" assert list_to_string([""a"", ""b"", ""c""]) == ""abc"" assert list_to_string([]) == """""
"def bubbleSort(nlist):    for passnum in range(len(nlist)-1,0,-1):        for i in range(passnum):            if nlist[i]>nlist[i+1]:                temp = nlist[i]                nlist[i] = nlist[i+1]                nlist[i+1] = tempnlist = [14,46,43,27,57,41,45,21,70]bubbleSort(nlist)print(nlist)","""""""
Brief Description:
------------------
bubbleSort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `bubbleSort`, takes 1 parameters: nlist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nlist : type
    Description of nlist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> bubbleSort(value)
Expected output
""""""","import unittest

class TestBubblesort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = bubbleSort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = bubbleSort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def climb_stairs(n): if n == 1: return 1; prev1, prev2 = 1, 2; for i in range(3, n + 1): prev1, prev2 = prev2, prev1 + prev2; return prev2",Finds the number of distinct ways to climb n stairs.,def test_climb_stairs(): assert climb_stairs(2) == 2 assert climb_stairs(3) == 3
"def min_cost_path(matrix): rows, cols = len(matrix), len(matrix[0]); dp = [[0] * cols for _ in range(rows)]; dp[0][0] = matrix[0][0]; for i in range(1, rows): dp[i][0] = dp[i-1][0] + matrix[i][0]; for j in range(1, cols): dp[0][j] = dp[0][j-1] + matrix[0][j]; for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j]; return dp[-1][-1]","Calculates the minimum cost path in a matrix.

This function returns the minimum cost required to reach the bottom-right corner of a matrix from the top-left corner, where each cell has a cost.","def test_min_cost_path(): matrix = [[1, 3, 1], [1, 5, 1], [4, 2, 1]]; assert min_cost_path(matrix) == 7 assert min_cost_path([[1, 2], [1, 1]]) == 3"
"def letter_combinations(digits):    if digits == """":        return []    string_maps = {        ""1"": ""abc"",        ""2"": ""def"",        ""3"": ""ghi"",        ""4"": ""jkl"",        ""5"": ""mno"",        ""6"": ""pqrs"",        ""7"": ""tuv"",        ""8"": ""wxy"",        ""9"": ""z""    }    result = [""""]    for num in digits:        temp = []        for an in result:            for char in string_maps[num]:                temp.append(an + char)        result = temp    return resultdigit_string = ""47""print(letter_combinations(digit_string))digit_string = ""29""print(letter_combinations(digit_string))","""""""
Brief Description:
------------------
letter_combinations function performs a specific operation as described below.

Extended Description:
---------------------
This function, `letter_combinations`, takes 1 parameters: digits. It is designed to perform a certain task using these parameters.

Parameters:
-----------
digits : type
    Description of digits.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> letter_combinations(value)
Expected output
""""""","import unittest

class TestLetter_combinations(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = letter_combinations(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = letter_combinations(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def coin_combinations(amount, coins): dp = [0] * (amount + 1); dp[0] = 1; for coin in coins: for x in range(coin, amount + 1): dp[x] += dp[x - coin]; return dp[amount]","Counts the number of ways to make a certain amount using coins.

This function returns the number of ways to make the amount amount using the coin denominations in the list coins. It uses dynamic programming to calculate the number of combinations.","def test_coin_combinations(): assert coin_combinations(5, [1, 2, 5]) == 4 assert coin_combinations(3, [2]) == 0"
def find_first_non_repeated(s): from collections import Counter counts = Counter(s) for char in s: if counts[char] == 1: return char return None,"Finds the first non-repeated character in a string.

This function returns the first character in the input string s that is not repeated. If all characters are repeated, it returns None.",def test_find_first_non_repeated(): assert find_first_non_repeated("swiss") == "w" assert find_first_non_repeated("aabbcc") is None assert find_first_non_repeated("unique") == "u"
def count_digits(n): return len(str(abs(n))),"Counts the number of digits in a number.

This function returns the number of digits in the integer n. If n is negative, the sign is ignored.",def test_count_digits(): assert count_digits(123) == 3 assert count_digits(-456) == 3 assert count_digits(0) == 1
def square_elements(lst): return [x ** 2 for x in lst],"Squares each element of a list.

This function returns a new list where each element in the input list lst is squared.","def test_square_elements(): assert square_elements([1, 2, 3]) == [1, 4, 9] assert square_elements([]) == [] assert square_elements([-1, 0, 1]) == [1, 0, 1]"
"def trap_rainwater(heights): if not heights: return 0; left, right = 0, len(heights) - 1; left_max, right_max = heights[left], heights[right]; water = 0; while left < right: if left_max < right_max: left += 1; left_max = max(left_max, heights[left]); water += left_max - heights[left]; else: right -= 1; right_max = max(right_max, heights[right]); water += right_max - heights[right]; return water","Calculates trapped rainwater.

This function returns the total amount of water that can be trapped between the bars represented by the list heights, where each element is the height of a bar.","def test_trap_rainwater(): assert trap_rainwater([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]) == 6 assert trap_rainwater([4, 2, 0, 3, 2, 5]) == 9 assert trap_rainwater([1, 1]) == 0"
"def odd_Days(N): 
    hund1 = N // 100
    hund4 = N // 400
    leap = N >> 2
    ordd = N - leap 
    if (hund1): 
        ordd += hund1 
        leap -= hund1 
    if (hund4): 
        ordd -= hund4 
        leap += hund4 
    days = ordd + leap * 2
    odd = days % 7
    return odd ","This function 'odd_Days' performs a specific operation.

The function 'odd_Days' takes the following parameters: N. It performs operations based on the parameters provided.","def test_odd_Days():
    # Add test cases for odd_Days
    assert odd_Days(...) == expected_output"
"def merge_k_sorted_lists(lists): from heapq import heappop, heappush; heap = []; for i, lst in enumerate(lists): if lst: heappush(heap, (lst.val, i, lst)); head = point = ListNode(0); while heap: val, i, node = heappop(heap); point.next = ListNode(val); point = point.next; if node.next: heappush(heap, (node.next.val, i, node.next)); return head.next","Merges k sorted linked lists into one sorted list.

This function merges k sorted linked lists and returns one sorted linked list. It uses a min-heap to efficiently merge the nodes from the k lists.","def test_merge_k_sorted_lists(): l1 = ListNode(1, ListNode(4, ListNode(5))); l2 = ListNode(1, ListNode(3, ListNode(4))); l3 = ListNode(2, ListNode(6)); assert linked_list_to_list(merge_k_sorted_lists([l1, l2, l3])) == [1, 1, 2, 3, 4, 4, 5, 6]"
"def concatenate_list_data(list):    result= ''    for element in list:        result += str(element)    return resultprint(concatenate_list_data([1, 5, 12, 2]))","""""""
Brief Description:
------------------
concatenate_list_data function performs a specific operation as described below.

Extended Description:
---------------------
This function, `concatenate_list_data`, takes 1 parameters: list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list : type
    Description of list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> concatenate_list_data(value)
Expected output
""""""","import unittest

class TestConcatenate_list_data(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = concatenate_list_data(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = concatenate_list_data(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def multiply_elements(lst, factor): return [x * factor for x in lst]","Multiplies each element in a list by a factor.

This function returns a list where each element from the input list lst is multiplied by the factor.","def test_multiply_elements(): assert multiply_elements([1, 2, 3], 2) == [2, 4, 6] assert multiply_elements([0, 5], 3) == [0, 15] assert multiply_elements([4, 6], 0) == [0, 0]"
def is_perfect_square(n): return int(n ** 0.5) ** 2 == n,"Checks if a number is a perfect square.

This function returns True if n is a perfect square, meaning its square root is an integer, and False otherwise.",def test_is_perfect_square(): assert is_perfect_square(16) assert not is_perfect_square(15) assert is_perfect_square(1)
"def create_range(start, end): return list(range(start, end))","Creates a list of numbers within a range.

This function returns a list of integers from start to end (excluding end).","def test_create_range(): assert create_range(1, 5) == [1, 2, 3, 4] assert create_range(0, 3) == [0, 1, 2] assert create_range(5, 5) == []"
"def is_subsequence(s, t): iter_t = iter(t); return all(char in iter_t for char in s)","Determines if a string is a subsequence of another string.

This function returns True if the string s is a subsequence of the string t, meaning s can be obtained by deleting characters from t without changing the order of the remaining characters.","def test_is_subsequence(): assert is_subsequence(""abc"", ""ahbgdc"") assert not is_subsequence(""axc"", ""ahbgdc"")"
"def invert_dict(d): return {v: k for k, v in d.items()}","Inverts the keys and values of a dictionary.

This function returns a new dictionary with keys and values swapped from the input dictionary d.","def test_invert_dict(): assert invert_dict({'a': 1, 'b': 2}) == {1: 'a', 2: 'b'} assert invert_dict({1: 'x'}) == {'x': 1} assert invert_dict({}) == {}"
"def every_nth(nums, nth):  return nums[nth - 1::nth]print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))","""""""
Brief Description:
------------------
every_nth function performs a specific operation as described below.

Extended Description:
---------------------
This function, `every_nth`, takes 2 parameters: nums,  nth. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
nth : type
    Description of nth.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> every_nth(value, value)
Expected output
""""""","import unittest

class TestEvery_nth(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = every_nth(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = every_nth(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum","This function 'big_sum' performs a specific operation.

The function 'big_sum' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_big_sum():
    # Add test cases for big_sum
    assert big_sum(...) == expected_output"
"def counting_sort(arr, exp): n = len(arr); output = [0] * n; count = [0] * 10; for i in range(n): index = arr[i] // exp; count[index % 10] += 1; for i in range(1, 10): count[i] += count[i - 1]; for i in range(n - 1, -1, -1): index = arr[i] // exp; output[count[index % 10] - 1] = arr[i]; count[index % 10] -= 1; for i in range(n): arr[i] = output[i]","Performs counting sort based on a specific digit.

This function sorts the input array arr based on the digit represented by exp using counting sort as a subroutine for radix sort.","def test_counting_sort(): arr = [170, 45, 75, 90, 802, 24, 2, 66]; counting_sort(arr, 1); assert arr == [170, 90, 802, 2, 24, 45, 66, 75]"
"import math 
def first_Digit(n) : 
    fact = 1
    for i in range(2,n + 1) : 
        fact = fact * i 
        while (fact % 10 == 0) :  
            fact = int(fact / 10) 
    while (fact >= 10) : 
        fact = int(fact / 10) 
    return math.floor(fact) ","This function 'first_Digit' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
def is_palindrome(s): return s == s[::-1],Checks if a string is a palindrome.,def test_is_palindrome(): assert is_palindrome("racecar") assert not is_palindrome("hello") assert is_palindrome("madam")
def first_n_primes(n): primes = [] i = 2 while len(primes) < n: if all(i % p != 0 for p in primes): primes.append(i) i += 1 return primes,"Returns the first n prime numbers.

This function returns a list containing the first n prime numbers by iterating and checking for primality.","def test_first_n_primes(): assert first_n_primes(3) == [2, 3, 5] assert first_n_primes(1) == [2] assert first_n_primes(0) == []"
def combine_dicts(dicts): result = {} for d in dicts: result.update(d) return result,"Combines multiple dictionaries into one.

This function merges a list of dictionaries into a single dictionary, with later dictionaries overwriting earlier ones in case of key collisions.","def test_combine_dicts(): assert combine_dicts([{'a': 1}, {'b': 2}]) == {'a': 1, 'b': 2} assert combine_dicts([{'a': 1}, {'a': 2}]) == {'a': 2} assert combine_dicts([]) == {}"
"def max_min_sublist(lst):    max_result = (max(lst, key=sum))    min_result = (min(lst, key=sum))    return max_result,min_resultnums = [[1,2,3,5], [2,3,5,4], [0,5,4,1], [3,7,2,1], [1,2,1,2]]print(""Original list:"")print(nums)result = max_min_sublist(nums)print(""\nMaximum sum of sub list of the said list of lists:"")print(result[0])print(""\nMinimum sum of sub list of the said list of lists:"")print(result[1])","""""""
Brief Description:
------------------
max_min_sublist function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_min_sublist`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_min_sublist(value)
Expected output
""""""","import unittest

class TestMax_min_sublist(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_min_sublist(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_min_sublist(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def decode_string(s): stack, cur_num, cur_string = [], 0, """"; for c in s: if c.isdigit(): cur_num = cur_num * 10 + int(c); elif c == '[': stack.append((cur_string, cur_num)); cur_string, cur_num = """", 0; elif c == ']': prev_string, num = stack.pop(); cur_string = prev_string + num * cur_string; else: cur_string += c; return cur_string","Decodes an encoded string.

This function decodes an encoded string s with the format k[encoded_string], where the encoded string inside the square brackets is repeated k times.",def test_decode_string(): assert decode_string("3[a]2[bc]") == "aaabcbc" assert decode_string("3[a2[c]]") == "accaccacc" assert decode_string("2[abc]3[cd]ef") == "abcabccdcdcdef"
def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2; left_half = arr[:mid]; right_half = arr[mid:]; merge_sort(left_half); merge_sort(right_half); i = j = k = 0; while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i]; i += 1; else: arr[k] = right_half[j]; j += 1; k += 1; while i < len(left_half): arr[k] = left_half[i]; i += 1; k += 1; while j < len(right_half): arr[k] = right_half[j]; j += 1; k += 1,"Sorts an array using merge sort.

This function sorts the input list arr using the merge sort algorithm, which recursively divides the list and merges sorted halves back together.","def test_merge_sort(): arr = [12, 11, 13, 5, 6, 7]; merge_sort(arr); assert arr == [5, 6, 7, 11, 12, 13]"
"def sectorarea():    pi=22/7    radius = float(input('Radius of Circle: '))    angle = float(input('angle measure: '))    if angle >= 360:        print(""Angle is not possible"")        return    sur_area = (pi*radius**2) * (angle/360)    print(""Sector Area: "", sur_area)sectorarea()","""""""
Brief Description:
------------------
sectorarea function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sectorarea`, takes 0 parameters: none. It is designed to perform a certain task using these parameters.

Parameters:
-----------

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sectorarea()
Expected output
""""""","import unittest

class TestSectorarea(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sectorarea()
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sectorarea()
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def factorial(n): if n == 0: return 1 return n * factorial(n - 1),"Computes the factorial of a number.

This function returns the factorial of the input number n, which is the product of all positive integers less than or equal to n.",def test_factorial(): assert factorial(5) == 120 assert factorial(0) == 1 assert factorial(3) == 6
def reverse_list(lst): return lst[::-1],"Reverses a list.

This function takes a list lst and returns a new list with the elements in reverse order using slicing.","def test_reverse_list(): assert reverse_list([1, 2, 3]) == [3, 2, 1] assert reverse_list([]) == [] assert reverse_list([4, 5]) == [5, 4]"
"def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ","This function 'get_Inv_Count' performs a specific operation.

The function 'get_Inv_Count' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_get_Inv_Count():
    # Add test cases for get_Inv_Count
    assert get_Inv_Count(...) == expected_output"
"def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n 
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp)) 
    return res;","This function 'get_Min_Squares' performs a specific operation.

The function 'get_Min_Squares' takes the following parameters: n. It performs operations based on the parameters provided.","def test_get_Min_Squares():
    # Add test cases for get_Min_Squares
    assert get_Min_Squares(...) == expected_output"
"def zip_list(list1,list2):  
 result = list(map(list.__add__, list1, list2)) 
 return result","This function 'zip_list' performs a specific operation.

The function 'zip_list' takes the following parameters: list1, list2. It performs operations based on the parameters provided.","def test_zip_list():
    # Add test cases for zip_list
    assert zip_list(...) == expected_output"
"def serialize_binary_tree(root): def dfs(node): if not node: return ""None,""; return str(node.val) + "","" + dfs(node.left) + dfs(node.right); return dfs(root)","Serializes a binary tree to a string.

This function returns a string representation of the binary tree rooted at root using pre-order traversal. The serialized string can be used to store or transmit the structure of the tree.","def test_serialize_binary_tree(): root = TreeNode(1, TreeNode(2), TreeNode(3, TreeNode(4), TreeNode(5))); assert serialize_binary_tree(root) == ""1,2,None,None,3,4,None,None,5,None,None,"""
def remove_non_alpha(s): return ''.join(c for c in s if c.isalpha()),"Removes non-alphabetic characters from a string.

This function returns a new string containing only the alphabetic characters from the input string s.",def test_remove_non_alpha(): assert remove_non_alpha("a1b2c3") == "abc" assert remove_non_alpha("hello!") == "hello" assert remove_non_alpha("123") == ""
def remove_vowels(s): return ''.join([char for char in s if char.lower() not in 'aeiou']),"Removes vowels from a string.

This function returns a new string where all vowels are removed from the input string s.",def test_remove_vowels(): assert remove_vowels("hello") == "hll" assert remove_vowels("aeiou") == "" assert remove_vowels("xyz") == "xyz"
def split_string_into_words(s): return s.split(),"Splits a string into a list of words.

This function returns a list of words obtained by splitting the input string s based on whitespace.","def test_split_string_into_words(): assert split_string_into_words(""hello world"") == [""hello"", ""world""] assert split_string_into_words(""one two three"") == [""one"", ""two"", ""three""] assert split_string_into_words("""") == []"
"def diff_consecutive_nums(nums):    result = [b-a for a, b in zip(nums[:-1], nums[1:])]    return resultnums1 = [1, 1, 3, 4, 4, 5, 6, 7]print(""Original list:"")print(nums1)print(""Difference between consecutive numbers of the said list:"") print(diff_consecutive_nums(nums1))nums2 = [4, 5, 8, 9, 6, 10]print(""\nOriginal list:"")print(nums2)print(""Difference between consecutive numbers of the said list:"") print(diff_consecutive_nums(nums2))","""""""
Brief Description:
------------------
diff_consecutive_nums function performs a specific operation as described below.

Extended Description:
---------------------
This function, `diff_consecutive_nums`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> diff_consecutive_nums(value)
Expected output
""""""","import unittest

class TestDiff_consecutive_nums(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = diff_consecutive_nums(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = diff_consecutive_nums(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_difference(lst1, lst2): return list(set(lst1) - set(lst2))","Finds elements in the first list not present in the second list.

 This function returns a list of elements that are in lst1 but not in lst2.","def test_find_difference(): assert find_difference([1, 2, 3], [3, 4]) == [1, 2] assert find_difference([1, 2], [2, 3]) == [1] assert find_difference([], [1]) == []"
def count_digits(n): return sum(1 for digit in str(abs(n)) if digit.isdigit()),"Counts the number of digits in a number.

This function returns the number of digits in the input number n, ignoring any negative sign.",def test_count_digits(): assert count_digits(123) == 3 assert count_digits(-456) == 3 assert count_digits(0) == 1
"def moddiv_list(nums1,nums2):
  result = map(lambda x, y: x % y, nums1, nums2)
  return list(result)","This function 'moddiv_list' performs a specific operation.

The function 'moddiv_list' takes the following parameters: nums1, nums2. It performs operations based on the parameters provided.","def test_moddiv_list():
    # Add test cases for moddiv_list
    assert moddiv_list(...) == expected_output"
"def fifth_Power_Sum(n) : 
    sm = 0 
    for i in range(1,n+1) : 
        sm = sm + (i*i*i*i*i) 
    return sm ","This function 'fifth_Power_Sum' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def set_matrix_zeroes(matrix): rows, cols = len(matrix), len(matrix[0]); row_zero = any(matrix[0][j] == 0 for j in range(cols)); col_zero = any(matrix[i][0] == 0 for i in range(rows)); for i in range(1, rows): for j in range(1, cols): if matrix[i][j] == 0: matrix[i][0] = matrix[0][j] = 0; for i in range(1, rows): for j in range(1, cols): if matrix[i][0] == 0 or matrix[0][j] == 0: matrix[i][j] = 0; if row_zero: for j in range(cols): matrix[0][j] = 0; if col_zero: for i in range(rows): matrix[i][0] = 0","Sets matrix elements to zero if a zero is encountered in the matrix.

This function modifies the input matrix in place such that if any element is zero, all elements in its row and column are set to zero. It uses constant space to keep track of zero rows and columns.","def test_set_matrix_zeroes(): matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]; set_matrix_zeroes(matrix); assert matrix == [[1, 0, 1], [0, 0, 0], [1, 0, 1]]"
"def can_attend_meetings(intervals): intervals.sort(key=lambda x: x[0]); for i in range(1, len(intervals)): if intervals[i][0] < intervals[i - 1][1]: return False; return True","Checks if a person can attend all meetings.

This function returns True if a person can attend all the meetings represented by the input list intervals, where each interval is a meeting time. It checks for overlapping intervals by sorting and comparing start and end times.","def test_can_attend_meetings(): assert can_attend_meetings([[0, 30], [5, 10], [15, 20]]) == False assert can_attend_meetings([[7, 10], [2, 4]]) == True"
"def gcd(a, b): while b: a, b = b, a % b; return a","Computes the greatest common divisor (GCD) of two numbers.

This function returns the GCD of the input numbers a and b using the Euclidean algorithm.","def test_gcd(): assert gcd(8, 12) == 4 assert gcd(100, 25) == 25 assert gcd(7, 3) == 1"
"def get_sum(a, b): while b != 0: carry = a & b; a = a ^ b; b = carry << 1; return a","Computes the sum of two integers without using the + operator.

This function returns the sum of two integers a and b without using the + or - operator. It uses bit manipulation with XOR and bit shifts to simulate addition.","def test_get_sum(): assert get_sum(1, 2) == 3 assert get_sum(-1, 1) == 0"
"def get_keys_with_value(d, value): return [k for k, v in d.items() if v == value]","Gets keys from a dictionary that have a specific value.

This function returns a list of keys from the input dictionary d where the corresponding value is equal to the specified value.","def test_get_keys_with_value(): assert get_keys_with_value({'a': 1, 'b': 2}, 1) == ['a'] assert get_keys_with_value({'x': 10, 'y': 10}, 10) == ['x', 'y'] assert get_keys_with_value({'a': 1}, 2) == []"
def find_min(lst): return min(lst) if lst else None,"Finds the minimum value in a list.

This function returns a new string with each word's first letter capitalized.","def test_find_min(): assert find_min([1, 2, 3]) == 1 assert find_min([10, 5, 7]) == 5 assert find_min([]) == None"
"def knapsack(weights, values, capacity): n = len(weights); dp = [[0] * (capacity + 1) for _ in range(n + 1)]; for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]); else: dp[i][w] = dp[i - 1][w]; return dp[n][capacity]","Solves the 0/1 Knapsack problem.

This function returns the maximum value that can be obtained from the input list of weights and values given a capacity of the knapsack. It uses dynamic programming to solve the problem.","def test_knapsack(): assert knapsack([1, 3, 4, 5], [1, 4, 5, 7], 7) == 9"
"def number_of_islands(grid): if not grid: return 0; def dfs(r, c): if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == '0': return; grid[r][c] = '0'; dfs(r+1, c); dfs(r-1, c); dfs(r, c+1); dfs(r, c-1); count = 0; for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == '1': dfs(r, c); count += 1; return count","Counts the number of islands in a grid.

This function returns the number of islands in the input grid, where '1' represents land and '0' represents water. It uses depth-first search (DFS) to traverse and mark visited land areas.","def test_number_of_islands(): grid = [[""1"", ""1"", ""0"", ""0"", ""0""], [""1"", ""1"", ""0"", ""0"", ""0""], [""0"", ""0"", ""1"", ""0"", ""0""], [""0"", ""0"", ""0"", ""1"", ""1""]]; assert number_of_islands(grid) == 3"
"def nth_ugly_number(n): ugly_nums = [1]; i2 = i3 = i5 = 0; while len(ugly_nums) < n: next_ugly = min(ugly_nums[i2] * 2, ugly_nums[i3] * 3, ugly_nums[i5] * 5); if next_ugly == ugly_nums[i2] * 2: i2 += 1; if next_ugly == ugly_nums[i3] * 3: i3 += 1; if next_ugly == ugly_nums[i5] * 5: i5 += 1; ugly_nums.append(next_ugly); return ugly_nums[-1]","Finds the n-th ugly number.

This function returns the n-th ugly number, where ugly numbers are positive integers whose prime factors are limited to 2, 3, and 5. It uses dynamic programming to generate ugly numbers sequentially.",def test_nth_ugly_number(): assert nth_ugly_number(10) == 12
def get_last_element(lst): return lst[-1] if lst else None,"Gets the last element of a list.

This function returns the last element of the input list lst. If the list is empty, it returns None.","def test_get_last_element(): assert get_last_element([1, 2, 3]) == 3 assert get_last_element([0]) == 0 assert get_last_element([]) is None"
"def sum_Square(n) : 
    i = 1 
    while i*i <= n : 
        j = 1
        while (j*j <= n) : 
            if (i*i+j*j == n) : 
                return True
            j = j+1
        i = i+1     
    return False","This function 'sum_Square' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def flatten_dictionary(d): def flatten(curr_dict, parent_key=""""): items = []; for k, v in curr_dict.items(): new_key = f""{parent_key}.{k}"" if parent_key else k; if isinstance(v, dict): items.extend(flatten(v, new_key).items()); else: items.append((new_key, v)); return dict(items); return flatten(d)","Flattens a nested dictionary.

This function flattens a nested dictionary d by concatenating keys with a period ('.'). It recursively traverses the dictionary and combines nested keys into single keys.","def test_flatten_dictionary(): d = {""a"": 1, ""b"": {""c"": 2, ""d"": {""e"": 3}}}; assert flatten_dictionary(d) == {""a"": 1, ""b.c"": 2, ""b.d.e"": 3}"
"def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans ","This function 'count_With_Odd_SetBits' performs a specific operation.

The function 'count_With_Odd_SetBits' takes the following parameters: n. It performs operations based on the parameters provided.","def test_count_With_Odd_SetBits():
    # Add test cases for count_With_Odd_SetBits
    assert count_With_Odd_SetBits(...) == expected_output"
def single_number(nums): result = 0; for num in nums: result ^= num; return result,"Finds the single number in an array where every other number appears twice.

This function returns the single number in the input list nums, where every element appears twice except for one. It uses bitwise XOR to isolate the unique number.","def test_single_number(): assert single_number([2, 2, 1]) == 1 assert single_number([4, 1, 2, 1, 2]) == 4"
"def generate_fibonacci(n): a, b = 0, 1 result = [] for _ in range(n): result.append(a) a, b = b, a + b return result","Generates the first n Fibonacci numbers.

This function returns a list of the first n numbers in the Fibonacci sequence.","def test_generate_fibonacci(): assert generate_fibonacci(5) == [0, 1, 1, 2, 3] assert generate_fibonacci(3) == [0, 1, 1] assert generate_fibonacci(0) == []"
"def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1] ","This function 'second_smallest' performs a specific operation.

The function 'second_smallest' takes the following parameters: numbers. It performs operations based on the parameters provided.","def test_second_smallest():
    # Add test cases for second_smallest
    assert second_smallest(...) == expected_output"
def first_n_prime_numbers(n): primes = [] i = 2 while len(primes) < n: if all(i % p != 0 for p in primes): primes.append(i) i += 1 return primes,"Returns the first n prime numbers.

This function computes and returns a list of the first n prime numbers.","def test_first_n_prime_numbers(): assert first_n_prime_numbers(3) == [2, 3, 5] assert first_n_prime_numbers(1) == [2] assert first_n_prime_numbers(0) == []"
"def multiply(x, y):    if y < 0:        return -multiply(x, -y)    elif y == 0:        return 0    elif y == 1:        return x    else:        return x + multiply(x, y - 1)print(multiply(3, 5));","""""""
Brief Description:
------------------
multiply function performs a specific operation as described below.

Extended Description:
---------------------
This function, `multiply`, takes 2 parameters: x,  y. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> multiply(value, value)
Expected output
""""""","import unittest

class TestMultiply(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = multiply(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = multiply(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def is_leap_year(year): return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0),"Determines if a year is a leap year.

This function checks whether the given year is a leap year. A leap year is divisible by 4 but not divisible by 100 unless also divisible by 400.",def test_is_leap_year(): assert is_leap_year(2024) assert not is_leap_year(1900) assert is_leap_year(2000)
def count_vowels(s): return sum(1 for char in s if char in 'aeiouAEIOU'),"Counts the number of vowels in a string.

This function returns the total number of vowels in the string s. Vowels include 'a', 'e', 'i', 'o', and 'u' (both uppercase and lowercase).",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("world") == 1 assert count_vowels("") == 0
"def find(n,m):
  r = n%m
  return (r)","This function 'find' performs a specific operation.

The function 'find' takes the following parameters: n, m. It performs operations based on the parameters provided.","def test_find():
    # Add test cases for find
    assert find(...) == expected_output"
def find_duplicates(lst): return [x for x in set(lst) if lst.count(x) > 1],"Finds duplicate elements in a list.

This function returns a list of elements that appear more than once in the input list lst, without repeating duplicates in the output.","def test_find_duplicates(): assert find_duplicates([1, 2, 2, 3]) == [2] assert find_duplicates([1, 1, 1]) == [1] assert find_duplicates([4, 5, 6]) == []"
def filter_odd_numbers(lst): return [x for x in lst if x % 2 != 0],Filters out odd numbers from a list.,"def test_filter_odd_numbers(): assert filter_odd_numbers([1, 2, 3]) == [1, 3] assert filter_odd_numbers([4, 6, 8]) == [] assert filter_odd_numbers([1, 3, 5]) == [1, 3, 5]"
def sum_of_squares_of_digits(n): return sum(int(digit) ** 2 for digit in str(abs(n))),"Sums the squares of the digits of a number.

This function concatenates the string representation of each element in the list lst and returns the resulting string.",def test_sum_of_squares_of_digits(): assert sum_of_squares_of_digits(123) == 14 assert sum_of_squares_of_digits(0) == 0 assert sum_of_squares_of_digits(-456) == 77
def get_string_length(s): return len(s),Returns the length of a string.,def test_get_string_length(): assert get_string_length("hello") == 5 assert get_string_length("") == 0 assert get_string_length("python") == 6
"def get_values_for_keys(d, keys): return [d.get(k) for k in keys]","Retrieves values for a list of keys from a dictionary.

This function returns a list of values from the dictionary d corresponding to the specified list of keys.","def test_get_values_for_keys(): assert get_values_for_keys({'a': 1, 'b': 2}, ['a']) == [1] assert get_values_for_keys({'x': 10}, ['x', 'y']) == [10, None] assert get_values_for_keys({}, ['key']) == [None]"
"def set_zeroes(matrix): rows, cols = len(matrix), len(matrix[0]); row_zero, col_zero = False, False; for i in range(rows): if matrix[i][0] == 0: col_zero = True; for j in range(cols): if matrix[i][j] == 0: matrix[0][j] = matrix[i][0] = 0; for i in range(1, rows): for j in range(1, cols): if matrix[i][0] == 0 or matrix[0][j] == 0: matrix[i][j] = 0; if row_zero: matrix[0] = [0] * cols; if col_zero: for i in range(rows): matrix[i][0] = 0","Sets matrix rows and columns to zeroes based on initial zeroes.

This function modifies the input matrix such that if any element is 0, its entire row and column are set to 0. It optimizes space usage by storing the zero information in the matrix itself.","def test_set_zeroes(): matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]; set_zeroes(matrix); assert matrix == [[1, 0, 1], [0, 0, 0], [1, 0, 1]]"
"def product_of_array_except_self(nums): result, prod = [1] * len(nums), 1; for i in range(len(nums)): result[i] = prod; prod *= nums[i]; prod = 1; for i in range(len(nums) - 1, -1, -1): result[i] *= prod; prod *= nums[i]; return result",Returns product of array except itself.,"def test_product_of_array_except_self(): assert product_of_array_except_self([1, 2, 3, 4]) == [24, 12, 8, 6]"
"def is_perfect_number(n): return n == sum(i for i in range(1, n) if n % i == 0)","Checks if a number is a perfect number.

This function returns True if the input number n is a perfect number, which is a positive integer that is equal to the sum of its proper positive divisors.",def test_is_perfect_number(): assert is_perfect_number(6) assert not is_perfect_number(10) assert is_perfect_number(28)
"def find_min_max(lst): return min(lst), max(lst)","Finds the minimum and maximum values in a list.

This function returns a tuple containing the smallest and largest values from the input list lst.","def test_find_min_max(): assert find_min_max([1, 2, 3]) == (1, 3) assert find_min_max([10, 5, 20]) == (5, 20) assert find_min_max([-1, -2, -3]) == (-3, -1)"
"def front_and_rear(test_tup):
  res = (test_tup[0], test_tup[-1])
  return (res) ","This function 'front_and_rear' performs a specific operation.

The function 'front_and_rear' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_front_and_rear():
    # Add test cases for front_and_rear
    assert front_and_rear(...) == expected_output"
"def camel_to_snake(text):
        import re
        str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()","This function 'camel_to_snake' performs a specific operation.

The function 'camel_to_snake' takes the following parameters: text. It performs operations based on the parameters provided.","def test_camel_to_snake():
    # Add test cases for camel_to_snake
    assert camel_to_snake(...) == expected_output"
"def merge_two_lists(lst1, lst2): return sorted(lst1 + lst2)","Merges two lists and sorts the result.

This function takes two lists lst1 and lst2, merges them into one list, and returns the sorted result.","def test_merge_two_lists(): assert merge_two_lists([1, 3], [2, 4]) == [1, 2, 3, 4] assert merge_two_lists([], [5]) == [5] assert merge_two_lists([7], []) == [7]"
"def interleave_lists(list1,list2,list3):
    result = [el for pair in zip(list1, list2, list3) for el in pair]
    return result","This function 'interleave_lists' performs a specific operation.

The function 'interleave_lists' takes the following parameters: list1, list2, list3. It performs operations based on the parameters provided.","def test_interleave_lists():
    # Add test cases for interleave_lists
    assert interleave_lists(...) == expected_output"
"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ","This function 'find_Odd_Pair' performs a specific operation.

The function 'find_Odd_Pair' takes the following parameters: A, N) : 
    oddPair = 0
    for i in range(0, N) :  
        for j in range(i+1, N) :  
            if ((A[i] ^ A[j]) % 2 != 0. It performs operations based on the parameters provided.","def test_find_Odd_Pair():
    # Add test cases for find_Odd_Pair
    assert find_Odd_Pair(...) == expected_output"
"def tuple_int_str(tuple_str):
    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)
    return result","This function 'tuple_int_str' performs a specific operation.

The function 'tuple_int_str' takes the following parameters: tuple_str. It performs operations based on the parameters provided.","def test_tuple_int_str():
    # Add test cases for tuple_int_str
    assert tuple_int_str(...) == expected_output"
def product_of_digits(n): return eval('*'.join(str(n))),"Computes the product of the digits of a number.

This function returns the product of all the digits in the input number n.",def test_product_of_digits(): assert product_of_digits(123) == 6 assert product_of_digits(456) == 120 assert product_of_digits(0) == 0
"def find_ind(key, i, n, 
			k, arr):
	ind = -1
	start = i + 1
	end = n - 1;
	while (start < end):
		mid = int(start +
				(end - start) / 2)
		if (arr[mid] - key <= k):
			ind = mid
			start = mid + 1
		else:
			end = mid
	return ind
def removals(arr, n, k):
	ans = n - 1
	arr.sort()
	for i in range(0, n):
		j = find_ind(arr[i], i, 
					n, k, arr)
		if (j != -1):
			ans = min(ans, n -
						(j - i + 1))
	return ans","This function 'find_ind' performs a specific operation.

The function 'find_ind' takes the following parameters: key, i, n, k, arr. It performs operations based on the parameters provided.","def test_find_ind():
    # Add test cases for find_ind
    assert find_ind(...) == expected_output"
"def filter_by_type(lst, type_): return [x for x in lst if isinstance(x, type_)]","Filters elements by type in a list.

This function returns a list containing only the elements from the input list lst that are of the specified type_.","def test_filter_by_type(): assert filter_by_type([1, ""hello"", 3.5], int) == [1] assert filter_by_type([""a"", ""b"", 1], str) == [""a"", ""b""] assert filter_by_type([1, 2.5], float) == [2.5]"
"def first_index(l1, n):    return next(a[0] for a in enumerate(l1) if a[1] > n) nums = [12,45,23,67,78,90,100,76,38,62,73,29,83]print(""Original list:"")print(nums)n = 73print(""\nIndex of the first element which is greater than"",n,""in the said list:"")print(first_index(nums,n))n = 21print(""\nIndex of the first element which is greater than"",n,""in the said list:"")print(first_index(nums,n))n = 80print(""\nIndex of the first element which is greater than"",n,""in the said list:"")print(first_index(nums,n))n = 55print(""\nIndex of the first element which is greater than"",n,""in the said list:"")print(first_index(nums,n))","""""""
Brief Description:
------------------
first_index function performs a specific operation as described below.

Extended Description:
---------------------
This function, `first_index`, takes 2 parameters: l1,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> first_index(value, value)
Expected output
""""""","import unittest

class TestFirst_index(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = first_index(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = first_index(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def reverse_words_in_string(s): return " ".join(reversed(s.split())),"Reverses the words in a string.

This function returns a new string where the words in the input string s are reversed, but the characters within each word remain in their original order. It uses Python's built-in string and list functions to reverse the words.",def test_reverse_words_in_string(): assert reverse_words_in_string("the sky is blue") == "blue is sky the"
"def sum_of_even_and_odd(lst): even = sum(x for x in lst if x % 2 == 0) odd = sum(x for x in lst if x % 2 != 0) return even, odd","Sums the even and odd numbers in a list.

This function returns two sums: the sum of all even numbers and the sum of all odd numbers in the list lst.","def test_sum_of_even_and_odd(): assert sum_of_even_and_odd([1, 2, 3, 4]) == (6, 4) assert sum_of_even_and_odd([2, 4, 6]) == (12, 0) assert sum_of_even_and_odd([1, 3, 5]) == (0, 9)"
"def float_sort(price):
  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)
  return float_sort","This function 'float_sort' performs a specific operation.

The function 'float_sort' takes the following parameters: price. It performs operations based on the parameters provided.","def test_float_sort():
    # Add test cases for float_sort
    assert float_sort(...) == expected_output"
"def alternate_elements(list1):
    result=[]
    for item in list1[::2]:
        result.append(item)
    return result ","This function 'alternate_elements' performs a specific operation.

The function 'alternate_elements' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_alternate_elements():
    # Add test cases for alternate_elements
    assert alternate_elements(...) == expected_output"
"def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False","This function 'check_tuplex' performs a specific operation.

The function 'check_tuplex' takes the following parameters: tuplex, tuple1. It performs operations based on the parameters provided.","def test_check_tuplex():
    # Add test cases for check_tuplex
    assert check_tuplex(...) == expected_output"
"def product_of_list(lst): from functools import reduce return reduce(lambda x, y: x * y, lst, 1)","Calculates the product of all elements in a list.

This function computes the product of all elements in a list lst using the reduce() function. If the list is empty, it returns 1.","def test_product_of_list(): assert product_of_list([1, 2, 3]) == 6 assert product_of_list([4, 5]) == 20 assert product_of_list([]) == 1"
"def sort_on_specific_item(lst, n):    result = sorted((lst), key=lambda x: x[n])    return result   items = [('item2', 10, 10.12), ('item3', 15, 25.10), ('item1', 11, 24.50),('item4', 12, 22.50)]print(""Original list of tuples:"")print(items)print(""\nSort on 1st element of the tuple of the said list:"")n = 0print(sort_on_specific_item(items, n))print(""\nSort on 2nd element of the tuple of the said list:"")n = 1print(sort_on_specific_item(items, n))print(""\nSort on 3rd element of the tuple of the said list:"")n = 2print(sort_on_specific_item(items, n))","""""""
Brief Description:
------------------
sort_on_specific_item function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_on_specific_item`, takes 2 parameters: lst,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_on_specific_item(value, value)
Expected output
""""""","import unittest

class TestSort_on_specific_item(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_on_specific_item(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_on_specific_item(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def merge_sort(lst): if len(lst) <= 1: return lst; mid = len(lst) // 2; left = merge_sort(lst[:mid]); right = merge_sort(lst[mid:]); return merge(left, right)","Sorts a list using the merge sort algorithm.

This function returns a sorted version of the input list lst by recursively dividing and merging sublists using the merge sort algorithm.","def test_merge_sort(): assert merge_sort([3, 1, 4, 2]) == [1, 2, 3, 4] assert merge_sort([5, 3, 8, 1]) == [1, 3, 5, 8] assert merge_sort([]) == []"
def remove_non_alpha(s): return ''.join(c for c in s if c.isalpha()),"Removes non-alphabetic characters from a string.

This function returns a new string with all non-alphabetic characters removed from the input string s.",def test_remove_non_alpha(): assert remove_non_alpha("hello123") == "hello" assert remove_non_alpha("world!") == "world" assert remove_non_alpha("pyth0n") == "pythn"
def find_first_duplicate(lst): seen = set() for item in lst: if item in seen: return item seen.add(item) return None,"Finds the first duplicate in a list.

This function takes a list lst and returns the first duplicate element it finds. It returns None if no duplicates exist.","def test_find_first_duplicate(): assert find_first_duplicate([1, 2, 3, 2]) == 2 assert find_first_duplicate([4, 5, 6]) == None assert find_first_duplicate([7, 8, 9, 7, 10]) == 7"
"def quicksort(alist, start, end):
    '''Sorts the list from indexes start to end - 1 inclusive.'''
    if end - start > 1:
        p = partition(alist, start, end)
        quicksort(alist, start, p)
        quicksort(alist, p + 1, end)


def partition(alist, start, end):
    pivot = alist[start]
    i = start + 1
    j = end - 1

    while True:
        while (i <= j and alist[i] <= pivot):
            i = i + 1
        while (i <= j and alist[j] >= pivot):
            j = j - 1

        if i <= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
quicksort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
quicksort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `quicksort`, takes 3 parameters: alist,  start,  end. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
start : type
    Description of start.
end : type
    Description of end.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> quicksort(value, value, value)
Expected output
""""""","import unittest

class TestQuicksort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = quicksort(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = quicksort(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result","This function 'tuple_to_int' performs a specific operation.

The function 'tuple_to_int' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_tuple_to_int():
    # Add test cases for tuple_to_int
    assert tuple_to_int(...) == expected_output"
"def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","This function 'maximize_elements' performs a specific operation.

The function 'maximize_elements' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_maximize_elements():
    # Add test cases for maximize_elements
    assert maximize_elements(...) == expected_output"
def check_even_or_odd(n): return "even" if n % 2 == 0 else "odd","Checks if a number is even or odd.

This function returns ""even"" if the input number n is even, and ""odd"" if it is odd.",def test_check_even_or_odd(): assert check_even_or_odd(2) == "even" assert check_even_or_odd(3) == "odd" assert check_even_or_odd(0) == "even"
def nth_centered_triangular_number(n): return (3 * n ** 2 + 3 * n + 2) // 2,"Computes the nth centered triangular number.

This function returns the n-th centered triangular number, which is a number in the sequence of centered polygons based on a triangle.",def test_nth_centered_triangular_number(): assert nth_centered_triangular_number(3) == 19 assert nth_centered_triangular_number(1) == 4 assert nth_centered_triangular_number(5) == 46
"def set_middle_bits(n):  
    n |= n >> 1; 
    n |= n >> 2; 
    n |= n >> 4; 
    n |= n >> 8; 
    n |= n >> 16;  
    return (n >> 1) ^ 1
def toggle_middle_bits(n): 
    if (n == 1): 
        return 1
    return n ^ set_middle_bits(n) ","This function 'set_middle_bits' performs a specific operation.

The function 'set_middle_bits' takes the following parameters: n. It performs operations based on the parameters provided.","def test_set_middle_bits():
    # Add test cases for set_middle_bits
    assert set_middle_bits(...) == expected_output"
"def check_none(test_tup):
  res = any(map(lambda ele: ele is None, test_tup))
  return (res) ","This function 'check_none' performs a specific operation.

The function 'check_none' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_check_none():
    # Add test cases for check_none
    assert check_none(...) == expected_output"
"def longest_increasing_subsequence(nums): if not nums: return 0; dp = [1] * len(nums); for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1); return max(dp)","Finds the length of the longest increasing subsequence.

This function returns the length of the longest increasing subsequence in the input list nums. It uses dynamic programming to build the solution by comparing each element with all previous ones.","def test_longest_increasing_subsequence(): assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4"
def count_letters(s): return sum(1 for char in s if char.isalpha()),"Counts the number of alphabetic characters in a string.

This function returns the number of letters (alphabetic characters) in the string s.",def test_count_letters(): assert count_letters("abc123") == 3 assert count_letters("!@#") == 0 assert count_letters("") == 0
"def get_keys_with_value(d, value): return [k for k, v in d.items() if v == value]","Finds keys with a specific value in a dictionary.

This function returns a list of keys from dictionary d where the corresponding value matches value.","def test_get_keys_with_value(): assert get_keys_with_value({'a': 1, 'b': 1}, 1) == ['a', 'b'] assert get_keys_with_value({'x': 5}, 10) == [] assert get_keys_with_value({}, 0) == []"
def count_words(s): return len(s.split()),"Counts the number of words in a string.

This function splits the string s into words and returns the number of words found.",def test_count_words(): assert count_words("hello world") == 2 assert count_words("a b c d") == 4 assert count_words("") == 0
"def diameter_circle(r):
  diameter=2*r
  return diameter","This function 'diameter_circle' performs a specific operation.

The function 'diameter_circle' takes the following parameters: r. It performs operations based on the parameters provided.","def test_diameter_circle():
    # Add test cases for diameter_circle
    assert diameter_circle(...) == expected_output"
"def sorted_models(models):
 sorted_models = sorted(models, key = lambda x: x['color'])
 return sorted_models","This function 'sorted_models' performs a specific operation.

The function 'sorted_models' takes the following parameters: models. It performs operations based on the parameters provided.","def test_sorted_models():
    # Add test cases for sorted_models
    assert sorted_models(...) == expected_output"
"def string_compression(s): compressed = []; count = 1; for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1; else: compressed.append(s[i - 1] + str(count) if count > 1 else s[i - 1]); count = 1; compressed.append(s[-1] + str(count) if count > 1 else s[-1]); return ''.join(compressed)","Compresses a string by counting consecutive characters.

This function returns a compressed version of the string s where consecutive repeated characters are represented by the character followed by the count.",def test_string_compression(): assert string_compression("aabcccccaaa") == "a2bc5a3" assert string_compression("abc") == "abc"
"def sort_numeric_strings(nums_str):
    result = [int(x) for x in nums_str]
    result.sort()
    return result","This function 'sort_numeric_strings' performs a specific operation.

The function 'sort_numeric_strings' takes the following parameters: nums_str. It performs operations based on the parameters provided.","def test_sort_numeric_strings():
    # Add test cases for sort_numeric_strings
    assert sort_numeric_strings(...) == expected_output"
"def count_words_with_length(lst, n): return sum(1 for word in lst if len(word) == n)","Counts words of a specific length in a list.

This function returns the number of words in the list lst that have exactly n characters.","def test_count_words_with_length(): assert count_words_with_length([""hello"", ""world"", ""hi""], 5) == 2 assert count_words_with_length([""a"", ""bb"", ""ccc""], 2) == 1 assert count_words_with_length([], 3) == 0"
"def find_kth(arr1, arr2, m, n, k):
	sorted1 = [0] * (m + n)
	i = 0
	j = 0
	d = 0
	while (i < m and j < n):
		if (arr1[i] < arr2[j]):
			sorted1[d] = arr1[i]
			i += 1
		else:
			sorted1[d] = arr2[j]
			j += 1
		d += 1
	while (i < m):
		sorted1[d] = arr1[i]
		d += 1
		i += 1
	while (j < n):
		sorted1[d] = arr2[j]
		d += 1
		j += 1
	return sorted1[k - 1]","This function 'find_kth' performs a specific operation.

The function 'find_kth' takes the following parameters: arr1, arr2, m, n, k. It performs operations based on the parameters provided.","def test_find_kth():
    # Add test cases for find_kth
    assert find_kth(...) == expected_output"
"def search_insert_position(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; elif nums[mid] < target: left = mid + 1; else: right = mid - 1; return left","Finds the insertion position of a target in a sorted list.

This function returns the index at which the target should be inserted in the input sorted list nums. It uses binary search to find the correct position.","def test_search_insert_position(): assert search_insert_position([1, 3, 5, 6], 5) == 2 assert search_insert_position([1, 3, 5, 6], 2) == 1"
"import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ","This function 'check_char' performs a specific operation.

The function 'check_char' takes the following parameters: string. It performs operations based on the parameters provided.","def test_check_char():
    # Add test cases for check_char
    assert check_char(...) == expected_output"
"def assign_elements(test_list):
  res = dict()
  for key, val in test_list:
    res.setdefault(val, [])
    res.setdefault(key, []).append(val)
  return (res) ","This function 'assign_elements' performs a specific operation.

The function 'assign_elements' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_assign_elements():
    # Add test cases for assign_elements
    assert assign_elements(...) == expected_output"
"def power_base_sum(base, power):    return sum([int(i) for i in str(pow(base, power))])print(power_base_sum(2, 100))print(power_base_sum(8, 10))","""""""
Brief Description:
------------------
power_base_sum function performs a specific operation as described below.

Extended Description:
---------------------
This function, `power_base_sum`, takes 2 parameters: base,  power. It is designed to perform a certain task using these parameters.

Parameters:
-----------
base : type
    Description of base.
power : type
    Description of power.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> power_base_sum(value, value)
Expected output
""""""","import unittest

class TestPower_base_sum(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = power_base_sum(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = power_base_sum(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_valid_parentheses(s): stack = []; mapping = {"")"": ""("", ""}"": ""{"", ""]"": ""[""}; for char in s: if char in mapping: top_element = stack.pop() if stack else '#'; if mapping[char] != top_element: return False; else: stack.append(char); return not stack","Checks if parentheses in a string are valid.

This function returns True if the parentheses in the input string s are valid (i.e., they are properly closed and nested), and False otherwise. It uses a stack to track open parentheses and ensures they match correctly.",def test_is_valid_parentheses(): assert is_valid_parentheses("()") assert is_valid_parentheses("()[]{}") assert not is_valid_parentheses("(]")
"def unique_binary_search_trees(n): dp = [0] * (n + 1); dp[0], dp[1] = 1, 1; for i in range(2, n + 1): for j in range(i): dp[i] += dp[j] * dp[i - j - 1]; return dp[n]","Counts unique binary search trees that can be constructed with n distinct integers.

This function returns the number of unique binary search trees (BSTs) that can be constructed using n distinct integers. It uses dynamic programming to compute the number of unique BSTs for each number of nodes.",def test_unique_binary_search_trees(): assert unique_binary_search_trees(3) == 5 assert unique_binary_search_trees(1) == 1
"def check_monthnumber_number(monthnum3):
  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):
    return True
  else:
    return False","This function 'check_monthnumber_number' performs a specific operation.

The function 'check_monthnumber_number' takes the following parameters: monthnum3. It performs operations based on the parameters provided.","def test_check_monthnumber_number():
    # Add test cases for check_monthnumber_number
    assert check_monthnumber_number(...) == expected_output"
"def sort_matrix(M):    result = sorted(M, key=sum)    return resultmatrix1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]matrix2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]print(""Original Matrix:"")print(matrix1)print(""\nSort the said matrix in ascending order according to the sum of its rows"") print(sort_matrix(matrix1))print(""\nOriginal Matrix:"")print(matrix2) print(""\nSort the said matrix in ascending order according to the sum of its rows"") print(sort_matrix(matrix2))","""""""
Brief Description:
------------------
sort_matrix function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_matrix`, takes 1 parameters: M. It is designed to perform a certain task using these parameters.

Parameters:
-----------
M : type
    Description of M.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_matrix(value)
Expected output
""""""","import unittest

class TestSort_matrix(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_matrix(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_matrix(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def calculate_product(lst): from math import prod return prod(lst),"Calculates the product of a list of numbers.

This function returns the product of all elements in the input list lst using Python's built-in math.prod function.","def test_calculate_product(): assert calculate_product([1, 2, 3]) == 6 assert calculate_product([4, 5, 6]) == 120 assert calculate_product([]) == 1"
"def combine_lists(lst1, lst2): return lst1 + lst2","Combines two lists into one.

 This function concatenates two lists lst1 and lst2 and returns the combined list.","def test_combine_lists(): assert combine_lists([1], [2]) == [1, 2] assert combine_lists([], [3]) == [3] assert combine_lists([4], []) == [4]"
"def min_cost_to_paint_houses(costs): if not costs: return 0; for i in range(1, len(costs)): costs[i][0] += min(costs[i - 1][1], costs[i - 1][2]); costs[i][1] += min(costs[i - 1][0], costs[i - 1][2]); costs[i][2] += min(costs[i - 1][0], costs[i - 1][1]); return min(costs[-1])","Finds the minimum cost to paint houses with constraints.

This function returns the minimum cost to paint all the houses such that no two adjacent houses have the same color, given a list costs where each sublist represents the cost of painting a house in three different colors. It uses dynamic programming to compute the minimum cost.","def test_min_cost_to_paint_houses(): assert min_cost_to_paint_houses([[17, 2, 17], [16, 16, 5], [14, 3, 19]]) == 10"
"def Odd_Length_Sum(arr):
    Sum = 0
    l = len(arr)
    for i in range(l):
        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])
    return Sum","This function 'Odd_Length_Sum' performs a specific operation.

The function 'Odd_Length_Sum' takes the following parameters: arr. It performs operations based on the parameters provided.","def test_Odd_Length_Sum():
    # Add test cases for Odd_Length_Sum
    assert Odd_Length_Sum(...) == expected_output"
"def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False","This function 'check_integer' performs a specific operation.

The function 'check_integer' takes the following parameters: text. It performs operations based on the parameters provided.","def test_check_integer():
    # Add test cases for check_integer
    assert check_integer(...) == expected_output"
"def peak_index_in_mountain_array(arr): left, right = 0, len(arr) - 1; while left < right: mid = (left + right) // 2; if arr[mid] < arr[mid + 1]: left = mid + 1; else: right = mid; return left","Finds the peak index in a mountain array.

This function returns the peak index of the input mountain array arr, where elements strictly increase up to the peak and then strictly decrease. It uses binary search to find the peak.","def test_peak_index_in_mountain_array(): assert peak_index_in_mountain_array([0, 2, 1, 0]) == 1 assert peak_index_in_mountain_array([0, 10, 5, 2]) == 1"
"def count_vowels_consonants(s): vowels = sum(1 for char in s.lower() if char in 'aeiou') consonants = sum(1 for char in s.lower() if char.isalpha() and char not in 'aeiou') return vowels, consonants","Counts the vowels and consonants in a string.

This function returns a new string where all uppercase letters are converted to lowercase and vice versa.","def test_count_vowels_consonants(): assert count_vowels_consonants(""hello"") == (2, 3) assert count_vowels_consonants(""aeiou"") == (5, 0) assert count_vowels_consonants(""xyz"") == (0, 3)"
"def even_num(x):
  if x%2==0:
     return True
  else:
    return False","This function 'even_num' performs a specific operation.

The function 'even_num' takes the following parameters: x. It performs operations based on the parameters provided.","def test_even_num():
    # Add test cases for even_num
    assert even_num(...) == expected_output"
"def Check_Solution(a,b,c):  
    if b == 0:  
        return (""Yes"")  
    else: 
        return (""No"")  ","This function 'Check_Solution' performs a specific operation.

The function 'Check_Solution' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_Check_Solution():
    # Add test cases for Check_Solution
    assert Check_Solution(...) == expected_output"
def cube_numbers(lst): return [x ** 3 for x in lst],"Cubes every number in a list.

This function takes a list lst and returns a new list where each element is cubed.","def test_cube_numbers(): assert cube_numbers([1, 2, 3]) == [1, 8, 27] assert cube_numbers([0, -1]) == [0, -1] assert cube_numbers([]) == []"
"def rotate_image(matrix): n = len(matrix); for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j]; matrix[i][j] = matrix[n - j - 1][i]; matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]; matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]; matrix[j][n - i - 1] = temp","Rotates an image (matrix) by 90 degrees clockwise.

This function rotates the input n x n matrix by 90 degrees clockwise in place. The matrix represents an image where each element is a pixel.","def test_rotate_image(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_image(matrix); assert matrix == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"
"def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm","This function 'lcm' performs a specific operation.

The function 'lcm' takes the following parameters: x, y. It performs operations based on the parameters provided.","def test_lcm():
    # Add test cases for lcm
    assert lcm(...) == expected_output"
"def InsertionSort(arr,n):  if(n<=1):    return  InsertionSort(arr, n-1)  temp = arr[n - 1]  i = n - 2  while (i >= 0 and arr[i] > temp):    arr[ i +1] = arr[ i]    i=i-1  arr[i+1] = temparr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):  num = int(input())  arr.append(num)print(""Before Sorting Array Element are: "",arr)InsertionSort(arr, n)print(""After Sorting Array Elements are:"",arr)","""""""
Brief Description:
------------------
InsertionSort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `InsertionSort`, takes 2 parameters: arr, n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> InsertionSort(value, value)
Expected output
""""""","import unittest

class TestInsertionsort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = InsertionSort(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = InsertionSort(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def valid_mountain_array(arr): n = len(arr); if n < 3: return False; i = 1; while i < n and arr[i] > arr[i - 1]: i += 1; if i == 1 or i == n: return False; while i < n and arr[i] < arr[i - 1]: i += 1; return i == n,"Checks if an array is a valid mountain array.

This function returns True if the input array arr is a valid mountain array, and False otherwise. A valid mountain array has strictly increasing elements followed by strictly decreasing elements, with no plateaus.","def test_valid_mountain_array(): assert valid_mountain_array([0, 3, 2, 1]) assert not valid_mountain_array([3, 5, 5])"
"def lcw(u, v):
    """"""Return length of an LCW of strings u and v and its starting indexes.

    (l, i, j) is returned where l is the length of an LCW of the strings u, v
    where the LCW starts at index i in u and index j in v.
    """"""
    # c[i][j] will contain the length of the LCW at the start of u[i:] and
    # v[j:].
    c = [[-1]*(len(v) + 1) for _ in range(len(u) + 1)]

    for i in range(len(u) + 1):
        c[i][len(v)] = 0
    for j in range(len(v)):
        c[len(u)][j] = 0

    lcw_i = lcw_j = -1
    length_lcw = 0
    for i in range(len(u) - 1, -1, -1):
        for j in range(len(v)):
            if u[i] != v[j]:
                c[i][j] = 0
            else:
                c[i][j] = 1 + c[i + 1][j + 1]
                if length_lcw < c[i][j]:
                    length_lcw = c[i][j]
                    lcw_i = i
                    lcw_j = j

    return length_lcw, lcw_i, lcw_j


u = input('Enter first string: ')
v = input('Enter second string: ')
length_lcw, lcw_i, lcw_j = lcw(u, v)
print('Longest Common Subword: ', end='')
if length_lcw > 0:
    print(u[lcw_i:lcw_i + length_lcw])","""""""
Brief Description:
------------------
lcw function performs a specific operation as described below.

Extended Description:
---------------------
This function, `lcw`, takes 2 parameters: u,  v. It is designed to perform a certain task using these parameters.

Parameters:
-----------
u : type
    Description of u.
v : type
    Description of v.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> lcw(value, value)
Expected output
""""""","import unittest

class TestLcw(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = lcw(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = lcw(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def get_fibonacci_sequence(n): a, b = 0, 1 result = [] for _ in range(n): result.append(a) a, b = b, a + b return result","Generates a Fibonacci sequence.

This function returns a list containing the first n numbers in the Fibonacci sequence.","def test_get_fibonacci_sequence(): assert get_fibonacci_sequence(5) == [0, 1, 1, 2, 3] assert get_fibonacci_sequence(3) == [0, 1, 1] assert get_fibonacci_sequence(1) == [0]"
"def insert_elemnt_nth(lst, ele, n):    result = []    for st_idx in range(0, len(lst), n):        result.extend(lst[st_idx:st_idx+n])        result.append(ele)    result.pop()        return resultnums = [1,2,3,4,5,6,7,8,9,0]print(""Original list:"")print(nums)i_ele = 'a'i_ele_pos = 2print(""\nInsert"",i_ele,""in the said list after"",i_ele_pos,""nd element:"")print(insert_elemnt_nth(nums, i_ele, i_ele_pos))i_ele = 'b'i_ele_pos = 4print(""\nInsert"",i_ele,""in the said list after"",i_ele_pos,""th element:"")print(insert_elemnt_nth(nums, i_ele, i_ele_pos))","""""""
Brief Description:
------------------
insert_elemnt_nth function performs a specific operation as described below.

Extended Description:
---------------------
This function, `insert_elemnt_nth`, takes 3 parameters: lst,  ele,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
ele : type
    Description of ele.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> insert_elemnt_nth(value, value, value)
Expected output
""""""","import unittest

class TestInsert_elemnt_nth(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = insert_elemnt_nth(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = insert_elemnt_nth(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\
           check_triplet(A, n - 1, sum, count)","This function 'check_triplet' performs a specific operation.

The function 'check_triplet' takes the following parameters: A, n, sum, count. It performs operations based on the parameters provided.","def test_check_triplet():
    # Add test cases for check_triplet
    assert check_triplet(...) == expected_output"
def odd_values_string(str):  result = ""   for i in range(len(str)):    if i % 2 == 0:      result = result + str[i]  return resultprint(odd_values_string('abcdef'))print(odd_values_string('python')),"""""""
Brief Description:
------------------
odd_values_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `odd_values_string`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> odd_values_string(value)
Expected output
""""""","import unittest

class TestOdd_values_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = odd_values_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = odd_values_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def longest_palindromic_substring(s): def expand_from_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1; right += 1; return s[left + 1:right]; result = """"; for i in range(len(s)): odd_pal = expand_from_center(i, i); even_pal = expand_from_center(i, i + 1); result = max(result, odd_pal, even_pal, key=len); return result","Finds the longest palindromic substring in a string.

This function returns the longest palindromic substring in the input string s. It uses the expand-around-center technique to check for palindromes centered at each character or pair of characters.","def test_longest_palindromic_substring(): assert longest_palindromic_substring(""babad"") in [""bab"", ""aba""] assert longest_palindromic_substring(""cbbd"") == ""bb"""
"def ransom_note_can_construct(ransom_note, magazine): from collections import Counter; return not Counter(ransom_note) - Counter(magazine)","Checks if a ransom note can be constructed from a magazine.

This function returns True if the ransom_note can be constructed using the letters from the magazine, and False otherwise. It uses the Counter class to count character occurrences and checks if all required characters are present in the magazine.","def test_ransom_note_can_construct(): assert ransom_note_can_construct(""a"", ""ab"") assert not ransom_note_can_construct(""aa"", ""ab"")"
def get_frequency(lst): from collections import Counter return dict(Counter(lst)),"Gets the frequency of elements in a list.

This function returns a dictionary where keys are elements from the list lst and values are their counts.","def test_get_frequency(): assert get_frequency([1, 2, 2, 3]) == {1: 1, 2: 2, 3: 1} assert get_frequency([4, 4, 4]) == {4: 3} assert get_frequency([]) == {}"
"def insertionSort(nlist):   for index in range(1,len(nlist)):     currentvalue = nlist[index]     position = index     while position>0 and nlist[position-1]>currentvalue:         nlist[position]=nlist[position-1]         position = position-1     nlist[position]=currentvaluenlist = [14,46,43,27,57,41,45,21,70]insertionSort(nlist)print(nlist)","""""""
Brief Description:
------------------
insertionSort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `insertionSort`, takes 1 parameters: nlist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nlist : type
    Description of nlist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> insertionSort(value)
Expected output
""""""","import unittest

class TestInsertionsort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = insertionSort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = insertionSort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def ap_sum(a,n,d):
  total = (n * (2 * a + (n - 1) * d)) / 2
  return total","This function 'ap_sum' performs a specific operation.

The function 'ap_sum' takes the following parameters: a, n, d. It performs operations based on the parameters provided.","def test_ap_sum():
    # Add test cases for ap_sum
    assert ap_sum(...) == expected_output"
"def maximal_square(matrix): if not matrix: return 0; max_side = 0; dp = [[0] * len(matrix[0]) for _ in range(len(matrix))]; for i in range(len(matrix)): for j in range(len(matrix[0])): if matrix[i][j] == '1': if i == 0 or j == 0: dp[i][j] = 1; else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1; max_side = max(max_side, dp[i][j]); return max_side ** 2","Finds the largest square of 1s in a binary matrix.

This function returns the area of the largest square that contains only 1s in the input binary matrix matrix. It uses dynamic programming to track the size of the largest square that ends at each cell.","def test_maximal_square(): matrix = [[""1"", ""0"", ""1"", ""0"", ""0""], [""1"", ""0"", ""1"", ""1"", ""1""], [""1"", ""1"", ""1"", ""1"", ""1""], [""1"", ""0"", ""0"", ""1"", ""0""]]; assert maximal_square(matrix) == 4"
"def min_window_substring(s, t): from collections import Counter; need, missing = Counter(t), len(t); left, start, end = 0, 0, 0; for right, char in enumerate(s, 1): missing -= need[char] > 0; need[char] -= 1; if not missing: while left < right and need[s[left]] < 0: need[s[left]] += 1; left += 1; if not end or right - left < end - start: start, end = left, right; return s[start:end]",Finds the minimum window in a string containing all characters of another string.,"def test_min_window_substring(): assert min_window_substring(""ADOBECODEBANC"", ""ABC"") == ""BANC"" assert min_window_substring(""a"", ""a"") == ""a"""
"def add_two_numbers(l1, l2): carry, head = 0, ListNode(0); curr = head; while l1 or l2 or carry: v1 = l1.val if l1 else 0; v2 = l2.val if l2 else 0; carry, val = divmod(v1 + v2 + carry, 10); curr.next = ListNode(val); curr = curr.next; if l1: l1 = l1.next; if l2: l2 = l2.next; return head.next","Adds two numbers represented as linked lists.

This function returns the sum of two numbers represented as linked lists l1 and l2, where each node contains a single digit. The digits are stored in reverse order, and the function returns the result as a linked list.","def test_add_two_numbers(): l1 = ListNode(2, ListNode(4, ListNode(3))); l2 = ListNode(5, ListNode(6, ListNode(4))); assert linked_list_to_list(add_two_numbers(l1, l2)) == [7, 0, 8]"
"def comb_sort(nums):    shrink_fact = 1.3    gaps = len(nums)    swapped = True    i = 0    while gaps > 1 or swapped:        gaps = int(float(gaps) / shrink_fact)        swapped = False        i = 0        while gaps + i < len(nums):            if nums[i] > nums[i+gaps]:                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]                swapped = True            i += 1    return numsnum1 = input('Input comma separated numbers:\n').strip()nums = [int(item) for item in num1.split(',')]print(comb_sort(nums))","""""""
Brief Description:
------------------
comb_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `comb_sort`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> comb_sort(value)
Expected output
""""""","import unittest

class TestComb_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = comb_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = comb_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def rotate_array(nums, k): k %= len(nums); nums[:] = nums[-k:] + nums[:-k]","Rotates an array to the right by k steps.

This function rotates the input list nums to the right by k steps. It handles cases where k is larger than the length of the list by using modulo arithmetic.","def test_rotate_array(): nums = [1, 2, 3, 4, 5, 6, 7]; rotate_array(nums, 3); assert nums == [5, 6, 7, 1, 2, 3, 4]"
def sum_of_elements(lst): return sum(lst),"Returns the sum of elements in a list.

This function calculates the sum of all elements in the list lst and returns the result.","def test_sum_of_elements(): assert sum_of_elements([1, 2, 3]) == 6 assert sum_of_elements([10, -10]) == 0 assert sum_of_elements([]) == 0"
"def sum_average(number):
 total = 0
 for value in range(1, number + 1):
    total = total + value
 average = total / number
 return (total,average)","This function 'sum_average' performs a specific operation.

The function 'sum_average' takes the following parameters: number. It performs operations based on the parameters provided.","def test_sum_average():
    # Add test cases for sum_average
    assert sum_average(...) == expected_output"
"def kth_smallest_in_matrix(matrix, k): import heapq; n = len(matrix); heap = [(matrix[i][0], i, 0) for i in range(min(k, n))]; heapq.heapify(heap); for _ in range(k - 1): val, r, c = heapq.heappop(heap); if c + 1 < n: heapq.heappush(heap, (matrix[r][c + 1], r, c + 1)); return heapq.heappop(heap)[0]","Finds the k-th smallest element in a sorted matrix.

This function returns the k-th smallest element in the input n x n matrix, where each row and column is sorted in ascending order. It uses a min-heap to efficiently find the k-th smallest element.","def test_kth_smallest_in_matrix(): matrix = [[1, 5, 9], [10, 11, 13], [12, 13, 15]]; assert kth_smallest_in_matrix(matrix, 8) == 13"
def is_odd(n): return n % 2 != 0,Checks if a number is odd.,def test_is_odd(): assert is_odd(1) assert not is_odd(2) assert is_odd(7)
def nth_tetrahedral_number(n): return (n * (n + 1) * (n + 2)) // 6,"Computes the nth tetrahedral number.

This function returns the n-th tetrahedral number, which represents a pyramid with a triangular base.",def test_nth_tetrahedral_number(): assert nth_tetrahedral_number(3) == 10 assert nth_tetrahedral_number(1) == 1 assert nth_tetrahedral_number(5) == 35
"def remove_key(d, key): if key in d: del d[key]; return d","Removes a key from a dictionary.

This function removes the specified key from the dictionary d if it exists, and returns the updated dictionary.","def test_remove_key(): assert remove_key({'a': 1, 'b': 2}, 'a') == {'b': 2} assert remove_key({'x': 10}, 'y') == {'x': 10} assert remove_key({}, 'any') == {}"
def get_values(d): return list(d.values()),"Retrieves the values of a dictionary.

This function returns a list of all values present in the input dictionary d.","def test_get_values(): assert get_values({'a': 1, 'b': 2}) == [1, 2] assert get_values({'x': 10}) == [10] assert get_values({}) == []"
"import sys 
def find_max_val(n, x, y): 
	ans = -sys.maxsize 
	for k in range(n + 1): 
		if (k % x == y): 
			ans = max(ans, k) 
	return (ans if (ans >= 0 and
					ans <= n) else -1) ","This function 'find_max_val' performs a specific operation.

The function 'find_max_val' takes the following parameters: n, x, y. It performs operations based on the parameters provided.","def test_find_max_val():
    # Add test cases for find_max_val
    assert find_max_val(...) == expected_output"
"def PrintNaturalNumber(n):  if(n<=50):    print(n,end="" "")    PrintNaturalNumber(n + 1)n=1print(""First 50 Natural Numbers are:"")PrintNaturalNumber(n)","""""""
Brief Description:
------------------
PrintNaturalNumber function performs a specific operation as described below.

Extended Description:
---------------------
This function, `PrintNaturalNumber`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> PrintNaturalNumber(value)
Expected output
""""""","import unittest

class TestPrintnaturalnumber(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = PrintNaturalNumber(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = PrintNaturalNumber(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)","This function 'swap_numbers' performs a specific operation.

The function 'swap_numbers' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_swap_numbers():
    # Add test cases for swap_numbers
    assert swap_numbers(...) == expected_output"
"def reverse_dict(d): return {v: k for k, v in d.items()}","Reverses a dictionary.

This function returns a dictionary with keys and values swapped. Note that if multiple keys have the same value, only one will be preserved.","def test_reverse_dict(): assert reverse_dict({'a': 1, 'b': 2}) == {1: 'a', 2: 'b'} assert reverse_dict({'x': 10, 'y': 10}) == {10: 'y'} assert reverse_dict({'a': 1}) == {1: 'a'}"
def average_of_list(lst): return sum(lst) / len(lst) if lst else None,"Computes the average of elements in a list.

 This function calculates the average (mean) of the numbers in the list lst. If the list is empty, it returns None.","def test_average_of_list(): assert average_of_list([1, 2, 3]) == 2 assert average_of_list([10, 20]) == 15 assert average_of_list([]) == None"
"def can_complete_circuit(gas, cost): total, tank, start = 0, 0, 0; for i in range(len(gas)): total += gas[i] - cost[i]; tank += gas[i] - cost[i]; if tank < 0: start = i + 1; tank = 0; return start if total >= 0 else -1","Determines if you can complete a circuit with gas stations.

This function returns the starting gas station index if it is possible to complete a circular route using the input gas and cost arrays. If it is not possible, it returns -1.","def test_can_complete_circuit(): assert can_complete_circuit([1, 2, 3, 4, 5], [3, 4, 5, 1, 2]) == 3 assert can_complete_circuit([2, 3, 4], [3, 4, 3]) == -1"
"def bellman_ford(graph, start): distances = {v: float('inf') for v in graph}; distances[start] = 0; for _ in range(len(graph) - 1): for u in graph: for v, weight in graph[u]: if distances[u] + weight < distances[v]: distances[v] = distances[u] + weight; for u in graph: for v, weight in graph[u]: if distances[u] + weight < distances[v]: return ""Negative cycle detected""; return distances","Implements Bellman-Ford's algorithm to find the shortest paths from a single source.

This function returns the shortest distances from the start node to all other nodes in a weighted graph using Bellman-Ford's algorithm. Detects negative-weight cycles.","def test_bellman_ford(): graph = {'A': [('B', -1), ('C', 4)], 'B': [('C', 3), ('D', 2), ('E', 2)], 'C': [], 'D': [('B', 1), ('C', 5)], 'E': [('D', -3)]}; assert bellman_ford(graph, 'A') == {'A': 0, 'B': -1, 'C': 2, 'D': -2, 'E': 1}"
"def sum_list(lst1,lst2):
  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] 
  return res_list","This function 'sum_list' performs a specific operation.

The function 'sum_list' takes the following parameters: lst1, lst2. It performs operations based on the parameters provided.","def test_sum_list():
    # Add test cases for sum_list
    assert sum_list(...) == expected_output"
"def number_of_substrings(str): 	str_len = len(str); 	return int(str_len * (str_len + 1) / 2); str1 = input(""Input a string: "")print(""Number of substrings:"") print(number_of_substrings(str1))","""""""
Brief Description:
------------------
number_of_substrings function performs a specific operation as described below.

Extended Description:
---------------------
This function, `number_of_substrings`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> number_of_substrings(value)
Expected output
""""""","import unittest

class TestNumber_of_substrings(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = number_of_substrings(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = number_of_substrings(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def daily_temperatures(T): result = [0] * len(T); stack = []; for i, temp in enumerate(T): while stack and temp > T[stack[-1]]: j = stack.pop(); result[j] = i - j; stack.append(i); return result","Finds the number of days until a warmer temperature.

This function returns a list where each element at index i represents the number of days until a warmer temperature occurs for the day i. If no warmer day exists, the value is 0. It uses a stack to track temperatures.","def test_daily_temperatures(): assert daily_temperatures([73, 74, 75, 71, 69, 72, 76, 73]) == [1, 1, 4, 2, 1, 1, 0, 0]"
"def is_perfect_number(n): return sum(i for i in range(1, n) if n % i == 0) == n","Checks if a number is a perfect number.

This function returns True if the sum of the divisors of n (excluding n itself) equals n, indicating that n is a perfect number.",def test_is_perfect_number(): assert is_perfect_number(6) assert is_perfect_number(28) assert not is_perfect_number(10)
def find_median(lst): sorted_lst = sorted(lst); n = len(sorted_lst); return (sorted_lst[n//2] if n % 2 != 0 else (sorted_lst[n//2 - 1] + sorted_lst[n//2]) / 2),"Finds the median of a list.

This function returns the median value of the input list lst, which is the middle value in a sorted list or the average of the two middle values if the list length is even.","def test_find_median(): assert find_median([1, 2, 3]) == 2 assert find_median([1, 2, 3, 4]) == 2.5 assert find_median([3, 1, 4, 2]) == 2.5"
"def lcm(a, b): return abs(a * b) // gcd(a, b)","Computes the least common multiple (LCM) of two numbers.

This function calculates the LCM of a and b using their GCD.","def test_lcm(): assert lcm(4, 5) == 20 assert lcm(7, 3) == 21 assert lcm(0, 10) == 0"
def factorial(n): return 1 if n == 0 else n * factorial(n - 1),"Computes the factorial of a number using recursion.

This function returns the sum of squares of all elements in the input list lst.",def test_factorial(): assert factorial(5) == 120 assert factorial(0) == 1 assert factorial(3) == 6
"def is_valid_bst(root, low=float('-inf'), high=float('inf')): if not root: return True; if not (low < root.val < high): return False; return is_valid_bst(root.left, low, root.val) and is_valid_bst(root.right, root.val, high)","Validates if a binary tree is a valid binary search tree (BST).

This function returns True if the input binary tree rooted at root is a valid BST, and False otherwise. It uses recursion to verify that each node falls within the allowed range.","def test_is_valid_bst(): root = TreeNode(2, TreeNode(1), TreeNode(3)); assert is_valid_bst(root) root = TreeNode(5, TreeNode(1), TreeNode(4, TreeNode(3), TreeNode(6))); assert not is_valid_bst(root)"
"def count_occurrences(lst, item): return lst.count(item)","Counts the number of occurrences of an item in a list.

This function returns the count of how many times the input item appears in the input list lst.","def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences([1, 2, 3], 4) == 0 assert count_occurrences([], 1) == 0"
"def find_duplicate_in_array(nums): slow, fast = nums[0], nums[nums[0]]; while slow != fast: slow = nums[slow]; fast = nums[nums[fast]]; slow = 0; while slow != fast: slow = nums[slow]; fast = nums[fast]; return slow","Finds the duplicate number in an array.

This function returns the duplicate number in the input array nums where each integer is between 1 and n. It uses Floyd's Tortoise and Hare algorithm to detect a cycle and find the duplicate.","def test_find_duplicate_in_array(): assert find_duplicate_in_array([1, 3, 4, 2, 2]) == 2 assert find_duplicate_in_array([3, 1, 3, 4, 2]) == 3"
"def longest_consecutive_sequence(nums): nums_set, max_len = set(nums), 0; for num in nums_set: if num - 1 not in nums_set: current_num, current_len = num, 1; while current_num + 1 in nums_set: current_num += 1; current_len += 1; max_len = max(max_len, current_len); return max_len","Finds the length of the longest consecutive sequence in an array.

This function returns the length of the longest consecutive elements sequence in the input list nums. It uses a set to achieve O(n) complexity.","def test_longest_consecutive_sequence(): assert longest_consecutive_sequence([100, 4, 200, 1, 3, 2]) == 4 assert longest_consecutive_sequence([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9"
"import re
def replace_max_specialchar(text,n):
 return (re.sub(""[ ,.]"", "":"", text, n))","This function 'replace_max_specialchar' performs a specific operation.

The function 'replace_max_specialchar' takes the following parameters: text, n. It performs operations based on the parameters provided.","def test_replace_max_specialchar():
    # Add test cases for replace_max_specialchar
    assert replace_max_specialchar(...) == expected_output"
"def max_Product(arr):     arr_len = len(arr)     if (arr_len < 2):         print(""No pairs exists"")         return          # Initialize max product pair     x = arr[0]; y = arr[1]     # Traverse through every possible pair         for i in range(0, arr_len):         for j in range(i + 1, arr_len):             if (arr[i] * arr[j] > x * y):                 x = arr[i]; y = arr[j]     return x,y    nums = [1, 2, 3, 4, 7, 0, 8, 4] print(""Original array:"", nums)print(""Maximum product pair is:"", max_Product(nums))nums = [0, -1, -2, -4, 5, 0, -6] print(""\nOriginal array:"", nums)print(""Maximum product pair is:"", max_Product(nums))","""""""
Brief Description:
------------------
max_Product function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_Product`, takes 1 parameters: arr. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_Product(value)
Expected output
""""""","import unittest

class TestMax_product(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_Product(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_Product(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def count_lowercase(s): return sum(1 for char in s if char.islower()),Counts lowercase letters in a string.,def test_count_lowercase(): assert count_lowercase("Hello") == 4 assert count_lowercase("WORLD") == 0 assert count_lowercase("python") == 6
"def find_lcm(a, b): from math import gcd return abs(a * b) // gcd(a, b)","Finds the least common multiple (LCM) of two numbers.

This function returns the least common multiple of a and b using their greatest common divisor.","def test_find_lcm(): assert find_lcm(4, 5) == 20 assert find_lcm(15, 20) == 60 assert find_lcm(7, 9) == 63"
def group_by_anagrams(words): from collections import defaultdict; anagrams = defaultdict(list); for word in words: sorted_word = ''.join(sorted(word)); anagrams[sorted_word].append(word); return list(anagrams.values()),"Groups anagrams from a list of words.

This function returns a list of lists, where each sublist contains words that are anagrams of each other from the input list words. It uses a dictionary to group words by their sorted character sequence.","def test_group_by_anagrams(): assert group_by_anagrams([""eat"", ""tea"", ""tan"", ""ate"", ""nat"", ""bat""]) == [[""eat"", ""tea"", ""ate""], [""tan"", ""nat""], [""bat""]]"
"def find_second_largest(lst): unique_sorted_lst = sorted(set(lst), reverse=True) return unique_sorted_lst[1] if len(unique_sorted_lst) > 1 else None","Finds the second largest element in a list.

This function returns the second largest unique element in the list lst. If there are fewer than two unique elements, it returns None.","def test_find_second_largest(): assert find_second_largest([3, 1, 2, 4]) == 3 assert find_second_largest([10, 10, 5]) == 5 assert find_second_largest([1]) == None"
"def get_keys_and_values(d): return list(d.keys()), list(d.values())","Gets keys and values from a dictionary.

This function returns two lists: one containing the keys and the other containing the values from the input dictionary d.","def test_get_keys_and_values(): assert get_keys_and_values({'a': 1, 'b': 2}) == (['a', 'b'], [1, 2]) assert get_keys_and_values({'x': 10}) == (['x'], [10]) assert get_keys_and_values({}) == ([], [])"
"def search_2d_matrix(matrix, target): if not matrix or not matrix[0]: return False; rows, cols = len(matrix), len(matrix[0]); left, right = 0, rows * cols - 1; while left <= right: mid = (left + right) // 2; mid_val = matrix[mid // cols][mid % cols]; if mid_val == target: return True; elif mid_val < target: left = mid + 1; else: right = mid - 1; return False","Searches for a target value in a 2D matrix.

This function returns True if the target value exists in the input matrix, where each row is sorted, and the first integer of each row is greater than the last integer of the previous row. It uses binary search.","def test_search_2d_matrix(): matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]]; assert search_2d_matrix(matrix, 3) assert not search_2d_matrix(matrix, 13)"
"def sum_of_squares(n): return sum(i ** 2 for i in range(1, n + 1))","Computes the sum of squares up to a number.

This function returns the sum of the squares of all integers from 1 to n.",def test_sum_of_squares(): assert sum_of_squares(3) == 14 assert sum_of_squares(4) == 30 assert sum_of_squares(0) == 0
def is_alphabetic(s): return s.isalpha(),"Checks if a string contains only alphabetic characters.

This function returns True if the string s consists only of alphabetic characters (letters), and False otherwise.",def test_is_alphabetic(): assert is_alphabetic("hello") assert not is_alphabetic("hello123") assert not is_alphabetic("")
"def remove_from_list(lst, value): return [x for x in lst if x != value]","Removes all occurrences of a value from a list.

This function returns a list with all instances of the specified value removed from the input list lst.","def test_remove_from_list(): assert remove_from_list([1, 2, 3, 2], 2) == [1, 3] assert remove_from_list(['a', 'b', 'a'], 'a') == ['b'] assert remove_from_list([1, 1, 1], 1) == []"
"def find_first_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result","This function 'find_first_occurrence' performs a specific operation.

The function 'find_first_occurrence' takes the following parameters: A, x. It performs operations based on the parameters provided.","def test_find_first_occurrence():
    # Add test cases for find_first_occurrence
    assert find_first_occurrence(...) == expected_output"
"def reverse_linked_list(head): prev, curr = None, head; while curr: next_node = curr.next; curr.next = prev; prev = curr; curr = next_node; return prev","Reverses a singly linked list.

This function reverses the input singly linked list and returns the head of the new reversed list. It iterates through the list, reversing the next pointers as it goes.","def test_reverse_linked_list(): head = ListNode(1, ListNode(2, ListNode(3, ListNode(4)))); new_head = reverse_linked_list(head); assert linked_list_to_list(new_head) == [4, 3, 2, 1]"
def group_anagrams(strs): from collections import defaultdict; anagrams = defaultdict(list); for s in strs: anagrams[tuple(sorted(s))].append(s); return list(anagrams.values()),"Groups anagrams together.

This function groups the input list of strings strs by their anagrams and returns the grouped anagrams. It uses sorting to identify anagrams and stores them in a dictionary.","def test_group_anagrams(): assert group_anagrams([""eat"", ""tea"", ""tan"", ""ate"", ""nat"", ""bat""]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]"
"def count_Digit(n):
    count = 0
    while n != 0:
        n //= 10
        count += 1
    return count","This function 'count_Digit' performs a specific operation.

The function 'count_Digit' takes the following parameters: n. It performs operations based on the parameters provided.","def test_count_Digit():
    # Add test cases for count_Digit
    assert count_Digit(...) == expected_output"
"def min_sub_array_len(target, nums): left = 0; curr_sum = 0; min_len = float('inf'); for right in range(len(nums)): curr_sum += nums[right]; while curr_sum >= target: min_len = min(min_len, right - left + 1); curr_sum -= nums[left]; left += 1; return min_len if min_len != float('inf') else 0","Finds the minimal length of a subarray with sum at least target.

This function returns the length of the smallest contiguous subarray in nums whose sum is at least target. It uses a sliding window approach to efficiently compute the subarray.","def test_min_sub_array_len(): assert min_sub_array_len(7, [2, 3, 1, 2, 4, 3]) == 2 assert min_sub_array_len(4, [1, 4, 4]) == 1"
"import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")","This function 'rearange_string' performs a specific operation.

The function 'rearange_string' takes the following parameters: S. It performs operations based on the parameters provided.","def test_rearange_string():
    # Add test cases for rearange_string
    assert rearange_string(...) == expected_output"
"from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))
","This function 'combinations_colors' performs a specific operation.

The function 'combinations_colors' takes the following parameters: l, n. It performs operations based on the parameters provided.","def test_combinations_colors():
    # Add test cases for combinations_colors
    assert combinations_colors(...) == expected_output"
"import re
text = 'Python Exercises'
def replace_spaces(text):
  text =text.replace ("" "", ""_"")
  return (text)
  text =text.replace (""_"", "" "")
  return (text)","This function 'replace_spaces' performs a specific operation.

The function 'replace_spaces' takes the following parameters: text. It performs operations based on the parameters provided.","def test_replace_spaces():
    # Add test cases for replace_spaces
    assert replace_spaces(...) == expected_output"
"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr","This function 'upper_ctr' performs a specific operation.

The function 'upper_ctr' takes the following parameters: str. It performs operations based on the parameters provided.","def test_upper_ctr():
    # Add test cases for upper_ctr
    assert upper_ctr(...) == expected_output"
def flatten_nested_lists(lst): return [item for sublist in lst for item in sublist],"Flattens a list of lists into a single list.

This function takes a list of lists lst and returns a single list containing all elements of the sublists, effectively flattening the input.","def test_flatten_nested_lists(): assert flatten_nested_lists([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_nested_lists([[], []]) == [] assert flatten_nested_lists([[5], [6, 7]]) == [5, 6, 7]"
"def even_ele(test_tuple, even_fnc): 
	res = tuple() 
	for ele in test_tuple: 
		if isinstance(ele, tuple): 
			res += (even_ele(ele, even_fnc), ) 
		elif even_fnc(ele): 
			res += (ele, ) 
	return res 
def extract_even(test_tuple):
  res = even_ele(test_tuple, lambda x: x % 2 == 0)
  return (res) ","This function 'even_ele' performs a specific operation.

The function 'even_ele' takes the following parameters: test_tuple, even_fnc. It performs operations based on the parameters provided.","def test_even_ele():
    # Add test cases for even_ele
    assert even_ele(...) == expected_output"
def get_word_lengths(s): return {word: len(word) for word in s.split()},"Gets the length of each word in a string.

This function returns a dictionary where keys are words from the input string s and values are their lengths.","def test_get_word_lengths(): assert get_word_lengths(""hello world"") == {'hello': 5, 'world': 5} assert get_word_lengths(""one two three"") == {'one': 3, 'two': 3, 'three': 5} assert get_word_lengths("""") == {}"
def find_missing_number(nums): return len(nums) * (len(nums) + 1) // 2 - sum(nums),"Finds the missing number in an array.

This function returns the missing number in a list nums containing distinct numbers from 0 to n. It uses the sum formula for arithmetic progression.","def test_find_missing_number(): assert find_missing_number([3, 0, 1]) == 2 assert find_missing_number([9, 6, 4, 2, 3, 5, 7, 0, 1]) == 8"
"def get_max_length_string(lst): return max(lst, key=len) if lst else """"",Finds the longest string in a list.,"def test_get_max_length_string(): assert get_max_length_string([""short"", ""longest""]) == ""longest"" assert get_max_length_string([""a"", ""bb""]) == ""bb"" assert get_max_length_string([]) == """""
def get_unique_words(s): return list(set(s.split())),"Extracts unique words from a string.

 This function splits the string s into words and returns a list of unique words, removing duplicates.","def test_get_unique_words(): assert get_unique_words(""hello world world"") == [""hello"", ""world""] assert get_unique_words(""a b c"") == [""a"", ""b"", ""c""] assert get_unique_words("""") == []"
"def every(lst, fn = lambda x: x):  return all(map(fn, lst))print(every([4, 2, 3], lambda x: x > 1))print(every([4, 2, 3], lambda x: x < 1))print(every([4, 2, 3], lambda x: x == 1))","""""""
Brief Description:
------------------
every function performs a specific operation as described below.

Extended Description:
---------------------
This function, `every`, takes 2 parameters: lst,  fn = lambda x: x. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn = lambda x: x : type
    Description of fn = lambda x: x.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> every(value, value)
Expected output
""""""","import unittest

class TestEvery(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = every(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = every(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def find_max(lst): return max(lst) if lst else None,"Finds the maximum value in a list.

This function removes duplicate elements from the list lst, preserving the order in which the elements first appeared.","def test_find_max(): assert find_max([1, 2, 3]) == 3 assert find_max([10, 5, 7]) == 10 assert find_max([]) == None"
def sum_of_cubes(lst): return sum(x ** 3 for x in lst),"Computes the sum of cubes of elements in a list.

This function returns True if s1 and s2 are anagrams, meaning they contain the same characters in a different order, and False otherwise.","def test_sum_of_cubes(): assert sum_of_cubes([1, 2, 3]) == 36 assert sum_of_cubes([]) == 0 assert sum_of_cubes([-1, 2]) == 7"
"def climb_stairs(n): if n == 1: return 1; dp = [0] * (n + 1); dp[1], dp[2] = 1, 2; for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2]; return dp[n]","Finds the number of distinct ways to climb stairs.

This function returns the number of distinct ways to climb n stairs, where each time you can either climb 1 or 2 steps. It uses dynamic programming to calculate the number of ways.",def test_climb_stairs(): assert climb_stairs(2) == 2 assert climb_stairs(3) == 3
"def nth_polygonal_number(s, n): return ((s - 2) * n ** 2 - (s - 4) * n) // 2","Computes the nth s-gonal number.

This function returns the n-th s-gonal number, which is a generalized polygonal number for a polygon with s sides.","def test_nth_polygonal_number(): assert nth_polygonal_number(5, 3) == 12 assert nth_polygonal_number(3, 4) == 10 assert nth_polygonal_number(6, 2) == 5"
def capitalize_words(s): return ' '.join(word.capitalize() for word in s.split()),"Capitalizes the first letter of each word in a string.

This function returns a new string with each word's first letter capitalized in the input string s.",def test_capitalize_words(): assert capitalize_words("hello world") == "Hello World" assert capitalize_words("is fun") == "Is Fun" assert capitalize_words("") == ""
def convert_to_uppercase(s): return s.upper(),"Converts a string to uppercase.

This function returns a new string where all characters from the input string s are converted to uppercase.",def test_convert_to_uppercase(): assert convert_to_uppercase("hello") == "HELLO" assert convert_to_uppercase("Python") == "PYTHON" assert convert_to_uppercase("") == ""
"import math 
def get_Pos_Of_Right_most_Set_Bit(n): 
    return int(math.log2(n&-n)+1)   
def set_Right_most_Unset_Bit(n): 
    if (n == 0): 
        return 1
    if ((n & (n + 1)) == 0):     
        return n 
    pos = get_Pos_Of_Right_most_Set_Bit(~n)      
    return ((1 << (pos - 1)) | n) ","This function 'get_Pos_Of_Right_most_Set_Bit' performs a specific operation.

The function 'get_Pos_Of_Right_most_Set_Bit' takes the following parameters: n. It performs operations based on the parameters provided.","def test_get_Pos_Of_Right_most_Set_Bit():
    # Add test cases for get_Pos_Of_Right_most_Set_Bit
    assert get_Pos_Of_Right_most_Set_Bit(...) == expected_output"
"def sort_tuple(tup): 
	n = len(tup) 
	for i in range(n): 
		for j in range(n-i-1): 
			if tup[j][0] > tup[j + 1][0]: 
				tup[j], tup[j + 1] = tup[j + 1], tup[j] 
	return tup","This function 'sort_tuple' performs a specific operation.

The function 'sort_tuple' takes the following parameters: tup. It performs operations based on the parameters provided.","def test_sort_tuple():
    # Add test cases for sort_tuple
    assert sort_tuple(...) == expected_output"
def list_sum(lst): return sum(lst),Computes the sum of elements in a list.,"def test_list_sum(): assert list_sum([1, 2, 3]) == 6 assert list_sum([-1, 1]) == 0 assert list_sum([]) == 0"
"import re
def is_valid_URL(str):
	regex = (""((http|https)://)(www.)?"" +
			""[a-zA-Z0-9@:%._\\+~#?&//=]"" +
			""{2,256}\\.[a-z]"" +
			""{2,6}\\b([-a-zA-Z0-9@:%"" +
			""._\\+~#?&//=]*)"")
	p = re.compile(regex)
	if (str == None):
		return False
	if(re.search(p, str)):
		return True
	else:
		return False","This function 'is_valid_URL' performs a specific operation.

The function 'is_valid_URL' takes the following parameters: str. It performs operations based on the parameters provided.","def test_is_valid_URL():
    # Add test cases for is_valid_URL
    assert is_valid_URL(...) == expected_output"
"def find_shortest_word(words): return min(words, key=len)","Finds the shortest word in a list.

This function returns the word with the minimum length from the input list words.","def test_find_shortest_word(): assert find_shortest_word([""cat"", ""elephant"", ""tiger""]) == ""cat"" assert find_shortest_word([""a"", ""bb"", ""ccc""]) == ""a"" assert find_shortest_word([""short"", ""longer"", ""longest""]) == ""short"""
"def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) ","This function 'extract_missing' performs a specific operation.

The function 'extract_missing' takes the following parameters: test_list, strt_val, stop_val. It performs operations based on the parameters provided.","def test_extract_missing():
    # Add test cases for extract_missing
    assert extract_missing(...) == expected_output"
"def is_nonagonal(n): 
	return int(n * (7 * n - 5) / 2) ","This function 'is_nonagonal' performs a specific operation.

The function 'is_nonagonal' takes the following parameters: n. It performs operations based on the parameters provided.","def test_is_nonagonal():
    # Add test cases for is_nonagonal
    assert is_nonagonal(...) == expected_output"
def is_armstrong_number(n): return n == sum(int(digit) ** len(str(n)) for digit in str(n)),"Checks if a number is an Armstrong number.

This function returns True if the sum of the digits of n, each raised to the power of the number of digits, equals n.",def test_is_armstrong_number(): assert is_armstrong_number(153) assert not is_armstrong_number(123) assert is_armstrong_number(9474)
def is_palindromic_number(n): return str(n) == str(n)[::-1],Checks if a number is a palindromic number.,def test_is_palindromic_number(): assert is_palindromic_number(121) assert not is_palindromic_number(123) assert is_palindromic_number(12321)
"def find_Sum(arr,n): 
    arr.sort() 
    sum = arr[0] 
    for i in range(0,n-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum","This function 'find_Sum' performs a specific operation.

The function 'find_Sum' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_find_Sum():
    # Add test cases for find_Sum
    assert find_Sum(...) == expected_output"
"def rotate_list(lst, k): return lst[k:] + lst[:k]","Rotates a list by k positions.

This function rotates the list lst by k positions. The first k elements are moved to the end of the list, and the remaining elements are shifted to the front.","def test_rotate_list(): assert rotate_list([1, 2, 3, 4], 2) == [3, 4, 1, 2] assert rotate_list([1], 1) == [1] assert rotate_list([], 3) == []"
"def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result","This function 'func' performs a specific operation.

The function 'func' takes the following parameters: nums, k. It performs operations based on the parameters provided.","def test_func():
    # Add test cases for func
    assert func(...) == expected_output"
def find_max(lst): return max(lst),"Returns the maximum value in a list.

This function takes a list lst and returns the maximum value using Python's built-in max() function.","def test_find_max(): assert find_max([1, 2, 3]) == 3 assert find_max([4, 0, -1]) == 4 assert find_max([0]) == 0"
def get_last_element(lst): return lst[-1] if lst else None,Gets the last element of a list.,"def test_get_last_element(): assert get_last_element([1, 2, 3]) == 3 assert get_last_element(['a', 'b']) == 'b' assert get_last_element([]) is None"
"def Sum(N): 
    SumOfPrimeDivisors = [0]*(N + 1)   
    for i in range(2,N + 1) : 
        if (SumOfPrimeDivisors[i] == 0) : 
            for j in range(i,N + 1,i) : 
                SumOfPrimeDivisors[j] += i           
    return SumOfPrimeDivisors[N] ","This function 'Sum' performs a specific operation.

The function 'Sum' takes the following parameters: N. It performs operations based on the parameters provided.","def test_Sum():
    # Add test cases for Sum
    assert Sum(...) == expected_output"
"def find_itinerary(tickets): from collections import defaultdict; adj = defaultdict(list); for u, v in sorted(tickets, reverse=True): adj[u].append(v); result = []; def dfs(airport): while adj[airport]: dfs(adj[airport].pop()); result.append(airport); dfs(""JFK""); return result[::-1]","Finds the itinerary from a list of flight tickets.

This function returns the itinerary that uses all given tickets, where each ticket represents a flight from one airport to another. The itinerary must start at ""JFK"" and be lexicographically smallest.","def test_find_itinerary(): assert find_itinerary([[""MUC"", ""LHR""], [""JFK"", ""MUC""], [""SFO"", ""SJC""], [""LHR"", ""SFO""]]) == [""JFK"", ""MUC"", ""LHR"", ""SFO"", ""SJC""]"
"def remove_char(str, n):      first_part = str[:n]       last_part = str[n+1:]      return first_part + last_partprint(remove_char('Python', 0))print(remove_char('Python', 3))print(remove_char('Python', 5))","""""""
Brief Description:
------------------
remove_char function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_char`, takes 2 parameters: str,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_char(value, value)
Expected output
""""""","import unittest

class TestRemove_char(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_char(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_char(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def permute_string(str):    if len(str) == 0:        return ['']    prev_list = permute_string(str[1:len(str)])    next_list = []    for i in range(0,len(prev_list)):        for j in range(0,len(str)):            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]            if new_str not in next_list:                next_list.append(new_str)    return next_listprint(permute_string('ABCD'));","""""""
Brief Description:
------------------
permute_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `permute_string`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> permute_string(value)
Expected output
""""""","import unittest

class TestPermute_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = permute_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = permute_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_islands(grid): def dfs(i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0': return; grid[i][j] = '0'; dfs(i + 1, j); dfs(i - 1, j); dfs(i, j + 1); dfs(i, j - 1); islands = 0; for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == '1': dfs(i, j); islands += 1; return islands","Counts the number of islands in a 2D grid.

This function returns the number of islands in the input 2D grid grid, where 1 represents land and 0 represents water. It uses depth-first search to mark visited land.","def test_count_islands(): grid = [[""1"",""1"",""1"",""1"",""0""],[""1"",""1"",""0"",""1"",""0""],[""1"",""1"",""0"",""0"",""0""],[""0"",""0"",""0"",""0"",""0""]]; assert count_islands(grid) == 1"
"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True","This function 'magic_square_test' performs a specific operation.

The function 'magic_square_test' takes the following parameters: my_matrix. It performs operations based on the parameters provided.","def test_magic_square_test():
    # Add test cases for magic_square_test
    assert magic_square_test(...) == expected_output"
"def sort_numeric_strings(nums_str):    result = [int(x) for x in nums_str]    result.sort()    return resultnums_str = ['4','12','45','7','0','100','200','-12','-500']print(""Original list:"")print(nums_str)print(""\nSort the said list of strings(numbers) numerically:"")print(sort_numeric_strings(nums_str))","""""""
Brief Description:
------------------
sort_numeric_strings function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_numeric_strings`, takes 1 parameters: nums_str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums_str : type
    Description of nums_str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_numeric_strings(value)
Expected output
""""""","import unittest

class TestSort_numeric_strings(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_numeric_strings(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_numeric_strings(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def product_of_digits(n): return eval('*'.join(str(n))),"Computes the product of digits of a number.

This function returns the product of the digits of the input number n.",def test_product_of_digits(): assert product_of_digits(123) == 6 assert product_of_digits(456) == 120 assert product_of_digits(0) == 0
"def sum_of_cubes(n): n -= 1 total = 0 while n > 0:   total += n * n * n   n -= 1 return totalprint(""Sum of cubes smaller than the specified number: "",sum_of_cubes(3))","""""""
Brief Description:
------------------
sum_of_cubes function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_of_cubes`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_of_cubes(value)
Expected output
""""""","import unittest

class TestSum_of_cubes(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_of_cubes(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_of_cubes(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_heapify(arr, n, i): largest = i; left = 2 * i + 1; right = 2 * i + 2; if left < n and arr[left] > arr[largest]: largest = left; if right < n and arr[right] > arr[largest]: largest = right; if largest != i: arr[i], arr[largest] = arr[largest], arr[i]; max_heapify(arr, n, largest)","Maintains the max-heap property.

This function ensures the max-heap property by adjusting the node at index i in the heap arr. It considers both left and right children for the heap condition.","def test_max_heapify(): arr = [4, 10, 3, 5, 1]; max_heapify(arr, 5, 0); assert arr == [10, 5, 3, 4, 1]"
"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return ('Found a match!')
        else:
                return ('Not matched!')","This function 'text_match' performs a specific operation.

The function 'text_match' takes the following parameters: text. It performs operations based on the parameters provided.","def test_text_match():
    # Add test cases for text_match
    assert text_match(...) == expected_output"
"def remove_similar_row(test_list):
  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))
  return (res) ","This function 'remove_similar_row' performs a specific operation.

The function 'remove_similar_row' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_remove_similar_row():
    # Add test cases for remove_similar_row
    assert remove_similar_row(...) == expected_output"
def get_even_numbers(lst): return [x for x in lst if x % 2 == 0],"Filters even numbers from a list.

This function returns True if the input string s reads the same backward as forward; otherwise, False.","def test_get_even_numbers(): assert get_even_numbers([1, 2, 3, 4]) == [2, 4] assert get_even_numbers([5, 7]) == [] assert get_even_numbers([0, 2, 4]) == [0, 2, 4]"
"def pancake_sort(arr): def flip(end): arr[:end+1] = arr[:end+1][::-1]; for size in range(len(arr), 1, -1): max_idx = arr.index(max(arr[:size])); if max_idx != size - 1: flip(max_idx); flip(size - 1); return arr","Sorts an array using only pancake flips.

This function sorts the input list arr using pancake flips. A pancake flip reverses the elements of the array up to a given index. The function repeatedly finds the largest element and moves it to its correct position using flips.","def test_pancake_sort(): assert pancake_sort([3, 2, 4, 1]) == [1, 2, 3, 4] assert pancake_sort([1, 2, 3]) == [1, 2, 3]"
"def count_dups(nums):    element = []    freque = []    if not nums:        return element    running_count = 1    for i in range(len(nums)-1):        if nums[i] == nums[i+1]:            running_count += 1        else:            freque.append(running_count)            element.append(nums[i])            running_count = 1    freque.append(running_count)    element.append(nums[i+1])    return element,frequenums = [1,2,2,2,4,4,4,5,5,5,5]print(""Original lists:"")print(nums)print(""\nConsecutive duplicate elements and their frequency:"")print(count_dups(nums))","""""""
Brief Description:
------------------
count_dups function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_dups`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_dups(value)
Expected output
""""""","import unittest

class TestCount_dups(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_dups(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_dups(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_math_v_vi_average(list_of_dicts):    for d in list_of_dicts:        n1 = d.pop('V')        n2 = d.pop('VI')        d['V+VI'] = (n1 + n2)/2    return list_of_dicts student_details= [  {'id' : 1, 'subject' : 'math', 'V' : 70, 'VI' : 82},  {'id' : 2, 'subject' : 'math', 'V' : 73, 'VI' : 74},  {'id' : 3, 'subject' : 'math', 'V' : 75, 'VI' : 86}]print(sum_math_v_vi_average(student_details))","""""""
Brief Description:
------------------
sum_math_v_vi_average function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_math_v_vi_average`, takes 1 parameters: list_of_dicts. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list_of_dicts : type
    Description of list_of_dicts.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_math_v_vi_average(value)
Expected output
""""""","import unittest

class TestSum_math_v_vi_average(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_math_v_vi_average(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_math_v_vi_average(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_profit(prices): min_price = float('inf'); max_profit = 0; for price in prices: min_price = min(min_price, price); max_profit = max(max_profit, price - min_price); return max_profit","Finds the maximum profit from stock prices.

This function returns the maximum profit that can be achieved by buying and selling a stock given the daily prices in the list prices.","def test_max_profit(): assert max_profit([7, 1, 5, 3, 6, 4]) == 5 assert max_profit([7, 6, 4, 3, 1]) == 0 assert max_profit([1, 2]) == 1"
"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))","This function 'split_upperstring' performs a specific operation.

The function 'split_upperstring' takes the following parameters: text. It performs operations based on the parameters provided.","def test_split_upperstring():
    # Add test cases for split_upperstring
    assert split_upperstring(...) == expected_output"
"def word_break(s, word_dict): dp = [False] * (len(s) + 1); dp[0] = True; for i in range(1, len(s) + 1): for word in word_dict: if dp[i - len(word)] and s[i - len(word):i] == word: dp[i] = True; break; return dp[-1]","Determines if a string can be segmented into a space-separated sequence of dictionary words.

This function returns True if the input string s can be segmented into a space-separated sequence of words found in the word_dict. It uses dynamic programming to track possible segmentations.","def test_word_break(): assert word_break(""leetcode"", [""leet"", ""code""]) assert not word_break(""applepenapple"", [""pen"", ""apple""])"
"def generate_fibonacci(n): a, b = 0, 1; result = []; while a < n: result.append(a); a, b = b, a + b; return result","Generates a list of Fibonacci numbers up to n.

This function returns a list of Fibonacci numbers that are less than n.","def test_generate_fibonacci(): assert generate_fibonacci(10) == [0, 1, 1, 2, 3, 5, 8] assert generate_fibonacci(5) == [0, 1, 1, 2, 3] assert generate_fibonacci(1) == [0, 1]"
"def binary_search(lst, target): left, right = 0, len(lst) - 1; while left <= right: mid = (left + right) // 2; if lst[mid] == target: return mid; elif lst[mid] < target: left = mid + 1; else: right = mid - 1; return -1","Performs binary search on a sorted list.

This function returns the index of the target in the sorted input list lst if found, otherwise returns -1.","def test_binary_search(): assert binary_search([1, 2, 3, 4, 5], 3) == 2 assert binary_search([1, 2, 3, 4, 5], 6) == -1 assert binary_search([], 3) == -1"
"def is_key_in_dict(d, key): return key in d","Checks if a key exists in a dictionary.

This function returns True if the key is present in the input dictionary d, otherwise False.","def test_is_key_in_dict(): assert is_key_in_dict({'a': 1}, 'a') assert not is_key_in_dict({'b': 2}, 'a') assert not is_key_in_dict({}, 'x')"
"def house_robber_circular(nums): if len(nums) == 1: return nums[0]; def rob(nums): prev, curr = 0, 0; for num in nums: prev, curr = curr, max(curr, prev + num); return curr; return max(rob(nums[:-1]), rob(nums[1:]))","Solves the house robber problem on a circular street.

This function returns the maximum amount of money that can be robbed from houses arranged in a circular street, where no two adjacent houses can be robbed, and the first and last houses are adjacent. It uses dynamic programming to calculate the maximum sum.","def test_house_robber_circular(): assert house_robber_circular([2, 3, 2]) == 3 assert house_robber_circular([1, 2, 3, 1]) == 4"
def flatten_list(lst): return [item for sublist in lst for item in sublist],"Flattens a list of lists into a single list.

This function takes a list of lists lst and returns a new list containing all the inner elements of each sublist in lst.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([]) == [] assert flatten_list([[]]) == []"
def filter_odd_numbers(lst): return [x for x in lst if x % 2 != 0],"Filters out odd numbers from a list.

This function returns a list containing only the odd numbers from the input list lst.","def test_filter_odd_numbers(): assert filter_odd_numbers([1, 2, 3, 4]) == [1, 3] assert filter_odd_numbers([2, 4, 6]) == [] assert filter_odd_numbers([1, 3, 5]) == [1, 3, 5]"
"def majority_element(nums): count, candidate = 0, None; for num in nums: if count == 0: candidate = num; count += (1 if num == candidate else -1); return candidate","Finds the majority element in a list.

This function returns the majority element in the input list nums, which is defined as the element that appears more than n/2 times. It uses the Boyer-Moore Voting Algorithm to find the majority element in linear time.","def test_majority_element(): assert majority_element([3, 2, 3]) == 3 assert majority_element([2, 2, 1, 1, 1, 2, 2]) == 2"
"def remove_words(list1, remove_words):    result = list(filter(lambda word: word not in remove_words, list1))    return result        colors = ['orange', 'red', 'green', 'blue', 'white', 'black']remove_colors = ['orange','black']print(""Original list:"")print(colors)print(""\nRemove words:"")print(remove_colors)print(""\nAfter removing the specified words from the said list:"")print(remove_words(colors, remove_colors))","""""""
Brief Description:
------------------
remove_words function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_words`, takes 2 parameters: list1,  remove_words. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.
remove_words : type
    Description of remove_words.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_words(value, value)
Expected output
""""""","import unittest

class TestRemove_words(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_words(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_words(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def find_duplicates(lst): return [item for item in set(lst) if lst.count(item) > 1],Finds duplicate elements in a list.,"def test_find_duplicates(): assert find_duplicates([1, 2, 2, 3, 3, 3]) == [2, 3] assert find_duplicates([1, 1, 2, 2, 3]) == [1, 2] assert find_duplicates([]) == []"
"def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) ","This function 'remove_matching_tuple' performs a specific operation.

The function 'remove_matching_tuple' takes the following parameters: test_list1, test_list2. It performs operations based on the parameters provided.","def test_remove_matching_tuple():
    # Add test cases for remove_matching_tuple
    assert remove_matching_tuple(...) == expected_output"
"def count_occurrences(lst, item): return lst.count(item)","Counts occurrences of an item in a list.

This function returns the number of times item appears in the input list lst.","def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences([4, 4, 4], 5) == 0 assert count_occurrences([], 1) == 0"
"def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums","This function 'filter_evennumbers' performs a specific operation.

The function 'filter_evennumbers' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_filter_evennumbers():
    # Add test cases for filter_evennumbers
    assert filter_evennumbers(...) == expected_output"
"def restore_ip_addresses(s): result = []; def backtrack(start, dots, path): if dots == 4 and start == len(s): result.append(path[:-1]); return; if dots > 4: return; for i in range(1, 4): if start + i <= len(s) and (i == 1 or s[start] != '0') and 0 <= int(s[start:start + i]) <= 255: backtrack(start + i, dots + 1, path + s[start:start + i] + "".""); backtrack(0, 0, """"); return result","Restores all possible valid IP addresses from a string.

This function returns a list of all possible valid IP addresses that can be obtained by inserting three dots into the input string s. It uses backtracking to explore all possible placements of dots.","def test_restore_ip_addresses(): assert restore_ip_addresses(""25525511135"") == [""255.255.11.135"", ""255.255.111.35""] assert restore_ip_addresses(""0000"") == [""0.0.0.0""]"
"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ","This function 'multiply_num' performs a specific operation.

The function 'multiply_num' takes the following parameters: numbers. It performs operations based on the parameters provided.","def test_multiply_num():
    # Add test cases for multiply_num
    assert multiply_num(...) == expected_output"
def calculate_factorial(n): from math import factorial return factorial(n),"Calculates the factorial of a number.

This function returns the factorial of the input number n, using Python's built-in math.factorial function.",def test_calculate_factorial(): assert calculate_factorial(5) == 120 assert calculate_factorial(0) == 1 assert calculate_factorial(3) == 6
"def PrintArray(arr,i,n):  if(i>=n):    return  print(arr[i],end="" "")  PrintArray(arr,i+1,n)arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):  num = int(input())  arr.append(num)print(""Array Element Are:"")PrintArray(arr,0,n)","""""""
Brief Description:
------------------
PrintArray function performs a specific operation as described below.

Extended Description:
---------------------
This function, `PrintArray`, takes 3 parameters: arr, i, n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
i : type
    Description of i.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> PrintArray(value, value, value)
Expected output
""""""","import unittest

class TestPrintarray(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = PrintArray(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = PrintArray(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def catalan_number(num):    if num <=1:         return 1       res_num = 0    for i in range(num):        res_num += catalan_number(i) * catalan_number(num-i-1)    return res_num for n in range(10):    print(catalan_number(n))	","""""""
Brief Description:
------------------
catalan_number function performs a specific operation as described below.

Extended Description:
---------------------
This function, `catalan_number`, takes 1 parameters: num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> catalan_number(value)
Expected output
""""""","import unittest

class TestCatalan_number(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = catalan_number(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = catalan_number(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def count_digits(n): return len(str(n)),"Counts the number of digits in a number.

This function returns the total number of digits in the integer n.",def test_count_digits(): assert count_digits(12345) == 5 assert count_digits(0) == 1 assert count_digits(9876) == 4
"def unique_sublists(list1):
    result ={}
    for l in list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result","This function 'unique_sublists' performs a specific operation.

The function 'unique_sublists' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_unique_sublists():
    # Add test cases for unique_sublists
    assert unique_sublists(...) == expected_output"
def reverse_string(s): return s[::-1],"Reverses a string.

This function returns the reversed version of the input string s. It uses Python's string slicing feature to reverse the characters in the string.",def test_reverse_string(): assert reverse_string("hello") == "olleh" assert reverse_string("abc") == "cba"
"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0","This function 'overlapping' performs a specific operation.

The function 'overlapping' takes the following parameters: list1, list2. It performs operations based on the parameters provided.","def test_overlapping():
    # Add test cases for overlapping
    assert overlapping(...) == expected_output"
"def find_longest_repeating_subseq(str): 
	n = len(str) 
	dp = [[0 for k in range(n+1)] for l in range(n+1)] 
	for i in range(1, n+1): 
		for j in range(1, n+1): 
			if (str[i-1] == str[j-1] and i != j): 
				dp[i][j] = 1 + dp[i-1][j-1] 
			else: 
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 
	return dp[n][n]","This function 'find_longest_repeating_subseq' performs a specific operation.

The function 'find_longest_repeating_subseq' takes the following parameters: str. It performs operations based on the parameters provided.","def test_find_longest_repeating_subseq():
    # Add test cases for find_longest_repeating_subseq
    assert find_longest_repeating_subseq(...) == expected_output"
"def remove_invalid_parentheses(s): def is_valid(expr): count = 0; for c in expr: if c == '(': count += 1; if c == ')': count -= 1; if count < 0: return False; return count == 0; level = {s}; while level: valid = list(filter(is_valid, level)); if valid: return valid; level = {expr[:i] + expr[i + 1:] for expr in level for i in range(len(expr))}","Removes invalid parentheses.

This function returns all possible strings obtained by removing the minimum number of invalid parentheses from the input string s, such that the remaining string is valid. It uses a breadth-first search (BFS) approach.","def test_remove_invalid_parentheses(): assert set(remove_invalid_parentheses(""()())()"")) == {""()()()"", ""(())()""}"
def flatten_binary_tree(root): def flatten_rec(node): if not node: return None; left_last = flatten_rec(node.left); right_last = flatten_rec(node.right); if node.left: left_last.right = node.right; node.right = node.left; node.left = None; return right_last or left_last or node; flatten_rec(root),"Flattens a binary tree into a linked list in-place.

This function flattens the input binary tree in-place into a linked list where the right child points to the next node in a pre-order traversal, and the left child is always None.","def test_flatten_binary_tree(): root = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5, None, TreeNode(6))); flatten_binary_tree(root); assert binary_tree_to_list(root) == [1, 2, 3, 4, 5, 6]"
"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result
","This function 'sort_sublists' performs a specific operation.

The function 'sort_sublists' takes the following parameters: input_list. It performs operations based on the parameters provided.","def test_sort_sublists():
    # Add test cases for sort_sublists
    assert sort_sublists(...) == expected_output"
"def evaluate_reverse_polish_notation(tokens): stack = []; for token in tokens: if token in ""+-*/"": b, a = stack.pop(), stack.pop(); if token == '+': stack.append(a + b); elif token == '-': stack.append(a - b); elif token == '*': stack.append(a * b); else: stack.append(int(float(a) / b)); else: stack.append(int(token)); return stack[0]","Evaluates an expression in Reverse Polish Notation.

This function evaluates the input expression tokens, which is given in Reverse Polish Notation (RPN), and returns the result. It uses a stack to handle operations.","def test_evaluate_reverse_polish_notation(): assert evaluate_reverse_polish_notation([""2"", ""1"", ""+"", ""3"", ""*""]) == 9 assert evaluate_reverse_polish_notation([""4"", ""13"", ""5"", ""/"", ""+""]) == 6"
"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2==0: 
            return True  
        else:
          return False","This function 'word_len' performs a specific operation.

The function 'word_len' takes the following parameters: s. It performs operations based on the parameters provided.","def test_word_len():
    # Add test cases for word_len
    assert word_len(...) == expected_output"
"def sort_mixed_list(mixed_list):    mixed_list.sort(key=lambda e: (isinstance(e, str), e))    return mixed_listmixed_list = [19,'red',12,'green','blue', 10,'white','green',1]print(""Original list:"")print(mixed_list)print(""\nSort the said  mixed list of integers and strings:"")print(sort_mixed_list(mixed_list))","""""""
Brief Description:
------------------
sort_mixed_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_mixed_list`, takes 1 parameters: mixed_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
mixed_list : type
    Description of mixed_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_mixed_list(value)
Expected output
""""""","import unittest

class TestSort_mixed_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_mixed_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_mixed_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def check_valid(test_tup):
  res = not any(map(lambda ele: not ele, test_tup))
  return (res) ","This function 'check_valid' performs a specific operation.

The function 'check_valid' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_check_valid():
    # Add test cases for check_valid
    assert check_valid(...) == expected_output"
"def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True","This function 'validate' performs a specific operation.

The function 'validate' takes the following parameters: n. It performs operations based on the parameters provided.","def test_validate():
    # Add test cases for validate
    assert validate(...) == expected_output"
"def next_permutation(nums): i = len(nums) - 2; while i >= 0 and nums[i] >= nums[i + 1]: i -= 1; if i >= 0: j = len(nums) - 1; while nums[j] <= nums[i]: j -= 1; nums[i], nums[j] = nums[j], nums[i]; nums[i + 1:] = reversed(nums[i + 1:])","Modifies a list to its next lexicographical permutation.

This function modifies the input list nums in place to produce the next lexicographical permutation. If no such permutation exists, the list is rearranged to its smallest order.","def test_next_permutation(): nums = [1, 2, 3]; next_permutation(nums); assert nums == [1, 3, 2]"
"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)","This function 'newman_prime' performs a specific operation.

The function 'newman_prime' takes the following parameters: n. It performs operations based on the parameters provided.","def test_newman_prime():
    # Add test cases for newman_prime
    assert newman_prime(...) == expected_output"
"def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False","This function 'is_key_present' performs a specific operation.

The function 'is_key_present' takes the following parameters: d, x. It performs operations based on the parameters provided.","def test_is_key_present():
    # Add test cases for is_key_present
    assert is_key_present(...) == expected_output"
"def file_lengthy(fname):        with open(fname) as f:                for i, l in enumerate(f):                        pass        return i + 1print(""Number of lines in the file: "",file_lengthy(""test.txt""))","""""""
Brief Description:
------------------
file_lengthy function performs a specific operation as described below.

Extended Description:
---------------------
This function, `file_lengthy`, takes 1 parameters: fname. It is designed to perform a certain task using these parameters.

Parameters:
-----------
fname : type
    Description of fname.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> file_lengthy(value)
Expected output
""""""","import unittest

class TestFile_lengthy(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = file_lengthy(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = file_lengthy(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1),"Recursively calculates the factorial of a number.

This function returns the factorial of the input number n, calculated as n! = n * (n-1)! using recursion.",def test_factorial_recursive(): assert factorial_recursive(0) == 1 assert factorial_recursive(5) == 120 assert factorial_recursive(1) == 1
"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result","This function 'sort_matrix' performs a specific operation.

The function 'sort_matrix' takes the following parameters: M. It performs operations based on the parameters provided.","def test_sort_matrix():
    # Add test cases for sort_matrix
    assert sort_matrix(...) == expected_output"
"def first_Factorial_Divisible_Number(x): 
    i = 1;
    fact = 1; 
    for i in range(1,x): 
        fact = fact * i 
        if (fact % x == 0): 
            break
    return i ","This function 'first_Factorial_Divisible_Number' performs a specific operation.

The function 'first_Factorial_Divisible_Number' takes the following parameters: x. It performs operations based on the parameters provided.","def test_first_Factorial_Divisible_Number():
    # Add test cases for first_Factorial_Divisible_Number
    assert first_Factorial_Divisible_Number(...) == expected_output"
"def tuples_to_list_string(lst):    result = list(map(' '.join, lst))    return result   colors = [('red', 'pink'), ('white', 'black'), ('orange', 'green')]print(""Original list of tuples:"")print(colors)print(""\nConvert the said list of tuples to a list of strings:"")print(tuples_to_list_string(colors))names = [('Sheridan','Gentry'), ('Laila','Mckee'), ('Ahsan','Rivas'), ('Conna','Gonzalez')]print(""\nOriginal list of tuples:"")print(names)print(""\nConvert the said list of tuples to a list of strings:"")print(tuples_to_list_string(names))","""""""
Brief Description:
------------------
tuples_to_list_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `tuples_to_list_string`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> tuples_to_list_string(value)
Expected output
""""""","import unittest

class TestTuples_to_list_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = tuples_to_list_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = tuples_to_list_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def schedule_course(courses): import heapq; courses.sort(key=lambda x: x[1]); total_time = 0; max_heap = []; for duration, last_day in courses: if total_time + duration <= last_day: total_time += duration; heapq.heappush(max_heap, -duration); elif max_heap and -max_heap[0] > duration: total_time += duration + heapq.heappop(max_heap); heapq.heappush(max_heap, -duration); return len(max_heap)","Finds the maximum number of courses that can be taken.

This function returns the maximum number of courses that can be taken from the input list courses, where each course is represented by its duration and last day to complete. It uses a greedy approach with a max-heap to track the courses taken.","def test_schedule_course(): assert schedule_course([[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]) == 3"
"def rotate_left(list1,m,n):
  result =  list1[m:]+list1[:n]
  return result","This function 'rotate_left' performs a specific operation.

The function 'rotate_left' takes the following parameters: list1, m, n. It performs operations based on the parameters provided.","def test_rotate_left():
    # Add test cases for rotate_left
    assert rotate_left(...) == expected_output"
def count_vowels(s): return sum(1 for c in s if c in 'aeiouAEIOU'),"Counts the number of vowels in a string.

This function returns the count of vowels (a, e, i, o, u) in the input string s.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("world") == 1 assert count_vowels("python") == 1
"def min_Num(arr,n):  
    odd = 0
    for i in range(n): 
        if (arr[i] % 2): 
            odd += 1 
    if (odd % 2): 
        return 1
    return 2","This function 'min_Num' performs a specific operation.

The function 'min_Num' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_min_Num():
    # Add test cases for min_Num
    assert min_Num(...) == expected_output"
"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum","This function 'cal_sum' performs a specific operation.

The function 'cal_sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_cal_sum():
    # Add test cases for cal_sum
    assert cal_sum(...) == expected_output"
"def mul_consecutive_nums(nums):
    result = [b*a for a, b in zip(nums[:-1], nums[1:])]
    return result","This function 'mul_consecutive_nums' performs a specific operation.

The function 'mul_consecutive_nums' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_mul_consecutive_nums():
    # Add test cases for mul_consecutive_nums
    assert mul_consecutive_nums(...) == expected_output"
"def check_subarray_sum(nums, k): prefix_sum = 0; seen = {0: -1}; for i, num in enumerate(nums): prefix_sum = (prefix_sum + num) % k; if prefix_sum in seen: if i - seen[prefix_sum] > 1: return True; else: seen[prefix_sum] = i; return False","Checks if a continuous subarray sums to a multiple of k.

This function returns True if the input list nums contains a continuous subarray that sums to a multiple of k, and False otherwise. It uses a prefix sum and modulus to check for subarrays.","def test_check_subarray_sum(): assert check_subarray_sum([23, 2, 4, 6, 7], 6) assert not check_subarray_sum([23, 2, 6, 4, 7], 13)"
"def interval_intersection(A, B): i, j, res = 0, 0, []; while i < len(A) and j < len(B): lo = max(A[i][0], B[j][0]); hi = min(A[i][1], B[j][1]); if lo <= hi: res.append([lo, hi]); if A[i][1] < B[j][1]: i += 1; else: j += 1; return res","Finds intersections between two lists of intervals.

This function returns a list of intervals representing the intersections between the intervals in the input lists A and B. Each interval in A and B is assumed to be disjoint and sorted by the start time.","def test_interval_intersection(): A = [[0, 2], [5, 10], [13, 23]]; B = [[1, 5], [8, 12], [15, 24]]; assert interval_intersection(A, B) == [[1, 2], [5, 5], [8, 10], [15, 23]]"
def list_average(lst): return sum(lst) / len(lst) if lst else 0,"Computes the average of a list of numbers.

This function returns the average of the numbers in the list lst. If the list is empty, it returns 0.","def test_list_average(): assert list_average([1, 2, 3]) == 2 assert list_average([5, 5, 5]) == 5 assert list_average([]) == 0"
"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ","This function 'find_star_num' performs a specific operation.

The function 'find_star_num' takes the following parameters: n. It performs operations based on the parameters provided.","def test_find_star_num():
    # Add test cases for find_star_num
    assert find_star_num(...) == expected_output"
def is_palindromic_prime(n): from sympy import isprime return str(n) == str(n)[::-1] and isprime(n),"Checks if a number is a palindromic prime.

This function returns True if the number n is both a palindrome and a prime number, meaning it reads the same forwards and backwards.",def test_is_palindromic_prime(): assert is_palindromic_prime(131) assert not is_palindromic_prime(121) assert is_palindromic_prime(7)
"def calculate_exponent(base, exp): return base ** exp","Computes the exponentiation of a base number.

This function returns the result of raising base to the power of exp.","def test_calculate_exponent(): assert calculate_exponent(2, 3) == 8 assert calculate_exponent(5, 0) == 1 assert calculate_exponent(7, 2) == 49"
"def matrix_multiply(a, b): return [[sum(x * y for x, y in zip(row_a, col_b)) for col_b in zip(*b)] for row_a in a]","Multiplies two matrices.

This function returns the result of multiplying two matrices a and b. The number of columns in a must match the number of rows in b.","def test_matrix_multiply(): a = [[1, 2], [3, 4]]; b = [[2, 0], [1, 3]]; assert matrix_multiply(a, b) == [[4, 6], [10, 12]] assert matrix_multiply([[1]], [[2]]) == [[2]]"
"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","This function 'and_tuples' performs a specific operation.

The function 'and_tuples' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_and_tuples():
    # Add test cases for and_tuples
    assert and_tuples(...) == expected_output"
"def count_occurrences(lst, value): return lst.count(value)","Counts the occurrences of a value in a list.

This function returns the number of times value appears in the list lst.","def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences([4, 5, 6], 7) == 0 assert count_occurrences([], 1) == 0"
"def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ","This function 'find_tuples' performs a specific operation.

The function 'find_tuples' takes the following parameters: test_list, K. It performs operations based on the parameters provided.","def test_find_tuples():
    # Add test cases for find_tuples
    assert find_tuples(...) == expected_output"
"def permute_unique(nums): result = []; nums.sort(); def backtrack(path, used): if len(path) == len(nums): result.append(path[:]); return; for i in range(len(nums)): if used[i] or i > 0 and nums[i] == nums[i - 1] and not used[i - 1]: continue; used[i] = True; backtrack(path + [nums[i]], used); used[i] = False; backtrack([], [False] * len(nums)); return result","Finds all unique permutations of a list of numbers.

This function returns a list of all unique permutations of the input list nums. It uses backtracking to generate permutations and skips duplicates by sorting the list and tracking usage.","def test_permute_unique(): assert permute_unique([1, 1, 2]) == [[1, 1, 2], [1, 2, 1], [2, 1, 1]]"
def count_even_numbers(lst): return sum(1 for x in lst if x % 2 == 0),"Counts the even numbers in a list.

This function returns the number of even numbers in the list lst.","def test_count_even_numbers(): assert count_even_numbers([1, 2, 3, 4]) == 2 assert count_even_numbers([1, 3, 5]) == 0 assert count_even_numbers([2, 4, 6]) == 3"
"def valid_anagram(s, t): return sorted(s) == sorted(t)","Checks if two strings are anagrams.

This function returns True if the input strings s and t are anagrams, meaning they contain the same characters with the same frequencies, and False otherwise. It sorts both strings and compares them.","def test_valid_anagram(): assert valid_anagram(""anagram"", ""nagaram"") assert not valid_anagram(""rat"", ""car"")"
"def lcm(a, b): from math import gcd return abs(a * b) // gcd(a, b)","Computes the least common multiple (LCM) of two numbers.

This function returns the least common multiple of integers a and b using the formula LCM(a, b) = abs(a * b) // GCD(a, b).","def test_lcm(): assert lcm(4, 5) == 20 assert lcm(6, 8) == 24 assert lcm(7, 3) == 21"
"def parabola_focus(a, b, c): 
  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))
  return focus","This function 'parabola_focus' performs a specific operation.

The function 'parabola_focus' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_parabola_focus():
    # Add test cases for parabola_focus
    assert parabola_focus(...) == expected_output"
"def last(n):
   return n[-1]
def sort_list_last(tuples):
  return sorted(tuples, key=last)","This function 'last' performs a specific operation.

The function 'last' takes the following parameters: n. It performs operations based on the parameters provided.","def test_last():
    # Add test cases for last
    assert last(...) == expected_output"
"def dutch_national_flag(nums): low, mid, high = 0, 0, len(nums) - 1; while mid <= high: if nums[mid] == 0: nums[low], nums[mid] = nums[mid], nums[low]; low += 1; mid += 1; elif nums[mid] == 1: mid += 1; else: nums[mid], nums[high] = nums[high], nums[mid]; high -= 1","Sorts an array of 0s, 1s, and 2s in place.

This function sorts an array containing only 0s, 1s, and 2s using the Dutch National Flag algorithm. It uses three pointers to rearrange the elements in linear time.","def test_dutch_national_flag(): nums = [2, 0, 1]; dutch_national_flag(nums); assert nums == [0, 1, 2]"
"def get_odd_occurence(arr, arr_size):
  for i in range(0, arr_size):
    count = 0
    for j in range(0, arr_size):
      if arr[i] == arr[j]:
        count += 1
    if (count % 2 != 0):
      return arr[i]
  return -1","This function 'get_odd_occurence' performs a specific operation.

The function 'get_odd_occurence' takes the following parameters: arr, arr_size. It performs operations based on the parameters provided.","def test_get_odd_occurence():
    # Add test cases for get_odd_occurence
    assert get_odd_occurence(...) == expected_output"
"def test_number5(x, y):   if x == y or abs(x-y) == 5 or (x+y) == 5:       return True   else:       return Falseprint(test_number5(7, 2))print(test_number5(3, 2))print(test_number5(2, 2))print(test_number5(7, 3))print(test_number5(27, 53))","""""""
Brief Description:
------------------
test_number5 function performs a specific operation as described below.

Extended Description:
---------------------
This function, `test_number5`, takes 2 parameters: x,  y. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> test_number5(value, value)
Expected output
""""""","import unittest

class TestTest_number5(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = test_number5(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = test_number5(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def combination_sum_ii(candidates, target): result = []; candidates.sort(); def backtrack(start, target, path): if target == 0: result.append(path); return; for i in range(start, len(candidates)): if i > start and candidates[i] == candidates[i - 1]: continue; if candidates[i] > target: break; backtrack(i + 1, target - candidates[i], path + [candidates[i]]); backtrack(0, target, []); return result","Finds all unique combinations of numbers that sum to a target, with each number used at most once.

This function returns a list of all unique combinations of numbers from candidates that sum to target. Each number in candidates may only be used once. It uses backtracking to explore all combinations.","def test_combination_sum_ii(): assert combination_sum_ii([10, 1, 2, 7, 6, 1, 5], 8) == [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]"
"def generate_random_numbers(n, start, end): import random return [random.randint(start, end) for _ in range(n)]","Generates a list of random numbers.

This function returns a list of n random integers between start and end, inclusive.","def test_generate_random_numbers(): import random random.seed(1) assert generate_random_numbers(5, 1, 10) == [6, 1, 7, 1, 8] random.seed(2) assert generate_random_numbers(3, 5, 15) == [8, 15, 5] assert generate_random_numbers(0, 1, 10) == []"
"def num_islands(grid): def dfs(r, c): if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == ""0"": return; grid[r][c] = ""0""; dfs(r + 1, c); dfs(r - 1, c); dfs(r, c + 1); dfs(r, c - 1); count = 0; for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == ""1"": dfs(r, c); count += 1; return count","Counts the number of islands in a 2D grid.

This function returns the number of islands in the input 2D grid, where '1' represents land and '0' represents water. It uses depth-first search (DFS) to traverse the grid and count disconnected islands.","def test_num_islands(): grid = [[""1"", ""1"", ""0"", ""0"", ""0""], [""1"", ""1"", ""0"", ""0"", ""0""], [""0"", ""0"", ""1"", ""0"", ""0""], [""0"", ""0"", ""0"", ""1"", ""1""]]; assert num_islands(grid) == 3"
"def change(string):
      return string[-1:] + string[1:-1] + string[:1]
string=raw_input(""Enter string:"")
print(""Modified string:"")
print(change(string))","""""""
Brief Description:
------------------
change function performs a specific operation as described below.

Extended Description:
---------------------
This function, `change`, takes 1 parameters: string. It is designed to perform a certain task using these parameters.

Parameters:
-----------
string : type
    Description of string.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> change(value)
Expected output
""""""","import unittest

class TestChange(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = change(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = change(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def split_two_parts(list1, L):
    return list1[:L], list1[L:]","This function 'split_two_parts' performs a specific operation.

The function 'split_two_parts' takes the following parameters: list1, L. It performs operations based on the parameters provided.","def test_split_two_parts():
    # Add test cases for split_two_parts
    assert split_two_parts(...) == expected_output"
"def palindrome_partitioning(s): result = []; def is_palindrome(sub): return sub == sub[::-1]; def backtrack(start, path): if start == len(s): result.append(path); return; for i in range(start + 1, len(s) + 1): if is_palindrome(s[start:i]): backtrack(i, path + [s[start:i]]); backtrack(0, []); return result","Partitions a string into all possible palindrome partitions.

This function returns all possible ways to partition the input string s such that every substring in each partition is a palindrome. It uses backtracking to explore all possible partitions.","def test_palindrome_partitioning(): assert palindrome_partitioning(""aab"") == [[""a"", ""a"", ""b""], [""aa"", ""b""]]"
"def calculate_exponent(base, exponent): return base ** exponent","Computes the exponentiation of a number.

This function returns the result of raising base to the power of exponent.","def test_calculate_exponent(): assert calculate_exponent(2, 3) == 8 assert calculate_exponent(5, 0) == 1 assert calculate_exponent(7, 2) == 49"
def remove_punctuation(s): return ''.join(char for char in s if char.isalnum() or char.isspace()),"Removes punctuation from a string.

This function removes punctuation characters from the string s by keeping only alphanumeric characters and spaces.","def test_remove_punctuation(): assert remove_punctuation(""Hello, world!"") == ""Hello world"" assert remove_punctuation(""What's up?"") == ""Whats up"" assert remove_punctuation("""") == """""
"def test_dsc(n):    return int(''.join(sorted(str(n), reverse = True)))def test_asc(n):    return int(''.join(sorted(list(str(n))))[::1])n = 134543print(""Original Number: "",n);print(""Descending order of the said number: "", test_dsc(n));print(""Ascending order of the said number: "", test_asc(n));n = 43750973print(""\nOriginal Number: "",n);print(""Descending order of the said number: "", test_dsc(n));print(""Ascending order of the said number: "", test_asc(n));","""""""
Brief Description:
------------------
test_dsc function performs a specific operation as described below.

Extended Description:
---------------------
This function, `test_dsc`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> test_dsc(value)
Expected output
""""""","import unittest

class TestTest_dsc(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = test_dsc(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = test_dsc(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def flatten_nested_list(nested_list): result = []; def flatten(lst): for item in lst: if isinstance(item, list): flatten(item); else: result.append(item); flatten(nested_list); return result","Flattens a nested list.

This function returns a flat list from the input nested list nested_list. It recursively traverses sublists and appends non-list elements to the result.","def test_flatten_nested_list(): nested_list = [1, [2, [3, 4], 5], 6]; assert flatten_nested_list(nested_list) == [1, 2, 3, 4, 5, 6]"
"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))","This function 'find_adverb_position' performs a specific operation.

The function 'find_adverb_position' takes the following parameters: text. It performs operations based on the parameters provided.","def test_find_adverb_position():
    # Add test cases for find_adverb_position
    assert find_adverb_position(...) == expected_output"
"import datetime
def check_date(m, d, y):
    try:
        m, d, y = map(int, (m, d, y))
        datetime.date(y, m, d)
        return True
    except ValueError:
        return False","This function 'check_date' performs a specific operation.

The function 'check_date' takes the following parameters: m, d, y. It performs operations based on the parameters provided.","def test_check_date():
    # Add test cases for check_date
    assert check_date(...) == expected_output"
"def insert_spec_position(x, n_list, pos):    return n_list[:pos-1]+[x]+n_list[pos-1:]n_list = [1,1,2,3,4,4,5,1]print(""Original list:"") print(n_list)kth_position = 3x = 12result = insert_spec_position(x, n_list, kth_position)print(""\nAfter inserting an element at kth position in the said list:"")print(result)","""""""
Brief Description:
------------------
insert_spec_position function performs a specific operation as described below.

Extended Description:
---------------------
This function, `insert_spec_position`, takes 3 parameters: x,  n_list,  pos. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
n_list : type
    Description of n_list.
pos : type
    Description of pos.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> insert_spec_position(value, value, value)
Expected output
""""""","import unittest

class TestInsert_spec_position(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = insert_spec_position(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = insert_spec_position(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)","This function 'max_Prime_Factors' performs a specific operation.

The function 'max_Prime_Factors' takes the following parameters: n. It performs operations based on the parameters provided.","def test_max_Prime_Factors():
    # Add test cases for max_Prime_Factors
    assert max_Prime_Factors(...) == expected_output"
def is_perfect_square(n): return int(n**0.5) ** 2 == n,"Checks if a number is a perfect square.

This function returns True if the input number n is a perfect square, otherwise False.",def test_is_perfect_square(): assert is_perfect_square(16) assert not is_perfect_square(18) assert is_perfect_square(25)
def calculate_average(lst): return sum(lst) / len(lst) if lst else 0,"Computes the average of list elements.

This function returns the average of all elements in the list lst. If the list is empty, it returns 0.","def test_calculate_average(): assert calculate_average([1, 2, 3]) == 2.0 assert calculate_average([5, 10, 15]) == 10.0 assert calculate_average([]) == 0"
"def decode_ways(s): if not s: return 0; dp = [0] * (len(s) + 1); dp[0] = dp[1] = 1 if s[0] != '0' else 0; for i in range(2, len(s) + 1): if 1 <= int(s[i - 1:i]) <= 9: dp[i] += dp[i - 1]; if 10 <= int(s[i - 2:i]) <= 26: dp[i] += dp[i - 2]; return dp[-1]","Decodes a string representing a number into possible letter combinations.

This function returns the number of ways the input string s, representing a number, can be decoded into letters where 'A' = 1, 'B' = 2, ..., 'Z' = 26. It uses dynamic programming to find the solution.",def test_decode_ways(): assert decode_ways("12") == 2 assert decode_ways("226") == 3 assert decode_ways("06") == 0
"def odd(num1,num2):  if num1>num2:    return  print(num1,end="" "")  return odd(num1+2,num2)num1=1print(""Enter your Limit:"")num2=int(input())print(""All odd number given range are:"")odd(num1,num2)","""""""
Brief Description:
------------------
odd function performs a specific operation as described below.

Extended Description:
---------------------
This function, `odd`, takes 2 parameters: num1, num2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num1 : type
    Description of num1.
num2 : type
    Description of num2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> odd(value, value)
Expected output
""""""","import unittest

class TestOdd(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = odd(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = odd(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)","This function 'max_val' performs a specific operation.

The function 'max_val' takes the following parameters: listval. It performs operations based on the parameters provided.","def test_max_val():
    # Add test cases for max_val
    assert max_val(...) == expected_output"
"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1","This function 'centered_hexagonal_number' performs a specific operation.

The function 'centered_hexagonal_number' takes the following parameters: n. It performs operations based on the parameters provided.","def test_centered_hexagonal_number():
    # Add test cases for centered_hexagonal_number
    assert centered_hexagonal_number(...) == expected_output"
"def is_Word_Present(sentence,word): 
    s = sentence.split("" "") 
    for i in s:  
        if (i == word): 
            return True
    return False","This function 'is_Word_Present' performs a specific operation.

The function 'is_Word_Present' takes the following parameters: sentence, word. It performs operations based on the parameters provided.","def test_is_Word_Present():
    # Add test cases for is_Word_Present
    assert is_Word_Present(...) == expected_output"
"def get_min_length_string(lst): return min(lst, key=len) if lst else """"","Finds the shortest string in a list.

This function returns the string with the minimum length from the input list lst. If the list is empty, it returns an empty string.","def test_get_min_length_string(): assert get_min_length_string([""short"", ""longest""]) == ""short"" assert get_min_length_string([""a"", ""bb""]) == ""a"" assert get_min_length_string([]) == """""
"def nth_items(list,n):
 return list[::n]","This function 'nth_items' performs a specific operation.

The function 'nth_items' takes the following parameters: list, n. It performs operations based on the parameters provided.","def test_nth_items():
    # Add test cases for nth_items
    assert nth_items(...) == expected_output"
"import cmath
def polar_rect(x,y):
 cn = complex(x,y)
 cn=cmath.polar(cn)
 cn1 = cmath.rect(2, cmath.pi)
 return (cn,cn1)","This function 'polar_rect' performs a specific operation.

The function 'polar_rect' takes the following parameters: x, y. It performs operations based on the parameters provided.","def test_polar_rect():
    # Add test cases for polar_rect
    assert polar_rect(...) == expected_output"
"def count_k_dist(str1, k): 	str_len = len(str1) 		result = 0	ctr = [0] * 27	for i in range(0, str_len): 		dist_ctr = 0		ctr = [0] * 27		for j in range(i, str_len): 						if(ctr[ord(str1[j]) - 97] == 0): 				dist_ctr += 1			ctr[ord(str1[j]) - 97] += 1			if(dist_ctr == k): 				result += 1			if(dist_ctr > k): 				break	return result str1 = input(""Input a string (lowercase alphabets):"")k = int(input(""Input k: ""))print(""Number of substrings with exactly"", k, ""distinct characters : "", end = """") print(count_k_dist(str1, k))","""""""
Brief Description:
------------------
count_k_dist function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_k_dist`, takes 2 parameters: str1,  k. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.
k : type
    Description of k.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_k_dist(value, value)
Expected output
""""""","import unittest

class TestCount_k_dist(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_k_dist(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_k_dist(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def sum_of_odd_numbers(lst): return sum(x for x in lst if x % 2 != 0),"Sums the odd numbers in a list.

This function returns the sum of all odd numbers in the input list lst.","def test_sum_of_odd_numbers(): assert sum_of_odd_numbers([1, 2, 3]) == 4 assert sum_of_odd_numbers([2, 4, 6]) == 0 assert sum_of_odd_numbers([1, 3, 5]) == 9"
"import re
def remove_multiple_spaces(text1):
  return (re.sub(' +',' ',text1))","This function 'remove_multiple_spaces' performs a specific operation.

The function 'remove_multiple_spaces' takes the following parameters: text1. It performs operations based on the parameters provided.","def test_remove_multiple_spaces():
    # Add test cases for remove_multiple_spaces
    assert remove_multiple_spaces(...) == expected_output"
"def pair_wise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp","This function 'pair_wise' performs a specific operation.

The function 'pair_wise' takes the following parameters: l1. It performs operations based on the parameters provided.","def test_pair_wise():
    # Add test cases for pair_wise
    assert pair_wise(...) == expected_output"
def fibonacci(n):  if n == 1 or n == 2:    return 1  else:    return (fibonacci(n - 1) + (fibonacci(n - 2)))print(fibonacci(7)),"""""""
Brief Description:
------------------
fibonacci function performs a specific operation as described below.

Extended Description:
---------------------
This function, `fibonacci`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> fibonacci(value)
Expected output
""""""","import unittest

class TestFibonacci(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = fibonacci(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = fibonacci(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def calculate_mean(lst): return sum(lst) / len(lst) if lst else 0,"Calculates the mean of a list of numbers.

This function returns the arithmetic mean of the numbers in the input list lst, or 0 if the list is empty.","def test_calculate_mean(): assert calculate_mean([1, 2, 3]) == 2 assert calculate_mean([10, 20, 30]) == 20 assert calculate_mean([]) == 0"
"def find_missing_number(lst, n): return sum(range(1, n + 1)) - sum(lst)","Finds the missing number from a list of integers.

This function returns the missing number in a list lst containing integers from 1 to n, where one number is missing.","def test_find_missing_number(): assert find_missing_number([1, 2, 4, 5], 5) == 3 assert find_missing_number([1, 3], 3) == 2 assert find_missing_number([2], 2) == 1"
def find_missing_number(lst): n = len(lst) + 1 return n * (n + 1) // 2 - sum(lst),"Finds the missing number in a sequence from 1 to n.

This function takes a list lst of integers from 1 to n, where one number is missing, and returns the missing number.","def test_find_missing_number(): assert find_missing_number([1, 2, 4, 5]) == 3 assert find_missing_number([1, 3]) == 2 assert find_missing_number([2]) == 1"
"def replace_odd_numbers(lst, new_value): return [new_value if x % 2 != 0 else x for x in lst]","Replaces odd numbers in a list with a new value.

This function returns a list where each odd number in lst is replaced by new_value.","def test_replace_odd_numbers(): assert replace_odd_numbers([1, 2, 3], 0) == [0, 2, 0] assert replace_odd_numbers([4, 5], 10) == [4, 10] assert replace_odd_numbers([], 1) == []"
"def string_length(str1):
    count = 0
    for char in str1:
        count += 1
    return count","This function 'string_length' performs a specific operation.

The function 'string_length' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_string_length():
    # Add test cases for string_length
    assert string_length(...) == expected_output"
"import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result","This function 'heap_assending' performs a specific operation.

The function 'heap_assending' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_heap_assending():
    # Add test cases for heap_assending
    assert heap_assending(...) == expected_output"
"def remove_whitespace(s): return s.replace("" "", """")","Removes all whitespace from a string.

This function takes a string s and returns a new string with all space characters removed.",def test_remove_whitespace(): assert remove_whitespace("hello world") == "helloworld" assert remove_whitespace(" ") == "" assert remove_whitespace("") == ""
"def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ","This function 'find_lists' performs a specific operation.

The function 'find_lists' takes the following parameters: Input. It performs operations based on the parameters provided.","def test_find_lists():
    # Add test cases for find_lists
    assert find_lists(...) == expected_output"
def get_dict_keys(d): return list(d.keys()),Retrieves keys from a dictionary.,"def test_get_dict_keys(): assert get_dict_keys({'a': 1, 'b': 2}) == ['a', 'b'] assert get_dict_keys({'x': 10}) == ['x'] assert get_dict_keys({}) == []"
"def get_first_n_elements(lst, n): return lst[:n]","Gets the first n elements of a list.

This function returns a new list containing the first n elements from the input list lst. If n is greater than the length of the list, it returns the entire list.","def test_get_first_n_elements(): assert get_first_n_elements([1, 2, 3, 4], 2) == [1, 2] assert get_first_n_elements([5, 6], 5) == [5, 6] assert get_first_n_elements([], 1) == []"
"def all_paths_source_to_target(graph): result = []; def dfs(node, path): if node == len(graph) - 1: result.append(path[:]); return; for neighbor in graph[node]: dfs(neighbor, path + [neighbor]); dfs(0, [0]); return result","Finds all paths from source to target in a directed graph.

This function returns all possible paths from the source node (0) to the target node (n-1) in the input directed graph graph. It uses depth-first search (DFS) to explore all paths.","def test_all_paths_source_to_target(): assert all_paths_source_to_target([[1, 2], [3], [3], []]) == [[0, 1, 3], [0, 2, 3]]"
"def max_profit_with_transactions(prices, k): n = len(prices); if n == 0: return 0; dp = [[0] * n for _ in range(k + 1)]; for t in range(1, k + 1): max_diff = -prices[0]; for d in range(1, n): dp[t][d] = max(dp[t][d - 1], prices[d] + max_diff); max_diff = max(max_diff, dp[t - 1][d] - prices[d]); return dp[k][-1]","Finds the maximum profit with at most k transactions.

This function returns the maximum profit that can be obtained by making at most k stock transactions, where each transaction involves buying and selling on different days. It uses dynamic programming to track the maximum profit.","def test_max_profit_with_transactions(): assert max_profit_with_transactions([2, 4, 1], 2) == 2 assert max_profit_with_transactions([3, 2, 6, 5, 0, 3], 2) == 7"
def nth_centered_octagonal_number(n): return (8 * n ** 2 + 8 * n + 1) // 2,"Computes the nth centered octagonal number.

This function returns the n-th centered octagonal number, which is a number in the sequence of centered polygons based on an octagon.",def test_nth_centered_octagonal_number(): assert nth_centered_octagonal_number(3) == 61 assert nth_centered_octagonal_number(1) == 9 assert nth_centered_octagonal_number(5) == 151
def remove_vowels(s): return ''.join(c for c in s if c not in 'aeiouAEIOU'),"Removes vowels from a string.

This function returns a new string with all vowels removed from the input string s.",def test_remove_vowels(): assert remove_vowels("hello") == "hll" assert remove_vowels("world") == "wrld" assert remove_vowels("AEIOU") == ""
"def find_all_anagrams(s, p): from collections import Counter; p_count = Counter(p); s_count = Counter(s[:len(p)-1]); result = []; for i in range(len(p)-1, len(s)): s_count[s[i]] += 1; if s_count == p_count: result.append(i-len(p)+1); s_count[s[i-len(p)+1]] -= 1; if s_count[s[i-len(p)+1]] == 0: del s_count[s[i-len(p)+1]]; return result","Finds all start indices of p's anagrams in s.

This function returns a list of starting indices where the input string p's anagrams appear in the input string s. It uses a sliding window and Counter to track character frequencies.","def test_find_all_anagrams(): assert find_all_anagrams(""cbaebabacd"", ""abc"") == [0, 6] assert find_all_anagrams(""abab"", ""ab"") == [0, 1, 2]"
"def roman_to_integer(s): roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}; total = 0; for i in range(len(s)): if i > 0 and roman[s[i]] > roman[s[i - 1]]: total += roman[s[i]] - 2 * roman[s[i - 1]]; else: total += roman[s[i]]; return total","Converts a Roman numeral to an integer.

This function returns the integer representation of the input Roman numeral string s. It accounts for subtraction rules in Roman numerals (e.g., IV = 4).",def test_roman_to_integer(): assert roman_to_integer("III") == 3 assert roman_to_integer("LVIII") == 58 assert roman_to_integer("MCMXCIV") == 1994
"def top_k_frequent_elements(nums, k): from collections import Counter; return [x for x, _ in Counter(nums).most_common(k)]","Finds the k most frequent elements in a list.

This function returns the k most frequent elements from the input list nums. It uses the Counter class from Python's collections module to count frequencies and returns the k most common elements.","def test_top_k_frequent_elements(): assert top_k_frequent_elements([1, 1, 1, 2, 2, 3], 2) == [1, 2] assert top_k_frequent_elements([1], 1) == [1]"
"def str_to_dict(s): return eval(s) if isinstance(s, str) else {}","Converts a string to a dictionary.

This function attempts to convert the input string s to a dictionary. If the string is not a valid dictionary representation, it returns an empty dictionary.",def test_str_to_dict(): assert str_to_dict("{'a': 1}") == {'a': 1} assert str_to_dict("not a dict") == {} assert str_to_dict("{}") == {}
"def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)","This function 'zigzag' performs a specific operation.

The function 'zigzag' takes the following parameters: n, k. It performs operations based on the parameters provided.","def test_zigzag():
    # Add test cases for zigzag
    assert zigzag(...) == expected_output"
def check_string(s):    messg = []    if not any(x.isupper() for x in s):        messg.append('String must have 1 upper case character.')    if not any(x.islower() for x in s):        messg.append('String must have 1 lower case character.')    if not any(x.isdigit() for x in s):        messg.append('String must have 1 number.')    if len(s) < 8:        messg.append('String length should be atleast 8.')        if not messg:        messg.append('Valid string.')    return messg    s = input("Input the string: ")print(check_string(s)),"""""""
Brief Description:
------------------
check_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `check_string`, takes 1 parameters: s. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s : type
    Description of s.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> check_string(value)
Expected output
""""""","import unittest

class TestCheck_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = check_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = check_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def reverse_vowels(s): vowels = set('aeiouAEIOU'); s = list(s); left, right = 0, len(s) - 1; while left < right: if s[left] not in vowels: left += 1; elif s[right] not in vowels: right -= 1; else: s[left], s[right] = s[right], s[left]; left += 1; right -= 1; return ''.join(s)","Reverses the vowels in a string.

This function returns a new string where the vowels in the input string s are reversed, while the order of the consonants remains the same. It uses two pointers to swap the vowels.",def test_reverse_vowels(): assert reverse_vowels("hello") == "holle" assert reverse_vowels("leetcode") == "leotcede"
"def square_nums(nums):
 square_nums = list(map(lambda x: x ** 2, nums))
 return square_nums","This function 'square_nums' performs a specific operation.

The function 'square_nums' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_square_nums():
    # Add test cases for square_nums
    assert square_nums(...) == expected_output"
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1),"Computes the factorial of a number recursively.

This function returns the factorial of the number n using a recursive approach.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(3) == 6
def count_vowels(s): return sum(1 for char in s.lower() if char in "aeiou"),"Counts the number of vowels in a string.

This function counts the vowels in the string s, ignoring case. It returns the number of vowels found.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("world") == 1 assert count_vowels("") == 0
"def find_min_rotated_sorted_array(nums): left, right = 0, len(nums) - 1; while left < right: mid = (left + right) // 2; if nums[mid] > nums[right]: left = mid + 1; else: right = mid; return nums[left]","Finds the minimum element in a rotated sorted array.

This function returns the minimum element in the input rotated sorted array nums. It uses binary search to find the minimum by comparing mid and right values.","def test_find_min_rotated_sorted_array(): assert find_min_rotated_sorted_array([3, 4, 5, 1, 2]) == 1 assert find_min_rotated_sorted_array([4, 5, 6, 7, 0, 1, 2]) == 0"
"def longest_common_subsequence(X, Y, m, n): 
    if m == 0 or n == 0: 
       return 0 
    elif X[m-1] == Y[n-1]: 
       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
    else: 
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))","This function 'longest_common_subsequence' performs a specific operation.

The function 'longest_common_subsequence' takes the following parameters: X, Y, m, n. It performs operations based on the parameters provided.","def test_longest_common_subsequence():
    # Add test cases for longest_common_subsequence
    assert longest_common_subsequence(...) == expected_output"
"def find_longest_word(words): return max(words, key=len)","Finds the longest word in a list.

This function returns a list of all keys present in the input dictionary d.","def test_find_longest_word(): assert find_longest_word([""cat"", ""elephant"", ""dog""]) == ""elephant"" assert find_longest_word([""short"", ""longer"", ""longest""]) == ""longest"" assert find_longest_word([""single""]) == ""single"""
"import re
def is_decimal(num):
  num_fetch = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
  result = num_fetch.search(num)
  return bool(result)","This function 'is_decimal' performs a specific operation.

The function 'is_decimal' takes the following parameters: num. It performs operations based on the parameters provided.","def test_is_decimal():
    # Add test cases for is_decimal
    assert is_decimal(...) == expected_output"
def to_title_case(s): return s.title(),"Converts a string to title case.

This function returns a new string where the first letter of each word in the input string s is capitalized, and the remaining letters are in lowercase.",def test_to_title_case(): assert to_title_case("hello world") == "Hello World" assert to_title_case("IS FUN") == "Is Fun" assert to_title_case("") == ""
"def list_of_dicts(marks):    keys = marks.keys()    vals = zip(*[marks[k] for k in keys])    result = [dict(zip(keys, v)) for v in vals]    return resultmarks = {'Science': [88, 89, 62, 95], 'Language': [77, 78, 84, 80]}print(""Original dictionary of lists:"")print(marks)print(""\nSplit said dictionary of lists into list of dictionaries:"")print(list_of_dicts(marks))","""""""
Brief Description:
------------------
list_of_dicts function performs a specific operation as described below.

Extended Description:
---------------------
This function, `list_of_dicts`, takes 1 parameters: marks. It is designed to perform a certain task using these parameters.

Parameters:
-----------
marks : type
    Description of marks.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> list_of_dicts(value)
Expected output
""""""","import unittest

class TestList_of_dicts(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = list_of_dicts(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = list_of_dicts(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def count_digits(n): return len([char for char in str(n) if char.isdigit()]),"Counts the number of digits in a number.

This function converts a number n to a string and counts how many characters in the string are digits. It returns the total count.",def test_count_digits(): assert count_digits(12345) == 5 assert count_digits(0) == 1 assert count_digits(-9876) == 4
"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)","This function 'remove_uppercase' performs a specific operation.

The function 'remove_uppercase' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_remove_uppercase():
    # Add test cases for remove_uppercase
    assert remove_uppercase(...) == expected_output"
def fahrenheit_to_celsius(f): return (f - 32) * 5/9,"Converts Fahrenheit to Celsius.

 This function converts a given temperature in degrees Fahrenheit""
f
to Celsius using the formula
C = (F - 32) * 5/9
. It returns the temperature in Celsius.", def test_fahrenheit_to_celsius(): assert fahrenheit_to_celsius(32) == 0 assert fahrenheit_to_celsius(212) == 100 assert fahrenheit_to_celsius(-40) == -40
"def max_product_subarray(nums): max_prod = min_prod = result = nums[0]; for num in nums[1:]: temp = max_prod; max_prod = max(num, max_prod * num, min_prod * num); min_prod = min(num, temp * num, min_prod * num); result = max(result, max_prod); return result","Finds the maximum product of a contiguous subarray.

This function returns the maximum product of a contiguous subarray in the input list nums. It keeps track of both the maximum and minimum products at each step due to the possibility of negative numbers.","def test_max_product_subarray(): assert max_product_subarray([2, 3, -2, 4]) == 6 assert max_product_subarray([-2, 0, -1]) == 0"
"def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return (""Odd Parity""); 
    return (""Even Parity""); ","This function 'find_Parity' performs a specific operation.

The function 'find_Parity' takes the following parameters: x. It performs operations based on the parameters provided.","def test_find_Parity():
    # Add test cases for find_Parity
    assert find_Parity(...) == expected_output"
def calculate_median(data): data.sort(); n = len(data); if n % 2 == 0: return (data[n // 2 - 1] + data[n // 2]) / 2; return data[n // 2],"Calculates the median of a list.

This function returns the median of the list data. If the number of elements is odd, it returns the middle element; if even, it returns the average of the two middle elements.","def test_calculate_median(): assert calculate_median([1, 2, 3]) == 2 assert calculate_median([1, 2, 3, 4]) == 2.5"
"def are_anagrams(s1, s2): return sorted(s1) == sorted(s2)","Checks if two strings are anagrams.

This function returns True if the strings s1 and s2 are anagrams, meaning they contain the same characters in the same quantities, and False otherwise.","def test_are_anagrams(): assert are_anagrams(""listen"", ""silent"") assert not are_anagrams(""hello"", ""world"") assert are_anagrams(""evil"", ""vile"")"
def find_duplicate(nums): slow = fast = nums[0]; while True: slow = nums[slow]; fast = nums[nums[fast]]; if slow == fast: break; fast = nums[0]; while slow != fast: slow = nums[slow]; fast = nums[fast]; return slow,"Finds the duplicate number in an array.

This function returns the duplicate number in the input array nums containing n + 1 integers where each integer is between 1 and n. It uses Floyd's Tortoise and Hare algorithm to detect the cycle caused by the duplicate.","def test_find_duplicate(): assert find_duplicate([1, 3, 4, 2, 2]) == 2 assert find_duplicate([3, 1, 3, 4, 2]) == 3"
"def is_deficient_number(n): return sum(i for i in range(1, n) if n % i == 0) < n","Checks if a number is deficient.

This function returns True if the sum of the divisors of the number n (excluding n itself) is less than n, indicating that n is a deficient number.",def test_is_deficient_number(): assert is_deficient_number(8) assert not is_deficient_number(6) assert is_deficient_number(10)
"def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True","Checks if a number is prime.

This function checks if a given number n is a prime number. A prime number is greater than 1 and divisible only by 1 and itself.",def test_is_prime(): assert is_prime(7) assert not is_prime(9) assert not is_prime(1)
def count_words(s): return len(s.split()),"Counts the number of words in a string.

This function returns the number of words in the string s. It assumes words are separated by whitespace characters.",def test_count_words(): assert count_words("hello world") == 2 assert count_words("one") == 1 assert count_words("") == 0
"def kruskal_mst(graph): edges = [(cost, frm, to) for frm in graph for to, cost in graph[frm]]; edges.sort(); parent = {}; def find(v): if parent[v] != v: parent[v] = find(parent[v]); return parent[v]; def union(v1, v2): root1, root2 = find(v1), find(v2); if root1 != root2: parent[root2] = root1; for v in graph: parent[v] = v; mst = []; for cost, frm, to in edges: if find(frm) != find(to): union(frm, to); mst.append((frm, to, cost)); return mst","Finds the minimum spanning tree (MST) using Kruskal's algorithm.

This function returns the MST of a weighted undirected graph graph using Kruskal's algorithm, which selects edges based on their weights.","def test_kruskal_mst(): graph = {'A': [('B', 1), ('C', 4)], 'B': [('A', 1), ('C', 2), ('D', 5)], 'C': [('A', 4), ('B', 2), ('D', 1)], 'D': [('B', 5), ('C', 1)]}; assert kruskal_mst(graph) == [('A', 'B', 1), ('C', 'D', 1), ('B', 'C', 2)]"
"def find_common_elements(lst1, lst2): return list(set(lst1) & set(lst2))",Finds common elements between two lists.,"def test_find_common_elements(): assert find_common_elements([1, 2, 3], [2, 3, 4]) == [2, 3] assert find_common_elements([5, 6], [7, 8]) == [] assert find_common_elements([], [1, 2]) == []"
"def Extract(lst): 
    return [item[-1] for item in lst] ","This function 'Extract' performs a specific operation.

The function 'Extract' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_Extract():
    # Add test cases for Extract
    assert Extract(...) == expected_output"
"def multiply_elements(lst): from functools import reduce return reduce(lambda x, y: x * y, lst, 1)","Multiplies all elements in a list.

This function returns the product of all elements in the list lst. If the list is empty, it returns 1.","def test_multiply_elements(): assert multiply_elements([1, 2, 3]) == 6 assert multiply_elements([10]) == 10 assert multiply_elements([]) == 1"
"def accounts_merge(accounts): from collections import defaultdict; parent = {}; def find(x): if parent[x] != x: parent[x] = find(parent[x]); return parent[x]; def union(x, y): parent[find(x)] = find(y); email_to_name = {}; for account in accounts: name = account[0]; for email in account[1:]: parent.setdefault(email, email); email_to_name[email] = name; for email in account[1:]: union(account[1], email); unions = defaultdict(list); for email in parent: unions[find(email)].append(email); return [[email_to_name[v[0]]] + sorted(v) for v in unions.values()]","Merges accounts based on common email addresses.

This function returns a merged list of accounts where each account consists of a name followed by unique email addresses. If two accounts share any email address, they are merged into one.","def test_accounts_merge(): accounts = [[""John"", ""johnsmith@mail.com"", ""john00@mail.com""], [""John"", ""johnnybravo@mail.com""], [""John"", ""johnsmith@mail.com"", ""john_newyork@mail.com""], [""Mary"", ""mary@mail.com""]]; assert accounts_merge(accounts) == [[""John"", ""john00@mail.com"", ""john_newyork@mail.com"", ""johnsmith@mail.com""], [""John"", ""johnnybravo@mail.com""], [""Mary"", ""mary@mail.com""]]"
"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)","This function 'max_sum_rectangular_grid' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def common_in_nested_lists(nested_list):    result = list(set.intersection(*map(set, nested_list)))    return resultnested_list = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]print(""\nOriginal lists:"")print(nested_list)print(""\nCommon element(s) in nested lists:"")print(common_in_nested_lists(nested_list))","""""""
Brief Description:
------------------
common_in_nested_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `common_in_nested_lists`, takes 1 parameters: nested_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nested_list : type
    Description of nested_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> common_in_nested_lists(value)
Expected output
""""""","import unittest

class TestCommon_in_nested_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = common_in_nested_lists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = common_in_nested_lists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_by_dnf(arr, n):
  low=0
  mid=0
  high=n-1
  while mid <= high:
    if arr[mid] == 0:
      arr[low], arr[mid] = arr[mid], arr[low]
      low = low + 1
      mid = mid + 1
    elif arr[mid] == 1:
      mid = mid + 1
    else:
      arr[mid], arr[high] = arr[high], arr[mid]
      high = high - 1
  return arr","This function 'sort_by_dnf' performs a specific operation.

The function 'sort_by_dnf' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_sort_by_dnf():
    # Add test cases for sort_by_dnf
    assert sort_by_dnf(...) == expected_output"
"def prime_num(num):
  if num >=1:
   for i in range(2, num//2):
     if (num % i) == 0:
                return False
     else:
                return True
  else:
          return False","This function 'prime_num' performs a specific operation.

The function 'prime_num' takes the following parameters: num. It performs operations based on the parameters provided.","def test_prime_num():
    # Add test cases for prime_num
    assert prime_num(...) == expected_output"
def nth_triangular_number(n): return n * (n + 1) // 2,Computes the nth triangular number.,def test_nth_triangular_number(): assert nth_triangular_number(3) == 6 assert nth_triangular_number(1) == 1 assert nth_triangular_number(4) == 10
def calculate_average(lst): return sum(lst) / len(lst) if lst else 0,"Calculates the average of a list of numbers.

This function returns the average of the numbers in the input list lst, or 0 if the list is empty.","def test_calculate_average(): assert calculate_average([1, 2, 3]) == 2 assert calculate_average([10, 20, 30]) == 20 assert calculate_average([]) == 0"
"import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs","This function 'k_smallest_pairs' performs a specific operation.

The function 'k_smallest_pairs' takes the following parameters: nums1, nums2, k. It performs operations based on the parameters provided.","def test_k_smallest_pairs():
    # Add test cases for k_smallest_pairs
    assert k_smallest_pairs(...) == expected_output"
"def count_subarrays_with_sum(nums, k): count, current_sum = 0, 0; sum_dict = {0: 1}; for num in nums: current_sum += num; if current_sum - k in sum_dict: count += sum_dict[current_sum - k]; sum_dict[current_sum] = sum_dict.get(current_sum, 0) + 1; return count","Counts the number of subarrays that sum to k.

This function returns the number of contiguous subarrays in the input list nums that sum to k. It uses a hash map to track the cumulative sum and count the subarrays.","def test_count_subarrays_with_sum(): assert count_subarrays_with_sum([1, 1, 1], 2) == 2 assert count_subarrays_with_sum([1, 2, 3], 3) == 2"
"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result","This function 'string_to_tuple' performs a specific operation.

The function 'string_to_tuple' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_string_to_tuple():
    # Add test cases for string_to_tuple
    assert string_to_tuple(...) == expected_output"
"def split(word): 
    return [char for char in word] ","This function 'split' performs a specific operation.

The function 'split' takes the following parameters: word. It performs operations based on the parameters provided.","def test_split():
    # Add test cases for split
    assert split(...) == expected_output"
"def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ","This function 'find_Max_Num' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def sum_div(number):    divisors = [1]    for i in range(2, number):        if (number % i)==0:            divisors.append(i)    return sum(divisors)print(sum_div(8))print(sum_div(12))","""""""
Brief Description:
------------------
sum_div function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_div`, takes 1 parameters: number. It is designed to perform a certain task using these parameters.

Parameters:
-----------
number : type
    Description of number.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_div(value)
Expected output
""""""","import unittest

class TestSum_div(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_div(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_div(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def get_unique_elements(lst): return list(set(lst)),"Retrieves unique elements from a list.

This function returns a list with duplicates removed from the input list lst, preserving only unique elements.","def test_get_unique_elements(): assert get_unique_elements([1, 2, 2, 3]) == [1, 2, 3] assert get_unique_elements(['a', 'b', 'a']) == ['a', 'b'] assert get_unique_elements([1, 1, 1]) == [1]"
"def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",Checks if a number is prime.,def test_is_prime(): assert is_prime(2) assert not is_prime(4) assert is_prime(7) assert not is_prime(1)
"import re
def text_starta_endb(text):
        patterns = 'a.*?b$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","This function 'text_starta_endb' performs a specific operation.

The function 'text_starta_endb' takes the following parameters: text. It performs operations based on the parameters provided.","def test_text_starta_endb():
    # Add test cases for text_starta_endb
    assert text_starta_endb(...) == expected_output"
def flatten_list(lst): return [item for sublist in lst for item in sublist],"Flattens a list of lists into a single list.

This function returns a single list containing all elements from the sublists in the input list lst.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([['a'], ['b', 'c']]) == ['a', 'b', 'c'] assert flatten_list([]) == []"
"def merge_dict(d1,d2):
 d = d1.copy()
 d.update(d2)
 return d","This function 'merge_dict' performs a specific operation.

The function 'merge_dict' takes the following parameters: d1, d2. It performs operations based on the parameters provided.","def test_merge_dict():
    # Add test cases for merge_dict
    assert merge_dict(...) == expected_output"
"import re
def check_literals(text, patterns):
  for pattern in patterns:
    if re.search(pattern,  text):
        return ('Matched!')
    else:
        return ('Not Matched!')","This function 'check_literals' performs a specific operation.

The function 'check_literals' takes the following parameters: text, patterns. It performs operations based on the parameters provided.","def test_check_literals():
    # Add test cases for check_literals
    assert check_literals(...) == expected_output"
"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None","This function 'first_non_repeating_character' performs a specific operation.

The function 'first_non_repeating_character' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_first_non_repeating_character():
    # Add test cases for first_non_repeating_character
    assert first_non_repeating_character(...) == expected_output"
"def rob_houses_circular(nums): if len(nums) == 1: return nums[0]; def rob(nums): prev1, prev2 = 0, 0; for num in nums: prev1, prev2 = max(prev2 + num, prev1), prev1; return prev1; return max(rob(nums[1:]), rob(nums[:-1]))","Finds the maximum sum of non-adjacent houses in a circular arrangement.

This function returns the maximum sum of non-adjacent houses that can be robbed from a circular arrangement of houses. It solves two subproblems: excluding the first house and excluding the last house.","def test_rob_houses_circular(): assert rob_houses_circular([2, 3, 2]) == 3 assert rob_houses_circular([1, 2, 3, 1]) == 4"
"def multiply_elements(lst): from functools import reduce return reduce(lambda x, y: x * y, lst, 1)","Multiplies all elements in a list.

This function multiplies all the elements in the list lst and returns the result. If the list is empty, it returns 1.","def test_multiply_elements(): assert multiply_elements([1, 2, 3, 4]) == 24 assert multiply_elements([5]) == 5 assert multiply_elements([]) == 1"
def is_odd(n): return n % 2 != 0,"Checks if a number is odd.

This function returns True if the input number n is odd and False otherwise.",def test_is_odd(): assert is_odd(3) assert not is_odd(4) assert is_odd(7)
"def unique_paths(m, n): dp = [[1] * n for _ in range(m)]; for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1]; return dp[-1][-1]","Finds the number of unique paths from the top-left to the bottom-right corner of a grid.

This function returns the number of unique paths from the top-left corner to the bottom-right corner of a m x n grid. The only allowed moves are to the right or down.","def test_unique_paths(): assert unique_paths(3, 7) == 28 assert unique_paths(3, 2) == 3"
"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict","This function 'merge_dictionaries_three' performs a specific operation.

The function 'merge_dictionaries_three' takes the following parameters: dict1, dict2, dict3. It performs operations based on the parameters provided.","def test_merge_dictionaries_three():
    # Add test cases for merge_dictionaries_three
    assert merge_dictionaries_three(...) == expected_output"
def is_valid_password(password): return len(password) >= 8 and any(char.isdigit() for char in password) and any(char.isalpha() for char in password),"Checks if a password is valid.

This function returns True if the input password password is at least 8 characters long, contains both digits and letters.",def test_is_valid_password(): assert is_valid_password("Password1") assert not is_valid_password("short") assert not is_valid_password("allletters")
"def find_duplicate_subtrees(root): from collections import defaultdict; def serialize(node): if not node: return ""#""; serial = f""{node.val},{serialize(node.left)},{serialize(node.right)}""; trees[serial].append(node); return serial; trees = defaultdict(list); serialize(root); return [nodes[0] for nodes in trees.values() if len(nodes) > 1]","Finds all duplicate subtrees in a binary tree.

This function returns a list of root nodes for all duplicate subtrees in the binary tree rooted at root. A duplicate subtree is defined as two or more subtrees that have the same structure and node values.","def test_find_duplicate_subtrees(): root = TreeNode(1, TreeNode(2, TreeNode(4)), TreeNode(3, TreeNode(2, TreeNode(4)), TreeNode(4))); assert len(find_duplicate_subtrees(root)) == 2"
