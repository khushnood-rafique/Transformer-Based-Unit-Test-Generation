Python_Function,Description,Unit Test Cases
"def add_two_numbers(a, b): return a + b","Adds two numbers.

 This function takes two numerical inputs a and b and returns their sum. It assumes the inputs are integers or floats."," def test_add_two_numbers(): assert add_two_numbers(2, 3) == 5 assert add_two_numbers(-1, 1) == 0 assert add_two_numbers(0, 0) == 0"
def reverse_string(s): return s[::-1],"Reverses a string.

 This function accepts a string s and returns a new string that contains all the characters from s in reverse order. It assumes the input is a valid string.", def test_reverse_string(): assert reverse_string("hello") == "olleh" assert reverse_string("") == "" assert reverse_string("a") == "a"
"def is_prime(n): if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True","Checks if a number is prime.

 This function takes an integer n and checks if it's a prime number. A prime number is divisible only by 1 and itself. The function returns True if n is prime and False otherwise.",def test_is_prime(): assert is_prime(2) == True assert is_prime(4) == False assert is_prime(17) == True
def factorial(n): if n == 0: return 1 return n * factorial(n - 1),"Computes factorial of a number.

 This function recursively calculates the factorial of a non-negative integer n. The factorial is the product of all positive integers up to n", def test_factorial(): assert factorial(0) == 1 assert factorial(5) == 120 assert facto
def is_palindrome(s): return s == s[::-1],"Checks if a string is a palindrome.

 This function accepts a string s and returns True if the string reads the same backward as forward (i.e., is a palindrome). Otherwise, it returns False.",def test_is_palindrome(): assert is_palindrome("madam") assert not is_palindrome("hello") assert is_palindrome("racecar")
"def fibonacci(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return a","Generates the nth Fibonacci number.

 This function computes the nth Fibonacci number in the Fibonacci sequence. It uses an iterative approach to generate the sequence and returns the number at position n.", def test_fibonacci(): assert fibonacci(0) == 0 assert fibonacci(1) == 1 assert fibonacci(10) == 55
def find_max(lst): return max(lst),"Finds the maximum element in a list.

 This function takes a list of numbers
lst
and returns the maximum element from the list using Python's built-in
max()
function. It assumes the list is non-empty."," def test_find_max(): assert find_max([1, 2, 3, 4]) == 4 assert find_max([-1, -5, 0]) == 0 assert find_max([7]) == 7"
"def sum_of_squares(n): return sum(i**2 for i in range(1, n+1))","Calculates the sum of squares of the first n numbers.

 This function takes an integer n and returns the sum of the squares of all integers from 1 to n. It uses a list comprehension to generate the squares and calculates their sum.", def test_sum_of_squares(): assert sum_of_squares(3) == 14 assert sum_of_squares(5) == 55 assert sum_of_squares(1) =
def count_vowels(s): return sum(1 for char in s if char.lower() in 'aeiou'),"Counts the number of vowels in a string.

 This function takes a string s and counts the number of vowels (a, e, i, o, u) in the string, ignoring case. It returns the total count of vowels.", def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("xyz") == 0 assert count_vowels("AEIOU") == 5
def is_even(n): return n % 2 == 0,"Checks if a number is even.

 This function checks whether an integer""
n
is even. It returns
TRUE
if the number is even and
FALSE
otherwise.", def test_is_even(): assert is_even(2) assert not is_even(3) assert is_even(0)
def sum_list(lst): return sum(lst),"Sums all elements in a list.

 This function takes a list of numbers""
lst
and returns the sum of its elements using Python's built-in
sum()
function."," def test_sum_list(): assert sum_list([1, 2, 3]) == 6 assert sum_list([0, -1, 1]) == 0 assert sum_list([]) == 0"
def find_min(lst): return min(lst),"Finds the minimum element in a list.

 This function accepts a list of numbers""
lst
and returns the smallest number using the built-in
min()
function. It assumes the list is non-empty."," def test_find_min(): assert find_min([1, 2, 3, 4]) == 1 assert find_min([-1, -5, 0]) == -5 assert find_min([7]) == 7"
def count_words(s): return len(s.split()),"Counts the words in a string.

 This function takes a string""
s
and returns the number of words it contains by splitting the string by whitespace and counting the resulting substrings.", def test_count_words(): assert count_words("Hello world") == 2 assert count_words("") == 0 assert count_words("one two three") == 3
"def gcd(a, b): while b: a, b = b, a % b return a","Computes the greatest common divisor (GCD) of two numbers.

 This function takes two integers""
a
and
b
and returns their greatest common divisor using the Euclidean algorithm."," def test_gcd(): assert gcd(48, 18) == 6 assert gcd(7, 1) == 1 assert gcd(100, 25) == 25"
def find_duplicates(lst): return list(set([x for x in lst if lst.count(x) > 1])),"Finds duplicate elements in a list.

 This function accepts a list""
lst
and returns a new list of all elements that appear more than once in the input list. Duplicates are only included once in the result."," def test_find_duplicates(): assert find_duplicates([1, 2, 3, 2, 4, 4]) == [2, 4] assert find_duplicates([5, 6, 7]) == [] assert find_duplicates([1, 1, 1]) == [1]"
"def is_anagram(s1, s2): return sorted(s1) == sorted(s2)","Checks if two strings are anagrams.

 This function takes two strings""""
s1
and
s2
and checks whether they are anagrams by comparing the sorted characters of each string. It returns
TRUE
if they are anagrams and
FALSE
otherwise.""","def test_is_anagram(): assert is_anagram(""listen"", ""silent"") assert not is_anagram(""hello"", ""world"") assert is_anagram(""evil"", ""vile"")"
"def binary_search(lst, target): low, high = 0, len(lst) - 1 while low <= high: mid = (low + high) // 2 if lst[mid] == target: return mid elif lst[mid] < target: low = mid + 1 else: high = mid - 1 return -1","Performs binary search on a sorted list.

 This function implements the binary search algorithm to find the index of a target element in a sorted list""
lst
. It returns the index of the target if found, otherwise it returns -1."," def test_binary_search(): assert binary_search([1, 2, 3, 4, 5], 3) == 2 assert binary_search([10, 20, 30], 25) == -1 assert binary_search([1, 3, 5, 7], 7) == 3"
def flatten_list(nested_list): return [item for sublist in nested_list for item in sublist],"Flattens a nested list.

 This function takes a list of lists"," def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([[], [5]]) == [5] assert flatten_list([[1], [2], [3]]) == [1, 2, 3]"
def remove_duplicates(lst): return list(set(lst)),"Removes duplicate elements from a list.

 This function accepts a list""""
lst
and returns a new list with all duplicates removed. It uses a set to eliminate duplicate elements.""
lst
and returns a new list with all duplicates removed. It uses a set to eliminate duplicate elements."," def test_remove_duplicates(): assert remove_duplicates([1, 1, 2, 2]) == [1, 2] assert remove_duplicates([3, 4, 4, 3]) == [3, 4] assert remove_duplicates([5]) == [5]"
def to_uppercase(s): return s.upper(),"Converts a string to uppercase.

 This function accepts a string""
s
and converts all the characters to uppercase using Python's built-in
upper()
method.", def test_to_uppercase(): assert to_uppercase("hello") == "HELLO" assert to_uppercase("") == "" assert to_uppercase("") == ""
"def is_subset(set_a, set_b): return set_a.issubset(set_b)","Checks if a set is a subset of another.

 This function takes two sets,""
set_a
and
set_b
, and checks if
set_a
is a subset of
set_b
. It returns
TRUE
if all elements of
set_a
are in
set_b
, and
FALSE
otherwise."," def test_is_subset(): assert is_subset({1, 2}, {1, 2, 3}) assert not is_subset({4}, {1, 2, 3}) assert is_subset(set(), {1, 2, 3})"
def celsius_to_fahrenheit(c): return (c * 9/5) + 32,"Converts Celsius to Fahrenheit.

 This function converts a given temperature in degrees Celsius""
c
to Fahrenheit using the formula
F = (C * 9/5) + 32
. It returns the temperature in Fahrenheit.", def test_celsius_to_fahrenheit(): assert celsius_to_fahrenheit(0) == 32 assert celsius_to_fahrenheit(100) == 212 assert celsius_to_fahrenheit(-40) == -40
def fahrenheit_to_celsius(f): return (f - 32) * 5/9,"Converts Fahrenheit to Celsius.

 This function converts a given temperature in degrees Fahrenheit""
f
to Celsius using the formula
C = (F - 32) * 5/9
. It returns the temperature in Celsius.", def test_fahrenheit_to_celsius(): assert fahrenheit_to_celsius(32) == 0 assert fahrenheit_to_celsius(212) == 100 assert fahrenheit_to_celsius(-40) == -40
def square(n): return n * n,"Returns the square of a number.

 This function takes a number n and returns its square by multiplying n by itself.",def test_square(): assert square(3) == 9 assert square(0) == 0 assert square(-2) == 4
def cube(n): return n ** 3,"Returns the cube of a number.

 This function takes a number n and returns its cube by raising n to the power of 3.
Returns the absolute value of a number.

This function takes a number n and returns its absolute value using Python's built-in abs() function.",def test_cube(): assert cube(3) == 27 assert cube(0) == 0 assert cube(-2) == -8
"def merge_two_lists(lst1, lst2): return sorted(lst1 + lst2)","Merges two lists and sorts the result.

This function takes two lists lst1 and lst2, merges them into one list, and returns the sorted result.","def test_merge_two_lists(): assert merge_two_lists([1, 3], [2, 4]) == [1, 2, 3, 4] assert merge_two_lists([], [5]) == [5] assert merge_two_lists([7], []) == [7]"
"def count_occurrences(lst, value): return lst.count(value)","Counts occurrences of a value in a list.

This function takes a list lst and a value and returns the number of times the value appears in the list using Python's built-in count() method.","def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences([4, 5, 6], 7) == 0 assert count_occurrences([], 1) == 0"
def to_lowercase(s): return s.lower(),"Converts a string to lowercase.

This function accepts a string s and converts all its characters to lowercase using Python's lower() method.",def test_to_lowercase(): assert to_lowercase("HELLO") == "hello" assert to_lowercase("Python") == "python" assert to_lowercase("") == ""
def capitalize_words(s): return ' '.join([word.capitalize() for word in s.split()]),"Capitalizes the first letter of each word in a string.

This function accepts a string s and returns a new string with the first letter of each word capitalized. It splits the string into words, capitalizes each one, and then joins them back into a string.",def test_capitalize_words(): assert capitalize_words("hello world") == "Hello World" assert capitalize_words("is fun") == "Is Fun" assert capitalize_words("") == ""
def count_digits(n): return len([char for char in str(n) if char.isdigit()]),"Counts the number of digits in a number.

This function converts a number n to a string and counts how many characters in the string are digits. It returns the total count.",def test_count_digits(): assert count_digits(12345) == 5 assert count_digits(0) == 1 assert count_digits(-9876) == 4
def flatten_nested_lists(lst): return [item for sublist in lst for item in sublist],"Flattens a list of lists into a single list.

This function takes a list of lists lst and returns a single list containing all elements of the sublists, effectively flattening the input.","def test_flatten_nested_lists(): assert flatten_nested_lists([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_nested_lists([[], []]) == [] assert flatten_nested_lists([[5], [6, 7]]) == [5, 6, 7]"
def find_first_duplicate(lst): seen = set() for item in lst: if item in seen: return item seen.add(item) return None,"Finds the first duplicate in a list.

This function takes a list lst and returns the first duplicate element it finds. It returns None if no duplicates exist.","def test_find_first_duplicate(): assert find_first_duplicate([1, 2, 3, 2]) == 2 assert find_first_duplicate([4, 5, 6]) == None assert find_first_duplicate([7, 8, 9, 7, 10]) == 7"
"def is_divisible(a, b): return a % b == 0","Checks if a number is divisible by another number.

This function takes two numbers a and b and returns True if a is divisible by b, otherwise it returns False.","def test_is_divisible(): assert is_divisible(10, 2) assert not is_divisible(10, 3) assert is_divisible(0, 5)"
def is_leap_year(year): return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0),"Checks if a year is a leap year.

This function checks if a given year is a leap year. A leap year is divisible by 4 but not divisible by 100 unless it is also divisible by 400.",def test_is_leap_year(): assert is_leap_year(2020) assert not is_leap_year(1900) assert is_leap_year(2000)
def sum_of_digits(n): return sum(int(digit) for digit in str(abs(n))),"Sums the digits of a number.

This function takes an integer n, converts it to a string, and sums its digits. The absolute value is used to handle negative numbers.",def test_sum_of_digits(): assert sum_of_digits(123) == 6 assert sum_of_digits(-456) == 15 assert sum_of_digits(0) == 0
def is_perfect_square(n): return int(n ** 0.5) ** 2 == n,"Checks if a number is a perfect square.

This function takes a number n and returns True if n is a perfect square, otherwise False. A perfect square is an integer that can be expressed as the square of another integer.",def test_is_perfect_square(): assert is_perfect_square(25) assert not is_perfect_square(26) assert is_perfect_square(0)
def is_power_of_two(n): return n > 0 and (n & (n - 1)) == 0,"Checks if a number is a power of two.

This function checks if a given integer n is a power of two. It returns True if n is a power of two, otherwise False.",def test_is_power_of_two(): assert is_power_of_two(16) assert not is_power_of_two(18) assert is_power_of_two(1)
"def remove_whitespace(s): return s.replace("" "", """")","Removes all whitespace from a string.

This function removes all spaces from the string s and returns the result. It uses the replace() method to achieve this.",def test_remove_whitespace(): assert remove_whitespace("hello world") == "helloworld" assert remove_whitespace(" a b ") == "ab" assert remove_whitespace("") == ""
def find_largest_in_nested_lists(lst): return max(max(sublist) for sublist in lst if sublist),"Finds the largest element in nested lists.

This function takes a list of lists lst and returns the largest element from all sublists. It skips any empty sublists.","def test_find_largest_in_nested_lists(): assert find_largest_in_nested_lists([[1, 2], [3, 4]]) == 4 assert find_largest_in_nested_lists([[], [7, 8]]) == 8 assert find_largest_in_nested_lists([[5], [2, 3]]) == 5"
def reverse_words_in_sentence(s): return ' '.join(reversed(s.split())),"Reverses the words in a sentence.

This function takes a string s, splits it into words, reverses the order of the words, and joins them back into a string.",def test_reverse_words_in_sentence(): assert reverse_words_in_sentence("hello world") == "world hello" assert reverse_words_in_sentence("is fun") == "fun is Python" assert reverse_words_in_sentence("") == ""
def factorial(n): return 1 if n == 0 else n * factorial(n - 1),"Computes the factorial of a number.

This function computes the factorial of a given non-negative integer n using recursion. The factorial is the product of all integers from 1 to n.",def test_factorial(): assert factorial(5) == 120 assert factorial(0) == 1 assert factorial(3) == 6
def reverse_string(s): return s[::-1],"Reverses a string.

This function takes a string s and returns a new string with the characters in reverse order using slicing.",def test_reverse_string(): assert reverse_string("hello") == "olleh" assert reverse_string("") == "" assert reverse_string("Python") == "nohtyP"
def check_palindrome(s): return s == s[::-1],"Checks if a string is a palindrome.

This function checks if a string s is a palindrome. A palindrome is a string that reads the same forwards and backwards.",def test_check_palindrome(): assert check_palindrome("racecar") assert not check_palindrome("hello") assert check_palindrome("madam")
"def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True","Checks if a number is prime.

This function checks if a given number n is a prime number. A prime number is greater than 1 and divisible only by 1 and itself.",def test_is_prime(): assert is_prime(7) assert not is_prime(9) assert not is_prime(1)
def sum_of_squares(lst): return sum(x ** 2 for x in lst),"Computes the sum of squares of a list of numbers.

This function takes a list of numbers lst and returns the sum of the squares of its elements.","def test_sum_of_squares(): assert sum_of_squares([1, 2, 3]) == 14 assert sum_of_squares([0]) == 0 assert sum_of_squares([-1, -2]) == 5"
def reverse_list(lst): return lst[::-1],"Reverses a list.

This function takes a list lst and returns a new list with the elements in reverse order using slicing.","def test_reverse_list(): assert reverse_list([1, 2, 3]) == [3, 2, 1] assert reverse_list([]) == [] assert reverse_list([4, 5]) == [5, 4]"
"def gcd(a, b): while b: a, b = b, a % b return a","Computes the greatest common divisor of two numbers.

This function uses the Euclidean algorithm to find the greatest common divisor (GCD) of two non-negative integers a and b. The GCD is the largest positive integer that divides both numbers without leaving a remainder.","def test_gcd(): assert gcd(8, 12) == 4 assert gcd(10, 5) == 5 assert gcd(7, 3) == 1"
"def fibonacci(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return a","Returns the nth Fibonacci number.

This function calculates the nth Fibonacci number using an iterative approach. The Fibonacci sequence is defined as: F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n >= 2.",def test_fibonacci(): assert fibonacci(0) == 0 assert fibonacci(1) == 1 assert fibonacci(5) == 5
def find_max(lst): return max(lst),"Returns the maximum value in a list.

This function takes a list lst and returns the maximum value using Python's built-in max() function.","def test_find_max(): assert find_max([1, 2, 3]) == 3 assert find_max([4, 0, -1]) == 4 assert find_max([0]) == 0"
"def is_anagram(str1, str2): return sorted(str1) == sorted(str2)","Checks if two strings are anagrams.

This function takes two strings str1 and str2 and checks if they are anagrams by comparing their sorted characters. An anagram is a word formed by rearranging the letters of another word.","def test_is_anagram(): assert is_anagram(""listen"", ""silent"") assert not is_anagram(""hello"", ""world"") assert is_anagram(""evil"", ""vile"")"
"def is_substring(sub, main): return sub in main","Checks if a string is a substring of another string.

This function takes two strings sub and main and checks if sub is a substring of main. It returns True if sub is found within main, otherwise False.","def test_is_substring(): assert is_substring(""cat"", ""concatenate"") assert not is_substring(""dog"", ""concatenate"") assert is_substring("""", ""empty"")"
def remove_duplicates(lst): return list(set(lst)),"Removes duplicates from a list.

This function takes a list lst and returns a new list with all duplicate elements removed by converting the list to a set and back to a list.","def test_remove_duplicates(): assert remove_duplicates([1, 1, 2]) == [1, 2] assert remove_duplicates([]) == [] assert remove_duplicates([3, 3, 3]) == [3]"
def find_second_largest(lst): return sorted(set(lst))[-2],"Finds the second-largest element in a list.

This function takes a list lst, removes duplicates, sorts the list, and returns the second-largest element. Assumes the list has at least two unique elements.","def test_find_second_largest(): assert find_second_largest([3, 1, 2, 4]) == 3 assert find_second_largest([10, 10, 5, 7]) == 7 assert find_second_largest([1, 2]) == 1"
def count_vowels(s): return sum(1 for char in s if char.lower() in 'aeiou'),"Counts the number of vowels in a string.

This function takes a string s and counts the number of vowels (a, e, i, o, u) in it, returning the total count.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("xyz") == 0 assert count_vowels("aeiou") == 5
def is_even(n): return n % 2 == 0,"Checks if a number is even.

This function checks whether the integer n is even by returning True if n is divisible by 2, otherwise False.",def test_is_even(): assert is_even(4) assert not is_even(7) assert is_even(0)
"def sum_of_multiples(limit, multiple): return sum(i for i in range(multiple, limit, multiple))","Sums multiples of a number up to a limit.

This function takes a limit and a multiple, and returns the sum of all multiples of the given number up to but not including the limit.","def test_sum_of_multiples(): assert sum_of_multiples(10, 3) == 18 assert sum_of_multiples(20, 5) == 30 assert sum_of_multiples(10, 7) == 7"
def remove_punctuation(s): return ''.join(char for char in s if char.isalnum() or char.isspace()),"Removes punctuation from a string.

This function removes punctuation characters from the string s by keeping only alphanumeric characters and spaces.","def test_remove_punctuation(): assert remove_punctuation(""Hello, world!"") == ""Hello world"" assert remove_punctuation(""What's up?"") == ""Whats up"" assert remove_punctuation("""") == """""
def sum_of_odd_numbers(lst): return sum(x for x in lst if x % 2 != 0),"Sums the odd numbers in a list.

This function takes a list of integers lst and returns the sum of all odd numbers in the list.","def test_sum_of_odd_numbers(): assert sum_of_odd_numbers([1, 2, 3, 4]) == 4 assert sum_of_odd_numbers([6, 8, 10]) == 0 assert sum_of_odd_numbers([7, 7, 7]) == 21"
def is_palindrome_number(n): return str(n) == str(n)[::-1],"Checks if a number is a palindrome.

This function converts a number n to a string and checks if it reads the same forwards and backwards, returning True if it is a palindrome.",def test_is_palindrome_number(): assert is_palindrome_number(121) assert not is_palindrome_number(123) assert is_palindrome_number(0)
"def factorial_iterative(n): result = 1 for i in range(2, n+1): result *= i return result","Computes the factorial of a number iteratively.

This function calculates the factorial of a non-negative integer n using an iterative approach. The factorial is the product of all positive integers from 1 to n.",def test_factorial_iterative(): assert factorial_iterative(5) == 120 assert factorial_iterative(0) == 1 assert factorial_iterative(3) == 6
def sum_of_cubes(lst): return sum(x ** 3 for x in lst),"Sums the cubes of numbers in a list.

This function takes a list of integers lst and returns the sum of the cubes of its elements.","def test_sum_of_cubes(): assert sum_of_cubes([1, 2, 3]) == 36 assert sum_of_cubes([0]) == 0 assert sum_of_cubes([-1, -2]) == -9"
"def binary_search(lst, target): low, high = 0, len(lst) - 1 while low <= high: mid = (low + high) // 2 if lst[mid] == target: return mid elif lst[mid] < target: low = mid + 1 else: high = mid - 1 return -1","Performs binary search on a sorted list.

This function implements binary search to find the index of target in a sorted list lst. If the target is found, the index is returned; otherwise, -1 is returned.","python def test_binary_search(): assert binary_search([1, 2, 3, 4, 5], 3) == 2 assert binary_search([10, 20, 30], 25) == -1 assert binary_search([1, 3, 5, 7], 7) == 3"
def count_consonants(s): return sum(1 for char in s if char.lower() in 'bcdfghjklmnpqrstvwxyz'),"Counts the consonants in a string.

This function takes a string s and counts the number of consonants in it, returning the total count. Consonants are non-vowel letters of the alphabet.",def test_count_consonants(): assert count_consonants("hello") == 3 assert count_consonants("xyz") == 3 assert count_consonants("aeiou") == 0
def square_numbers(lst): return [x ** 2 for x in lst],"Squares every number in a list.

This function takes a list lst and returns a new list where each element is squared.","def test_square_numbers(): assert square_numbers([1, 2, 3]) == [1, 4, 9] assert square_numbers([0, -1]) == [0, 1] assert square_numbers([]) == []"
def is_sorted(lst): return lst == sorted(lst),"Checks if a list is sorted.

This function checks whether the list lst is sorted in ascending order. It returns True if the list is sorted, otherwise False.","def test_is_sorted(): assert is_sorted([1, 2, 3]) assert not is_sorted([3, 1, 2]) assert is_sorted([])"
"def count_occurrences(lst, value): return lst.count(value)","Counts occurrences of a value in a list.

This function takes a list lst and a value value, and returns the number of times the value occurs in the list using the count() method.","def test_count_occurrences(): assert count_occurrences([1, 2, 3, 1], 1) == 2 assert count_occurrences([4, 5, 6], 7) == 0 assert count_occurrences([], 1) == 0"
def is_leap_year(year): return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0),"Determines if a year is a leap year.

This function checks if a given year is a leap year, returning True if it is and False if it isn't. A leap year is divisible by 4 but not by 100 unless also divisible by 400.",def test_is_leap_year(): assert is_leap_year(2000) assert not is_leap_year(1900) assert is_leap_year(2024)
"def product_of_list(lst): from functools import reduce return reduce(lambda x, y: x * y, lst, 1)","Calculates the product of all elements in a list.

This function computes the product of all elements in a list lst using the reduce() function. If the list is empty, it returns 1.","def test_product_of_list(): assert product_of_list([1, 2, 3]) == 6 assert product_of_list([4, 5]) == 20 assert product_of_list([]) == 1"
def capitalize_words(s): return ' '.join(word.capitalize() for word in s.split()),"Capitalizes the first letter of each word in a string.

This function takes a string s and returns a new string with each word capitalized, preserving the original word order.",def test_capitalize_words(): assert capitalize_words("hello world") == "Hello World" assert capitalize_words("code") == "Code" assert capitalize_words("") == ""
def flatten_list(nested_list): return [item for sublist in nested_list for item in sublist],"Flattens a nested list.

This function takes a nested list nested_list (a list of lists) and flattens it into a single list by iterating over each sublist.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([[]]) == [] assert flatten_list([[5], [6, 7]]) == [5, 6, 7]"
def remove_whitespace(s): return s.strip(),"Removes leading and trailing whitespace from a string.

This function removes any leading or trailing whitespace characters from the string s using the strip() method.",def test_remove_whitespace(): assert remove_whitespace(" hello ") == "hello" assert remove_whitespace("world") == "world" assert remove_whitespace(" ") == ""
def last_element(lst): return lst[-1] if lst else None,"Returns the last element of a list or None if the list is empty.

This function returns the last element of the list lst. If the list is empty, it returns None.","def test_last_element(): assert last_element([1, 2, 3]) == 3 assert last_element([]) is None assert last_element([7]) == 7"
def count_uppercase(s): return sum(1 for char in s if char.isupper()),"Counts uppercase letters in a string.

This function takes a string s and returns the number of uppercase letters in it. It iterates through each character and checks if it is uppercase.",def test_count_uppercase(): assert count_uppercase("Hello") == 1 assert count_uppercase("WORLD") == 5 assert count_uppercase("python") == 0
"def rotate_list(lst, k): return lst[k:] + lst[:k]","Rotates a list by k positions.

This function rotates the list lst by k positions. The first k elements are moved to the end of the list, and the remaining elements are shifted to the front.","def test_rotate_list(): assert rotate_list([1, 2, 3, 4], 2) == [3, 4, 1, 2] assert rotate_list([1], 1) == [1] assert rotate_list([], 3) == []"
def reverse_sentence(s): return ' '.join(reversed(s.split())),"Reverses the order of words in a sentence.

This function takes a sentence s and returns a new sentence with the words in reverse order while preserving the words themselves.",def test_reverse_sentence(): assert reverse_sentence("hello world") == "world hello" assert reverse_sentence("a b c") == "c b a" assert reverse_sentence("") == ""
def average_of_list(lst): return sum(lst) / len(lst) if lst else 0,"Calculates the average of a list of numbers.

This function computes the average (mean) of the numbers in the list lst. If the list is empty, it returns 0.","def test_average_of_list(): assert average_of_list([1, 2, 3]) == 2 assert average_of_list([0, 10]) == 5 assert average_of_list([]) == 0"
def reverse_each_word(s): return ' '.join(word[::-1] for word in s.split()),"Reverses each word in a sentence.

This function takes a string s and reverses each word individually, while preserving the order of words in the sentence.",def test_reverse_each_word(): assert reverse_each_word("hello world") == "olleh dlrow" assert reverse_each_word("abc def") == "cba fed" assert reverse_each_word("") == ""
def middle_element(lst): n = len(lst) return lst[n//2] if n % 2 == 1 else None,"Returns the middle element of a list, if it exists.

This function returns the middle element of the list lst if the list has an odd number of elements. If the list has an even number of elements or is empty, it returns None.","def test_middle_element(): assert middle_element([1, 2, 3]) == 2 assert middle_element([1, 2, 3, 4]) is None assert middle_element([5]) == 5"
"def multiply_matrix_scalar(matrix, scalar): return [[x * scalar for x in row] for row in matrix]","Multiplies every element in a matrix by a scalar value.

This function takes a matrix (list of lists) and multiplies every element by the scalar value scalar, returning the resulting matrix.","def test_multiply_matrix_scalar(): assert multiply_matrix_scalar([[1, 2], [3, 4]], 2) == [[2, 4], [6, 8]] assert multiply_matrix_scalar([[0]], 10) == [[0]]"
"def longest_word(words): return max(words, key=len) if words else None","Finds the longest word in a list of words.

This function returns the longest word in the list words. If the list is empty, it returns None.","def test_longest_word(): assert longest_word([""hello"", ""world"", ""python""]) == ""python"" assert longest_word([]) is None assert longest_word([""a"", ""ab"", ""abc""]) == ""abc"""
def cube_numbers(lst): return [x ** 3 for x in lst],"Cubes every number in a list.

This function takes a list lst and returns a new list where each element is cubed.","def test_cube_numbers(): assert cube_numbers([1, 2, 3]) == [1, 8, 27] assert cube_numbers([0, -1]) == [0, -1] assert cube_numbers([]) == []"
def string_length(s): return len(s),"Returns the length of a string.

This function returns the number of characters in the string s by using Python's len() function.",def test_string_length(): assert string_length("hello") == 5 assert string_length("") == 0 assert string_length("a") == 1
def is_palindrome(s): return s == s[::-1],"Checks if a string is a palindrome.

This function checks if the string s is the same when read forwards and backwards, returning True if it is a palindrome, and False otherwise.",def test_is_palindrome(): assert is_palindrome("racecar") assert not is_palindrome("hello") assert is_palindrome("a")
def square_root(n): return n ** 0.5,"Computes the square root of a number.

This function returns the square root of the number n using exponentiation. It assumes that n is a non-negative number.",def test_square_root(): assert square_root(4) == 2 assert square_root(9) == 3 assert square_root(0) == 0
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n-1),"Recursively computes the factorial of a number.

This function calculates the factorial of a non-negative integer n using a recursive approach. The factorial of n is the product of all integers from 1 to n.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(3) == 6
"def is_prime(n): if n < 2: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True","Checks if a number is prime.

This function checks whether a number n is prime. A prime number is greater than 1 and divisible only by 1 and itself.",def test_is_prime(): assert is_prime(7) assert not is_prime(4) assert not is_prime(1)
def reverse_list(lst): return lst[::-1],"Reverses a list.

This function takes a list lst and returns a new list where the elements are in reverse order.","def test_reverse_list(): assert reverse_list([1, 2, 3]) == [3, 2, 1] assert reverse_list([]) == [] assert reverse_list([7]) == [7]"
def count_words(s): return len(s.split()),"Counts the number of words in a string.

This function returns the number of words in the string s. It assumes words are separated by whitespace characters.",def test_count_words(): assert count_words("hello world") == 2 assert count_words("one") == 1 assert count_words("") == 0
def find_duplicates(lst): return [x for x in set(lst) if lst.count(x) > 1],"Finds duplicate elements in a list.

This function returns a list of elements that appear more than once in the input list lst, without repeating duplicates in the output.","def test_find_duplicates(): assert find_duplicates([1, 2, 2, 3]) == [2] assert find_duplicates([1, 1, 1]) == [1] assert find_duplicates([4, 5, 6]) == []"
def first_non_repeated_char(s): for char in s: if s.count(char) == 1: return char return None,"Finds the first non-repeated character in a string.

This function returns the first character in the string s that does not repeat. If all characters are repeated, it returns None.",def test_first_non_repeated_char(): assert first_non_repeated_char("swiss") == "w" assert first_non_repeated_char("aabb") is None assert first_non_repeated_char("abcd") == "a"
"def merge_dicts(dict1, dict2): result = dict1.copy() result.update(dict2) return result","Merges two dictionaries.

This function takes two dictionaries dict1 and dict2 and merges them into one dictionary. If there are duplicate keys, the values from dict2 will overwrite those from dict1.","def test_merge_dicts(): assert merge_dicts({""a"": 1}, {""b"": 2}) == {""a"": 1, ""b"": 2} assert merge_dicts({""a"": 1}, {""a"": 3}) == {""a"": 3} assert merge_dicts({}, {}) == {}"
"def list_intersection(lst1, lst2): return list(set(lst1) & set(lst2))","Finds the intersection of two lists.

This function returns a list containing the common elements between two input lists lst1 and lst2, with no duplicates.","def test_list_intersection(): assert list_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert list_intersection([5, 6], [6, 7]) == [6] assert list_intersection([], [1, 2]) == []"
"def remove_element(lst, value): return [x for x in lst if x != value]","Removes all occurrences of a value from a list.

This function takes a list lst and a value value, and returns a new list with all occurrences of the value removed.","def test_remove_element(): assert remove_element([1, 2, 3, 1], 1) == [2, 3] assert remove_element([4, 5, 6], 7) == [4, 5, 6] assert remove_element([], 1) == []"
def all_unique(lst): return len(lst) == len(set(lst)),"Checks if all elements in a list are unique.

This function returns True if all elements in the list lst are unique, and False if there are any duplicates.","def test_all_unique(): assert all_unique([1, 2, 3]) assert not all_unique([1, 1, 2]) assert all_unique([])"
"def count_down(n): return list(range(n, 0, -1))","Counts down from n to 1.

This function returns a list of numbers starting from n down to 1. If n is less than or equal to 0, it returns an empty list.","def test_count_down(): assert count_down(5) == [5, 4, 3, 2, 1] assert count_down(1) == [1] assert count_down(0) == []"
def fahrenheit_to_celsius(f): return (f - 32) * 5 / 9,"Converts a temperature from Fahrenheit to Celsius.

This function takes a temperature in Fahrenheit f and converts it to Celsius using the standard formula (f - 32) * 5 / 9.",def test_fahrenheit_to_celsius(): assert fahrenheit_to_celsius(32) == 0 assert fahrenheit_to_celsius(212) == 100 assert fahrenheit_to_celsius(0) == -17.77777777777778
def sum_of_squares(lst): return sum(x ** 2 for x in lst),"Computes the sum of squares of a list of numbers.

This function takes a list of numbers lst and returns the sum of their squares.","def test_sum_of_squares(): assert sum_of_squares([1, 2, 3]) == 14 assert sum_of_squares([0, 4]) == 16 assert sum_of_squares([]) == 0"
def filter_even_numbers(lst): return [x for x in lst if x % 2 == 0],"Filters out even numbers from a list.

This function returns a new list containing only the even numbers from the input list lst.","def test_filter_even_numbers(): assert filter_even_numbers([1, 2, 3, 4]) == [2, 4] assert filter_even_numbers([1, 3, 5]) == [] assert filter_even_numbers([]) == []"
"def sum_of_cubes(n): return sum(x ** 3 for x in range(1, n + 1))","Computes the sum of cubes from 1 to n.

This function returns the sum of the cubes of all integers from 1 to n.",def test_sum_of_cubes(): assert sum_of_cubes(3) == 36 assert sum_of_cubes(1) == 1 assert sum_of_cubes(0) == 0
"def min_max(lst): return (min(lst), max(lst)) if lst else (None, None)","Finds the minimum and maximum values in a list.

This function returns a tuple containing the minimum and maximum values of the list lst. If the list is empty, it returns (None, None).","def test_min_max(): assert min_max([1, 2, 3]) == (1, 3) assert min_max([10]) == (10, 10) assert min_max([]) == (None, None)"
def find_max_index(lst): return lst.index(max(lst)) if lst else None,"Finds the index of the maximum value in a list.

This function returns the index of the maximum value in the list lst. If the list is empty, it returns None.","def test_find_max_index(): assert find_max_index([1, 2, 3]) == 2 assert find_max_index([10, 5]) == 0 assert find_max_index([]) is None"
def sum_digits_in_list(lst): return sum(sum(int(digit) for digit in str(x)) for x in lst),"Sums the digits of numbers in a list.

This function computes the sum of all digits in each number of the list lst.","def test_sum_digits_in_list(): assert sum_digits_in_list([12, 34]) == 10 assert sum_digits_in_list([9, 81]) == 18 assert sum_digits_in_list([0]) == 0"
def convert_to_binary(n): return bin(n)[2:],"Converts an integer to binary.

This function converts the integer n to a binary string representation (without the '0b' prefix).",def test_convert_to_binary(): assert convert_to_binary(10) == "1010" assert convert_to_binary(0) == "0" assert convert_to_binary(255) == "11111111"
def harmonic_mean(lst): n = len(lst) return n / sum(1 / x for x in lst) if n > 0 and all(x != 0 for x in lst) else None,"Calculates the harmonic mean of a list of numbers.

This function computes the harmonic mean of a list lst, which is defined as the reciprocal of the average of the reciprocals of the list elements. It returns None if any element is zero or the list is empty.","def test_harmonic_mean(): assert harmonic_mean([1, 2, 4]) == 12 / 7 assert harmonic_mean([5]) == 5 assert harmonic_mean([]) is None"
"def nth_fibonacci(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return a","Finds the nth Fibonacci number.

This function computes and returns the n-th Fibonacci number using an iterative approach.",def test_nth_fibonacci(): assert nth_fibonacci(0) == 0 assert nth_fibonacci(1) == 1 assert nth_fibonacci(5) == 5 assert nth_fibonacci(10) == 55
def flatten_list(lst): return [item for sublist in lst for item in sublist],"Flattens a nested list.

This function takes a nested list lst (a list of lists) and returns a flattened list where all elements are at the same level.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([[], [1]]) == [1] assert flatten_list([[]]) == []"
"def gcd(a, b): while b: a, b = b, a % b return a","Finds the greatest common divisor (GCD) of two numbers.

This function computes the GCD of two integers a and b using the Euclidean algorithm, which repeatedly applies the modulo operation until the remainder is zero.","def test_gcd(): assert gcd(12, 8) == 4 assert gcd(5, 3) == 1 assert gcd(100, 25) == 25"
"def fibonacci_sequence(n): seq = [0, 1] for i in range(2, n): seq.append(seq[-1] + seq[-2]) return seq[:n]","Generates the Fibonacci sequence up to n terms.

This function returns the first n numbers in the Fibonacci sequence, which starts with 0 and 1, where each subsequent number is the sum of the previous two.","def test_fibonacci_sequence(): assert fibonacci_sequence(5) == [0, 1, 1, 2, 3] assert fibonacci_sequence(1) == [0] assert fibonacci_sequence(0) == []"
"def count_occurrences(lst, value): return lst.count(value)","Counts the occurrences of a value in a list.

This function returns the number of times value appears in the list lst.","def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences([4, 5, 6], 7) == 0 assert count_occurrences([], 1) == 0"
def all_positive(lst): return all(x > 0 for x in lst),"Checks if all elements in a list are positive.

This function returns True if all numbers in the list lst are greater than 0, and False otherwise.","def test_all_positive(): assert all_positive([1, 2, 3]) assert not all_positive([1, -2, 3]) assert all_positive([])"
def is_power_of_two(n): return n > 0 and (n & (n - 1)) == 0,"Checks if a number is a power of two.

This function returns True if the number n is a power of two, and False otherwise. A number is a power of two if it can be expressed as 2^k.",def test_is_power_of_two(): assert is_power_of_two(4) assert not is_power_of_two(5) assert is_power_of_two(1)
"def remove_whitespace(s): return s.replace("" "", """")","Removes all whitespace from a string.

This function takes a string s and returns a new string with all space characters removed.",def test_remove_whitespace(): assert remove_whitespace("hello world") == "helloworld" assert remove_whitespace(" ") == "" assert remove_whitespace("") == ""
"def is_anagram(str1, str2): return sorted(str1) == sorted(str2)","Checks if two strings are anagrams.

This function returns True if str1 and str2 contain the same characters in any order, making them anagrams of each other.","def test_is_anagram(): assert is_anagram(""listen"", ""silent"") assert not is_anagram(""hello"", ""world"") assert is_anagram(""a"", ""a"")"
def unique_elements(lst): return list(set(lst)),"Returns the unique elements of a list.

This function removes duplicates from the list lst and returns a list containing only the unique elements.","def test_unique_elements(): assert unique_elements([1, 2, 2, 3]) == [1, 2, 3] assert unique_elements([1, 1, 1]) == [1] assert unique_elements([]) == []"
"def rotate_list(lst, k): return lst[-k:] + lst[:-k]","Rotates a list by k positions.

This function rotates the elements of the list lst by k positions, moving the last k elements to the front.","def test_rotate_list(): assert rotate_list([1, 2, 3, 4], 2) == [3, 4, 1, 2] assert rotate_list([1, 2], 1) == [2, 1] assert rotate_list([], 1) == []"
def is_sorted(lst): return lst == sorted(lst),"Checks if a list is sorted.

This function returns True if the list lst is sorted in ascending order, and False otherwise.","def test_is_sorted(): assert is_sorted([1, 2, 3]) assert not is_sorted([3, 2, 1]) assert is_sorted([])"
def sum_multiples_of_three_and_five(n): return sum(x for x in range(n) if x % 3 == 0 or x % 5 == 0),"Sums all multiples of 3 or 5 below n.

This function calculates the sum of all numbers below n that are divisible by either 3 or 5.",def test_sum_multiples_of_three_and_five(): assert sum_multiples_of_three_and_five(10) == 23 assert sum_multiples_of_three_and_five(0) == 0 assert sum_multiples_of_three_and_five(15) == 45
def largest_in_list(lst): return max(lst) if lst else None,"Returns the largest number in a list.

This function returns the largest element in the list lst. If the list is empty, it returns None.","def test_largest_in_list(): assert largest_in_list([1, 2, 3]) == 3 assert largest_in_list([10, 5]) == 10 assert largest_in_list([]) is None"
"def longest_in_list(lst): return max(lst, key=len) if lst else None","Finds the longest string in a list.

This function returns the longest string in the list lst. If the list is empty, it returns None.","def test_longest_in_list(): assert longest_in_list([""a"", ""abc"", ""ab""]) == ""abc"" assert longest_in_list([""hello""]) == ""hello"" assert longest_in_list([]) is None"
"def contains_substring(s, substring): return substring in s","Checks if a string contains a substring.

This function checks whether the string s contains the substring substring and returns True if it does, otherwise False.","def test_contains_substring(): assert contains_substring(""hello"", ""ell"") assert not contains_substring(""world"", ""ell"") assert contains_substring("""", """")"
def product_of_list(lst): result = 1 for x in lst: result *= x return result,"Computes the product of all elements in a list.

This function calculates the product of all numbers in the list lst. If the list is empty, it returns 1.","def test_product_of_list(): assert product_of_list([1, 2, 3]) == 6 assert product_of_list([4]) == 4 assert product_of_list([]) == 1"
def reverse_words(s): return " ".join(s.split()[::-1]),"Reverses the order of words in a string.

This function takes a string s, splits it into words, and returns a new string with the words in reverse order.",def test_reverse_words(): assert reverse_words("hello world") == "world hello" assert reverse_words("a b c") == "c b a" assert reverse_words("") == ""
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1),"Computes the factorial of a number using recursion.

This function calculates the factorial of n using a recursive approach, where the factorial is the product of n and the factorial of n-1.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(1) == 1
"def last_occurrence(lst, value): return len(lst) - 1 - lst[::-1].index(value) if value in lst else None","Finds the last occurrence of a value in a list.

This function returns the index of the last occurrence of value in the list lst. If value is not found, it returns None.","def test_last_occurrence(): assert last_occurrence([1, 2, 3, 2], 2) == 3 assert last_occurrence([1, 2, 3], 4) is None assert last_occurrence([], 1) is None"
def count_words(s): return len(s.split()),"Counts the number of words in a string.

This function splits the string s into words and returns the number of words found.",def test_count_words(): assert count_words("hello world") == 2 assert count_words("a b c d") == 4 assert count_words("") == 0
"def is_prime(n): if n < 2: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True","Checks if a number is prime.

This function checks whether the integer n is a prime number, returning True if it is, and False otherwise. A prime number is a natural number greater than 1 that has no divisors other than 1 and itself.",def test_is_prime(): assert is_prime(7) assert not is_prime(9) assert not is_prime(1)
def get_even_numbers(lst): return [x for x in lst if x % 2 == 0],"Filters out even numbers from a list.

This function returns a new list containing only the even numbers from the given list lst.","def test_get_even_numbers(): assert get_even_numbers([1, 2, 3, 4]) == [2, 4] assert get_even_numbers([5, 7]) == [] assert get_even_numbers([2, 4, 6]) == [2, 4, 6]"
def square_list(lst): return [x ** 2 for x in lst],"Squares each number in a list.

This function takes a list lst and returns a new list with each number squared.","def test_square_list(): assert square_list([1, 2, 3]) == [1, 4, 9] assert square_list([0, -1]) == [0, 1] assert square_list([]) == []"
"def is_divisible(a, b): return a % b == 0","Checks if a is divisible by b.

This function returns True if a is divisible by b without a remainder, otherwise False.","def test_is_divisible(): assert is_divisible(10, 2) assert not is_divisible(10, 3) assert is_divisible(0, 1)"
def find_smallest(lst): return min(lst) if lst else None,"Finds the smallest element in a list.

This function returns the smallest element from the list lst. If the list is empty, it returns None.","def test_find_smallest(): assert find_smallest([5, 3, 9]) == 3 assert find_smallest([1]) == 1 assert find_smallest([]) is None"
def remove_duplicates(lst): return list(dict.fromkeys(lst)),"Removes duplicate elements from a list.

This function returns a new list with duplicates removed, preserving the order of the original elements.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates([1, 1, 1]) == [1] assert remove_duplicates([]) == []"
"def merge_lists(lst1, lst2): return lst1 + lst2","Merges two lists into one.

This function concatenates two lists lst1 and lst2 and returns the resulting list.","def test_merge_lists(): assert merge_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_lists([], [5]) == [5] assert merge_lists([6], []) == [6]"
def reverse_string(s): return s[::-1],"Reverses a string.

This function takes a string s and returns a new string with the characters in reverse order.",def test_reverse_string(): assert reverse_string("hello") == "olleh" assert reverse_string("") == "" assert reverse_string("abc") == "cba"
def sum_list(lst): return sum(lst),"Computes the sum of a list of numbers.

This function returns the sum of all the numbers in the list lst.","def test_sum_list(): assert sum_list([1, 2, 3]) == 6 assert sum_list([0, 0, 0]) == 0 assert sum_list([]) == 0"
def product_of_elements(lst): result = 1 for x in lst: result *= x return result,"Computes the product of all elements in a list.

This function multiplies all the elements of the list lst and returns the result. If the list is empty, it returns 1.","def test_product_of_elements(): assert product_of_elements([2, 3, 4]) == 24 assert product_of_elements([1, 0]) == 0 assert product_of_elements([]) == 1"
def count_vowels(s): return sum(1 for char in s.lower() if char in "aeiou"),"Counts the number of vowels in a string.

This function counts the vowels in the string s, ignoring case. It returns the number of vowels found.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("world") == 1 assert count_vowels("") == 0
def get_odd_numbers(lst): return [x for x in lst if x % 2 != 0],"Filters out odd numbers from a list.

This function returns a new list containing only the odd numbers from the list lst.","def test_get_odd_numbers(): assert get_odd_numbers([1, 2, 3, 4]) == [1, 3] assert get_odd_numbers([6, 8, 10]) == [] assert get_odd_numbers([1, 3, 5]) == [1, 3, 5]"
def capitalize_words(s): return " ".join(word.capitalize() for word in s.split()),"Capitalizes the first letter of each word in a string.

This function takes a string s and returns a new string where the first letter of each word is capitalized.",def test_capitalize_words(): assert capitalize_words("hello world") == "Hello World" assert capitalize_words("is fun") == "Is Fun" assert capitalize_words("") == ""
def find_max(lst): return max(lst) if lst else None,Finds the maximum element in a list.,"def test_find_max(): assert find_max([1, 2, 3]) == 3 assert find_max([10, 5, 7]) == 10 assert find_max([]) is None"
def extract_digits(s): return [int(char) for char in s if char.isdigit()],"Extracts digits from a string.

This function returns a list of digits found in the string s. Non-digit characters are ignored.","def test_extract_digits(): assert extract_digits(""abc123"") == [1, 2, 3] assert extract_digits(""456xyz"") == [4, 5, 6] assert extract_digits(""no digits"") == []"
def is_palindrome(s): return s == s[::-1],"Checks if a string is a palindrome.

This function checks whether the string s reads the same forwards and backwards, returning True if it does, and False otherwise.",def test_is_palindrome(): assert is_palindrome("radar") assert not is_palindrome("hello") assert is_palindrome("a")
def sum_of_elements(lst): return sum(lst),"Returns the sum of elements in a list.

This function calculates the sum of all elements in the list lst and returns the result.","def test_sum_of_elements(): assert sum_of_elements([1, 2, 3]) == 6 assert sum_of_elements([10, -10]) == 0 assert sum_of_elements([]) == 0"
def count_characters(s): return len(s),"Counts the number of characters in a string.

This function returns the total number of characters in the string s.",def test_count_characters(): assert count_characters("hello") == 5 assert count_characters("") == 0 assert count_characters("a") == 1
"def get_first_n_elements(lst, n): return lst[:n]","Returns the first n elements of a list.

This function returns a new list containing the first n elements from the input list lst. If n is greater than the length of lst, it returns the whole list.","def test_get_first_n_elements(): assert get_first_n_elements([1, 2, 3, 4], 2) == [1, 2] assert get_first_n_elements([1, 2], 5) == [1, 2] assert get_first_n_elements([], 1) == []"
def is_even(n): return n % 2 == 0,"Checks if a number is even.

This function returns True if n is an even number, and False otherwise.",def test_is_even(): assert is_even(4) assert not is_even(5) assert is_even(0)
"def repeat_string(s, n): return s * n","Repeats a string n times.

This function returns a new string that consists of the string s repeated n times.","def test_repeat_string(): assert repeat_string(""abc"", 3) == ""abcabcabc"" assert repeat_string(""hello"", 0) == """" assert repeat_string("""", 5) == """""
"def get_last_n_elements(lst, n): return lst[-n:]","Returns the last n elements of a list.

This function returns a new list containing the last n elements from the list lst. If n is greater than the length of lst, it returns the whole list.","def test_get_last_n_elements(): assert get_last_n_elements([1, 2, 3, 4], 2) == [3, 4] assert get_last_n_elements([1, 2], 5) == [1, 2] assert get_last_n_elements([], 1) == []"
def is_odd(n): return n % 2 != 0,"Checks if a number is odd.

This function returns True if n is an odd number, and False otherwise.",def test_is_odd(): assert is_odd(3) assert not is_odd(4) assert is_odd(1)
def convert_to_uppercase(s): return s.upper(),"Converts a string to uppercase.

This function takes a string s and returns a new string with all characters converted to uppercase.",def test_convert_to_uppercase(): assert convert_to_uppercase("hello") == "HELLO" assert convert_to_uppercase("WORLD") == "WORLD" assert convert_to_uppercase("") == ""
"def split_string(s, delimiter): return s.split(delimiter)","Splits a string by a delimiter.

This function takes a string s and splits it into a list of substrings using the specified delimiter.","def test_split_string(): assert split_string(""a,b,c"", "","") == [""a"", ""b"", ""c""] assert split_string(""hello world"", "" "") == [""hello"", ""world""] assert split_string("""", "","") == [""""]"
"def get_sublist(lst, start, end): return lst[start:end]","Returns a sublist from a list.

This function returns a sublist from the list lst starting at index start and ending at index end.","def test_get_sublist(): assert get_sublist([1, 2, 3, 4], 1, 3) == [2, 3] assert get_sublist([1, 2], 0, 1) == [1] assert get_sublist([], 0, 1) == []"
"def find_common_elements(lst1, lst2): return list(set(lst1) & set(lst2))","Finds common elements between two lists.

This function returns a list of elements that are present in both lst1 and lst2.","def test_find_common_elements(): assert find_common_elements([1, 2, 3], [3, 4, 5]) == [3] assert find_common_elements([1, 2], [3, 4]) == [] assert find_common_elements([], [1, 2]) == []"
"def flatten_dict(d): return {k: v for k, v in d.items() if not isinstance(v, dict)}","Flattens a dictionary by removing nested dictionaries.

This function returns a new dictionary that includes only key-value pairs where the value is not a dictionary. Nested dictionaries are excluded.","def test_flatten_dict(): assert flatten_dict({'a': 1, 'b': {'c': 2}}) == {'a': 1} assert flatten_dict({'x': 3, 'y': 4}) == {'x': 3, 'y': 4} assert flatten_dict({'a': {'b': 5}}) == {}"
"def filter_long_words(words, n): return [word for word in words if len(word) > n]","Filters out words longer than n characters.

This function returns a list of words from words where each word's length is greater than n.","def test_filter_long_words(): assert filter_long_words([""hello"", ""world"", ""python""], 5) == [""python""] assert filter_long_words([""a"", ""bb"", ""ccc""], 2) == [""ccc""] assert filter_long_words([], 1) == []"
"def merge_dicts(dict1, dict2): result = dict1.copy() result.update(dict2) return result","Merges two dictionaries.

This function combines two dictionaries dict1 and dict2, with dict2 overwriting any conflicting keys in dict1.","def test_merge_dicts(): assert merge_dicts({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2} assert merge_dicts({'x': 5}, {'x': 10, 'y': 20}) == {'x': 10, 'y': 20} assert merge_dicts({}, {}) == {}"
"def factorial_iterative(n): result = 1 for i in range(1, n + 1): result *= i return result","Computes factorial using iteration.

This function calculates the factorial of n using an iterative approach, where the factorial is the product of all positive integers up to n.",def test_factorial_iterative(): assert factorial_iterative(5) == 120 assert factorial_iterative(0) == 1 assert factorial_iterative(1) == 1
def remove_non_alpha(s): return ''.join(char for char in s if char.isalpha()),"Removes non-alphabetic characters from a string.

This function returns a new string consisting only of alphabetic characters from the original string s.",def test_remove_non_alpha(): assert remove_non_alpha("abc123") == "abc" assert remove_non_alpha("hello!") == "hello" assert remove_non_alpha("") == ""
def sort_list(lst): return sorted(lst),"Sorts a list.

This function returns a new list containing the elements of lst sorted in ascending order.","def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list([1]) == [1] assert sort_list([]) == []"
"def count_occurrences_of_substring(s, substring): return s.count(substring)","Counts occurrences of a substring in a string.

This function returns the number of times substring appears in the string s.","def test_count_occurrences_of_substring(): assert count_occurrences_of_substring(""hello world"", ""o"") == 2 assert count_occurrences_of_substring(""hello"", ""l"") == 2 assert count_occurrences_of_substring("""", ""a"") == 0"
"def sum_of_range(start, end): return sum(range(start, end + 1))","Computes the sum of a range of integers.

This function calculates the sum of all integers from start to end, inclusive.","def test_sum_of_range(): assert sum_of_range(1, 3) == 6 assert sum_of_range(0, 0) == 0 assert sum_of_range(3, 5) == 12"
def is_perfect_square(n): return int(n ** 0.5) ** 2 == n,"Checks if a number is a perfect square.

This function returns True if n is a perfect square, meaning there exists an integer whose square is equal to n.",def test_is_perfect_square(): assert is_perfect_square(16) assert not is_perfect_square(15) assert is_perfect_square(0)
"def find_duplicates(lst): from collections import Counter return [item for item, count in Counter(lst).items() if count > 1]","Finds duplicate elements in a list.

This function returns a list of elements that appear more than once in the input list lst.","def test_find_duplicates(): assert find_duplicates([1, 2, 2, 3]) == [2] assert find_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3] assert find_duplicates([]) == []"
def is_alphabetic(s): return s.isalpha(),"Checks if a string contains only alphabetic characters.

This function returns True if the string s consists only of alphabetic characters (letters), and False otherwise.",def test_is_alphabetic(): assert is_alphabetic("hello") assert not is_alphabetic("hello123") assert not is_alphabetic("")
def get_unique_elements(lst): return list(set(lst)),"Returns unique elements from a list.

This function returns a list of unique elements from lst, removing duplicates.","def test_get_unique_elements(): assert get_unique_elements([1, 2, 2, 3]) == [1, 2, 3] assert get_unique_elements([5, 5, 5]) == [5] assert get_unique_elements([]) == []"
def flatten_list(lst): return [item for sublist in lst for item in sublist],"Flattens a nested list.

This function returns a single list containing all the elements from sublists within lst.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([[1]]) == [1] assert flatten_list([]) == []"
def sum_of_dict_values(d): return sum(d.values()),"Computes the sum of dictionary values.

This function returns the sum of all the values in the dictionary d.","def test_sum_of_dict_values(): assert sum_of_dict_values({'a': 1, 'b': 2}) == 3 assert sum_of_dict_values({'x': 5, 'y': 10}) == 15 assert sum_of_dict_values({}) == 0"
"def get_keys_with_value(d, value): return [k for k, v in d.items() if v == value]","Finds keys with a specific value in a dictionary.

This function returns a list of keys from dictionary d where the corresponding value matches value.","def test_get_keys_with_value(): assert get_keys_with_value({'a': 1, 'b': 1}, 1) == ['a', 'b'] assert get_keys_with_value({'x': 5}, 10) == [] assert get_keys_with_value({}, 0) == []"
"def remove_first_n_elements(lst, n): return lst[n:]","Removes the first n elements from a list.

This function returns a new list with the first n elements removed from lst.","def test_remove_first_n_elements(): assert remove_first_n_elements([1, 2, 3, 4], 2) == [3, 4] assert remove_first_n_elements([1, 2], 1) == [2] assert remove_first_n_elements([], 1) == []"
"def get_substring(s, start, end): return s[start:end]","Extracts a substring from a string.

This function returns a substring from s starting at index start and ending at index end.","def test_get_substring(): assert get_substring(""hello"", 1, 4) == ""ell"" assert get_substring(""world"", 0, 5) == ""world"" assert get_substring("""", 0, 1) == """""
def count_elements(lst): return len(lst),"Counts the number of elements in a list.

This function returns the total number of elements in the list lst.","def test_count_elements(): assert count_elements([1, 2, 3]) == 3 assert count_elements([]) == 0 assert count_elements([1, 2, 3, 4]) == 4"
def string_to_list(s): return list(s),"Converts a string into a list of characters.

This function returns a list where each element is a character from the string s.","def test_string_to_list(): assert string_to_list(""hello"") == ['h', 'e', 'l', 'l', 'o'] assert string_to_list("""") == [] assert string_to_list(""abc"") == ['a', 'b', 'c']"
"def remove_last_n_elements(lst, n): return lst[:-n]","Removes the last n elements from a list.

 This function returns a new list with the last n elements removed from lst.","def test_remove_last_n_elements(): assert remove_last_n_elements([1, 2, 3, 4], 2) == [1, 2] assert remove_last_n_elements([1, 2], 1) == [1] assert remove_last_n_elements([], 1) == []"
def to_lowercase(s): return s.lower(),"Converts a string to lowercase.

 This function returns a new string where all characters are converted to lowercase.",def test_to_lowercase(): assert to_lowercase("HELLO") == "hello" assert to_lowercase("world") == "world" assert to_lowercase("") == ""
def get_unique_words(s): return list(set(s.split())),"Extracts unique words from a string.

 This function splits the string s into words and returns a list of unique words, removing duplicates.","def test_get_unique_words(): assert get_unique_words(""hello world world"") == [""hello"", ""world""] assert get_unique_words(""a b c"") == [""a"", ""b"", ""c""] assert get_unique_words("""") == []"
def is_alpha_numeric(s): return s.isalnum(),"Checks if a string is alphanumeric.

 This function returns True if the string s consists only of alphanumeric characters (letters and digits), and False otherwise.",def test_is_alpha_numeric(): assert is_alpha_numeric("hello123") assert not is_alpha_numeric("hello!") assert not is_alpha_numeric("")
"def find_difference(lst1, lst2): return list(set(lst1) - set(lst2))","Finds elements in the first list not present in the second list.

 This function returns a list of elements that are in lst1 but not in lst2.","def test_find_difference(): assert find_difference([1, 2, 3], [3, 4]) == [1, 2] assert find_difference([1, 2], [2, 3]) == [1] assert find_difference([], [1]) == []"
"def combine_lists(lst1, lst2): return lst1 + lst2","Combines two lists into one.

 This function concatenates two lists lst1 and lst2 and returns the combined list.","def test_combine_lists(): assert combine_lists([1], [2]) == [1, 2] assert combine_lists([], [3]) == [3] assert combine_lists([4], []) == [4]"
def average_of_list(lst): return sum(lst) / len(lst) if lst else None,"Computes the average of elements in a list.

 This function calculates the average (mean) of the numbers in the list lst. If the list is empty, it returns None.","def test_average_of_list(): assert average_of_list([1, 2, 3]) == 2 assert average_of_list([10, 20]) == 15 assert average_of_list([]) == None"
def reverse_string(s): return s[::-1],"Reverses a string.

 This function returns a new string with the characters of s in reverse order.",def test_reverse_string(): assert reverse_string("hello") == "olleh" assert reverse_string("world") == "dlrow" assert reverse_string("") == ""
def max_in_list(lst): return max(lst) if lst else None,"Finds the maximum value in a list.

This function returns the largest value in the list lst. If the list is empty, it returns None.","def test_max_in_list(): assert max_in_list([1, 2, 3]) == 3 assert max_in_list([-1, -2, -3]) == -1 assert max_in_list([]) == None"
def min_in_list(lst): return min(lst) if lst else None,"Finds the minimum value in a list.

This function returns the smallest value in the list lst. If the list is empty, it returns None.","def test_min_in_list(): assert min_in_list([1, 2, 3]) == 1 assert min_in_list([-1, -2, -3]) == -3 assert min_in_list([]) == None"
def is_palindrome(s): return s == s[::-1],"Checks if a string is a palindrome.

This function returns True if the string s reads the same forwards and backwards, and False otherwise.",def test_is_palindrome(): assert is_palindrome("racecar") assert not is_palindrome("hello") assert is_palindrome("")
"def gcd(a, b): while b: a, b = b, a % b return a","Computes the greatest common divisor (GCD) of two numbers.

This function uses the Euclidean algorithm to find the GCD of a and b.","def test_gcd(): assert gcd(48, 18) == 6 assert gcd(100, 10) == 10 assert gcd(7, 3) == 1"
"def lcm(a, b): return abs(a * b) // gcd(a, b)","Computes the least common multiple (LCM) of two numbers.

This function calculates the LCM of a and b using their GCD.","def test_lcm(): assert lcm(4, 5) == 20 assert lcm(7, 3) == 21 assert lcm(0, 10) == 0"
"def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True","Checks if a number is prime.

This function returns True if n is a prime number, and False otherwise. A prime number is a number greater than 1 with no positive divisors other than 1 and itself.",def test_is_prime(): assert is_prime(2) assert not is_prime(4) assert is_prime(7)
"def list_intersection(lst1, lst2): return list(set(lst1) & set(lst2))","Finds common elements between two lists.

This function returns a list of elements that appear in both lst1 and lst2.","def test_list_intersection(): assert list_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert list_intersection([1, 5], [2, 3]) == [] assert list_intersection([], [1]) == []"
def reverse_words(sentence): return ' '.join(word[::-1] for word in sentence.split()),"Reverses each word in a sentence.

This function returns a new sentence with each word in the original sentence reversed, while preserving the original word order.",def test_reverse_words(): assert reverse_words("hello world") == "olleh dlrow" assert reverse_words("is fun") == "nohtyp si nuf" assert reverse_words("") == ""
def char_count(s): return {char: s.count(char) for char in set(s)},"Counts character occurrences in a string.

This function returns a dictionary where the keys are characters from the string s, and the values are the counts of those characters.","def test_char_count(): assert char_count(""hello"") == {'h': 1, 'e': 1, 'l': 2, 'o': 1} assert char_count(""aaa"") == {'a': 3} assert char_count("""") == {}"
"def list_to_string(lst): return ''.join(map(str, lst))","Converts a list of elements to a string.

This function returns a string that concatenates all the elements in the list lst, converting each element to a string.","def test_list_to_string(): assert list_to_string([1, 2, 3]) == ""123"" assert list_to_string([""a"", ""b"", ""c""]) == ""abc"" assert list_to_string([]) == """""
def get_odd_numbers(lst): return [x for x in lst if x % 2 != 0],"Extracts odd numbers from a list.

This function returns a list of odd numbers from the input list lst.","def test_get_odd_numbers(): assert get_odd_numbers([1, 2, 3]) == [1, 3] assert get_odd_numbers([2, 4, 6]) == [] assert get_odd_numbers([1, 3, 5, 7]) == [1, 3, 5, 7]"
def get_even_numbers(lst): return [x for x in lst if x % 2 == 0],"Extracts even numbers from a list.

This function returns a list of even numbers from the input list lst.","def test_get_even_numbers(): assert get_even_numbers([1, 2, 3]) == [2] assert get_even_numbers([2, 4, 6]) == [2, 4, 6] assert get_even_numbers([1, 3, 5, 7]) == []"
def word_count(s): return len(s.split()),"Counts the number of words in a string.

This function returns the number of words in the string s, where words are separated by spaces.",def test_word_count(): assert word_count("hello world") == 2 assert word_count("is awesome") == 3 assert word_count("") == 0
"def merge_lists(lst1, lst2): return lst1 + lst2","Merges two lists.

This function concatenates two lists lst1 and lst2, returning a single combined list.","def test_merge_lists(): assert merge_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_lists([], [1]) == [1] assert merge_lists([2], []) == [2]"
"def count_occurrences(lst, item): return lst.count(item)","Counts occurrences of an item in a list.

This function returns the number of times item appears in the list lst.","def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences([1, 1, 1], 1) == 3 assert count_occurrences([], 1) == 0"
"def find_maximum(lst): return max(lst, default=None)",Finds the maximum value in a list.,"def test_find_maximum(): assert find_maximum([1, 2, 3]) == 3 assert find_maximum([-1, -2]) == -1 assert find_maximum([]) == None"
"def find_minimum(lst): return min(lst, default=None)",Finds the minimum value in a list.,"def test_find_minimum(): assert find_minimum([1, 2, 3]) == 1 assert find_minimum([-1, -2]) == -2 assert find_minimum([]) == None"
def count_vowels(s): return sum(1 for char in s if char in 'aeiouAEIOU'),"Counts the number of vowels in a string.

This function returns the total number of vowels in the string s. Vowels include 'a', 'e', 'i', 'o', and 'u' (both uppercase and lowercase).",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("world") == 1 assert count_vowels("") == 0
def remove_duplicates(lst): return list(dict.fromkeys(lst)),"Removes duplicates from a list while preserving order.

This function returns a list with duplicate elements removed, while keeping the original order of elements.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates([1, 1, 1]) == [1] assert remove_duplicates([]) == []"
def is_uppercase(s): return s.isupper(),"Checks if a string is in uppercase.

This function returns True if all characters in the string s are uppercase letters, and False otherwise.",def test_is_uppercase(): assert is_uppercase("HELLO") assert not is_uppercase("Hello") assert not is_uppercase("")
def is_lowercase(s): return s.islower(),"Checks if a string is in lowercase.

This function returns True if all characters in the string s are lowercase letters, and False otherwise.",def test_is_lowercase(): assert is_lowercase("hello") assert not is_lowercase("Hello") assert not is_lowercase("")
def sum_elements(lst): return sum(lst),"Computes the sum of elements in a list.

This function returns the total sum of all elements in the list lst.","def test_sum_elements(): assert sum_elements([1, 2, 3]) == 6 assert sum_elements([-1, 2, 3]) == 4 assert sum_elements([]) == 0"
"def is_multiple_of(n, multiple): return n % multiple == 0","Checks if n is a multiple of a given number.

This function checks whether n is a multiple of multiple by verifying if the remainder when dividing n by multiple is zero.","def test_is_multiple_of(): assert is_multiple_of(10, 5) assert not is_multiple_of(7, 3) assert is_multiple_of(0, 5)"
def cube_number(n): return n ** 3,"Returns the cube of a number.

This function takes an integer n and returns its cube, calculated as n raised to the power of 3.",def test_cube_number(): assert cube_number(3) == 27 assert cube_number(0) == 0 assert cube_number(-2) == -8
def remove_vowels(s): return ''.join([char for char in s if char.lower() not in 'aeiou']),"Removes vowels from a string.

This function removes all vowel characters (a, e, i, o, u) from the string s and returns the resulting string.",def test_remove_vowels(): assert remove_vowels("hello") == "hll" assert remove_vowels("world") == "wrld" assert remove_vowels("") == ""
"def multiply_list_elements(lst, factor): return [x * factor for x in lst]","Multiplies each element in a list by a factor.

This function returns a new list where each element from the input list lst is multiplied by the given factor.","def test_multiply_list_elements(): assert multiply_list_elements([1, 2, 3], 2) == [2, 4, 6] assert multiply_list_elements([4, 5], 0) == [0, 0] assert multiply_list_elements([], 3) == []"
def contains_digit(s): return any(char.isdigit() for char in s),"Checks if a string contains any digits.

This function checks whether the input string s contains any digits (0-9) and returns True if it does, otherwise False.",def test_contains_digit(): assert contains_digit("abc123") assert not contains_digit("hello") assert contains_digit("123")
"def factorial_iterative(n): result = 1 for i in range(1, n+1): result *= i return result","Computes factorial using an iterative approach.

This function calculates the factorial of n by iterating from 1 to n and multiplying all integers.",def test_factorial_iterative(): assert factorial_iterative(5) == 120 assert factorial_iterative(0) == 1 assert factorial_iterative(3) == 6
def find_median(lst): sorted_lst = sorted(lst) n = len(lst) return (sorted_lst[n//2] if n % 2 != 0 else (sorted_lst[n//2 - 1] + sorted_lst[n//2]) / 2) if lst else None,"Finds the median of a list of numbers.

This function returns the median of the sorted list lst. If the list has an odd length, it returns the middle element; if the list has an even length, it returns the average of the two middle elements. If the list is empty, it returns None.","def test_find_median(): assert find_median([3, 1, 2]) == 2 assert find_median([1, 2, 3, 4]) == 2.5 assert find_median([]) == None"
def is_consonant(char): return char.isalpha() and char.lower() not in 'aeiou',"Checks if a character is a consonant.

This function checks if the character char is an alphabetic consonant (i.e., not a vowel) and returns True if it is, otherwise False.",def test_is_consonant(): assert is_consonant("b") assert not is_consonant("a") assert not is_consonant("1")
def to_title_case(s): return s.title(),"Converts a string to title case.

This function converts each word in the string s to title case, where the first letter of each word is capitalized.",def test_to_title_case(): assert to_title_case("hello world") == "Hello World" assert to_title_case("is fun") == "Is Fun" assert to_title_case("") == ""
def sum_of_squares(lst): return sum(x ** 2 for x in lst),"Computes the sum of squares of elements in a list.

This function returns the sum of the squares of all the elements in the list lst.","def test_sum_of_squares(): assert sum_of_squares([1, 2, 3]) == 14 assert sum_of_squares([0]) == 0 assert sum_of_squares([-1, -2]) == 5"
def is_alphanumeric(s): return s.isalnum(),"Checks if a string is alphanumeric.

This function returns True if the string s consists only of alphanumeric characters (letters and numbers) and False otherwise.",def test_is_alphanumeric(): assert is_alphanumeric("hello123") assert not is_alphanumeric("hello!") assert is_alphanumeric("123")
def unique_chars(s): return len(s) == len(set(s)),"Checks if all characters in a string are unique.

This function returns True if all the characters in the string s are unique, and False if there are any repeated characters.",def test_unique_chars(): assert unique_chars("abc") assert not unique_chars("aabc") assert unique_chars("")
def reverse_integer(n): return int(str(n)[::-1]),"Reverses the digits of an integer.

This function takes an integer n, converts it to a string, reverses the string, and converts it back to an integer.",def test_reverse_integer(): assert reverse_integer(123) == 321 assert reverse_integer(0) == 0 assert reverse_integer(-456) == -654
"def is_sublist(lst, sublist): return all(item in lst for item in sublist)","Checks if one list is a sublist of another.

This function returns True if all elements of sublist are present in the list lst, and False otherwise.","def test_is_sublist(): assert is_sublist([1, 2, 3, 4], [2, 3]) assert not is_sublist([1, 2, 3], [4]) assert is_sublist([], [])"
def flatten_nested_lists(lst): return [item for sublist in lst for item in sublist],"Flattens a list of lists.

This function returns a single flattened list containing all elements from the nested lists in the input list lst.","def test_flatten_nested_lists(): assert flatten_nested_lists([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_nested_lists([[]]) == [] assert flatten_nested_lists([[5]]) == [5]"
def swap_case(s): return s.swapcase(),"Swaps the case of each character in a string.

This function returns a new string where the case of each character in the string s is swapped (uppercase characters become lowercase, and vice versa).",def test_swap_case(): assert swap_case("Hello") == "hELLO" assert swap_case("WORLD") == "world" assert swap_case("") == ""
"def get_first_n_elements(lst, n): return lst[:n]","Returns the first n elements from a list.

This function returns a new list containing the first n elements from the input list lst. If n is greater than the length of lst, the entire list is returned.","def test_get_first_n_elements(): assert get_first_n_elements([1, 2, 3, 4], 2) == [1, 2] assert get_first_n_elements([1], 3) == [1] assert get_first_n_elements([], 2) == []"
def square_numbers(lst): return [x ** 2 for x in lst],"Squares each element in a list.

This function returns a new list where each element from the input list lst is squared.","def test_square_numbers(): assert square_numbers([1, 2, 3]) == [1, 4, 9] assert square_numbers([0, -1]) == [0, 1] assert square_numbers([]) == []"
def count_consonants(s): return sum(1 for char in s.lower() if char in 'bcdfghjklmnpqrstvwxyz'),"Counts the consonants in a string.

This function returns the total number of consonants in the string s. Consonants are letters that are not vowels.",def test_count_consonants(): assert count_consonants("hello") == 3 assert count_consonants("xyz") == 3 assert count_consonants("aeiou") == 0
"def find_second_largest(lst): unique_sorted_lst = sorted(set(lst), reverse=True) return unique_sorted_lst[1] if len(unique_sorted_lst) > 1 else None","Finds the second largest number in a list.

This function returns the second largest unique value in the list lst. If there are fewer than two unique values, it returns None.","def test_find_second_largest(): assert find_second_largest([3, 1, 2, 4]) == 3 assert find_second_largest([10, 10, 5]) == 5 assert find_second_largest([1]) == None"
"def multiply_elements(lst): from functools import reduce return reduce(lambda x, y: x * y, lst, 1)","Multiplies all elements in a list.

This function multiplies all the elements in the list lst and returns the result. If the list is empty, it returns 1.","def test_multiply_elements(): assert multiply_elements([1, 2, 3, 4]) == 24 assert multiply_elements([5]) == 5 assert multiply_elements([]) == 1"
"def find_last_occurrence(lst, value): return len(lst) - 1 - lst[::-1].index(value) if value in lst else None",Finds the last occurrence of a value in a list.,"def test_find_last_occurrence(): assert find_last_occurrence([1, 2, 3, 2], 2) == 3 assert find_last_occurrence([1, 2, 3], 4) == None assert find_last_occurrence([], 1) == None"
def split_sentence_into_words(s): return s.split(),"Splits a sentence into words.

This function takes a string s representing a sentence and splits it into a list of words.","def test_split_sentence_into_words(): assert split_sentence_into_words(""hello world"") == [""hello"", ""world""] assert split_sentence_into_words(""a b c"") == [""a"", ""b"", ""c""] assert split_sentence_into_words("""") == []"
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1),"Recursively computes the factorial of a number.

This function calculates the factorial of n using recursion. The factorial of n is the product of all positive integers up to n.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(3) == 6
"def check_anagram(s1, s2): return sorted(s1) == sorted(s2)","Checks if two strings are anagrams.

This function returns True if the two strings s1 and s2 are anagrams, meaning they contain the same characters in a different order, and False otherwise.","def test_check_anagram(): assert check_anagram(""listen"", ""silent"") assert not check_anagram(""hello"", ""world"") assert check_anagram(""evil"", ""vile"")"
def reverse_words_in_sentence(s): return ' '.join(reversed(s.split())),"Reverses the order of words in a sentence.

This function takes a string s representing a sentence and returns a new string with the words in reverse order.",def test_reverse_words_in_sentence(): assert reverse_words_in_sentence("hello world") == "world hello" assert reverse_words_in_sentence("a b c") == "c b a" assert reverse_words_in_sentence("") == ""
def capitalize_first_letter(s): return s.capitalize(),"Capitalizes the first letter of a string.

This function returns a new string with the first letter of the string s capitalized and the rest of the string in lowercase.",def test_capitalize_first_letter(): assert capitalize_first_letter("hello") == "Hello" assert capitalize_first_letter("PYTHON") == "Python" assert capitalize_first_letter("") == ""
def count_spaces(s): return s.count(' '),"Counts the number of spaces in a string.

This function returns the total number of spaces (whitespace characters) in the string s.",def test_count_spaces(): assert count_spaces("hello world") == 1 assert count_spaces("a b c") == 2 assert count_spaces("") == 0
def sum_of_evens(lst): return sum(x for x in lst if x % 2 == 0),"Sums the even numbers in a list.

This function returns the sum of all even numbers in the list lst.","def test_sum_of_evens(): assert sum_of_evens([1, 2, 3, 4]) == 6 assert sum_of_evens([1, 3, 5]) == 0 assert sum_of_evens([]) == 0"
def count_uppercase(s): return sum(1 for char in s if char.isupper()),"Counts the number of uppercase letters in a string.

This function returns the number of uppercase letters in the string s.",def test_count_uppercase(): assert count_uppercase("Hello") == 1 assert count_uppercase("WORLD") == 5 assert count_uppercase("python") == 0
def remove_non_alphanumeric(s): return ''.join(char for char in s if char.isalnum()),"Removes non-alphanumeric characters from a string.

This function returns a new string with all non-alphanumeric characters removed from the input string s.",def test_remove_non_alphanumeric(): assert remove_non_alphanumeric("abc123!") == "abc123" assert remove_non_alphanumeric("hello!") == "hello" assert remove_non_alphanumeric("") == ""
def convert_list_to_set(lst): return set(lst),"Converts a list to a set.

This function takes a list lst and returns a set containing all unique elements from the list, effectively removing duplicates.","def test_convert_list_to_set(): assert convert_list_to_set([1, 2, 2, 3]) == {1, 2, 3} assert convert_list_to_set([5, 5, 5]) == {5} assert convert_list_to_set([]) == set()"
def find_missing_number(lst): n = len(lst) + 1 return n * (n + 1) // 2 - sum(lst),"Finds the missing number in a sequence from 1 to n.

This function takes a list lst of integers from 1 to n, where one number is missing, and returns the missing number.","def test_find_missing_number(): assert find_missing_number([1, 2, 4, 5]) == 3 assert find_missing_number([1, 3]) == 2 assert find_missing_number([2]) == 1"
def to_lowercase(s): return s.lower(),"Converts a string to lowercase.

This function takes a string s and returns a new string with all characters converted to lowercase.",def test_to_lowercase(): assert to_lowercase("HELLO") == "hello" assert to_lowercase("World") == "world" assert to_lowercase("") == ""
def flatten_nested_list(lst): return [item for sublist in lst for item in sublist],"Flattens a nested list.

This function takes a nested list lst and returns a single flattened list containing all elements from the nested lists.","def test_flatten_nested_list(): assert flatten_nested_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_nested_list([[]]) == [] assert flatten_nested_list([[5]]) == [5]"
def count_words(s): return len(s.split()),Counts the number of words in a string.,def test_count_words(): assert count_words("hello world") == 2 assert count_words("one two three") == 3 assert count_words("") == 0
def get_unique_elements(lst): return list(set(lst)),"Returns the unique elements in a list.

This function takes a list lst and returns a new list containing only the unique elements from the original list, removing duplicates.","def test_get_unique_elements(): assert get_unique_elements([1, 2, 2, 3]) == [1, 2, 3] assert get_unique_elements([1, 1, 1]) == [1] assert get_unique_elements([]) == []"
def count_consonants(s): return sum(1 for char in s.lower() if char in 'bcdfghjklmnpqrstvwxyz'),"Counts the number of consonants in a string.

This function returns the number of consonants in the string s, excluding vowels.",def test_count_consonants(): assert count_consonants("hello") == 3 assert count_consonants("world") == 4 assert count_consonants("") == 0
def count_digits(n): return len(str(n)),"Counts the number of digits in a number.

This function returns the total number of digits in the integer n.",def test_count_digits(): assert count_digits(12345) == 5 assert count_digits(0) == 1 assert count_digits(9876) == 4
def count_vowels(s): return sum(1 for char in s if char.lower() in 'aeiou'),"Counts the number of vowels in a string.

This function returns the number of vowels in the string s, considering both uppercase and lowercase vowels.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("world") == 1 assert count_vowels("") == 0
"def find_duplicates(lst): from collections import Counter return [item for item, count in Counter(lst).items() if count > 1]","Finds the duplicate elements in a list.

This function returns a list of all duplicate elements in the list lst, where the same element appears more than once.","def test_find_duplicates(): assert find_duplicates([1, 2, 2, 3]) == [2] assert find_duplicates([1, 1, 2, 2, 3]) == [1, 2] assert find_duplicates([]) == []"
"def factorial(n): result = 1 for i in range(1, n + 1): result *= i return result","Computes the factorial of a number iteratively.

This function returns the factorial of n by multiplying all positive integers from 1 to n.",def test_factorial(): assert factorial(5) == 120 assert factorial(0) == 1 assert factorial(3) == 6
def count_spaces(s): return s.count(' '),"Counts the number of spaces in a string.

This function returns the total number of spaces in the string s.",def test_count_spaces(): assert count_spaces("hello world") == 1 assert count_spaces(" ") == 1 assert count_spaces("") == 0
"def get_last_n_elements(lst, n): return lst[-n:]","Returns the last n elements from a list.

This function returns a new list containing the last n elements from the input list lst.","def test_get_last_n_elements(): assert get_last_n_elements([1, 2, 3, 4], 2) == [3, 4] assert get_last_n_elements([1], 1) == [1] assert get_last_n_elements([], 1) == []"
def find_max(lst): return max(lst) if lst else None,Returns the maximum element in a list.,"def test_find_max(): assert find_max([1, 2, 3]) == 3 assert find_max([10, 5, 7]) == 10 assert find_max([]) == None"
def average_of_list(lst): return sum(lst) / len(lst) if lst else None,"Computes the average of a list.

This function returns the average (mean) of the numbers in the list lst. If the list is empty, it returns None.","def test_average_of_list(): assert average_of_list([1, 2, 3]) == 2 assert average_of_list([10, 20]) == 15 assert average_of_list([]) == None"
def sum_of_list(lst): return sum(lst),Sums the elements in a list.,"def test_sum_of_list(): assert sum_of_list([1, 2, 3]) == 6 assert sum_of_list([10, -5, 5]) == 10 assert sum_of_list([]) == 0"
"def nth_fibonacci(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return a","Returns the nth Fibonacci number.

This function returns the n-th Fibonacci number using an iterative approach. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two.",def test_nth_fibonacci(): assert nth_fibonacci(0) == 0 assert nth_fibonacci(1) == 1 assert nth_fibonacci(5) == 5
"def contains_substring(s, substring): return substring in s","Checks if a string contains a substring.

This function returns True if the string s contains the substring substring, and False otherwise.","def test_contains_substring(): assert contains_substring(""hello world"", ""world"") assert not contains_substring(""hello"", ""bye"") assert contains_substring("""", """")"
def find_largest(lst): return max(lst) if lst else None,Finds the largest element in a list.,"def test_find_largest(): assert find_largest([1, 2, 3]) == 3 assert find_largest([10, 5, 7]) == 10 assert find_largest([]) == None"
"def is_anagram(s1, s2): return sorted(s1) == sorted(s2)","Checks if two strings are anagrams.

This function returns True if s1 and s2 are anagrams, meaning they contain the same characters in any order, and False otherwise.","def test_is_anagram(): assert is_anagram(""listen"", ""silent"") assert not is_anagram(""hello"", ""world"") assert is_anagram(""evil"", ""vile"")"
def flatten_list(lst): return [item for sublist in lst for item in sublist],"Flattens a list of lists.

This function returns a single list containing all elements from the nested lists in the input list lst.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([[]]) == [] assert flatten_list([[5]]) == [5]"
"def get_sublist(lst, start, end): return lst[start:end]","Returns a sublist from a list.

This function returns a sublist of the list lst, starting at index start and ending at index end (exclusive).","def test_get_sublist(): assert get_sublist([1, 2, 3, 4], 1, 3) == [2, 3] assert get_sublist([1], 0, 1) == [1] assert get_sublist([], 0, 1) == []"
"def count_occurrences(lst, value): return lst.count(value)",Counts occurrences of a value in a list.,"def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences([1, 1, 1], 1) == 3 assert count_occurrences([], 1) == 0"
def get_multiples_of_three(lst): return [x for x in lst if x % 3 == 0],"Returns multiples of 3 from a list.

This function returns a list of elements from lst that are divisible by 3.","def test_get_multiples_of_three(): assert get_multiples_of_three([3, 6, 9, 10]) == [3, 6, 9] assert get_multiples_of_three([2, 4, 5]) == [] assert get_multiples_of_three([]) == []"
def string_to_list(s): return list(s),"Converts a string to a list of characters.

This function returns a list of characters from the string s, with each character becoming an element in the list.","def test_string_to_list(): assert string_to_list(""hello"") == ['h', 'e', 'l', 'l', 'o'] assert string_to_list("""") == [] assert string_to_list(""abc"") == ['a', 'b', 'c']"
"def list_intersection(lst1, lst2): return list(set(lst1) & set(lst2))","Returns the intersection of two lists.

This function returns a list of elements that are common to both lists lst1 and lst2, removing duplicates.","def test_list_intersection(): assert list_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert list_intersection([5, 6], [7, 8]) == [] assert list_intersection([], [1]) == []"
"def count_occurrences_of_char(s, char): return s.count(char)","Counts the occurrences of a character in a string.

This function returns the number of times the character char appears in the string s.","def test_count_occurrences_of_char(): assert count_occurrences_of_char(""hello"", ""l"") == 2 assert count_occurrences_of_char(""abc"", ""d"") == 0 assert count_occurrences_of_char("""", ""a"") == 0"
"def find_second_largest(lst): unique_sorted_lst = sorted(set(lst), reverse=True) return unique_sorted_lst[1] if len(unique_sorted_lst) > 1 else None","Finds the second-largest number in a list.

This function returns the second-largest unique number in the list lst. If there are fewer than two unique numbers, it returns None.","def test_find_second_largest(): assert find_second_largest([3, 1, 2, 4]) == 3 assert find_second_largest([10, 10, 5]) == 5 assert find_second_largest([1]) == None"
def capitalize_first(s): return s.capitalize(),"Capitalizes the first letter of a string.

This function capitalizes the first character of the string s, converting the rest of the characters to lowercase.",def test_capitalize_first(): assert capitalize_first("hello") == "Hello" assert capitalize_first("WORLD") == "World" assert capitalize_first("") == ""
def find_minimum(lst): return min(lst) if lst else None,"Finds the smallest element in a list.

This function checks whether a number n is a palindrome, meaning it reads the same forwards and backwards.","def test_find_minimum(): assert find_minimum([5, 2, 9]) == 2 assert find_minimum([1]) == 1 assert find_minimum([]) == None"
def count_uppercase(s): return sum(1 for char in s if char.isupper()),"Counts the uppercase letters in a string.

This function removes any leading and trailing whitespace characters from the string s.",def test_count_uppercase(): assert count_uppercase("Hello") == 1 assert count_uppercase("WORLD") == 5 assert count_uppercase("python") == 0
def sum_of_cubes(lst): return sum(x ** 3 for x in lst),"Sums the cubes of elements in a list.

This function returns the sum of the cubes of all elements in the list lst.","def test_sum_of_cubes(): assert sum_of_cubes([1, 2, 3]) == 36 assert sum_of_cubes([0]) == 0 assert sum_of_cubes([-1, -2]) == -9"
def find_max_index(lst): return lst.index(max(lst)) if lst else None,"Finds the index of the largest element in a list.

This function returns the index of the largest element in the list lst. If the list is empty, it returns None.","def test_find_max_index(): assert find_max_index([1, 2, 3]) == 2 assert find_max_index([4, 0, 2]) == 0 assert find_max_index([]) == None"
def remove_punctuation(s): return ''.join(char for char in s if char.isalnum() or char.isspace()),"Removes punctuation from a string.

This function removes all punctuation characters from the string s, keeping only alphanumeric characters and spaces.","def test_remove_punctuation(): assert remove_punctuation(""hello, world!"") == ""hello world"" assert remove_punctuation(""no punctuation"") == ""no punctuation"" assert remove_punctuation("""") == """""
def is_leap_year(year): return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0),"Determines if a year is a leap year.

This function checks whether the given year is a leap year. A leap year is divisible by 4 but not divisible by 100 unless also divisible by 400.",def test_is_leap_year(): assert is_leap_year(2024) assert not is_leap_year(1900) assert is_leap_year(2000)
def is_power_of_three(n): if n < 1: return False while n % 3 == 0: n //= 3 return n == 1,"Checks if a number is a power of three.

This function returns True if the number n is a power of three, and False otherwise.",def test_is_power_of_three(): assert is_power_of_three(9) assert not is_power_of_three(10) assert is_power_of_three(27)
def count_vowels(s): return sum(1 for char in s.lower() if char in 'aeiou'),"Counts the number of vowels in a string.

This function returns the total number of vowels in the string s. Vowels are the letters 'a', 'e', 'i', 'o', 'u'.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("xyz") == 0 assert count_vowels("aeiou") == 5
def multiply_list_elements(lst): result = 1 for x in lst: result *= x return result,"Multiplies all elements in a list.

This function returns the product of all the elements in the list lst. If the list is empty, it returns 1.","def test_multiply_list_elements(): assert multiply_list_elements([2, 3, 4]) == 24 assert multiply_list_elements([5]) == 5 assert multiply_list_elements([]) == 1"
def remove_duplicates(lst): return list(dict.fromkeys(lst)),"Removes duplicates from a list while preserving order.

This function removes all duplicate elements from the list lst while preserving the original order.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates([5, 5, 5]) == [5] assert remove_duplicates([]) == []"
def reverse_list(lst): return lst[::-1],"Reverses a list.

This function returns a new list where the elements of lst are in reverse order.","def test_reverse_list(): assert reverse_list([1, 2, 3]) == [3, 2, 1] assert reverse_list([]) == [] assert reverse_list([5]) == [5]"
"def product_of_list(lst): from functools import reduce return reduce(lambda x, y: x * y, lst, 1)","Computes the product of all elements in a list.

This function returns the product of all elements in the list lst using the reduce() function. If the list is empty, it returns 1.","def test_product_of_list(): assert product_of_list([1, 2, 3]) == 6 assert product_of_list([10]) == 10 assert product_of_list([]) == 1"
"def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True","Checks if a number is prime.

This function returns True if the number n is a prime number, and False otherwise. A prime number is greater than 1 and divisible only by 1 and itself.",def test_is_prime(): assert is_prime(7) assert not is_prime(4) assert not is_prime(1)
def reverse_words(s): return ' '.join(s.split()[::-1]),"Reverses the order of words in a string.

This function reverses the order of words in the input string s, while preserving the order of characters within each word.",def test_reverse_words(): assert reverse_words("hello world") == "world hello" assert reverse_words("a b c") == "c b a" assert reverse_words("") == ""
def square_of_sum(n): return sum(range(n + 1)) ** 2,"Computes the square of the sum of the first n natural numbers.

This function computes the sum of the first n natural numbers and returns the square of the result.",def test_square_of_sum(): assert square_of_sum(3) == 36 assert square_of_sum(1) == 1 assert square_of_sum(0) == 0
"def find_common_elements(lst1, lst2): return list(set(lst1) & set(lst2))","Finds the common elements between two lists.

This function returns a list of elements that are present in both lst1 and lst2, without any duplicates.","def test_find_common_elements(): assert find_common_elements([1, 2, 3], [2, 3, 4]) == [2, 3] assert find_common_elements([5, 6], [6, 7]) == [6] assert find_common_elements([], [1, 2]) == []"
def sum_of_even_numbers(lst): return sum(x for x in lst if x % 2 == 0),Sums all the even numbers in a list.,"def test_sum_of_even_numbers(): assert sum_of_even_numbers([1, 2, 3, 4]) == 6 assert sum_of_even_numbers([1, 3, 5]) == 0 assert sum_of_even_numbers([0]) == 0"
"def is_divisible_by(n, divisor): return n % divisor == 0","Checks if a number is divisible by another number.

This function returns True if n is divisible by divisor, and False otherwise.","def test_is_divisible_by(): assert is_divisible_by(10, 2) assert not is_divisible_by(7, 3) assert is_divisible_by(0, 1)"
def capitalize_words(s): return ' '.join(word.capitalize() for word in s.split()),"Capitalizes the first letter of each word in a string.

This function returns a new string with each word's first letter capitalized in the input string s.",def test_capitalize_words(): assert capitalize_words("hello world") == "Hello World" assert capitalize_words("is fun") == "Is Fun" assert capitalize_words("") == ""
"def product_of_range(start, end): result = 1 for i in range(start, end + 1): result *= i return result","Computes the product of all integers in a range.

This function returns the product of all integers from start to end (inclusive).","def test_product_of_range(): assert product_of_range(1, 3) == 6 assert product_of_range(5, 5) == 5 assert product_of_range(0, 3) == 0"
def convert_to_binary(n): return bin(n)[2:],"Converts an integer to its binary representation.

This function converts the integer n to its binary representation as a string, omitting the '0b' prefix.",def test_convert_to_binary(): assert convert_to_binary(5) == "101" assert convert_to_binary(0) == "0" assert convert_to_binary(255) == "11111111"
"def multiply_elements(lst): from functools import reduce return reduce(lambda x, y: x * y, lst, 1)","Multiplies all elements in a list.

This function returns the product of all elements in the list lst. If the list is empty, it returns 1.","def test_multiply_elements(): assert multiply_elements([1, 2, 3]) == 6 assert multiply_elements([10]) == 10 assert multiply_elements([]) == 1"
def count_non_alphanumeric(s): return sum(1 for char in s if not char.isalnum()),"Counts the non-alphanumeric characters in a string.

This function returns the number of non-alphanumeric characters in the string s. Non-alphanumeric characters include punctuation, spaces, and symbols.",def test_count_non_alphanumeric(): assert count_non_alphanumeric("hello!") == 1 assert count_non_alphanumeric("abc 123") == 1 assert count_non_alphanumeric("") == 0
"def count_occurrences_in_list(lst, value): return lst.count(value)","Counts occurrences of a value in a list.

This function takes a list lst and concatenates its elements into a string, converting each element to a string.","def test_count_occurrences_in_list(): assert count_occurrences_in_list([1, 2, 2, 3], 2) == 2 assert count_occurrences_in_list([4, 5, 6], 7) == 0 assert count_occurrences_in_list([], 1) == 0"
def count_digits_in_string(s): return sum(1 for char in s if char.isdigit()),"Counts the digits in a string.

This function returns the number of digit characters in the string s.",def test_count_digits_in_string(): assert count_digits_in_string("abc123") == 3 assert count_digits_in_string("hello") == 0 assert count_digits_in_string("") == 0
"def get_first_and_last(lst): return (lst[0], lst[-1]) if lst else (None, None)","Returns the first and last elements of a list.

This function returns a tuple containing the first and last elements of the list lst. If the list is empty, it returns (None, None).","def test_get_first_and_last(): assert get_first_and_last([1, 2, 3]) == (1, 3) assert get_first_and_last([5]) == (5, 5) assert get_first_and_last([]) == (None, None)"
def filter_odd_numbers(lst): return [x for x in lst if x % 2 != 0],"Filters out odd numbers from a list.

This function returns a new list containing only the odd numbers from the input list lst.","def test_filter_odd_numbers(): assert filter_odd_numbers([1, 2, 3, 4]) == [1, 3] assert filter_odd_numbers([2, 4, 6]) == [] assert filter_odd_numbers([]) == []"
def char_count(s): return {char: s.count(char) for char in set(s)},"Counts the occurrences of each character in a string.

This function returns a dictionary where the keys are characters from the string s and the values are the number of times each character appears in s.","def test_char_count(): assert char_count(""hello"") == {'h': 1, 'e': 1, 'l': 2, 'o': 1} assert char_count(""aaa"") == {'a': 3} assert char_count("""") == {}"
def find_max(lst): return max(lst) if lst else None,Finds the largest element in a list.,"def test_find_max(): assert find_max([1, 2, 3]) == 3 assert find_max([10, 5, 7]) == 10 assert find_max([]) == None"
def reverse_string(s): return s[::-1],"Reverses a string.

This function returns a new string with the characters of the string s in reverse order.",def test_reverse_string(): assert reverse_string("hello") == "olleh" assert reverse_string("abc") == "cba" assert reverse_string("") == ""
def find_min(lst): return min(lst) if lst else None,"Finds the smallest element in a list.

This function returns the smallest element in the list lst. If the list is empty, it returns None.","def test_find_min(): assert find_min([1, 2, 3]) == 1 assert find_min([10, 5, 7]) == 5 assert find_min([]) == None"
def list_length(lst): return len(lst),"Returns the length of a list.

This function returns True if n is a perfect square, and False otherwise. A perfect square is a number that is the square of an integer.","def test_list_length(): assert list_length([1, 2, 3]) == 3 assert list_length([]) == 0 assert list_length([7]) == 1"
def count_vowels(s): return sum(1 for char in s.lower() if char in 'aeiou'),"Counts the number of vowels in a string.

This function returns the total number of vowels in the string s. Vowels include 'a', 'e', 'i', 'o', and 'u'.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("python") == 1 assert count_vowels("") == 0
def sum_of_squares(lst): return sum(x ** 2 for x in lst),"Computes the sum of squares of elements in a list.

This function returns the sum of the squares of all elements in the list lst.","def test_sum_of_squares(): assert sum_of_squares([1, 2, 3]) == 14 assert sum_of_squares([0, 1, -1]) == 2 assert sum_of_squares([]) == 0"
"def count_occurrences(lst, value): return lst.count(value)",Counts the occurrences of a value in a list.,"def test_count_occurrences(): assert count_occurrences([1, 2, 3, 2], 2) == 2 assert count_occurrences([1, 1, 1], 1) == 3 assert count_occurrences([], 1) == 0"
def find_max(lst): return max(lst) if lst else None,"Finds the maximum value in a list.

This function removes duplicate elements from the list lst, preserving the order in which the elements first appeared.","def test_find_max(): assert find_max([1, 2, 3]) == 3 assert find_max([10, 5, 7]) == 10 assert find_max([]) == None"
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1),"Recursively computes the factorial of a number.

This function computes the factorial of n using recursion. The factorial of n is the product of all positive integers from 1 to n.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(1) == 1
def sum_of_even_numbers(lst): return sum(x for x in lst if x % 2 == 0),Sums the even numbers in a list.,"def test_sum_of_even_numbers(): assert sum_of_even_numbers([1, 2, 3, 4]) == 6 assert sum_of_even_numbers([1, 3, 5]) == 0 assert sum_of_even_numbers([0]) == 0"
def find_min(lst): return min(lst) if lst else None,"Finds the minimum value in a list.

This function returns a new string with each word's first letter capitalized.","def test_find_min(): assert find_min([1, 2, 3]) == 1 assert find_min([10, 5, 7]) == 5 assert find_min([]) == None"
def count_uppercase(s): return sum(1 for char in s if char.isupper()),"Counts the number of uppercase letters in a string.

This function returns the total number of uppercase letters in the string s.",def test_count_uppercase(): assert count_uppercase("Hello World") == 2 assert count_uppercase("PYTHON") == 6 assert count_uppercase("python") == 0
"def list_intersection(lst1, lst2): return list(set(lst1) & set(lst2))","Finds the intersection of two lists.

This function returns a list of elements that are common between the two lists lst1 and lst2.","def test_list_intersection(): assert list_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert list_intersection([5, 6], [7, 8]) == [] assert list_intersection([], [1, 2]) == []"
"def factorial_iterative(n): result = 1 for i in range(1, n + 1): result *= i return result","Computes the factorial of a number using iteration.

This function calculates the factorial of n using an iterative approach. The factorial of n is the product of all positive integers up to n.",def test_factorial_iterative(): assert factorial_iterative(5) == 120 assert factorial_iterative(0) == 1 assert factorial_iterative(1) == 1
"def product_of_list(lst): from functools import reduce return reduce(lambda x, y: x * y, lst, 1)","Computes the product of all elements in a list.

This function returns the product of all elements in the list lst using the reduce function. If the list is empty, it returns 1.","def test_product_of_list(): assert product_of_list([1, 2, 3]) == 6 assert product_of_list([4, 5]) == 20 assert product_of_list([]) == 1"
def count_consonants(s): return sum(1 for char in s.lower() if char in 'bcdfghjklmnpqrstvwxyz'),"Counts the number of consonants in a string.

This function returns the total number of consonants in the string s, excluding vowels.",def test_count_consonants(): assert count_consonants("hello") == 3 assert count_consonants("xyz") == 3 assert count_consonants("aeiou") == 0
def is_leap_year(year): return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0),"Checks if a year is a leap year.

This function returns True if the year is a leap year, and False otherwise. A leap year is divisible by 4 but not divisible by 100, unless divisible by 400.",def test_is_leap_year(): assert is_leap_year(2024) assert not is_leap_year(1900) assert is_leap_year(2000)
def find_max_index(lst): return lst.index(max(lst)) if lst else None,"Finds the index of the maximum value in a list.

This function returns a new string where the case of each character is swapped (uppercase becomes lowercase and vice versa).","def test_find_max_index(): assert find_max_index([1, 2, 3]) == 2 assert find_max_index([10, 5, 7]) == 0 assert find_max_index([]) == None"
def sum_of_list(lst): return sum(lst),"Computes the sum of all elements in a list.

This function returns the sum of all elements in the list lst.","def test_sum_of_list(): assert sum_of_list([1, 2, 3]) == 6 assert sum_of_list([10, -5, 5]) == 10 assert sum_of_list([]) == 0"
def to_title_case(s): return s.title(),"Converts a string to title case.

This function returns a new string where the first letter of each word is capitalized, and all other letters are lowercase.",def test_to_title_case(): assert to_title_case("hello world") == "Hello World" assert to_title_case("PYTHON") == "Python" assert to_title_case("") == ""
"def count_occurrences_of_char(s, char): return s.count(char)","Counts the occurrences of a specific character in a string.

This function returns the n-th Fibonacci number using an iterative approach. The Fibonacci sequence starts with 0 and 1, where each subsequent number is the sum of the previous two.","def test_count_occurrences_of_char(): assert count_occurrences_of_char(""hello"", ""l"") == 2 assert count_occurrences_of_char(""abc"", ""d"") == 0 assert count_occurrences_of_char("""", ""a"") == 0"
"def list_to_string(lst): return ''.join(map(str, lst))","Converts a list to a string.

This function takes the list lst and converts its elements into a single concatenated string.","def test_list_to_string(): assert list_to_string([1, 2, 3]) == ""123"" assert list_to_string([""a"", ""b"", ""c""]) == ""abc"" assert list_to_string([]) == """""
"def merge_lists(lst1, lst2): return lst1 + lst2","Merges two lists into one.

This function takes two lists lst1 and lst2 and returns a new list containing all the elements from both lists.","def test_merge_lists(): assert merge_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_lists([], [1, 2]) == [1, 2] assert merge_lists([1, 2], []) == [1, 2]"
def find_median(lst): sorted_lst = sorted(lst) n = len(lst) return (sorted_lst[n // 2] if n % 2 != 0 else (sorted_lst[n // 2 - 1] + sorted_lst[n // 2]) / 2) if lst else None,"Finds the median of a list.

This function returns the median value of the list lst. If the list has an odd length, it returns the middle element; if it has an even length, it returns the average of the two middle elements.","def test_find_median(): assert find_median([1, 2, 3]) == 2 assert find_median([1, 2, 3, 4]) == 2.5 assert find_median([]) == None"
"def find_missing_number(lst, n): return sum(range(1, n + 1)) - sum(lst)","Finds the missing number from a list of integers.

This function returns the missing number in a list lst containing integers from 1 to n, where one number is missing.","def test_find_missing_number(): assert find_missing_number([1, 2, 4, 5], 5) == 3 assert find_missing_number([1, 3], 3) == 2 assert find_missing_number([2], 2) == 1"
def get_unique_elements(lst): return list(set(lst)),"Returns the unique elements in a list.

This function returns a list of the unique elements from the list lst, removing duplicates.","def test_get_unique_elements(): assert get_unique_elements([1, 2, 2, 3]) == [1, 2, 3] assert get_unique_elements([5, 5, 5]) == [5] assert get_unique_elements([]) == []"
"def nth_root(x, n): return x ** (1 / n)","Finds the nth root of a number.

This function returns the n-th root of the number x.","def test_nth_root(): assert nth_root(27, 3) == 3 assert nth_root(16, 4) == 2 assert nth_root(1, 5) == 1"
def count_consonants_in_string(s): return sum(1 for char in s.lower() if char in 'bcdfghjklmnpqrstvwxyz'),"Counts consonants in a string.

This function returns True if the two strings s1 and s2 are anagrams, meaning they contain the same characters in any order.",def test_count_consonants_in_string(): assert count_consonants_in_string("hello") == 3 assert count_consonants_in_string("xyz") == 3 assert count_consonants_in_string("aeiou") == 0
def count_words(s): return len(s.split()),"Counts the number of words in a string.

This function removes duplicate elements from the list lst, preserving the order in which they first appear.",def test_count_words(): assert count_words("hello world") == 2 assert count_words("is fun") == 3 assert count_words("") == 0
def count_even_numbers(lst): return sum(1 for x in lst if x % 2 == 0),"Counts the even numbers in a list.

This function returns the number of even numbers in the list lst.","def test_count_even_numbers(): assert count_even_numbers([1, 2, 3, 4]) == 2 assert count_even_numbers([1, 3, 5]) == 0 assert count_even_numbers([2, 4, 6]) == 3"
"def factorial_iterative(n): result = 1 for i in range(1, n + 1): result *= i return result","Computes the factorial of a number iteratively.

This function calculates the factorial of n using an iterative approach. The factorial is the product of all integers from 1 to n.",def test_factorial_iterative(): assert factorial_iterative(5) == 120 assert factorial_iterative(0) == 1 assert factorial_iterative(3) == 6
def find_minimum(lst): return min(lst) if lst else None,"Finds the smallest number in a list.

This function returns the smallest number in the list lst. If the list is empty, it returns None.","def test_find_minimum(): assert find_minimum([5, 2, 9]) == 2 assert find_minimum([1]) == 1 assert find_minimum([]) == None"
def is_perfect_square(n): return int(n ** 0.5) ** 2 == n,"Checks if a number is a perfect square.

This function returns True if n is a perfect square, meaning its square root is an integer, and False otherwise.",def test_is_perfect_square(): assert is_perfect_square(16) assert not is_perfect_square(15) assert is_perfect_square(1)
def square_elements(lst): return [x ** 2 for x in lst],"Squares each element of a list.

This function returns a new list where each element in the input list lst is squared.","def test_square_elements(): assert square_elements([1, 2, 3]) == [1, 4, 9] assert square_elements([]) == [] assert square_elements([-1, 0, 1]) == [1, 0, 1]"
"def list_intersection(lst1, lst2): return list(set(lst1) & set(lst2))","Returns the intersection of two lists.

This function returns a list of all elements that appear in both input lists, lst1 and lst2.","def test_list_intersection(): assert list_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert list_intersection([5, 6], [7, 8]) == [] assert list_intersection([], [1, 2]) == []"
def flatten_list(lst): return [item for sublist in lst for item in sublist],"Flattens a list of lists into a single list.

This function takes a list of lists lst and returns a new list containing all the inner elements of each sublist in lst.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([]) == [] assert flatten_list([[]]) == []"
def sum_of_cubes(lst): return sum(x ** 3 for x in lst),"Computes the sum of cubes of elements in a list.

This function returns True if s1 and s2 are anagrams, meaning they contain the same characters in a different order, and False otherwise.","def test_sum_of_cubes(): assert sum_of_cubes([1, 2, 3]) == 36 assert sum_of_cubes([]) == 0 assert sum_of_cubes([-1, 2]) == 7"
"def count_occurrences(lst, value): return lst.count(value)",Counts the occurrences of a value in a list.,"def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences([1, 1, 1], 1) == 3 assert count_occurrences([], 1) == 0"
def count_consonants(s): return sum(1 for char in s.lower() if char in 'bcdfghjklmnpqrstvwxyz'),"Counts the number of consonants in a string.

This function returns the number of consonants in the string s. Consonants are any letters except vowels ('a', 'e', 'i', 'o', 'u').",def test_count_consonants(): assert count_consonants("hello") == 3 assert count_consonants("aeiou") == 0 assert count_consonants("xyz") == 3
def sum_of_list(lst): return sum(lst),Sums all elements in a list.,"def test_sum_of_list(): assert sum_of_list([1, 2, 3]) == 6 assert sum_of_list([10, -5, 5]) == 10 assert sum_of_list([]) == 0"
"def product_of_list(lst): from functools import reduce return reduce(lambda x, y: x * y, lst, 1)","Multiplies all elements in a list.

This function returns a new string with the characters of the input string s in reverse order.","def test_product_of_list(): assert product_of_list([1, 2, 3]) == 6 assert product_of_list([10]) == 10 assert product_of_list([]) == 1"
"def nth_fibonacci(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return a","Computes the nth Fibonacci number.

This function returns True if year is a leap year, and False otherwise. A leap year is divisible by 4 but not divisible by 100 unless also divisible by 400.",def test_nth_fibonacci(): assert nth_fibonacci(0) == 0 assert nth_fibonacci(1) == 1 assert nth_fibonacci(5) == 5
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1),"Computes the factorial of a number using recursion.

This function returns the factorial of n by recursively multiplying n by the factorial of n - 1.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(3) == 6
def find_median(lst): sorted_lst = sorted(lst) n = len(sorted_lst) return (sorted_lst[n // 2] if n % 2 != 0 else (sorted_lst[n // 2 - 1] + sorted_lst[n // 2]) / 2) if lst else None,"Finds the median of a list.

This function returns the median of the input list lst. If the length of the list is odd, it returns the middle element; if it is even, it returns the average of the two middle elements.","def test_find_median(): assert find_median([1, 2, 3]) == 2 assert find_median([1, 2, 3, 4]) == 2.5 assert find_median([]) == None"
"def nth_root(x, n): return x ** (1 / n)",Computes the nth root of a number.,"def test_nth_root(): assert nth_root(27, 3) == 3 assert nth_root(16, 4) == 2 assert nth_root(1, 5) == 1"
"def merge_lists(lst1, lst2): return lst1 + lst2","Merges two lists into one.

This function concatenates two lists lst1 and lst2 and returns the combined list.","def test_merge_lists(): assert merge_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_lists([], [1]) == [1] assert merge_lists([5], []) == [5]"
def count_digits_in_string(s): return sum(1 for char in s if char.isdigit()),"Counts the number of digits in a string.

This function returns the total number of digits in the input string s.",def test_count_digits_in_string(): assert count_digits_in_string("abc123") == 3 assert count_digits_in_string("hello") == 0 assert count_digits_in_string("") == 0
def get_unique_elements(lst): return list(set(lst)),"Removes duplicates and returns unique elements from a list.

This function removes any duplicate elements from the input list lst and returns a list of unique elements.","def test_get_unique_elements(): assert get_unique_elements([1, 2, 2, 3]) == [1, 2, 3] assert get_unique_elements([5, 5, 5]) == [5] assert get_unique_elements([]) == []"
"def list_intersection(lst1, lst2): return list(set(lst1) & set(lst2))","Finds the common elements between two lists.

This function returns a list of elements that are present in both input lists lst1 and lst2.","def test_list_intersection(): assert list_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert list_intersection([5, 6], [7, 8]) == [] assert list_intersection([], [1, 2]) == []"
def product_of_digits(n): return eval('*'.join(str(n))),"Returns the product of digits of a number.

This function returns the product of the digits in the integer n.",def test_product_of_digits(): assert product_of_digits(123) == 6 assert product_of_digits(0) == 0 assert product_of_digits(456) == 120
def count_words(s): return len(s.split()),Counts the number of words in a string.,def test_count_words(): assert count_words("hello world") == 2 assert count_words("this is a test") == 4 assert count_words("") == 0
def sum_of_odd_numbers(lst): return sum(x for x in lst if x % 2 != 0),"Sums the odd numbers in a list.

This function returns the sum of all odd numbers in the list lst.","def test_sum_of_odd_numbers(): assert sum_of_odd_numbers([1, 2, 3, 4]) == 4 assert sum_of_odd_numbers([2, 4, 6]) == 0 assert sum_of_odd_numbers([1, 3, 5]) == 9"
"def gcd(a, b): while b: a, b = b, a % b return a","Computes the greatest common divisor of two numbers.

This function uses the Euclidean algorithm to compute the greatest common divisor (GCD) of two numbers a and b.","def test_gcd(): assert gcd(12, 8) == 4 assert gcd(17, 13) == 1 assert gcd(20, 5) == 5"
def sort_list(lst): return sorted(lst),"Sorts a list in ascending order.

This function returns a new list with the elements of the input list lst sorted in ascending order.","def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list([]) == [] assert sort_list([5]) == [5]"
def count_letters(s): return sum(1 for char in s if char.isalpha()),"Counts the number of alphabetic characters in a string.

This function returns the number of letters (alphabetic characters) in the string s.",def test_count_letters(): assert count_letters("abc123") == 3 assert count_letters("!@#") == 0 assert count_letters("") == 0
"def find_missing_number(lst, n): return sum(range(1, n + 1)) - sum(lst)","Finds the missing number from a list of integers.

This function returns the missing number from a list lst containing integers from 1 to n, with one missing.","def test_find_missing_number(): assert find_missing_number([1, 2, 4], 4) == 3 assert find_missing_number([1, 3], 3) == 2 assert find_missing_number([2], 2) == 1"
"def get_min_max(lst): return (min(lst), max(lst)) if lst else (None, None)","Returns the minimum and maximum elements of a list.

This function returns a tuple containing the smallest and largest elements of the list lst. If the list is empty, it returns (None, None).","def test_get_min_max(): assert get_min_max([1, 2, 3]) == (1, 3) assert get_min_max([5]) == (5, 5) assert get_min_max([]) == (None, None)"
def count_odd_numbers(lst): return sum(1 for x in lst if x % 2 != 0),"Counts the odd numbers in a list.

This function returns the number of odd numbers in the list lst.","def test_count_odd_numbers(): assert count_odd_numbers([1, 2, 3, 4]) == 2 assert count_odd_numbers([2, 4, 6]) == 0 assert count_odd_numbers([1, 3, 5]) == 3"
def reverse_each_word(s): return ' '.join(word[::-1] for word in s.split()),"Reverses each word in a string.

This function returns a new string where each word in the input string s is reversed, while keeping the word order intact.",def test_reverse_each_word(): assert reverse_each_word("hello world") == "olleh dlrow" assert reverse_each_word("a b c") == "a b c" assert reverse_each_word("") == ""
def count_lowercase(s): return sum(1 for char in s if char.islower()),"Counts the number of lowercase letters in a string.

This function returns the number of lowercase letters in the string s.",def test_count_lowercase(): assert count_lowercase("Hello") == 4 assert count_lowercase("WORLD") == 0 assert count_lowercase("python") == 6
def sum_of_cubes(lst): return sum(x ** 3 for x in lst),Sums the cubes of all elements in a list.,"def test_sum_of_cubes(): assert sum_of_cubes([1, 2, 3]) == 36 assert sum_of_cubes([0]) == 0 assert sum_of_cubes([-1, 2]) == 7"
def unique_characters(s): return ''.join(sorted(set(s))),"Returns the unique characters from a string.

This function returns a string containing all unique characters from the input string s, in sorted order.",def test_unique_characters(): assert unique_characters("hello") == "ehl" assert unique_characters("abc") == "abc" assert unique_characters("") == ""
def fibonacci_recursive(n): return n if n <= 1 else fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2),"Computes the nth Fibonacci number using recursion.

This function returns the n-th Fibonacci number using a recursive algorithm. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two.",def test_fibonacci_recursive(): assert fibonacci_recursive(0) == 0 assert fibonacci_recursive(1) == 1 assert fibonacci_recursive(5) == 5
def is_perfect_cube(n): return round(n ** (1/3)) ** 3 == n,"Checks if a number is a perfect cube.

This function returns True if n is a perfect cube, meaning its cube root is an integer, and False otherwise.",def test_is_perfect_cube(): assert is_perfect_cube(27) assert not is_perfect_cube(10) assert is_perfect_cube(1)
"def swap_first_and_last(lst): lst[0], lst[-1] = lst[-1], lst[0] return lst","Swaps the first and last elements of a list.

This function swaps the first and last elements of the list lst and returns the modified list.","def test_swap_first_and_last(): assert swap_first_and_last([1, 2, 3]) == [3, 2, 1] assert swap_first_and_last([5]) == [5] assert swap_first_and_last([]) == []"
def count_digits(n): return len(str(abs(n))),"Counts the number of digits in a number.

This function returns the number of digits in the integer n. If n is negative, the sign is ignored.",def test_count_digits(): assert count_digits(123) == 3 assert count_digits(-456) == 3 assert count_digits(0) == 1
def filter_odd_numbers(lst): return [x for x in lst if x % 2 != 0],Filters odd numbers from a list.,"def test_filter_odd_numbers(): assert filter_odd_numbers([1, 2, 3]) == [1, 3] assert filter_odd_numbers([2, 4, 6]) == [] assert filter_odd_numbers([1, 3, 5]) == [1, 3, 5]"
def factorial(n): return 1 if n == 0 else n * factorial(n - 1),"Computes the factorial of a number recursively.

This function returns the factorial of n using a recursive approach. The factorial is the product of all integers from 1 to n.",def test_factorial(): assert factorial(5) == 120 assert factorial(0) == 1 assert factorial(1) == 1
def sum_of_squares(lst): return sum(x ** 2 for x in lst),Sums the squares of elements in a list.,"def test_sum_of_squares(): assert sum_of_squares([1, 2, 3]) == 14 assert sum_of_squares([0, 1, -1]) == 2 assert sum_of_squares([]) == 0"
def capitalize_each_word(s): return ' '.join([word.capitalize() for word in s.split()]),"Capitalizes the first letter of each word in a string.

This function returns a new string where the first letter of each word in the input string s is capitalized.",def test_capitalize_each_word(): assert capitalize_each_word("hello world") == "Hello World" assert capitalize_each_word("is fun") == "Is Fun" assert capitalize_each_word("") == ""
"def find_min_max(lst): return (min(lst), max(lst)) if lst else (None, None)","Returns the minimum and maximum values in a list.

This function returns a tuple containing the minimum and maximum values in the list lst. If the list is empty, it returns (None, None).","def test_find_min_max(): assert find_min_max([1, 2, 3]) == (1, 3) assert find_min_max([5]) == (5, 5) assert find_min_max([]) == (None, None)"
"def gcd(a, b): while b: a, b = b, a % b return a","Computes the greatest common divisor (GCD) of two numbers.

This function returns the greatest common divisor of two integers a and b using the Euclidean algorithm.","def test_gcd(): assert gcd(12, 8) == 4 assert gcd(17, 13) == 1 assert gcd(20, 5) == 5"
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1),"Computes the factorial of a number recursively.

This function returns the factorial of the number n using a recursive approach.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(3) == 6
"def find_second_largest(lst): unique_sorted = sorted(set(lst), reverse=True) return unique_sorted[1] if len(unique_sorted) > 1 else None","Finds the second largest element in a list.

This function returns the second largest unique number in the list lst. If there are fewer than two unique elements, it returns None.","def test_find_second_largest(): assert find_second_largest([1, 2, 3]) == 2 assert find_second_largest([5, 5, 5]) == None assert find_second_largest([1]) == None"
"def merge_two_sorted_lists(lst1, lst2): return sorted(lst1 + lst2)","Merges two sorted lists into one sorted list.

This function merges two pre-sorted lists lst1 and lst2, and returns a new sorted list.","def test_merge_two_sorted_lists(): assert merge_two_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6] assert merge_two_sorted_lists([], [1, 2]) == [1, 2] assert merge_two_sorted_lists([3], []) == [3]"
"def product_of_list(lst): from functools import reduce return reduce(lambda x, y: x * y, lst, 1)",Computes the product of all elements in a list.,"def test_product_of_list(): assert product_of_list([1, 2, 3]) == 6 assert product_of_list([5]) == 5 assert product_of_list([]) == 1"
def count_letters(s): return sum(1 for char in s if char.isalpha()),"Counts the number of letters in a string.

This function returns the total number of alphabetic characters in the string s.",def test_count_letters(): assert count_letters("abc123") == 3 assert count_letters("!@#") == 0 assert count_letters("") == 0
def to_title_case(s): return s.title(),"Converts a string to title case.

This function returns a new string where the first letter of each word in the input string s is capitalized, and the remaining letters are in lowercase.",def test_to_title_case(): assert to_title_case("hello world") == "Hello World" assert to_title_case("IS FUN") == "Is Fun" assert to_title_case("") == ""
"def count_occurrences(lst, value): return lst.count(value)","Counts the occurrences of a specific value in a list.

This function returns the number of vowels (a, e, i, o, u) in the string s.","def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences([1, 1, 1], 1) == 3 assert count_occurrences([], 1) == 0"
def sum_of_odd_numbers(lst): return sum(x for x in lst if x % 2 != 0),Sums all odd numbers in a list.,"def test_sum_of_odd_numbers(): assert sum_of_odd_numbers([1, 2, 3]) == 4 assert sum_of_odd_numbers([2, 4, 6]) == 0 assert sum_of_odd_numbers([1, 3, 5]) == 9"
"def fibonacci_iterative(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return a","Computes the nth Fibonacci number iteratively.

This function returns the sum of all elements in the list lst. If the list is empty, it returns 0.",def test_fibonacci_iterative(): assert fibonacci_iterative(0) == 0 assert fibonacci_iterative(1) == 1 assert fibonacci_iterative(5) == 5
def sum_of_squares_of_digits(n): return sum(int(digit) ** 2 for digit in str(abs(n))),"Sums the squares of digits in a number.

This function returns the sum of the squares of each digit in the number n.",def test_sum_of_squares_of_digits(): assert sum_of_squares_of_digits(123) == 14 assert sum_of_squares_of_digits(0) == 0 assert sum_of_squares_of_digits(-456) == 77
def sum_of_list(lst): return sum(lst),"Sums all the elements of a list.

This function calculates and returns the sum of all elements present in the list lst.","def test_sum_of_list(): assert sum_of_list([1, 2, 3]) == 6 assert sum_of_list([10, -5, 5]) == 10 assert sum_of_list([]) == 0"
def sum_of_cubes(lst): return sum(x ** 3 for x in lst),Computes the sum of cubes of elements in a list.,"def test_sum_of_cubes(): assert sum_of_cubes([1, 2, 3]) == 36 assert sum_of_cubes([0]) == 0 assert sum_of_cubes([-1, 2]) == 7"
def count_consonants(s): return sum(1 for char in s.lower() if char in 'bcdfghjklmnpqrstvwxyz'),Counts consonants in a string.,def test_count_consonants(): assert count_consonants("hello") == 3 assert count_consonants("xyz") == 3 assert count_consonants("aeiou") == 0
def count_spaces(s): return s.count(' '),"Counts spaces in a string.

This function computes and returns the factorial of the number n using a recursive approach. The factorial of n is the product of all integers from 1 to n.",def test_count_spaces(): assert count_spaces("hello world") == 1 assert count_spaces("a b c") == 2 assert count_spaces("") == 0
def reverse_each_word(s): return ' '.join(word[::-1] for word in s.split()),"Reverses each word in a string.

This function returns True if the number n is a perfect square, meaning its square root is an integer, and False otherwise.",def test_reverse_each_word(): assert reverse_each_word("hello world") == "olleh dlrow" assert reverse_each_word("abc") == "cba" assert reverse_each_word("") == ""
def to_uppercase(s): return s.upper(),"Converts a string to uppercase.

This function returns a new string with all characters of the input string s converted to uppercase.",def test_to_uppercase(): assert to_uppercase("hello") == "HELLO" assert to_uppercase("world") == "WORLD" assert to_uppercase("") == ""
"def swap_first_last(lst): lst[0], lst[-1] = lst[-1], lst[0] return lst","Swaps the first and last elements of a list.

This function swaps the first and last elements of the input list lst and returns the modified list.","def test_swap_first_last(): assert swap_first_last([1, 2, 3]) == [3, 2, 1] assert swap_first_last([5]) == [5] assert swap_first_last([]) == []"
"def product_of_list(lst): from functools import reduce return reduce(lambda x, y: x * y, lst, 1)",Computes the product of elements in a list.,"def test_product_of_list(): assert product_of_list([1, 2, 3]) == 6 assert product_of_list([5]) == 5 assert product_of_list([]) == 1"
"def fibonacci(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return a","Computes the nth Fibonacci number.

This function returns the n-th Fibonacci number using an iterative approach.",def test_fibonacci(): assert fibonacci(0) == 0 assert fibonacci(1) == 1 assert fibonacci(5) == 5
def sum_of_odd_numbers(lst): return sum(x for x in lst if x % 2 != 0),Sums odd numbers in a list.,"def test_sum_of_odd_numbers(): assert sum_of_odd_numbers([1, 2, 3, 4]) == 4 assert sum_of_odd_numbers([2, 4, 6]) == 0 assert sum_of_odd_numbers([1, 3, 5]) == 9"
def count_vowels(s): return sum(1 for char in s.lower() if char in 'aeiou'),"Counts vowels in a string.

This function returns the number of vowels in the string s. Vowels include 'a', 'e', 'i', 'o', and 'u'.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("xyz") == 0 assert count_vowels("aeiou") == 5
def list_length(lst): return len(lst),Returns the length of a list.,"def test_list_length(): assert list_length([1, 2, 3]) == 3 assert list_length([]) == 0 assert list_length([5]) == 1"
def sum_of_even_numbers(lst): return sum(x for x in lst if x % 2 == 0),"Sums even numbers in a list.

This function returns the median of the list lst. If the list has an odd length, it returns the middle element. If the list has an even length, it returns the average of the two middle elements.","def test_sum_of_even_numbers(): assert sum_of_even_numbers([1, 2, 3, 4]) == 6 assert sum_of_even_numbers([1, 3, 5]) == 0 assert sum_of_even_numbers([0]) == 0"
def sum_of_list(lst): return sum(lst),"Computes the sum of elements in a list.

This function checks if the number n is prime by verifying that it is not divisible by any number from 2 to the square root of n.","def test_sum_of_list(): assert sum_of_list([1, 2, 3]) == 6 assert sum_of_list([10, -5, 5]) == 10 assert sum_of_list([]) == 0"
def product_of_digits(n): return eval('*'.join(str(n))),"Returns the product of the digits of a number.

This function returns the product of the digits in the number n.",def test_product_of_digits(): assert product_of_digits(123) == 6 assert product_of_digits(0) == 0 assert product_of_digits(456) == 120
def reverse_each_word(s): return ' '.join([word[::-1] for word in s.split()]),"Reverses each word in a string.

This function returns a new string where each word in the input string s is reversed.",def test_reverse_each_word(): assert reverse_each_word("hello world") == "olleh dlrow" assert reverse_each_word("is fun") == "nohtyp si nuf" assert reverse_each_word("") == ""
def nth_prime(n): primes = [] i = 2 while len(primes) < n: if all(i % p != 0 for p in primes): primes.append(i) i += 1 return primes[-1],"Finds the nth prime number.

This function computes the nth prime number by iterating and checking for primality until n primes are found.",def test_nth_prime(): assert nth_prime(1) == 2 assert nth_prime(5) == 11 assert nth_prime(10) == 29
"def merge_two_sorted_lists(lst1, lst2): return sorted(lst1 + lst2)","Merges two sorted lists into one.

This function merges two sorted lists lst1 and lst2 into a single sorted list.","def test_merge_two_sorted_lists(): assert merge_two_sorted_lists([1, 3], [2, 4]) == [1, 2, 3, 4] assert merge_two_sorted_lists([], [1]) == [1] assert merge_two_sorted_lists([5], []) == [5]"
def count_vowels(s): return sum(1 for char in s.lower() if char in 'aeiou'),"Counts the vowels in a string.

This function returns a new string with the words in the input string s in reverse order, but the characters in each word are not altered.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("xyz") == 0 assert count_vowels("aeiou") == 5
def flatten_list(lst): return [item for sublist in lst for item in sublist],"Flattens a list of lists into a single list.

This function returns a new list containing all elements from the sublists of lst.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([[]]) == [] assert flatten_list([[5]]) == [5]"
def sum_of_odd_numbers(lst): return sum(x for x in lst if x % 2 != 0),"Sums the odd numbers in a list.

This function returns a new list that combines all elements from both lists lst1 and lst2.","def test_sum_of_odd_numbers(): assert sum_of_odd_numbers([1, 2, 3]) == 4 assert sum_of_odd_numbers([2, 4]) == 0 assert sum_of_odd_numbers([1, 3, 5]) == 9"
def sum_of_list(lst): return sum(lst),"Sums the elements of a list.

This function returns the greatest common divisor of the numbers a and b using the Euclidean algorithm.","def test_sum_of_list(): assert sum_of_list([1, 2, 3]) == 6 assert sum_of_list([10, -5, 5]) == 10 assert sum_of_list([]) == 0"
"def find_second_largest(lst): unique_sorted_lst = sorted(set(lst), reverse=True) return unique_sorted_lst[1] if len(unique_sorted_lst) > 1 else None","Finds the second largest element in a list.

This function returns the second largest unique element in the list lst. If there are fewer than two unique elements, it returns None.","def test_find_second_largest(): assert find_second_largest([3, 1, 2, 4]) == 3 assert find_second_largest([10, 10, 5]) == 5 assert find_second_largest([1]) == None"
"def count_occurrences_of_char(s, char): return s.count(char)","Counts occurrences of a character in a string.

This function returns True if the two strings s1 and s2 are anagrams, meaning they contain the same characters in the same frequency.","def test_count_occurrences_of_char(): assert count_occurrences_of_char(""hello"", ""l"") == 2 assert count_occurrences_of_char(""abc"", ""d"") == 0 assert count_occurrences_of_char("""", ""a"") == 0"
"def factorial_iterative(n): result = 1 for i in range(1, n + 1): result *= i return result","Computes the factorial of a number iteratively.

This function calculates the factorial of n by multiplying all integers from 1 to n using an iterative approach.",def test_factorial_iterative(): assert factorial_iterative(5) == 120 assert factorial_iterative(0) == 1 assert factorial_iterative(1) == 1
def count_spaces(s): return s.count(' '),"Counts the spaces in a string.

This function returns the number of space characters in the input string s.",def test_count_spaces(): assert count_spaces("hello world") == 1 assert count_spaces("a b c") == 2 assert count_spaces("") == 0
def to_uppercase(s): return s.upper(),"Converts a string to uppercase.

This function returns a new string with all characters in s converted to uppercase.",def test_to_uppercase(): assert to_uppercase("hello") == "HELLO" assert to_uppercase("python") == "PYTHON" assert to_uppercase("") == ""
def reverse_each_word(s): return ' '.join([word[::-1] for word in s.split()]),"Reverses each word in a string.

This function returns a new string where each word in the input string s is reversed, but the word order remains intact.",def test_reverse_each_word(): assert reverse_each_word("hello world") == "olleh dlrow" assert reverse_each_word("abc") == "cba" assert reverse_each_word("") == ""
def swap_case(s): return s.swapcase(),"Swaps the case of characters in a string.

This function returns a new string with uppercase letters converted to lowercase, and vice versa.",def test_swap_case(): assert swap_case("Hello") == "hELLO" assert swap_case("WORLD") == "world" assert swap_case("") == ""
"def merge_two_sorted_lists(lst1, lst2): return sorted(lst1 + lst2)","Merges two sorted lists into one sorted list.

This function merges two sorted lists lst1 and lst2, and returns a single sorted list.","def test_merge_two_sorted_lists(): assert merge_two_sorted_lists([1, 3], [2, 4]) == [1, 2, 3, 4] assert merge_two_sorted_lists([], [1]) == [1] assert merge_two_sorted_lists([5], []) == [5]"
def count_digits_in_string(s): return sum(1 for char in s if char.isdigit()),"Counts digits in a string.

This function returns the number of digits in the input string s.",def test_count_digits_in_string(): assert count_digits_in_string("abc123") == 3 assert count_digits_in_string("hello") == 0 assert count_digits_in_string("") == 0
def product_of_digits(n): return eval('*'.join(str(n))),"Computes the product of digits of a number.

This function returns the product of the digits of the input number n.",def test_product_of_digits(): assert product_of_digits(123) == 6 assert product_of_digits(456) == 120 assert product_of_digits(0) == 0
def count_words(s): return len(s.split()),"Counts words in a string.

This function returns the number of words in the input string s, where words are separated by spaces.",def test_count_words(): assert count_words("hello world") == 2 assert count_words("is fun") == 3 assert count_words("") == 0
"def gcd_recursive(a, b): return a if b == 0 else gcd_recursive(b, a % b)","Computes the greatest common divisor using recursion.

This function returns the greatest common divisor (GCD) of two integers a and b using the recursive Euclidean algorithm.","def test_gcd_recursive(): assert gcd_recursive(12, 8) == 4 assert gcd_recursive(17, 13) == 1 assert gcd_recursive(20, 5) == 5"
def capitalize_words(s): return ' '.join(word.capitalize() for word in s.split()),"Capitalizes each word in a string.

This function returns the smallest value in the input list lst. If the list is empty, it returns None.",def test_capitalize_words(): assert capitalize_words("hello world") == "Hello World" assert capitalize_words("is fun") == "Is Fun" assert capitalize_words("") == ""
def product_of_digits(n): return eval('*'.join(str(n))),"Computes the product of digits in a number.

This function returns the product of the digits in the input number n.",def test_product_of_digits(): assert product_of_digits(123) == 6 assert product_of_digits(456) == 120 assert product_of_digits(0) == 0
"def merge_lists(lst1, lst2): return lst1 + lst2","Merges two lists into one.

This function returns a new list that combines the elements of lst1 and lst2.","def test_merge_lists(): assert merge_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_lists([], [1]) == [1] assert merge_lists([2], []) == [2]"
def count_lowercase(s): return sum(1 for char in s if char.islower()),Counts lowercase letters in a string.,def test_count_lowercase(): assert count_lowercase("Hello") == 4 assert count_lowercase("WORLD") == 0 assert count_lowercase("python") == 6
"def count_vowels_and_consonants(s): vowels = sum(1 for char in s.lower() if char in 'aeiou') consonants = sum(1 for char in s.lower() if char in 'bcdfghjklmnpqrstvwxyz') return vowels, consonants","Counts the vowels and consonants in a string.

This function returns the count of vowels and consonants in the string s.","def test_count_vowels_and_consonants(): assert count_vowels_and_consonants(""hello"") == (2, 3) assert count_vowels_and_consonants(""aeiou"") == (5, 0) assert count_vowels_and_consonants(""bcdf"") == (0, 4)"
def count_non_space_characters(s): return sum(1 for char in s if not char.isspace()),"Counts non-space characters in a string.

This function returns the number of non-space characters in the string s.",def test_count_non_space_characters(): assert count_non_space_characters("hello world") == 10 assert count_non_space_characters("a b c") == 3 assert count_non_space_characters("") == 0
"def sum_of_even_and_odd(lst): even = sum(x for x in lst if x % 2 == 0) odd = sum(x for x in lst if x % 2 != 0) return even, odd","Sums the even and odd numbers in a list.

This function returns two sums: the sum of all even numbers and the sum of all odd numbers in the list lst.","def test_sum_of_even_and_odd(): assert sum_of_even_and_odd([1, 2, 3, 4]) == (6, 4) assert sum_of_even_and_odd([2, 4, 6]) == (12, 0) assert sum_of_even_and_odd([1, 3, 5]) == (0, 9)"
def remove_duplicates(lst): return list(set(lst)),"Removes duplicates from a list.

This function returns a new list containing the unique elements from the input list lst.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates([5, 5, 5]) == [5] assert remove_duplicates([]) == []"
def filter_palindromes(lst): return [word for word in lst if word == word[::-1]],"Filters out palindromes from a list of strings.

This function returns a new list containing only the strings from lst that are palindromes.","def test_filter_palindromes(): assert filter_palindromes([""racecar"", ""hello"", ""madam""]) == [""racecar"", ""madam""] assert filter_palindromes([""abc"", ""def""]) == [] assert filter_palindromes([]) == []"
def list_average(lst): return sum(lst) / len(lst) if lst else 0,"Computes the average of a list of numbers.

This function returns the average of the numbers in the list lst. If the list is empty, it returns 0.","def test_list_average(): assert list_average([1, 2, 3]) == 2 assert list_average([5, 5, 5]) == 5 assert list_average([]) == 0"
def is_pangram(s): return set('abcdefghijklmnopqrstuvwxyz').issubset(set(s.lower())),"Checks if a string is a pangram.

This function returns True if the string s contains every letter of the alphabet at least once, and False otherwise.",def test_is_pangram(): assert is_pangram("The quick brown fox jumps over the lazy dog") assert not is_pangram("hello world") assert is_pangram("") == False
"def count_words_with_length(lst, n): return sum(1 for word in lst if len(word) == n)","Counts words of a specific length in a list.

This function returns the number of words in the list lst that have exactly n characters.","def test_count_words_with_length(): assert count_words_with_length([""hello"", ""world"", ""hi""], 5) == 2 assert count_words_with_length([""a"", ""bb"", ""ccc""], 2) == 1 assert count_words_with_length([], 3) == 0"
def sum_of_positive_numbers(lst): return sum(x for x in lst if x > 0),"Sums the positive numbers in a list.

This function returns the sum of all positive numbers in the list lst.","def test_sum_of_positive_numbers(): assert sum_of_positive_numbers([1, -2, 3, 4]) == 8 assert sum_of_positive_numbers([-1, -3]) == 0 assert sum_of_positive_numbers([10]) == 10"
def reverse_string_list(lst): return [s[::-1] for s in lst],"Reverses each string in a list.

This function returns a new list where each string in the input list lst is reversed.","def test_reverse_string_list(): assert reverse_string_list([""abc"", ""def""]) == [""cba"", ""fed""] assert reverse_string_list([]) == [] assert reverse_string_list([""a""]) == [""a""]"
"def is_prime_recursive(n, i=2): if n <= 2: return n == 2 if n % i == 0: return False if i * i > n: return True return is_prime_recursive(n, i + 1)","Recursively checks if a number is prime.

This function recursively checks if n is a prime number by testing divisibility from 2 up to the square root of n.",def test_is_prime_recursive(): assert is_prime_recursive(7) assert not is_prime_recursive(4) assert not is_prime_recursive(1)
"def are_anagrams(s1, s2): return sorted(s1) == sorted(s2)","Checks if two strings are anagrams.

This function returns True if the strings s1 and s2 are anagrams, meaning they contain the same characters in the same quantities, and False otherwise.","def test_are_anagrams(): assert are_anagrams(""listen"", ""silent"") assert not are_anagrams(""hello"", ""world"") assert are_anagrams(""evil"", ""vile"")"
"def merge_dicts(dict1, dict2): result = dict1.copy() result.update(dict2) return result","Merges two dictionaries.

This function merges two dictionaries, dict1 and dict2, and returns the result. If both dictionaries have the same key, the value from dict2 will overwrite the one from dict1.","def test_merge_dicts(): assert merge_dicts({""a"": 1}, {""b"": 2}) == {""a"": 1, ""b"": 2} assert merge_dicts({""x"": 10}, {""x"": 20}) == {""x"": 20} assert merge_dicts({}, {}) == {}"
"def multiply_elements_by_scalar(lst, scalar): return [x * scalar for x in lst]","Multiplies each element in a list by a scalar.

This function returns a new list where each element in lst is multiplied by the value scalar.","def test_multiply_elements_by_scalar(): assert multiply_elements_by_scalar([1, 2, 3], 2) == [2, 4, 6] assert multiply_elements_by_scalar([], 5) == [] assert multiply_elements_by_scalar([10], 3) == [30]"
def sum_of_squares_of_digits(n): return sum(int(digit) ** 2 for digit in str(abs(n))),"Sums the squares of the digits of a number.

This function concatenates the string representation of each element in the list lst and returns the resulting string.",def test_sum_of_squares_of_digits(): assert sum_of_squares_of_digits(123) == 14 assert sum_of_squares_of_digits(0) == 0 assert sum_of_squares_of_digits(-456) == 77
"def most_frequent_element(lst): return max(set(lst), key=lst.count)","Finds the most frequent element in a list.

This function returns the element that appears the most frequently in the list lst.","def test_most_frequent_element(): assert most_frequent_element([1, 2, 2, 3]) == 2 assert most_frequent_element([5, 5, 5, 2]) == 5 assert most_frequent_element([1, 1, 2, 2]) in [1, 2]"
"def is_perfect_number(n): return n > 1 and sum(i for i in range(1, n) if n % i == 0) == n","Checks if a number is a perfect number.

This function returns True if n is a perfect number, meaning the sum of its divisors (excluding itself) is equal to n.",def test_is_perfect_number(): assert is_perfect_number(6) assert not is_perfect_number(10) assert is_perfect_number(28)
def unique_words(s): return list(set(s.split())),"Returns the unique words from a string.

This function returns a list of unique words from the input string s, removing any duplicates.","def test_unique_words(): assert unique_words(""hello world hello"") == [""hello"", ""world""] assert unique_words(""is fun"") == [""python"", ""is"", ""fun""] assert unique_words("""") == []"
"def get_divisors(n): return [i for i in range(1, n + 1) if n % i == 0]","Returns the divisors of a number.

This function returns a list of all divisors of the number n.","def test_get_divisors(): assert get_divisors(6) == [1, 2, 3, 6] assert get_divisors(13) == [1, 13] assert get_divisors(1) == [1]"
def sum_of_negative_numbers(lst): return sum(x for x in lst if x < 0),"Sums the negative numbers in a list.

This function returns the sum of all negative numbers in the list lst.","def test_sum_of_negative_numbers(): assert sum_of_negative_numbers([1, -2, -3, 4]) == -5 assert sum_of_negative_numbers([1, 2, 3]) == 0 assert sum_of_negative_numbers([-10, -5]) == -15"
"def longest_word(lst): return max(lst, key=len) if lst else """"","Finds the longest word in a list.

This function returns the longest word from the input list lst. If the list is empty, it returns an empty string.","def test_longest_word(): assert longest_word([""cat"", ""elephant"", ""dog""]) == ""elephant"" assert longest_word([]) == """" assert longest_word([""one""]) == ""one"""
"def count_vowels_consonants(s): vowels = sum(1 for char in s.lower() if char in 'aeiou') consonants = sum(1 for char in s.lower() if char.isalpha() and char not in 'aeiou') return vowels, consonants","Counts vowels and consonants in a string.

This function returns the number of vowels and consonants in the string s.","def test_count_vowels_consonants(): assert count_vowels_consonants(""hello"") == (2, 3) assert count_vowels_consonants(""aeiou"") == (5, 0) assert count_vowels_consonants(""xyz"") == (0, 3)"
"def capitalize_alternate_words(s): return ' '.join([word.capitalize() if i % 2 == 0 else word for i, word in enumerate(s.split())])","Capitalizes every alternate word in a string.

This function returns a new string where every alternate word in the input string s is capitalized.",def test_capitalize_alternate_words(): assert capitalize_alternate_words("hello world this is fun") == "Hello world This is Fun" assert capitalize_alternate_words("a b c d") == "A b C d" assert capitalize_alternate_words("") == ""
def remove_vowels(s): return ''.join([char for char in s if char.lower() not in 'aeiou']),"Removes vowels from a string.

This function returns a new string where all vowels are removed from the input string s.",def test_remove_vowels(): assert remove_vowels("hello") == "hll" assert remove_vowels("aeiou") == "" assert remove_vowels("xyz") == "xyz"
def fibonacci_recursive(n): return n if n <= 1 else fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2),"Computes the nth Fibonacci number recursively.

This function returns the nth Fibonacci number using recursion. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two.",def test_fibonacci_recursive(): assert fibonacci_recursive(0) == 0 assert fibonacci_recursive(1) == 1 assert fibonacci_recursive(5) == 5
"def flatten_nested_list(lst): result = [] for sublist in lst: if isinstance(sublist, list): result.extend(flatten_nested_list(sublist)) else: result.append(sublist) return result","Flattens a nested list.

This function returns a new list where all elements from the nested lists within the input list lst are flattened into a single list.","def test_flatten_nested_list(): assert flatten_nested_list([1, [2, 3], [4, [5]]]) == [1, 2, 3, 4, 5] assert flatten_nested_list([[1], [2]]) == [1, 2] assert flatten_nested_list([]) == []"
"def common_elements(lst1, lst2): return list(set(lst1).intersection(set(lst2)))",Finds common elements between two lists.,"def test_common_elements(): assert common_elements([1, 2, 3], [2, 3, 4]) == [2, 3] assert common_elements([5], [6]) == [] assert common_elements([], [1]) == []"
def sum_of_odd_numbers(lst): return sum(x for x in lst if x % 2 != 0),"Sums the odd numbers in a list.

This function returns the sum of all odd numbers in the input list lst.","def test_sum_of_odd_numbers(): assert sum_of_odd_numbers([1, 2, 3]) == 4 assert sum_of_odd_numbers([2, 4, 6]) == 0 assert sum_of_odd_numbers([1, 3, 5]) == 9"
"def nth_fibonacci_iterative(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return a",Computes the nth Fibonacci number iteratively.,def test_nth_fibonacci_iterative(): assert nth_fibonacci_iterative(0) == 0 assert nth_fibonacci_iterative(1) == 1 assert nth_fibonacci_iterative(5) == 5
def first_n_prime_numbers(n): primes = [] i = 2 while len(primes) < n: if all(i % p != 0 for p in primes): primes.append(i) i += 1 return primes,"Returns the first n prime numbers.

This function computes and returns a list of the first n prime numbers.","def test_first_n_prime_numbers(): assert first_n_prime_numbers(3) == [2, 3, 5] assert first_n_prime_numbers(1) == [2] assert first_n_prime_numbers(0) == []"
def capitalize_words(s): return ' '.join([word.capitalize() for word in s.split()]),"Capitalizes each word in a string.

This function returns a new string where each word in the input string s is capitalized.",def test_capitalize_words(): assert capitalize_words("hello world") == "Hello World" assert capitalize_words("is fun") == "Is Fun" assert capitalize_words("") == ""
def remove_duplicates(lst): return list(set(lst)),"Removes duplicates from a list.

This function returns a new list containing only the unique elements from the input list lst.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates([5, 5]) == [5] assert remove_duplicates([]) == []"
def count_consonants(s): return sum(1 for char in s.lower() if char in 'bcdfghjklmnpqrstvwxyz'),"Counts the consonants in a string.

This function returns the number of consonants in the input string s. Consonants include all letters that are not vowels.",def test_count_consonants(): assert count_consonants("hello") == 3 assert count_consonants("aeiou") == 0 assert count_consonants("xyz") == 3
def count_words(s): return len(s.split()),Counts the words in a string.,def test_count_words(): assert count_words("hello world") == 2 assert count_words("is fun") == 3 assert count_words("") == 0
"def count_vowels_consonants(s): vowels = sum(1 for char in s.lower() if char in 'aeiou') consonants = sum(1 for char in s.lower() if char.isalpha() and char not in 'aeiou') return vowels, consonants","Counts the vowels and consonants in a string.

This function returns a new string where all uppercase letters are converted to lowercase and vice versa.","def test_count_vowels_consonants(): assert count_vowels_consonants(""hello"") == (2, 3) assert count_vowels_consonants(""aeiou"") == (5, 0) assert count_vowels_consonants(""xyz"") == (0, 3)"
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1),"Computes the factorial of a number recursively.

This function returns the factorial of the number n using recursion. The factorial of n is the product of all integers from 1 to n.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(1) == 1
"def list_intersection(lst1, lst2): return list(set(lst1) & set(lst2))","Finds the intersection of two lists.

This function merges two dictionaries dict1 and dict2, and returns the result. If both dictionaries have the same key, the value from dict2 will overwrite the one from dict1.","def test_list_intersection(): assert list_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert list_intersection([5], [6]) == [] assert list_intersection([], [1]) == []"
def nth_fibonacci_recursive(n): return n if n <= 1 else nth_fibonacci_recursive(n - 1) + nth_fibonacci_recursive(n - 2),"Computes the nth Fibonacci number recursively.

This function returns a new list with the elements in the input list lst in reverse order.",def test_nth_fibonacci_recursive(): assert nth_fibonacci_recursive(0) == 0 assert nth_fibonacci_recursive(1) == 1 assert nth_fibonacci_recursive(5) == 5
def sum_of_squares_of_digits(n): return sum(int(digit) ** 2 for digit in str(abs(n))),"Sums the squares of digits of a number.

This function returns True if the number n reads the same forwards and backwards.",def test_sum_of_squares_of_digits(): assert sum_of_squares_of_digits(123) == 14 assert sum_of_squares_of_digits(0) == 0 assert sum_of_squares_of_digits(-456) == 77
"def gcd_recursive(a, b): return a if b == 0 else gcd_recursive(b, a % b)","Computes the greatest common divisor (GCD) using recursion.

This function returns the greatest common divisor of two integers a and b using recursion and the Euclidean algorithm.","def test_gcd_recursive(): assert gcd_recursive(12, 8) == 4 assert gcd_recursive(17, 13) == 1 assert gcd_recursive(20, 5) == 5"
def product_of_digits(n): return eval('*'.join(str(n))),"Computes the product of the digits of a number.

This function returns the product of all the digits in the input number n.",def test_product_of_digits(): assert product_of_digits(123) == 6 assert product_of_digits(456) == 120 assert product_of_digits(0) == 0
def first_n_primes(n): primes = [] i = 2 while len(primes) < n: if all(i % p != 0 for p in primes): primes.append(i) i += 1 return primes,"Returns the first n prime numbers.

This function returns a list containing the first n prime numbers by iterating and checking for primality.","def test_first_n_primes(): assert first_n_primes(3) == [2, 3, 5] assert first_n_primes(1) == [2] assert first_n_primes(0) == []"
def reverse_each_character(lst): return [char[::-1] for char in lst],"Reverses each string in a list.

This function returns a new list where each string in the input list lst is reversed character by character.","def test_reverse_each_character(): assert reverse_each_character([""hello"", ""world""]) == [""olleh"", ""dlrow""] assert reverse_each_character([]) == [] assert reverse_each_character([""abc""]) == [""cba""]"
def sum_of_multiples_of_three(lst): return sum(x for x in lst if x % 3 == 0),"Sums the multiples of three in a list.

This function returns the sum of all elements in the list lst that are divisible by 3.","def test_sum_of_multiples_of_three(): assert sum_of_multiples_of_three([3, 6, 9]) == 18 assert sum_of_multiples_of_three([1, 2, 4]) == 0 assert sum_of_multiples_of_three([0]) == 0"
def nth_triangular_number(n): return n * (n + 1) // 2,"Computes the nth triangular number.

This function returns the n-th triangular number, which is the sum of the first n natural numbers.",def test_nth_triangular_number(): assert nth_triangular_number(3) == 6 assert nth_triangular_number(0) == 0 assert nth_triangular_number(5) == 15
"def is_perfect_number(n): return n > 1 and sum(i for i in range(1, n) if n % i == 0) == n","Checks if a number is a perfect number.

This function returns True if the sum of the divisors of the number n (excluding n itself) equals n, indicating that n is a perfect number.",def test_is_perfect_number(): assert is_perfect_number(6) assert is_perfect_number(28) assert not is_perfect_number(10)
def nth_pentagonal_number(n): return n * (3 * n - 1) // 2,"Computes the nth pentagonal number.

This function returns the n-th pentagonal number, which is part of a figurate number sequence where each term represents a pentagon.",def test_nth_pentagonal_number(): assert nth_pentagonal_number(3) == 12 assert nth_pentagonal_number(1) == 1 assert nth_pentagonal_number(5) == 35
def sum_of_square_roots(lst): return sum(x ** 0.5 for x in lst if x >= 0),"Sums the square roots of non-negative numbers in a list.

This function returns the sum of the square roots of all non-negative numbers in the input list lst.","def test_sum_of_square_roots(): assert sum_of_square_roots([1, 4, 9]) == 6.0 assert sum_of_square_roots([-1, -2]) == 0.0 assert sum_of_square_roots([0, 16]) == 4.0"
def sum_of_cubed_digits(n): return sum(int(digit) ** 3 for digit in str(abs(n))),"Sums the cubes of the digits of a number.

This function returns the sum of the cubes of each digit in the input number n. If n is negative, the sign is ignored.",def test_sum_of_cubed_digits(): assert sum_of_cubed_digits(123) == 36 assert sum_of_cubed_digits(-456) == 189 assert sum_of_cubed_digits(0) == 0
def sum_of_squares_of_even_numbers(lst): return sum(x ** 2 for x in lst if x % 2 == 0),"Sums the squares of even numbers in a list.

This function returns the sum of the squares of all even numbers in the input list lst.","def test_sum_of_squares_of_even_numbers(): assert sum_of_squares_of_even_numbers([2, 4, 6]) == 56 assert sum_of_squares_of_even_numbers([1, 3, 5]) == 0 assert sum_of_squares_of_even_numbers([0]) == 0"
def nth_hexagonal_number(n): return n * (2 * n - 1),"Computes the nth hexagonal number.

This function returns the n-th hexagonal number, which is part of a figurate number sequence where each term represents a hexagon.",def test_nth_hexagonal_number(): assert nth_hexagonal_number(3) == 15 assert nth_hexagonal_number(1) == 1 assert nth_hexagonal_number(5) == 45
"def is_deficient_number(n): return sum(i for i in range(1, n) if n % i == 0) < n","Checks if a number is deficient.

This function returns True if the sum of the divisors of the number n (excluding n itself) is less than n, indicating that n is a deficient number.",def test_is_deficient_number(): assert is_deficient_number(8) assert not is_deficient_number(6) assert is_deficient_number(10)
def nth_decagonal_number(n): return n * (4 * n - 3),"Computes the nth decagonal number.

This function returns the n-th decagonal number, which is part of a figurate number sequence where each term represents a decagon.",def test_nth_decagonal_number(): assert nth_decagonal_number(3) == 21 assert nth_decagonal_number(1) == 1 assert nth_decagonal_number(5) == 65
def harmonic_mean(lst): from statistics import harmonic_mean return harmonic_mean(lst) if lst else 0,"Computes the harmonic mean of a list of numbers.

This function returns the harmonic mean of the input list lst. If the list is empty, it returns 0.","def test_harmonic_mean(): assert harmonic_mean([1, 2, 3]) == 1.6363636363636365 assert harmonic_mean([5, 10]) == 6.666666666666667 assert harmonic_mean([]) == 0"
def nth_centered_triangular_number(n): return (3 * n ** 2 + 3 * n + 2) // 2,"Computes the nth centered triangular number.

This function returns the n-th centered triangular number, which is a number in the sequence of centered polygons based on a triangle.",def test_nth_centered_triangular_number(): assert nth_centered_triangular_number(3) == 19 assert nth_centered_triangular_number(1) == 4 assert nth_centered_triangular_number(5) == 46
"def is_abundant_number(n): return sum(i for i in range(1, n) if n % i == 0) > n","Checks if a number is abundant.

This function returns True if the sum of the divisors of the number n (excluding n itself) is greater than n, indicating that n is an abundant number.",def test_is_abundant_number(): assert is_abundant_number(12) assert not is_abundant_number(8) assert is_abundant_number(18)
def nth_centered_square_number(n): return n ** 2 + (n - 1) ** 2,"Computes the nth centered square number.

This function returns the n-th centered square number, which is part of a sequence of numbers based on a square.",def test_nth_centered_square_number(): assert nth_centered_square_number(3) == 13 assert nth_centered_square_number(1) == 1 assert nth_centered_square_number(5) == 41
def geometric_mean(lst): from statistics import geometric_mean return geometric_mean(lst) if lst else 1,"Computes the geometric mean of a list of numbers.

This function returns the geometric mean of the input list lst. If the list is empty, it returns 1.","def test_geometric_mean(): assert geometric_mean([1, 2, 3]) == 1.8171205928321397 assert geometric_mean([5, 10]) == 7.0710678118654755 assert geometric_mean([]) == 1"
def nth_centered_pentagonal_number(n): return (5 * n ** 2 + 5 * n + 2) // 2,"Computes the nth centered pentagonal number.

This function returns the n-th centered pentagonal number, which is a number in the sequence of centered polygons based on a pentagon.",def test_nth_centered_pentagonal_number(): assert nth_centered_pentagonal_number(3) == 31 assert nth_centered_pentagonal_number(1) == 6 assert nth_centered_pentagonal_number(5) == 76
def sum_of_reciprocals(lst): return sum(1 / x for x in lst if x != 0),"Sums the reciprocals of non-zero numbers in a list.

This function returns the sum of the reciprocals of all non-zero numbers in the input list lst.","def test_sum_of_reciprocals(): assert sum_of_reciprocals([1, 2, 3]) == 1.8333333333333333 assert sum_of_reciprocals([5, 10]) == 0.3 assert sum_of_reciprocals([0]) == 0"
def nth_centered_hexagonal_number(n): return (6 * n ** 2 + 6 * n + 1) // 2,"Computes the nth centered hexagonal number.

This function returns the n-th centered hexagonal number, which is a number in the sequence of centered polygons based on a hexagon.",def test_nth_centered_hexagonal_number(): assert nth_centered_hexagonal_number(3) == 37 assert nth_centered_hexagonal_number(1) == 7 assert nth_centered_hexagonal_number(5) == 91
def median(lst): from statistics import median return median(lst) if lst else 0,"Computes the median of a list of numbers.

This function returns the median of the input list lst. If the list is empty, it returns 0.","def test_median(): assert median([1, 2, 3]) == 2 assert median([5, 10]) == 7.5 assert median([]) == 0"
def nth_centered_heptagonal_number(n): return (7 * n ** 2 + 7 * n + 2) // 2,"Computes the nth centered heptagonal number.

This function returns the n-th centered heptagonal number, which is a number in the sequence of centered polygons based on a heptagon.",def test_nth_centered_heptagonal_number(): assert nth_centered_heptagonal_number(3) == 49 assert nth_centered_heptagonal_number(1) == 8 assert nth_centered_heptagonal_number(5) == 121
def nth_centered_octagonal_number(n): return (8 * n ** 2 + 8 * n + 1) // 2,"Computes the nth centered octagonal number.

This function returns the n-th centered octagonal number, which is a number in the sequence of centered polygons based on an octagon.",def test_nth_centered_octagonal_number(): assert nth_centered_octagonal_number(3) == 61 assert nth_centered_octagonal_number(1) == 9 assert nth_centered_octagonal_number(5) == 151
def sum_of_even_digits(n): return sum(int(digit) for digit in str(abs(n)) if int(digit) % 2 == 0),"Sums the even digits of a number.

This function returns the sum of the even digits in the input number n. If n is negative, the sign is ignored.",def test_sum_of_even_digits(): assert sum_of_even_digits(123456) == 12 assert sum_of_even_digits(789) == 8 assert sum_of_even_digits(-246) == 12
def nth_centered_nonagonal_number(n): return (9 * n ** 2 + 9 * n + 2) // 2,"Computes the nth centered nonagonal number.

This function returns the n-th centered nonagonal number, which is a number in the sequence of centered polygons based on a nonagon.",def test_nth_centered_nonagonal_number(): assert nth_centered_nonagonal_number(3) == 79 assert nth_centered_nonagonal_number(1) == 10 assert nth_centered_nonagonal_number(5) == 196
def is_happy_number(n): seen = set() while n != 1 and n not in seen: seen.add(n) n = sum(int(digit) ** 2 for digit in str(n)) return n == 1,"Checks if a number is a happy number.

This function returns True if the number n is a happy number, meaning the repeated sum of the squares of its digits eventually equals 1.",def test_is_happy_number(): assert is_happy_number(19) assert not is_happy_number(4) assert is_happy_number(1)
def nth_centered_decagonal_number(n): return (10 * n ** 2 + 10 * n + 1) // 2,"Computes the nth centered decagonal number.

This function returns the n-th centered decagonal number, which is a number in the sequence of centered polygons based on a decagon.",def test_nth_centered_decagonal_number(): assert nth_centered_decagonal_number(3) == 97 assert nth_centered_decagonal_number(1) == 11 assert nth_centered_decagonal_number(5) == 241
def nth_square_pyramidal_number(n): return (n * (n + 1) * (2 * n + 1)) // 6,"Computes the nth square pyramidal number.

This function returns the n-th square pyramidal number, which is the sum of the squares of the first n natural numbers.",def test_nth_square_pyramidal_number(): assert nth_square_pyramidal_number(3) == 14 assert nth_square_pyramidal_number(1) == 1 assert nth_square_pyramidal_number(5) == 55
def nth_oblong_number(n): return n * (n + 1),"Computes the nth oblong number.

This function returns the n-th oblong number, which is the product of n and n + 1.",def test_nth_oblong_number(): assert nth_oblong_number(3) == 12 assert nth_oblong_number(1) == 2 assert nth_oblong_number(5) == 30
def nth_tetrahedral_number(n): return (n * (n + 1) * (n + 2)) // 6,"Computes the nth tetrahedral number.

This function returns the n-th tetrahedral number, which represents a pyramid with a triangular base.",def test_nth_tetrahedral_number(): assert nth_tetrahedral_number(3) == 10 assert nth_tetrahedral_number(1) == 1 assert nth_tetrahedral_number(5) == 35
def nth_fifth_pentagonal_number(n): return (5 * n ** 2 - 5 * n + 2) // 2,"Computes the nth fifth pentagonal number.

This function returns the n-th fifth pentagonal number, which is part of a figurate number sequence based on pentagons.",def test_nth_fifth_pentagonal_number(): assert nth_fifth_pentagonal_number(3) == 21 assert nth_fifth_pentagonal_number(1) == 2 assert nth_fifth_pentagonal_number(5) == 65
def nth_cube_number(n): return n ** 3,"Computes the cube of a number.

This function returns the cube of the input number n.",def test_nth_cube_number(): assert nth_cube_number(3) == 27 assert nth_cube_number(1) == 1 assert nth_cube_number(5) == 125
def is_prime_palindrome(n): return str(n) == str(n)[::-1] and is_prime(n),"Checks if a number is a prime palindrome.

This function returns True if the number n is both a prime number and a palindrome, meaning it reads the same forwards and backwards.",def test_is_prime_palindrome(): assert is_prime_palindrome(131) assert not is_prime_palindrome(121) assert not is_prime_palindrome(10)
def nth_pyramidal_number(n): return (n * (n + 1) * (n + 2)) // 6,"Computes the nth pyramidal number.

This function returns the n-th pyramidal number, which represents the sum of consecutive squares.",def test_nth_pyramidal_number(): assert nth_pyramidal_number(3) == 10 assert nth_pyramidal_number(1) == 1 assert nth_pyramidal_number(5) == 35
"def nth_harmonic_number(n): return sum(1 / i for i in range(1, n + 1))","Computes the nth harmonic number.

This function returns the n-th harmonic number, which is the sum of the reciprocals of the first n natural numbers.",def test_nth_harmonic_number(): assert nth_harmonic_number(3) == 1.8333333333333333 assert nth_harmonic_number(1) == 1 assert nth_harmonic_number(5) == 2.283333333333333
def is_palindromic_prime(n): from sympy import isprime return str(n) == str(n)[::-1] and isprime(n),"Checks if a number is a palindromic prime.

This function returns True if the number n is both a palindrome and a prime number, meaning it reads the same forwards and backwards.",def test_is_palindromic_prime(): assert is_palindromic_prime(131) assert not is_palindromic_prime(121) assert is_palindromic_prime(7)
"def nth_polygonal_number(s, n): return ((s - 2) * n ** 2 - (s - 4) * n) // 2","Computes the nth s-gonal number.

This function returns the n-th s-gonal number, which is a generalized polygonal number for a polygon with s sides.","def test_nth_polygonal_number(): assert nth_polygonal_number(5, 3) == 12 assert nth_polygonal_number(3, 4) == 10 assert nth_polygonal_number(6, 2) == 5"
def sum_of_fibonacci_digits(n): return sum(int(digit) for digit in str(nth_fibonacci(n))),"Sums the digits of the nth Fibonacci number.

This function returns the sum of the digits of the n-th Fibonacci number.",def test_sum_of_fibonacci_digits(): assert sum_of_fibonacci_digits(5) == 5 assert sum_of_fibonacci_digits(10) == 4 assert sum_of_fibonacci_digits(12) == 7
def sum_of_even_numbers(lst): return sum(x for x in lst if x % 2 == 0),Sums the even numbers in a list.,"def test_sum_of_even_numbers(): assert sum_of_even_numbers([1, 2, 3, 4]) == 6 assert sum_of_even_numbers([1, 3, 5]) == 0 assert sum_of_even_numbers([2, 4, 6]) == 12"
def factorial(n): return 1 if n == 0 else n * factorial(n - 1),"Computes the factorial of a number recursively.

This function returns the factorial of the input number n. Factorial is the product of all integers from 1 to n.",def test_factorial(): assert factorial(5) == 120 assert factorial(0) == 1 assert factorial(3) == 6
def count_even_numbers(lst): return sum(1 for x in lst if x % 2 == 0),"Counts even numbers in a list.

This function returns the number of even numbers in the input list lst.","def test_count_even_numbers(): assert count_even_numbers([1, 2, 3, 4]) == 2 assert count_even_numbers([1, 3, 5]) == 0 assert count_even_numbers([2, 4, 6]) == 3"
def sum_of_squares_of_digits(n): return sum(int(digit) ** 2 for digit in str(abs(n))),"Sums the squares of digits of a number.

This function returns the sum of the squares of each digit in the input number n. If n is negative, the sign is ignored.",def test_sum_of_squares_of_digits(): assert sum_of_squares_of_digits(123) == 14 assert sum_of_squares_of_digits(-456) == 77 assert sum_of_squares_of_digits(0) == 0
def is_palindrome_recursive(s): if len(s) <= 1: return True if s[0] != s[-1]: return False return is_palindrome_recursive(s[1:-1]),"Recursively checks if a string is a palindrome.

This function returns True if the input string s reads the same forwards and backwards using recursion.",def test_is_palindrome_recursive(): assert is_palindrome_recursive("racecar") assert not is_palindrome_recursive("hello") assert is_palindrome_recursive("a")
"def swap_first_last(lst): if len(lst) > 1: lst[0], lst[-1] = lst[-1], lst[0] return lst","Swaps the first and last elements of a list.

This function swaps the first and last elements of the input list lst. If the list has fewer than two elements, no swapping occurs.","def test_swap_first_last(): assert swap_first_last([1, 2, 3]) == [3, 2, 1] assert swap_first_last([5]) == [5] assert swap_first_last([]) == []"
"def gcd_iterative(a, b): while b: a, b = b, a % b return a","Computes the greatest common divisor iteratively.

This function returns the greatest common divisor of the integers a and b using the Euclidean algorithm in an iterative manner.","def test_gcd_iterative(): assert gcd_iterative(12, 8) == 4 assert gcd_iterative(17, 13) == 1 assert gcd_iterative(20, 5) == 5"
"def remove_whitespace(s): return s.replace(' ', '')","Removes all whitespace from a string.

This function returns a new string where all spaces are removed from the input string s.",def test_remove_whitespace(): assert remove_whitespace("hello world") == "helloworld" assert remove_whitespace(" a b c ") == "abc" assert remove_whitespace("") == ""
def is_armstrong_number(n): num_digits = len(str(n)) return n == sum(int(digit) ** num_digits for digit in str(n)),"Checks if a number is an Armstrong number.

This function returns True if the number n is an Armstrong number, meaning the sum of its digits raised to the power of the number of digits equals the original number.",def test_is_armstrong_number(): assert is_armstrong_number(153) assert not is_armstrong_number(123) assert is_armstrong_number(9474)
def count_palindromes(lst): return sum(1 for word in lst if word == word[::-1]),"Counts palindromes in a list of strings.

This function returns the number of palindromic words in the input list lst, where a palindrome reads the same forwards and backwards.","def test_count_palindromes(): assert count_palindromes([""madam"", ""hello"", ""racecar""]) == 2 assert count_palindromes([""abc"", ""xyz""]) == 0 assert count_palindromes([]) == 0"
def nth_factorial(n): return 1 if n == 0 else n * nth_factorial(n - 1),"Computes the factorial of a number recursively.

This function returns the factorial of the input number n using recursion.",def test_nth_factorial(): assert nth_factorial(5) == 120 assert nth_factorial(0) == 1 assert nth_factorial(3) == 6
def nth_pyramid_number(n): return (n * (n + 1) * (2 * n + 1)) // 6,Computes the nth square pyramidal number.,def test_nth_pyramid_number(): assert nth_pyramid_number(3) == 14 assert nth_pyramid_number(1) == 1 assert nth_pyramid_number(5) == 55
def nth_pentatope_number(n): return (n * (n + 1) * (n + 2) * (n + 3)) // 24,"Computes the nth pentatope number.

This function returns the n-th pentatope number, which represents a number in a four-dimensional figurate sequence.",def test_nth_pentatope_number(): assert nth_pentatope_number(3) == 10 assert nth_pentatope_number(1) == 1 assert nth_pentatope_number(5) == 35
def factorial(n): return 1 if n == 0 else n * factorial(n - 1),"Computes the factorial of a number using recursion.

This function returns the sum of squares of all elements in the input list lst.",def test_factorial(): assert factorial(5) == 120 assert factorial(0) == 1 assert factorial(3) == 6
def sum_of_digits_is_prime(n): from sympy import isprime return isprime(sum(int(digit) for digit in str(abs(n)))),"Checks if the sum of the digits of a number is prime.

This function returns True if the sum of the digits of the input number n is a prime number, and False otherwise.",def test_sum_of_digits_is_prime(): assert sum_of_digits_is_prime(123) assert not sum_of_digits_is_prime(456) assert sum_of_digits_is_prime(37)
def nth_pyramidal_number(n): return (n * (n + 1) * (2 * n + 1)) // 6,Computes the nth square pyramidal number.,def test_nth_pyramidal_number(): assert nth_pyramidal_number(3) == 14 assert nth_pyramidal_number(1) == 1 assert nth_pyramidal_number(5) == 55
"def list_intersection(lst1, lst2): return list(set(lst1).intersection(set(lst2)))",Finds common elements between two lists.,"def test_list_intersection(): assert list_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert list_intersection([5], [6]) == [] assert list_intersection([], [1]) == []"
"def is_deficient(n): return sum(i for i in range(1, n) if n % i == 0) < n",Checks if a number is deficient.,def test_is_deficient(): assert is_deficient(8) assert not is_deficient(6) assert is_deficient(10)
def is_armstrong_number(n): return n == sum(int(digit) ** len(str(n)) for digit in str(n)),"Checks if a number is an Armstrong number.

This function returns True if the sum of the digits of n, each raised to the power of the number of digits, equals n.",def test_is_armstrong_number(): assert is_armstrong_number(153) assert not is_armstrong_number(123) assert is_armstrong_number(9474)
"def is_perfect_number(n): return sum(i for i in range(1, n) if n % i == 0) == n","Checks if a number is a perfect number.

This function returns True if the sum of the divisors of n (excluding n itself) equals n, indicating that n is a perfect number.",def test_is_perfect_number(): assert is_perfect_number(6) assert is_perfect_number(28) assert not is_perfect_number(10)
def harmonic_mean(lst): from statistics import harmonic_mean return harmonic_mean(lst) if lst else 0,"Computes the harmonic mean of a list.

This function returns the harmonic mean of the values in lst. If the list is empty, it returns 0.","def test_harmonic_mean(): assert harmonic_mean([1, 2, 3]) == 1.6363636363636365 assert harmonic_mean([10, 5]) == 6.666666666666667 assert harmonic_mean([]) == 0"
def sum_of_reciprocals(lst): return sum(1 / x for x in lst if x != 0),"Sums the reciprocals of elements in a list.

This function returns the sum of the reciprocals of all non-zero elements in lst.","def test_sum_of_reciprocals(): assert sum_of_reciprocals([1, 2, 3]) == 1.8333333333333333 assert sum_of_reciprocals([5, 10]) == 0.3 assert sum_of_reciprocals([0]) == 0"
def nth_pyramidal_number(n): return (n * (n + 1) * (2 * n + 1)) // 6,"Computes the nth pyramidal number.

This function returns the n-th pyramidal number, which represents the sum of the squares of the first n natural numbers.",def test_nth_pyramidal_number(): assert nth_pyramidal_number(3) == 14 assert nth_pyramidal_number(1) == 1 assert nth_pyramidal_number(5) == 55
def nth_square_number(n): return n ** 2,"Computes the square of a number.

This function returns the square of the input number n.",def test_nth_square_number(): assert nth_square_number(3) == 9 assert nth_square_number(1) == 1 assert nth_square_number(5) == 25
def count_vowels(s): return sum(1 for char in s if char.lower() in 'aeiou'),"Counts vowels in a string.

This function returns the number of vowels in the string s. Vowels considered are 'a', 'e', 'i', 'o', and 'u'.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("xyz") == 0 assert count_vowels("AEIOU") == 5
def reverse_words(s): return ' '.join(s.split()[::-1]),"Reverses the order of words in a string.

This function returns a new string where the words in the input string s are reversed in order, but the characters within each word remain unchanged.",def test_reverse_words(): assert reverse_words("hello world") == "world hello" assert reverse_words("is fun") == "fun is python" assert reverse_words("") == ""
"def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True","Checks if a number is prime.

This function returns True if the input number n is a prime number, meaning it is divisible only by 1 and itself.",def test_is_prime(): assert is_prime(7) assert not is_prime(4) assert is_prime(2)
"def gcd(a, b): while b: a, b = b, a % b return a","Computes the greatest common divisor (GCD) of two numbers.

This function returns the nth pyramidal number, which represents the sum of the squares of the first n natural numbers.","def test_gcd(): assert gcd(12, 8) == 4 assert gcd(17, 13) == 1 assert gcd(100, 25) == 25"
"def gcd_iterative(a, b): while b: a, b = b, a % b return a","Computes the greatest common divisor iteratively.

This function returns the greatest common divisor of two integers a and b using an iterative approach to the Euclidean algorithm.","def test_gcd_iterative(): assert gcd_iterative(12, 8) == 4 assert gcd_iterative(17, 13) == 1 assert gcd_iterative(100, 25) == 25"
def sum_of_reversed_digits(lst): return sum(int(str(x)[::-1]) for x in lst),"Sums the reversed digits of numbers in a list.

This function returns the sum of the reversed digits of all elements in the input list lst.","def test_sum_of_reversed_digits(): assert sum_of_reversed_digits([123, 456]) == 987 assert sum_of_reversed_digits([1, 2, 3]) == 6 assert sum_of_reversed_digits([0]) == 0"
"def sum_of_factors(n): return sum(i for i in range(1, n + 1) if n % i == 0)","Computes the sum of factors of a number.

This function returns the sum of all divisors of n, including n itself.",def test_sum_of_factors(): assert sum_of_factors(6) == 12 assert sum_of_factors(10) == 18 assert sum_of_factors(1) == 1
"def sum_of_even_numbers(n): return sum(i for i in range(2, n + 1, 2))","Sums even numbers up to n.

This function returns the sum of all even numbers from 1 to n inclusive.",def test_sum_of_even_numbers(): assert sum_of_even_numbers(10) == 30 assert sum_of_even_numbers(5) == 6 assert sum_of_even_numbers(0) == 0
def count_uppercase(s): return sum(1 for char in s if char.isupper()),Counts uppercase letters in a string.,def test_count_uppercase(): assert count_uppercase("Hello World") == 2 assert count_uppercase("abc") == 0 assert count_uppercase("ABC") == 3
"def count_divisors(n): return sum(1 for i in range(1, n + 1) if n % i == 0)","Counts the divisors of a number.

This function returns the number of divisors of n, including n itself.",def test_count_divisors(): assert count_divisors(6) == 4 assert count_divisors(10) == 4 assert count_divisors(1) == 1
def alternating_sum(lst): return sum(lst[i] if i % 2 == 0 else -lst[i] for i in range(len(lst))),"Computes the alternating sum of a list.

This function returns the alternating sum of the input list lst, where even-indexed elements are added and odd-indexed elements are subtracted.","def test_alternating_sum(): assert alternating_sum([1, 2, 3, 4]) == -2 assert alternating_sum([10, 5]) == 5 assert alternating_sum([1, 1, 1, 1]) == 0"
def sum_of_digits_is_odd(n): return sum(int(digit) for digit in str(n)) % 2 != 0,"Checks if the sum of the digits of a number is odd.

This function returns True if the sum of the digits of the input number n is odd, and False otherwise.",def test_sum_of_digits_is_odd(): assert sum_of_digits_is_odd(123) assert not sum_of_digits_is_odd(246) assert sum_of_digits_is_odd(135)
def nth_even_number(n): return 2 * (n - 1),"Returns the nth even number.

This function returns the n-th even number, where the first even number is 0.",def test_nth_even_number(): assert nth_even_number(1) == 0 assert nth_even_number(5) == 8 assert nth_even_number(10) == 18
def sum_of_odd_digits(n): return sum(int(digit) for digit in str(abs(n)) if int(digit) % 2 != 0),"Sums the odd digits of a number.

This function returns the sum of all odd digits in the number n. If n is negative, the sign is ignored.",def test_sum_of_odd_digits(): assert sum_of_odd_digits(123456) == 9 assert sum_of_odd_digits(789) == 16 assert sum_of_odd_digits(-246) == 0
def sum_of_first_n_numbers(n): return n * (n + 1) // 2,"Computes the sum of the first n natural numbers.

This function returns the sum of all numbers from 1 to n using the formula for the sum of an arithmetic series.",def test_sum_of_first_n_numbers(): assert sum_of_first_n_numbers(5) == 15 assert sum_of_first_n_numbers(10) == 55 assert sum_of_first_n_numbers(0) == 0
def count_vowels(s): return sum(1 for char in s.lower() if char in 'aeiou'),Counts the vowels in a string.,def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("aeiou") == 5 assert count_vowels("xyz") == 0
def factorial(n): if n == 0: return 1 return n * factorial(n - 1),"Computes the factorial of a number.

This function returns the factorial of the input number n, which is the product of all positive integers less than or equal to n.",def test_factorial(): assert factorial(5) == 120 assert factorial(0) == 1 assert factorial(3) == 6
def sum_of_squares(lst): return sum(x ** 2 for x in lst),Computes the sum of squares of list elements.,"def test_sum_of_squares(): assert sum_of_squares([1, 2, 3]) == 14 assert sum_of_squares([4, 5]) == 41 assert sum_of_squares([]) == 0"
"def multiply_elements(lst, factor): return [x * factor for x in lst]","Multiplies each element in a list by a factor.

This function returns a new list where each element in lst is multiplied by the given factor.","def test_multiply_elements(): assert multiply_elements([1, 2, 3], 2) == [2, 4, 6] assert multiply_elements([4, 5], 0) == [0, 0] assert multiply_elements([], 10) == []"
def is_palindrome_string(s): return s == s[::-1],Checks if a string is a palindrome.,def test_is_palindrome_string(): assert is_palindrome_string("madam") assert not is_palindrome_string("python") assert is_palindrome_string("abcba")
"def lcm(a, b): from math import gcd return abs(a * b) // gcd(a, b)","Computes the least common multiple (LCM) of two numbers.

This function returns the least common multiple of integers a and b using the formula LCM(a, b) = abs(a * b) // GCD(a, b).","def test_lcm(): assert lcm(4, 5) == 20 assert lcm(6, 8) == 24 assert lcm(7, 3) == 21"
def nth_triangular_number(n): return n * (n + 1) // 2,Computes the nth triangular number.,def test_nth_triangular_number(): assert nth_triangular_number(3) == 6 assert nth_triangular_number(1) == 1 assert nth_triangular_number(4) == 10
"def is_prime_number(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True","Checks if a number is prime.

This function returns True if the input number n is a prime number.",def test_is_prime_number(): assert is_prime_number(11) assert not is_prime_number(9) assert is_prime_number(2)
def calculate_average(lst): return sum(lst) / len(lst) if lst else 0,"Computes the average of list elements.

This function returns the average of all elements in the list lst. If the list is empty, it returns 0.","def test_calculate_average(): assert calculate_average([1, 2, 3]) == 2.0 assert calculate_average([5, 10, 15]) == 10.0 assert calculate_average([]) == 0"
def find_max(lst): return max(lst) if lst else None,Finds the maximum value in a list.,"def test_find_max(): assert find_max([1, 2, 3]) == 3 assert find_max([10, 5, 15]) == 15 assert find_max([]) is None"
def find_min(lst): return min(lst) if lst else None,"Finds the minimum value in a list.

This function returns the minimum value in the input list lst. If the list is empty, it returns None.","def test_find_min(): assert find_min([1, 2, 3]) == 1 assert find_min([10, 5, 15]) == 5 assert find_min([]) is None"
"def count_occurrences_of_char(s, char): return s.count(char)",Counts occurrences of a character in a string.,"def test_count_occurrences_of_char(): assert count_occurrences_of_char(""hello"", 'l') == 2 assert count_occurrences_of_char(""test"", 't') == 2 assert count_occurrences_of_char(""test"", 'x') == 0"
"def is_fibonacci_number(n): a, b = 0, 1 while a < n: a, b = b, a + b return a == n","Checks if a number is a Fibonacci number.

This function returns True if the input number n is a Fibonacci number, otherwise returns False.",def test_is_fibonacci_number(): assert is_fibonacci_number(8) assert not is_fibonacci_number(10) assert is_fibonacci_number(21)
"def concatenate_strings(s1, s2): return s1 + s2","Concatenates two strings.

This function returns a new string that is the result of concatenating s1 and s2.","def test_concatenate_strings(): assert concatenate_strings(""hello"", ""world"") == ""helloworld"" assert concatenate_strings(""foo"", ""bar"") == ""foobar"" assert concatenate_strings("""", ""test"") == ""test"""
"def split_string(s, delimiter): return s.split(delimiter)","Splits a string by a delimiter.

This function returns a list of substrings obtained by splitting the input string s using the specified delimiter.","def test_split_string(): assert split_string(""hello world"", "" "") == [""hello"", ""world""] assert split_string(""a,b,c"", "","") == [""a"", ""b"", ""c""] assert split_string(""test"", """") == [""t"", ""e"", ""s"", ""t""]"
def remove_duplicates(lst): return list(set(lst)),"Removes duplicates from a list.

This function returns a new list with all duplicate elements removed from the input list lst.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates([4, 4, 4]) == [4] assert remove_duplicates([]) == []"
def is_odd(n): return n % 2 != 0,"Checks if a number is odd.

This function returns True if the input number n is odd and False otherwise.",def test_is_odd(): assert is_odd(3) assert not is_odd(4) assert is_odd(7)
def count_digits(n): return sum(1 for digit in str(abs(n)) if digit.isdigit()),"Counts the number of digits in a number.

This function returns the number of digits in the input number n, ignoring any negative sign.",def test_count_digits(): assert count_digits(123) == 3 assert count_digits(-456) == 3 assert count_digits(0) == 1
def sum_of_cubes(lst): return sum(x ** 3 for x in lst),Computes the sum of cubes of list elements.,"def test_sum_of_cubes(): assert sum_of_cubes([1, 2, 3]) == 36 assert sum_of_cubes([2, 3]) == 35 assert sum_of_cubes([]) == 0"
def capitalize_first_letter(s): return s.capitalize(),"Capitalizes the first letter of a string.

This function returns a new string with the first letter of the input string s capitalized, while the rest of the string remains unchanged.",def test_capitalize_first_letter(): assert capitalize_first_letter("hello") == "Hello" assert capitalize_first_letter("world") == "World" assert capitalize_first_letter("Python") == "Python"
"def find_common_elements(lst1, lst2): return list(set(lst1) & set(lst2))",Finds common elements between two lists.,"def test_find_common_elements(): assert find_common_elements([1, 2, 3], [3, 4, 5]) == [3] assert find_common_elements([1, 2], [3, 4]) == [] assert find_common_elements([1, 2, 3], [1, 2]) == [1, 2]"
"def generate_fibonacci_sequence(n): a, b = 0, 1 result = [] for _ in range(n): result.append(a) a, b = b, a + b return result","Generates a Fibonacci sequence of length n.

This function returns a list containing the first n Fibonacci numbers.","def test_generate_fibonacci_sequence(): assert generate_fibonacci_sequence(5) == [0, 1, 1, 2, 3] assert generate_fibonacci_sequence(1) == [0] assert generate_fibonacci_sequence(3) == [0, 1, 1]"
"def find_index_of_element(lst, value): return lst.index(value) if value in lst else -1","Finds the index of an element in a list.

This function returns the index of the first occurrence of the value in the list lst. If the value is not found, it returns -1.","def test_find_index_of_element(): assert find_index_of_element([1, 2, 3], 2) == 1 assert find_index_of_element([1, 2, 3], 4) == -1 assert find_index_of_element([], 1) == -1"
def reverse_string(s): return s[::-1],"Reverses a string.

This function returns a new string that is the reverse of the input string s.",def test_reverse_string(): assert reverse_string("hello") == "olleh" assert reverse_string("world") == "dlrow" assert reverse_string("") == ""
"def is_divisible_by(n, divisor): return n % divisor == 0","Checks if a number is divisible by another number.

This function returns True if the input number n is divisible by divisor and False otherwise.","def test_is_divisible_by(): assert is_divisible_by(10, 2) assert not is_divisible_by(10, 3) assert is_divisible_by(0, 1)"
def nth_square_pyramid_number(n): return (n * (n + 1) * (2 * n + 1)) // 6,"Computes the nth square pyramidal number.

This function returns the nth square pyramidal number, representing the sum of squares of the first n natural numbers.",def test_nth_square_pyramid_number(): assert nth_square_pyramid_number(1) == 1 assert nth_square_pyramid_number(2) == 5 assert nth_square_pyramid_number(3) == 14
"def count_substring(s, substring): return s.count(substring)","Counts occurrences of a substring in a string.

This function returns the number of times the substring appears in the input string s.","def test_count_substring(): assert count_substring(""banana"", ""ana"") == 2 assert count_substring(""hello world"", ""world"") == 1 assert count_substring(""test"", ""not"") == 0"
"def calculate_exponent(base, exp): return base ** exp","Computes the exponentiation of a base number.

This function returns the result of raising base to the power of exp.","def test_calculate_exponent(): assert calculate_exponent(2, 3) == 8 assert calculate_exponent(5, 0) == 1 assert calculate_exponent(7, 2) == 49"
def find_first_non_repeated(s): from collections import Counter counts = Counter(s) for char in s: if counts[char] == 1: return char return None,"Finds the first non-repeated character in a string.

This function returns the first character in the input string s that is not repeated. If all characters are repeated, it returns None.",def test_find_first_non_repeated(): assert find_first_non_repeated("swiss") == "w" assert find_first_non_repeated("aabbcc") is None assert find_first_non_repeated("unique") == "u"
"def merge_lists(lst1, lst2): return lst1 + lst2","Merges two lists.

This function returns a new list that is the concatenation of the input lists lst1 and lst2.","def test_merge_lists(): assert merge_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_lists([], [1, 2]) == [1, 2] assert merge_lists([1], []) == [1]"
def count_zeros(n): return str(n).count('0'),"Counts the number of zeros in a number.

This function returns the number of zero digits in the input number n.",def test_count_zeros(): assert count_zeros(1001) == 2 assert count_zeros(123) == 0 assert count_zeros(100000) == 5
def is_perfect_square(n): return int(n ** 0.5) ** 2 == n,"Checks if a number is a perfect square.

This function returns True if the input number n is a perfect square (i.e., the square of an integer).",def test_is_perfect_square(): assert is_perfect_square(16) assert not is_perfect_square(20) assert is_perfect_square(25)
"def remove_duplicates_from_string(s): return ''.join(sorted(set(s), key=s.index))","Removes duplicate characters from a string.

This function returns a new string with all duplicate characters removed from the input string s, preserving the original order of characters.",def test_remove_duplicates_from_string(): assert remove_duplicates_from_string("hello") == "helo" assert remove_duplicates_from_string("aabbcc") == "abc" assert remove_duplicates_from_string("") == ""
def find_largest_prime_factor(n): from sympy import primefactors return max(primefactors(n)),"Finds the largest prime factor of a number.

This function returns the largest prime factor of the input number n.",def test_find_largest_prime_factor(): assert find_largest_prime_factor(28) == 7 assert find_largest_prime_factor(60) == 5 assert find_largest_prime_factor(97) == 97
def find_unique_elements(lst): return list(set(lst)),"Finds unique elements in a list.

This function returns a list of unique elements from the input list lst.","def test_find_unique_elements(): assert find_unique_elements([1, 2, 2, 3]) == [1, 2, 3] assert find_unique_elements([5, 5, 5]) == [5] assert find_unique_elements([]) == []"
"def get_file_extension(filename): return filename.rsplit('.', 1)[-1] if '.' in filename else ''","Extracts the file extension from a filename.

This function returns the extension of the input filename if it exists, otherwise returns an empty string.",def test_get_file_extension(): assert get_file_extension("document.txt") == "txt" assert get_file_extension("archive.tar.gz") == "gz" assert get_file_extension("no_extension") == ""
def is_armstrong_number(n): digits = len(str(n)) return n == sum(int(digit) ** digits for digit in str(n)),"Checks if a number is an Armstrong number.

This function returns True if the input number n is an Armstrong number, which is a number that is equal to the sum of its own digits each raised to the power of the number of digits.",def test_is_armstrong_number(): assert is_armstrong_number(153) assert not is_armstrong_number(123) assert is_armstrong_number(370)
"def flatten_nested_list(lst): result = [] for item in lst: if isinstance(item, list): result.extend(flatten_nested_list(item)) else: result.append(item) return result","Flattens a nested list.

This function returns a flat list that contains all elements from the nested input list lst.","def test_flatten_nested_list(): assert flatten_nested_list([1, [2, [3]], 4]) == [1, 2, 3, 4] assert flatten_nested_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_nested_list([]) == []"
"def generate_prime_numbers(n): primes = [] for num in range(2, n + 1): if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)): primes.append(num) return primes","Generates a list of prime numbers up to n.

This function returns a list of all prime numbers less than or equal to the input number n.","def test_generate_prime_numbers(): assert generate_prime_numbers(10) == [2, 3, 5, 7] assert generate_prime_numbers(1) == [] assert generate_prime_numbers(20) == [2, 3, 5, 7, 11, 13, 17, 19]"
"def gcd_recursive(a, b): if b == 0: return a return gcd_recursive(b, a % b)","Computes the greatest common divisor recursively.

This function returns the greatest common divisor of two integers a and b using the Euclidean algorithm recursively.","def test_gcd_recursive(): assert gcd_recursive(12, 8) == 4 assert gcd_recursive(17, 13) == 1 assert gcd_recursive(20, 5) == 5"
def list_length(lst): return len(lst),Returns the length of a list.,"def test_list_length(): assert list_length([1, 2, 3]) == 3 assert list_length([]) == 0 assert list_length([5, 6, 7, 8]) == 4"
"def is_perfect_number(n): return n == sum(i for i in range(1, n) if n % i == 0)","Checks if a number is a perfect number.

This function returns True if the input number n is a perfect number, which is a positive integer that is equal to the sum of its proper positive divisors.",def test_is_perfect_number(): assert is_perfect_number(6) assert not is_perfect_number(10) assert is_perfect_number(28)
"def is_substring(s1, s2): return s1 in s2","Checks if one string is a substring of another.

This function returns True if the string s1 is a substring of s2.","def test_is_substring(): assert is_substring(""test"", ""this is a test"") assert not is_substring(""example"", ""sample"") assert is_substring(""abc"", ""abcd"")"
"def repeat_string(s, times): return s * times","Repeats a string a specified number of times.

This function returns a new string which is the input string s repeated times times.","def test_repeat_string(): assert repeat_string(""hello"", 3) == ""hellohellohello"" assert repeat_string(""abc"", 0) == """" assert repeat_string(""xyz"", 2) == ""xyzxyz"""
def is_odd_length(s): return len(s) % 2 != 0,"Checks if the length of a string is odd.

This function returns True if the length of the input string s is odd and False otherwise.",def test_is_odd_length(): assert is_odd_length("hello") assert not is_odd_length("world") assert is_odd_length("python")
def is_palindromic_number(n): return str(n) == str(n)[::-1],Checks if a number is a palindromic number.,def test_is_palindromic_number(): assert is_palindromic_number(121) assert not is_palindromic_number(123) assert is_palindromic_number(12321)
"def find_divisors(n): return [i for i in range(1, n + 1) if n % i == 0]","Finds all divisors of a number.

This function returns a list of all positive divisors of the input number n.","def test_find_divisors(): assert find_divisors(12) == [1, 2, 3, 4, 6, 12] assert find_divisors(7) == [1, 7] assert find_divisors(1) == [1]"
def is_power_of_two(n): return (n & (n - 1)) == 0 and n > 0,"Checks if a number is a power of two.

This function returns True if the input number n is a power of two.",def test_is_power_of_two(): assert is_power_of_two(1) assert is_power_of_two(16) assert not is_power_of_two(18)
def calculate_mean(lst): return sum(lst) / len(lst) if lst else 0,"Calculates the mean of a list of numbers.

This function returns the average value of the numbers in the input list lst. If the list is empty, it returns 0.","def test_calculate_mean(): assert calculate_mean([1, 2, 3]) == 2 assert calculate_mean([5, 10, 15]) == 10 assert calculate_mean([]) == 0"
"def is_permutation(s1, s2): return sorted(s1) == sorted(s2)","Checks if two strings are permutations of each other.

This function returns True if the input strings s1 and s2 are permutations of each other (i.e., they contain the same characters in any order).","def test_is_permutation(): assert is_permutation(""listen"", ""silent"") assert not is_permutation(""hello"", ""world"") assert is_permutation(""abc"", ""cab"")"
"def generate_multiples(n, count): return [n * i for i in range(1, count + 1)]","Generates multiples of a number.

This function returns a list of the first count multiples of the input number n.","def test_generate_multiples(): assert generate_multiples(3, 4) == [3, 6, 9, 12] assert generate_multiples(5, 0) == [] assert generate_multiples(7, 2) == [7, 14]"
def get_largest_element(lst): return max(lst) if lst else None,Finds the largest element in a list.,"def test_get_largest_element(): assert get_largest_element([1, 2, 3]) == 3 assert get_largest_element([-1, -2, -3]) == -1 assert get_largest_element([]) is None"
def is_fibonacci_number(n): import math return n > 0 and (math.sqrt(5 * n * n + 4) % 1 == 0 or math.sqrt(5 * n * n - 4) % 1 == 0),"Checks if a number is a Fibonacci number.

This function returns True if the input number n is a Fibonacci number.",def test_is_fibonacci_number(): assert is_fibonacci_number(5) assert not is_fibonacci_number(4) assert is_fibonacci_number(13)
"def get_intersection(lst1, lst2): return list(set(lst1) & set(lst2))",Finds intersection between two lists.,"def test_get_intersection(): assert get_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert get_intersection([5, 6], [7, 8]) == [] assert get_intersection([], [1, 2]) == []"
def is_palindrome(s): return s == s[::-1],Checks if a string is a palindrome.,def test_is_palindrome(): assert is_palindrome("racecar") assert not is_palindrome("hello") assert is_palindrome("madam")
def sort_list(lst): return sorted(lst),Sorts a list.,"def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list([5, 2, 9]) == [2, 5, 9] assert sort_list([]) == []"
"def find_shortest_word(s): return min(s.split(), key=len)","Finds the shortest word in a string.

This function returns the shortest word in the input string s, where words are defined as sequences of characters separated by spaces.",def test_find_shortest_word(): assert find_shortest_word("the quick brown fox") == "the" assert find_shortest_word("hello world") == "world" assert find_shortest_word("a b c") == "a"
"def is_valid_email(email): import re return bool(re.match(r'^[\w\.-]+@[\w\.-]+\.\w+$', email))","Checks if an email address is valid.

This function returns True if the input email matches a basic pattern for valid email addresses, otherwise returns False.",def test_is_valid_email(): assert is_valid_email("test@example.com") assert not is_valid_email("invalid-email") assert is_valid_email("user.name@domain.co")
def get_middle_character(s): return s[len(s) // 2] if len(s) % 2 != 0 else '',"Gets the middle character of a string.

This function returns the middle character of the input string s if its length is odd. If the length is even, it returns an empty string.",def test_get_middle_character(): assert get_middle_character("hello") == "l" assert get_middle_character("world") == "" assert get_middle_character("Python") == "t"
def calculate_area_of_circle(radius): import math return math.pi * radius ** 2,"Calculates the area of a circle.

This function returns the area of a circle given its radius using the formula p?adius2\pi \times \text{radius}^2p?adius2.",def test_calculate_area_of_circle(): assert calculate_area_of_circle(1) == math.pi assert calculate_area_of_circle(0) == 0 assert calculate_area_of_circle(3) == 28.274333882308138
def is_leap_year(year): return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0),"Checks if a year is a leap year.

This function returns True if the input year is a leap year according to the Gregorian calendar.",def test_is_leap_year(): assert is_leap_year(2000) assert not is_leap_year(1900) assert is_leap_year(2020)
"def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))","Checks if a number is prime.

This function returns True if the input number n is a prime number (i.e., greater than 1 and not divisible by any number other than 1 and itself).",def test_is_prime(): assert is_prime(2) assert is_prime(5) assert not is_prime(4)
def convert_to_uppercase(s): return s.upper(),Converts a string to uppercase.,def test_convert_to_uppercase(): assert convert_to_uppercase("hello") == "HELLO" assert convert_to_uppercase("WORLD") == "WORLD" assert convert_to_uppercase("HeLLo") == "HELLO"
def find_max_in_list(lst): return max(lst) if lst else None,Finds the maximum value in a list.,"def test_find_max_in_list(): assert find_max_in_list([1, 2, 3]) == 3 assert find_max_in_list([-1, -2, -3]) == -1 assert find_max_in_list([]) is None"
def count_vowels(s): return sum(1 for char in s.lower() if char in 'aeiou'),"Counts the number of vowels in a string.

This function returns the count of vowel characters (a, e, i, o, u) in the input string s.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("world") == 1 assert count_vowels("") == 0
def get_unique_words(s): return list(set(s.split())),"Gets unique words from a string.

This function returns a list of unique words from the input string s, where words are separated by spaces.","def test_get_unique_words(): assert get_unique_words(""hello world hello"") == [""hello"", ""world""] assert get_unique_words(""foo bar foo"") == [""foo"", ""bar""] assert get_unique_words("""") == []"
"def find_gcd(a, b): while b: a, b = b, a % b return a","Computes the greatest common divisor.

This function returns True if the input strings s1 and s2 are anagrams of each other (i.e., they contain the same characters in any order).","def test_find_gcd(): assert find_gcd(12, 8) == 4 assert find_gcd(17, 13) == 1 assert find_gcd(20, 5) == 5"
"def sum_of_squares(n): return sum(i ** 2 for i in range(1, n + 1))","Computes the sum of squares up to a number.

This function returns the sum of the squares of all integers from 1 to n.",def test_sum_of_squares(): assert sum_of_squares(3) == 14 assert sum_of_squares(4) == 30 assert sum_of_squares(0) == 0
def is_odd(n): return n % 2 != 0,"Checks if a number is odd.

This function returns True if the input number n is odd (i.e., not divisible by 2).",def test_is_odd(): assert is_odd(7) assert not is_odd(4) assert is_odd(-1)
def list_sum(lst): return sum(lst),Computes the sum of elements in a list.,"def test_list_sum(): assert list_sum([1, 2, 3]) == 6 assert list_sum([-1, 1]) == 0 assert list_sum([]) == 0"
def is_palindromic(s): return s == s[::-1],Checks if a string is palindromic.,def test_is_palindromic(): assert is_palindromic("racecar") assert not is_palindromic("hello") assert is_palindromic("madam")
def get_length_of_string(s): return len(s),"Returns the length of a string.

This function returns the number of characters in the input string s.",def test_get_length_of_string(): assert get_length_of_string("hello") == 5 assert get_length_of_string("world") == 5 assert get_length_of_string("") == 0
"def find_common_elements(lst1, lst2): return list(set(lst1) & set(lst2))",Finds common elements between two lists.,"def test_find_common_elements(): assert find_common_elements([1, 2, 3], [2, 3, 4]) == [2, 3] assert find_common_elements([5, 6], [7, 8]) == [] assert find_common_elements([], [1, 2]) == []"
def remove_duplicates(lst): return list(set(lst)),"Removes duplicates from a list.

This function returns a new list with duplicate elements removed from the input list lst.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates([1, 1, 1]) == [1] assert remove_duplicates([]) == []"
"def calculate_exponent(base, exponent): return base ** exponent","Computes the exponentiation of a number.

This function returns the result of raising base to the power of exponent.","def test_calculate_exponent(): assert calculate_exponent(2, 3) == 8 assert calculate_exponent(5, 0) == 1 assert calculate_exponent(7, 2) == 49"
def convert_to_lowercase(s): return s.lower(),"Converts a string to lowercase.

This function returns a new string with all characters in the input string s converted to lowercase.",def test_convert_to_lowercase(): assert convert_to_lowercase("HELLO") == "hello" assert convert_to_lowercase("world") == "world" assert convert_to_lowercase("PyThOn") == "python"
def find_min_in_list(lst): return min(lst) if lst else None,Finds the minimum value in a list.,"def test_find_min_in_list(): assert find_min_in_list([1, 2, 3]) == 1 assert find_min_in_list([-1, -2, -3]) == -3 assert find_min_in_list([]) is None"
"def count_occurrences(lst, item): return lst.count(item)","Counts occurrences of an item in a list.

This function returns the number of times the input item appears in the input list lst.","def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences([1, 2, 3], 4) == 0 assert count_occurrences([], 1) == 0"
"def find_longest_word(s): return max(s.split(), key=len)","Finds the longest word in a string.

This function returns the longest word in the input string s, where words are defined as sequences of characters separated by spaces.",def test_find_longest_word(): assert find_longest_word("the quick brown fox") == "quick" assert find_longest_word("hello world") == "hello" assert find_longest_word("a b c d") == "d"
"def merge_sorted_lists(lst1, lst2): return sorted(lst1 + lst2)","Merges two sorted lists.

This function returns a new list containing all elements from lst1 and lst2, sorted in ascending order.","def test_merge_sorted_lists(): assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6] assert merge_sorted_lists([], [1, 2]) == [1, 2] assert merge_sorted_lists([7], [5, 6]) == [5, 6, 7]"
def calculate_square_root(n): import math return math.sqrt(n),"Computes the square root of a number.

This function returns the square root of the input number n using the math.sqrt function.",def test_calculate_square_root(): assert calculate_square_root(4) == 2 assert calculate_square_root(9) == 3 assert calculate_square_root(0) == 0
"def merge_dicts(dict1, dict2): result = dict1.copy() result.update(dict2) return result","Merges two dictionaries.

This function returns a new dictionary containing all key-value pairs from dict1 and dict2. If there are overlapping keys, the values from dict2 will overwrite those from dict1.","def test_merge_dicts(): assert merge_dicts({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2} assert merge_dicts({'a': 1}, {'a': 2}) == {'a': 2} assert merge_dicts({}, {'x': 10}) == {'x': 10}"
def remove_whitespace(s): return ''.join(s.split()),"Removes all whitespace from a string.

This function returns a new string with all whitespace characters removed from the input string s.",def test_remove_whitespace(): assert remove_whitespace(" he llo ") == "hello" assert remove_whitespace("a b c") == "abc" assert remove_whitespace(" ") == ""
def get_last_element(lst): return lst[-1] if lst else None,"Gets the last element of a list.

This function returns the last element of the input list lst. If the list is empty, it returns None.","def test_get_last_element(): assert get_last_element([1, 2, 3]) == 3 assert get_last_element([0]) == 0 assert get_last_element([]) is None"
def count_words(s): return len(s.split()),Counts the number of words in a string.,def test_count_words(): assert count_words("hello world") == 2 assert count_words("a quick brown fox") == 4 assert count_words("") == 0
"def get_first_n_elements(lst, n): return lst[:n]","Gets the first n elements of a list.

This function returns a new list containing the first n elements from the input list lst. If n is greater than the length of the list, it returns the entire list.","def test_get_first_n_elements(): assert get_first_n_elements([1, 2, 3, 4], 2) == [1, 2] assert get_first_n_elements([5, 6], 5) == [5, 6] assert get_first_n_elements([], 1) == []"
def calculate_product(lst): return math.prod(lst),"Computes the product of elements in a list.

This function returns the product of all elements in the input list lst.","def test_calculate_product(): assert calculate_product([1, 2, 3]) == 6 assert calculate_product([4, 5]) == 20 assert calculate_product([]) == 1"
def get_unique_elements(lst): return list(set(lst)),Gets unique elements from a list.,"def test_get_unique_elements(): assert get_unique_elements([1, 2, 2, 3]) == [1, 2, 3] assert get_unique_elements([1, 1, 1]) == [1] assert get_unique_elements([]) == []"
def convert_to_list(s): return s.split(),"Converts a string to a list of words.

This function returns a list of words from the input string s, where words are defined as sequences of characters separated by spaces.","def test_convert_to_list(): assert convert_to_list(""hello world"") == [""hello"", ""world""] assert convert_to_list(""a quick brown fox"") == [""a"", ""quick"", ""brown"", ""fox""] assert convert_to_list("""") == []"
"def find_common_words(s1, s2): return list(set(s1.split()) & set(s2.split()))","Finds common words between two strings.

This function returns a list of words that are present in both input strings s1 and s2.","def test_find_common_words(): assert find_common_words(""hello world"", ""world hello"") == [""hello"", ""world""] assert find_common_words(""foo bar"", ""baz qux"") == [] assert find_common_words(""one two three"", ""three two one"") == [""one"", ""two"", ""three""]"
"def get_first_n_chars(s, n): return s[:n]","Gets the first n characters of a string.

This function returns a new string containing the first n characters of the input string s. If n is greater than the length of the string, it returns the entire string.","def test_get_first_n_chars(): assert get_first_n_chars(""hello"", 3) == ""hel"" assert get_first_n_chars(""world"", 10) == ""world"" assert get_first_n_chars("""", 1) == """""
"def find_difference(lst1, lst2): return list(set(lst1) - set(lst2))","Finds elements in lst1 not in lst2.

This function returns a list of elements that are present in the input list lst1 but not in lst2.","def test_find_difference(): assert find_difference([1, 2, 3], [2, 3, 4]) == [1] assert find_difference([5, 6], [6, 7]) == [5] assert find_difference([], [1, 2]) == []"
def get_keys_of_dict(d): return list(d.keys()),"Gets the keys of a dictionary.

This function returns a list of all keys from the input dictionary d.","def test_get_keys_of_dict(): assert get_keys_of_dict({'a': 1, 'b': 2}) == ['a', 'b'] assert get_keys_of_dict({'x': 10}) == ['x'] assert get_keys_of_dict({}) == []"
def get_values_of_dict(d): return list(d.values()),"Gets the values of a dictionary.

This function returns a list of all values from the input dictionary d.","def test_get_values_of_dict(): assert get_values_of_dict({'a': 1, 'b': 2}) == [1, 2] assert get_values_of_dict({'x': 10}) == [10] assert get_values_of_dict({}) == []"
def calculate_mean(lst): return sum(lst) / len(lst) if lst else 0,"Computes the mean of a list.

This function returns the average value of all elements in the input list lst. If the list is empty, it returns 0.","def test_calculate_mean(): assert calculate_mean([1, 2, 3]) == 2 assert calculate_mean([4, 5, 6]) == 5 assert calculate_mean([]) == 0"
def count_characters(s): return len(s),Counts the number of characters in a string.,def test_count_characters(): assert count_characters("hello") == 5 assert count_characters("world") == 5 assert count_characters("") == 0
"def remove_all_occurrences(lst, item): return [x for x in lst if x != item]","Removes all occurrences of an item from a list.

This function returns a new list with all occurrences of the input item removed from the input list lst.","def test_remove_all_occurrences(): assert remove_all_occurrences([1, 2, 2, 3], 2) == [1, 3] assert remove_all_occurrences([1, 1, 1], 1) == [] assert remove_all_occurrences([], 1) == []"
"def calculate_power(base, exponent): return base ** exponent",Computes the power of a number.,"def test_calculate_power(): assert calculate_power(2, 3) == 8 assert calculate_power(3, 2) == 9 assert calculate_power(5, 0) == 1"
"def find_duplicates(lst): from collections import Counter return [item for item, count in Counter(lst).items() if count > 1]",Finds duplicate elements in a list.,"def test_find_duplicates(): assert find_duplicates([1, 2, 2, 3]) == [2] assert find_duplicates([1, 1, 1]) == [1] assert find_duplicates([]) == []"
def get_sorted_dict(d): return dict(sorted(d.items())),"Sorts a dictionary by keys.

This function returns a new dictionary where the items of the input dictionary d are sorted by keys.","def test_get_sorted_dict(): assert get_sorted_dict({'b': 2, 'a': 1}) == {'a': 1, 'b': 2} assert get_sorted_dict({'x': 10, 'y': 5}) == {'x': 10, 'y': 5} assert get_sorted_dict({}) == {}"
"def find_difference_between_lists(lst1, lst2): return list(set(lst1) - set(lst2))","Finds elements in lst1 that are not in lst2.

This function returns a list of elements that are present in lst1 but not in lst2.","def test_find_difference_between_lists(): assert find_difference_between_lists([1, 2, 3], [2, 3, 4]) == [1] assert find_difference_between_lists([5, 6], [6, 7]) == [5] assert find_difference_between_lists([], [1, 2]) == []"
def calculate_sum_of_list(lst): return sum(lst),Computes the sum of a list.,"def test_calculate_sum_of_list(): assert calculate_sum_of_list([1, 2, 3]) == 6 assert calculate_sum_of_list([4, 5]) == 9 assert calculate_sum_of_list([]) == 0"
"def check_divisibility(n, divisor): return n % divisor == 0","Checks if a number is divisible by another number.

This function returns True if the input number n is divisible by the input divisor.","def test_check_divisibility(): assert check_divisibility(10, 2) assert not check_divisibility(10, 3) assert check_divisibility(15, 5)"
def get_middle_element(lst): return lst[len(lst) // 2] if lst else None,"Gets the middle element of a list.

This function returns the middle element of the input list lst. If the list is empty, it returns None.","def test_get_middle_element(): assert get_middle_element([1, 2, 3]) == 2 assert get_middle_element([1, 2, 3, 4]) == 2 assert get_middle_element([]) is None"
def sort_list(lst): return sorted(lst),"Sorts a list in ascending order.

This function returns a new list containing all elements from the input list lst, sorted in ascending order.","def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list([5, 4, 6]) == [4, 5, 6] assert sort_list([]) == []"
"def find_index_of_item(lst, item): return lst.index(item) if item in lst else -1","Finds the index of an item in a list.

This function returns the index of the first occurrence of the input item in the list lst. If the item is not found, it returns -1.","def test_find_index_of_item(): assert find_index_of_item([1, 2, 3], 2) == 1 assert find_index_of_item([4, 5, 6], 7) == -1 assert find_index_of_item([], 1) == -1"
"def get_substring(s, start, end): return s[start:end]","Extracts a substring from a string.

This function returns a substring from the input string s, starting at index start and ending at index end.","def test_get_substring(): assert get_substring(""hello"", 1, 4) == ""ell"" assert get_substring(""world"", 0, 5) == ""world"" assert get_substring(""test"", 2, 2) == """""
def get_odd_numbers(lst): return [x for x in lst if x % 2 != 0],"Gets odd numbers from a list.

This function returns a list containing all odd numbers from the input list lst.","def test_get_odd_numbers(): assert get_odd_numbers([1, 2, 3]) == [1, 3] assert get_odd_numbers([4, 6, 8]) == [] assert get_odd_numbers([5, 7, 9]) == [5, 7, 9]"
def capitalize_words(s): return ' '.join(word.capitalize() for word in s.split()),"Capitalizes the first letter of each word in a string.

This function returns a new string where the first letter of each word in the input string s is capitalized, while the rest of the letters are left unchanged.",def test_capitalize_words(): assert capitalize_words("hello world") == "Hello World" assert capitalize_words("programming") == "Programming" assert capitalize_words("") == ""
def is_palindrome(s): return s == s[::-1],"Checks if a string is a palindrome.

This function returns True if the input string s reads the same backward as forward, otherwise False.",def test_is_palindrome(): assert is_palindrome("madam") assert not is_palindrome("hello") assert is_palindrome("racecar")
"def calculate_exponent(base, exponent): return base ** exponent",Computes the exponentiation of a number.,"def test_calculate_exponent(): assert calculate_exponent(2, 3) == 8 assert calculate_exponent(3, 2) == 9 assert calculate_exponent(5, 0) == 1"
"def split_string(s, delimiter): return s.split(delimiter)","Splits a string by a delimiter.

This function returns a list of substrings from the input string s, split by the specified delimiter.","def test_split_string(): assert split_string(""a,b,c"", "","") == [""a"", ""b"", ""c""] assert split_string(""hello world"", "" "") == [""hello"", ""world""] assert split_string(""test"", ""x"") == [""test""]"
def count_words(s): return len(s.split()),Counts the number of words in a string.,def test_count_words(): assert count_words("hello world") == 2 assert count_words("programming language") == 3 assert count_words("") == 0
def find_max_in_list(lst): return max(lst) if lst else None,"Finds the maximum value in a list.

This function returns the maximum value from the input list lst. If the list is empty, it returns None.","def test_find_max_in_list(): assert find_max_in_list([1, 2, 3]) == 3 assert find_max_in_list([7, 4, 6]) == 7 assert find_max_in_list([]) is None"
def find_min_in_list(lst): return min(lst) if lst else None,"Finds the minimum value in a list.

This function returns the minimum value from the input list lst. If the list is empty, it returns None.","def test_find_min_in_list(): assert find_min_in_list([1, 2, 3]) == 1 assert find_min_in_list([7, 4, 6]) == 4 assert find_min_in_list([]) is None"
def flatten_list(lst): return [item for sublist in lst for item in sublist],"Flattens a list of lists into a single list.

This function returns a single list containing all elements from the sublists in the input list lst.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([['a'], ['b', 'c']]) == ['a', 'b', 'c'] assert flatten_list([]) == []"
def sum_of_list(lst): return sum(lst),Computes the sum of a list.,"def test_sum_of_list(): assert sum_of_list([1, 2, 3]) == 6 assert sum_of_list([4, 5, 6]) == 15 assert sum_of_list([]) == 0"
"def remove_item(lst, item): return [x for x in lst if x != item]","Removes the first occurrence of an item from a list.

This function returns a new list with the first occurrence of the input item removed from the input list lst.","def test_remove_item(): assert remove_item([1, 2, 3, 4], 3) == [1, 2, 4] assert remove_item([1, 2, 2, 3], 2) == [1, 2, 3] assert remove_item([1], 1) == []"
def count_words(s): return len(s.split()),Counts the number of words in a string.,def test_count_words(): assert count_words("hello world") == 2 assert count_words("programming") == 2 assert count_words("") == 0
def get_reversed_list(lst): return lst[::-1],"Reverses the order of elements in a list.

This function returns a new list that is the reverse of the input list lst.","def test_get_reversed_list(): assert get_reversed_list([1, 2, 3]) == [3, 2, 1] assert get_reversed_list([4, 5, 6]) == [6, 5, 4] assert get_reversed_list([]) == []"
def get_even_numbers(lst): return [x for x in lst if x % 2 == 0],"Gets even numbers from a list.

This function returns a list of all even numbers from the input list lst.","def test_get_even_numbers(): assert get_even_numbers([1, 2, 3, 4]) == [2, 4] assert get_even_numbers([5, 6, 7, 8]) == [6, 8] assert get_even_numbers([]) == []"
"def find_greatest_common_divisor(a, b): while b: a, b = b, a % b return a","Finds the greatest common divisor (GCD) of two numbers.

This function returns the greatest common divisor of the input numbers a and b using the Euclidean algorithm.","def test_find_greatest_common_divisor(): assert find_greatest_common_divisor(12, 15) == 3 assert find_greatest_common_divisor(100, 25) == 25 assert find_greatest_common_divisor(7, 5) == 1"
"def find_smallest_common_multiple(a, b): from math import gcd return abs(a*b) // gcd(a, b)","Finds the smallest common multiple of two numbers.

This function returns the smallest common multiple of the input numbers a and b using the relationship with their greatest common divisor.","def test_find_smallest_common_multiple(): assert find_smallest_common_multiple(4, 5) == 20 assert find_smallest_common_multiple(7, 3) == 21 assert find_smallest_common_multiple(12, 15) == 60"
"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True","Checks if a number is prime.

This function returns True if the input number n is a prime number, otherwise False.",def test_is_prime(): assert is_prime(2) assert not is_prime(4) assert is_prime(17) assert not is_prime(18)
"def get_fibonacci_sequence(n): a, b = 0, 1 result = [] for _ in range(n): result.append(a) a, b = b, a + b return result","Generates a Fibonacci sequence.

This function returns a list containing the first n numbers in the Fibonacci sequence.","def test_get_fibonacci_sequence(): assert get_fibonacci_sequence(5) == [0, 1, 1, 2, 3] assert get_fibonacci_sequence(3) == [0, 1, 1] assert get_fibonacci_sequence(1) == [0]"
"def find_missing_number(lst): return sum(range(1, len(lst) + 2)) - sum(lst)","Finds the missing number in a sequence.

This function returns the missing number in a sequence of integers from 1 to n where one number is missing.","def test_find_missing_number(): assert find_missing_number([1, 2, 4]) == 3 assert find_missing_number([1, 3, 2, 5, 7]) == 6 assert find_missing_number([2, 3, 1]) == 4"
"def is_anagram(s1, s2): return sorted(s1) == sorted(s2)","Checks if two strings are anagrams.

This function returns True if the input strings s1 and s2 are anagrams of each other (i.e., they contain the same characters in different orders), otherwise False.","def test_is_anagram(): assert is_anagram(""listen"", ""silent"") assert not is_anagram(""hello"", ""world"") assert is_anagram(""triangle"", ""integral"")"
"def count_occurrences(lst, item): return lst.count(item)","Counts the number of occurrences of an item in a list.

This function returns the count of how many times the input item appears in the input list lst.","def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences([1, 2, 3], 4) == 0 assert count_occurrences([], 1) == 0"
"def merge_sorted_lists(lst1, lst2): return sorted(lst1 + lst2)","Merges two sorted lists into one sorted list.

This function returns a single sorted list by merging the input sorted lists lst1 and lst2.","def test_merge_sorted_lists(): assert merge_sorted_lists([1, 3], [2, 4]) == [1, 2, 3, 4] assert merge_sorted_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_sorted_lists([], [5, 6]) == [5, 6]"
"def get_sublist(lst, start, end): return lst[start:end]","Extracts a sublist from a list.

This function returns a sublist from the input list lst, starting at index start and ending at index end.","def test_get_sublist(): assert get_sublist([1, 2, 3, 4], 1, 3) == [2, 3] assert get_sublist([5, 6, 7, 8], 2, 5) == [7, 8] assert get_sublist([], 0, 1) == []"
def get_odd_numbers(lst): return [x for x in lst if x % 2 != 0],"Filters out odd numbers from a list.

This function returns a list of all odd numbers from the input list lst.","def test_get_odd_numbers(): assert get_odd_numbers([1, 2, 3]) == [1, 3] assert get_odd_numbers([4, 6, 8]) == [] assert get_odd_numbers([5, 7, 9]) == [5, 7, 9]"
def find_max_value(dict): return max(dict.values()),"Finds the maximum value in a dictionary.

This function returns the maximum value among the values in the input dictionary dict.","def test_find_max_value(): assert find_max_value({'a': 1, 'b': 2}) == 2 assert find_max_value({'x': 10, 'y': 5}) == 10 assert find_max_value({'key': 7}) == 7"
def find_min_value(dict): return min(dict.values()),"Finds the minimum value in a dictionary.

This function returns the minimum value among the values in the input dictionary dict.","def test_find_min_value(): assert find_min_value({'a': 1, 'b': 2}) == 1 assert find_min_value({'x': 10, 'y': 5}) == 5 assert find_min_value({'key': 7}) == 7"
"def flatten_dict(d): result = {} for k, v in d.items(): if isinstance(v, dict): result.update(flatten_dict(v)) else: result[k] = v return result","Flattens a nested dictionary.

This function returns a flattened dictionary where nested dictionaries are merged into a single level, with keys from nested dictionaries combined with their parent keys.","def test_flatten_dict(): assert flatten_dict({'a': {'b': 1}, 'c': 2}) == {'b': 1, 'c': 2} assert flatten_dict({'x': 10, 'y': {'z': 20}}) == {'x': 10, 'z': 20} assert flatten_dict({}) == {}"
def get_unique_values(dict): return list(set(dict.values())),"Gets unique values from a dictionary.

This function returns a list of unique values from the input dictionary dict, with duplicates removed.","def test_get_unique_values(): assert get_unique_values({'a': 1, 'b': 2, 'c': 1}) == [1, 2] assert get_unique_values({'x': 10, 'y': 10}) == [10] assert get_unique_values({}) == []"
def is_even(n): return n % 2 == 0,"Checks if a number is even.

This function returns True if the input number n is even, otherwise False.",def test_is_even(): assert is_even(2) assert not is_even(3) assert is_even(0)
"def generate_even_numbers(n): return [i for i in range(2, n + 1, 2)]","Generates a list of even numbers up to n.

This function returns a list of all even numbers from 2 to n inclusive.","def test_generate_even_numbers(): assert generate_even_numbers(10) == [2, 4, 6, 8, 10] assert generate_even_numbers(5) == [2, 4] assert generate_even_numbers(1) == []"
"def get_index_of_element(lst, item): return lst.index(item) if item in lst else -1","Gets the index of an element in a list.

This function returns the index of the first occurrence of the input item in the input list lst. If the item is not found, it returns -1.","def test_get_index_of_element(): assert get_index_of_element([1, 2, 3], 2) == 1 assert get_index_of_element([4, 5], 6) == -1 assert get_index_of_element([], 1) == -1"
"def find_longest_word(words): return max(words, key=len)","Finds the longest word in a list of words.

This function returns the longest word from a list of words. If there are multiple words with the same length, it returns the first one encountered.","def test_find_longest_word(): assert find_longest_word([""apple"", ""banana"", ""cherry""]) == ""banana"" assert find_longest_word([""cat"", ""elephant"", ""tiger""]) == ""elephant"" assert find_longest_word([""a"", ""b"", ""c""]) == ""a"""
"def is_sublist(lst1, lst2): return all(item in lst2 for item in lst1)","Checks if a list is a sublist of another list.

This function returns True if all elements in the input list lst1 are present in the input list lst2.","def test_is_sublist(): assert is_sublist([1, 2], [1, 2, 3]) assert not is_sublist([1, 4], [1, 2, 3]) assert is_sublist([], [1, 2, 3])"
def calculate_mean_of_dict_values(d): return sum(d.values()) / len(d) if d else 0,"Calculates the mean of values in a dictionary.

This function returns the average of all values in the input dictionary d. If the dictionary is empty, it returns 0.","def test_calculate_mean_of_dict_values(): assert calculate_mean_of_dict_values({'a': 1, 'b': 2}) == 1.5 assert calculate_mean_of_dict_values({'x': 10, 'y': 20}) == 15 assert calculate_mean_of_dict_values({}) == 0"
def filter_even_numbers(lst): return [x for x in lst if x % 2 == 0],Filters out even numbers from a list.,"def test_filter_even_numbers(): assert filter_even_numbers([1, 2, 3, 4]) == [2, 4] assert filter_even_numbers([5, 6, 7, 8]) == [6, 8] assert filter_even_numbers([]) == []"
def find_smallest_number(lst): return min(lst) if lst else None,"Finds the smallest number in a list.

This function returns the smallest number from the input list lst. If the list is empty, it returns None.","def test_find_smallest_number(): assert find_smallest_number([1, 2, 3]) == 1 assert find_smallest_number([7, 4, 6]) == 4 assert find_smallest_number([]) is None"
def remove_vowels(s): return ''.join(c for c in s if c not in 'aeiouAEIOU'),"Removes vowels from a string.

This function returns a new string with all vowels removed from the input string s.",def test_remove_vowels(): assert remove_vowels("hello") == "hll" assert remove_vowels("world") == "wrld" assert remove_vowels("AEIOU") == ""
def calculate_area_of_circle(radius): import math return math.pi * radius ** 2,"Calculates the area of a circle.

This function returns the area of a circle with the given radius, using the formula p?adius2\pi \times \text{radius}^2p?adius2.","def test_calculate_area_of_circle(): assert calculate_area_of_circle(1) == pytest.approx(3.1416, rel=1e-4) assert calculate_area_of_circle(2) == pytest.approx(12.5664, rel=1e-4) assert calculate_area_of_circle(0) == 0"
def find_duplicates(lst): seen = set() duplicates = set() for item in lst: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates),Finds duplicate elements in a list.,"def test_find_duplicates(): assert find_duplicates([1, 2, 2, 3, 4, 4]) == [2, 4] assert find_duplicates([1, 2, 3]) == [] assert find_duplicates([1, 1, 1]) == [1]"
def is_palindrome(s): return s == s[::-1],Checks if a string is a palindrome.,def test_is_palindrome(): assert is_palindrome("radar") assert not is_palindrome("hello") assert is_palindrome("level")
"def calculate_area_of_rectangle(length, width): return length * width","Calculates the area of a rectangle.

This function returns the area of a rectangle given its length and width, using the formula length * width.","def test_calculate_area_of_rectangle(): assert calculate_area_of_rectangle(5, 4) == 20 assert calculate_area_of_rectangle(7, 3) == 21 assert calculate_area_of_rectangle(0, 10) == 0"
def find_second_largest(lst): return sorted(set(lst))[-2] if len(set(lst)) > 1 else None,"Finds the second largest value in a list.

This function returns the second largest unique value from the input list lst. If there are fewer than two unique values, it returns None.","def test_find_second_largest(): assert find_second_largest([1, 2, 3]) == 2 assert find_second_largest([7, 4, 4, 6]) == 6 assert find_second_largest([1, 1]) is None"
def calculate_factorial(n): from math import factorial return factorial(n),"Calculates the factorial of a number.

This function returns the factorial of the input number n, using Python's built-in math.factorial function.",def test_calculate_factorial(): assert calculate_factorial(5) == 120 assert calculate_factorial(0) == 1 assert calculate_factorial(3) == 6
"def merge_dicts(d1, d2): result = d1.copy() result.update(d2) return result","Merges two dictionaries.

This function returns a new dictionary by merging the input dictionaries d1 and d2. Values from d2 overwrite those from d1 if they have the same key.","def test_merge_dicts(): assert merge_dicts({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2} assert merge_dicts({'x': 10}, {'x': 20, 'y': 30}) == {'x': 20, 'y': 30} assert merge_dicts({}, {}) == {}"
def get_last_element(lst): return lst[-1] if lst else None,Gets the last element of a list.,"def test_get_last_element(): assert get_last_element([1, 2, 3]) == 3 assert get_last_element(['a', 'b']) == 'b' assert get_last_element([]) is None"
def count_vowels(s): return sum(1 for c in s if c in 'aeiouAEIOU'),"Counts the number of vowels in a string.

This function returns the count of vowels (a, e, i, o, u) in the input string s.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("world") == 1 assert count_vowels("python") == 1
"def get_common_elements(lst1, lst2): return list(set(lst1) & set(lst2))",Finds common elements between two lists.,"def test_get_common_elements(): assert get_common_elements([1, 2, 3], [3, 4, 5]) == [3] assert get_common_elements([1, 2], [3, 4]) == [] assert get_common_elements([1, 2, 3], [2, 3, 4]) == [2, 3]"
def calculate_median(lst): from statistics import median return median(lst),"Calculates the median of a list.

This function returns the median of the input list lst using Python's built-in statistics.median function.","def test_calculate_median(): assert calculate_median([1, 3, 2]) == 2 assert calculate_median([1, 2, 3, 4]) == 2.5 assert calculate_median([]) == None"
def remove_non_alpha(s): return ''.join(c for c in s if c.isalpha()),"Removes non-alphabetic characters from a string.

This function returns a new string with all non-alphabetic characters removed from the input string s.",def test_remove_non_alpha(): assert remove_non_alpha("hello123") == "hello" assert remove_non_alpha("world!") == "world" assert remove_non_alpha("pyth0n") == "pythn"
"def calculate_sum_of_squares(n): return sum(i**2 for i in range(1, n + 1))","Calculates the sum of squares of numbers up to n.

This function returns the sum of squares of all integers from 1 to n, inclusive.",def test_calculate_sum_of_squares(): assert calculate_sum_of_squares(3) == 14 assert calculate_sum_of_squares(4) == 30 assert calculate_sum_of_squares(0) == 0
"def find_intersection(lst1, lst2): return list(set(lst1).intersection(set(lst2)))",Finds the intersection of two lists.,"def test_find_intersection(): assert find_intersection([1, 2, 3], [3, 4, 5]) == [3] assert find_intersection([1, 2], [3, 4]) == [] assert find_intersection([1, 2, 3], [2, 3, 4]) == [2, 3]"
def calculate_product(lst): from math import prod return prod(lst),"Calculates the product of a list of numbers.

This function returns the product of all elements in the input list lst using Python's built-in math.prod function.","def test_calculate_product(): assert calculate_product([1, 2, 3]) == 6 assert calculate_product([4, 5, 6]) == 120 assert calculate_product([]) == 1"
"def get_max_length_word(words): return max(words, key=len)","Finds the longest word in a list of words.

This function returns the word with the maximum length from a list of words.","def test_get_max_length_word(): assert get_max_length_word([""apple"", ""banana"", ""cherry""]) == ""banana"" assert get_max_length_word([""cat"", ""elephant"", ""tiger""]) == ""elephant"" assert get_max_length_word([""a"", ""b"", ""c""]) == ""a"""
def remove_punctuation(s): import string return ''.join(c for c in s if c not in string.punctuation),"Removes punctuation from a string.

This function returns a new string with all punctuation characters removed from the input string s.","def test_remove_punctuation(): assert remove_punctuation(""hello, world!"") == ""hello world"" assert remove_punctuation(""python."") == ""python"" assert remove_punctuation(""test!!"") == ""test"""
"def is_prime(n): if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True",Checks if a number is prime.,def test_is_prime(): assert is_prime(2) assert is_prime(3) assert not is_prime(4) assert not is_prime(1)
def get_unique_words(s): return list(set(s.split())),"Gets unique words from a string.

This function returns a list of unique words from the input string s, where words are separated by whitespace.","def test_get_unique_words(): assert get_unique_words(""hello world hello"") == [""hello"", ""world""] assert get_unique_words(""code python"") == [""python"", ""code""] assert get_unique_words("""") == []"
"def calculate_power(base, exponent): return base ** exponent",Calculates the power of a base number raised to an exponent.,"def test_calculate_power(): assert calculate_power(2, 3) == 8 assert calculate_power(5, 0) == 1 assert calculate_power(7, 2) == 49"
def extract_numbers(s): return [int(c) for c in s if c.isdigit()],"Extracts numbers from a string.

This function returns a list of integers found in the input string s.","def test_extract_numbers(): assert extract_numbers(""abc123"") == [1, 2, 3] assert extract_numbers(""no numbers"") == [] assert extract_numbers(""4a5b6"") == [4, 5, 6]"
"def find_difference(lst1, lst2): return list(set(lst1) - set(lst2))",Finds elements in the first list that are not in the second list.,"def test_find_difference(): assert find_difference([1, 2, 3], [3, 4, 5]) == [1, 2] assert find_difference([4, 5, 6], [4, 6]) == [5] assert find_difference([1, 2], [2, 3]) == [1]"
def get_frequency(lst): from collections import Counter return dict(Counter(lst)),"Gets the frequency of elements in a list.

This function returns a dictionary where keys are elements from the list lst and values are their counts.","def test_get_frequency(): assert get_frequency([1, 2, 2, 3]) == {1: 1, 2: 2, 3: 1} assert get_frequency([4, 4, 4]) == {4: 3} assert get_frequency([]) == {}"
"def calculate_fibonacci(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return a","Calculates the nth Fibonacci number.

This function returns the nth number in the Fibonacci sequence.",def test_calculate_fibonacci(): assert calculate_fibonacci(0) == 0 assert calculate_fibonacci(1) == 1 assert calculate_fibonacci(5) == 5
"def find_divisors(n): return [i for i in range(1, n + 1) if n % i == 0]","Finds all divisors of a number.

This function returns a list of all divisors of the input number n.","def test_find_divisors(): assert find_divisors(6) == [1, 2, 3, 6] assert find_divisors(10) == [1, 2, 5, 10] assert find_divisors(13) == [1, 13]"
"def flatten_list(lst): result = [] for item in lst: if isinstance(item, list): result.extend(flatten_list(item)) else: result.append(item) return result","Flattens a nested list.

This function returns a single list containing all elements from the nested list lst, with nested lists flattened.","def test_flatten_list(): assert flatten_list([1, [2, [3, 4]], 5]) == [1, 2, 3, 4, 5] assert flatten_list([[1, 2], [3, [4, 5]]]) == [1, 2, 3, 4, 5] assert flatten_list([]) == []"
"def split_string(s, delimiter): return s.split(delimiter)",Splits a string by a delimiter.,"```def test_split_string(): assert split_string(""hello,world"", "","") == [""hello"", ""world""] assert split_string(""a"
def sum_of_digits(n): return sum(int(digit) for digit in str(n)),"Calculates the sum of digits of a number.

This function returns the sum of all digits in the input number n.",def test_sum_of_digits(): assert sum_of_digits(123) == 6 assert sum_of_digits(456) == 15 assert sum_of_digits(0) == 0
"def calculate_exponent(base, exponent): return base ** exponent",Calculates the exponentiation of a base number.,"def test_calculate_exponent(): assert calculate_exponent(2, 3) == 8 assert calculate_exponent(5, 0) == 1 assert calculate_exponent(7, 2) == 49"
def generate_square_numbers(n): return [i**2 for i in range(n)],"Generates a list of square numbers up to n.

This function returns a list of squares of numbers from 0 to n-1.","def test_generate_square_numbers(): assert generate_square_numbers(3) == [0, 1, 4] assert generate_square_numbers(5) == [0, 1, 4, 9, 16] assert generate_square_numbers(0) == []"
def calculate_mean(numbers): return sum(numbers) / len(numbers) if numbers else 0,"Calculates the mean of a list of numbers.

This function returns the average of all numbers in the input list numbers. If the list is empty, it returns 0.","def test_calculate_mean(): assert calculate_mean([1, 2, 3]) == 2 assert calculate_mean([4, 5, 6]) == 5 assert calculate_mean([]) == 0"
"def get_longest_word(words): return max(words, key=len)","Finds the longest word from a list.

This function returns the longest word from the input list of words.","def test_get_longest_word(): assert get_longest_word([""apple"", ""banana"", ""cherry""]) == ""banana"" assert get_longest_word([""cat"", ""elephant"", ""tiger""]) == ""elephant"" assert get_longest_word([""a"", ""b"", ""c""]) == ""a"""
def convert_to_lowercase(s): return s.lower(),"Converts a string to lowercase.

This function returns the input string s converted to lowercase.",def test_convert_to_lowercase(): assert convert_to_lowercase("HELLO") == "hello" assert convert_to_lowercase("World") == "world" assert convert_to_lowercase("") == ""
def find_largest_number(lst): return max(lst) if lst else None,"Finds the largest number in a list.

This function returns the largest number from the input list lst. If the list is empty, it returns None.","def test_find_largest_number(): assert find_largest_number([1, 2, 3]) == 3 assert find_largest_number([7, 4, 9]) == 9 assert find_largest_number([]) is None"
def convert_to_celsius(fahrenheit): return (fahrenheit - 32) * 5 / 9,"Converts Fahrenheit to Celsius.

This function returns the Celsius equivalent of the input temperature in Fahrenheit.",def test_convert_to_celsius(): assert convert_to_celsius(32) == 0 assert convert_to_celsius(100) == 37.7778 assert convert_to_celsius(212) == 100
def calculate_sum_of_squares(lst): return sum(x**2 for x in lst),Calculates the sum of squares of numbers in a list.,"def test_calculate_sum_of_squares(): assert calculate_sum_of_squares([1, 2, 3]) == 14 assert calculate_sum_of_squares([4, 5, 6]) == 77 assert calculate_sum_of_squares([]) == 0"
def find_max_in_nested_list(nested_lst): return max(max(sublist) for sublist in nested_lst if sublist),"Finds the maximum number in a nested list.

This function returns the largest number from the nested input list nested_lst.","def test_find_max_in_nested_list(): assert find_max_in_nested_list([[1, 2], [3, 4]]) == 4 assert find_max_in_nested_list([[7, 5], [6, 8]]) == 8 assert find_max_in_nested_list([[], [1]]) == 1"
def is_odd(n): return n % 2 != 0,"Checks if a number is odd.

This function returns True if the input number n is odd, otherwise False.",def test_is_odd(): assert is_odd(1) assert not is_odd(2) assert is_odd(13)
"def calculate_perimeter_of_rectangle(length, width): return 2 * (length + width)","Calculates the perimeter of a rectangle.

This function returns the perimeter of a rectangle given its length and width, using the formula 2 * (length + width).","def test_calculate_perimeter_of_rectangle(): assert calculate_perimeter_of_rectangle(5, 4) == 18 assert calculate_perimeter_of_rectangle(7, 3) == 20 assert calculate_perimeter_of_rectangle(0, 10) == 20"
def find_max_occurrence(lst): from collections import Counter count = Counter(lst) return count.most_common(1)[0][0],Finds the most frequent element in a list.,"def test_find_max_occurrence(): assert find_max_occurrence([1, 2, 2, 3]) == 2 assert find_max_occurrence([4, 4, 4, 5, 5]) == 4 assert find_max_occurrence([1, 1, 1]) == 1"
def reverse_list(lst): return lst[::-1],Reverses a list.,"def test_reverse_list(): assert reverse_list([1, 2, 3]) == [3, 2, 1] assert reverse_list(['a', 'b', 'c']) == ['c', 'b', 'a'] assert reverse_list([]) == []"
def extract_keys(d): return list(d.keys()),Extracts keys from a dictionary.,"def test_extract_keys(): assert extract_keys({'a': 1, 'b': 2}) == ['a', 'b'] assert extract_keys({'x': 10}) == ['x'] assert extract_keys({}) == []"
def calculate_average(lst): return sum(lst) / len(lst) if lst else 0,"Calculates the average of numbers in a list.

This function returns the average of all numbers in the input list lst. If the list is empty, it returns 0.","def test_calculate_average(): assert calculate_average([1, 2, 3]) == 2 assert calculate_average([4, 5, 6]) == 5 assert calculate_average([]) == 0"
def count_words(s): return len(s.split()),"Counts the number of words in a string.

This function returns the number of words in the input string s, where words are separated by whitespace.",def test_count_words(): assert count_words("hello world") == 2 assert count_words("one two three four") == 4 assert count_words("") == 0
def is_even(n): return n % 2 == 0,Checks if a number is even.,def test_is_even(): assert is_even(2) assert not is_even(3) assert is_even(10)
def convert_to_int(s): return int(s),"Converts a string to an integer.

This function returns the integer representation of the input string s.",def test_convert_to_int(): assert convert_to_int("123") == 123 assert convert_to_int("0") == 0 assert convert_to_int("-456") == -456
"def calculate_discount(price, discount_percentage): return price - (price * discount_percentage / 100)","Calculates the discounted price.

This function returns the price after applying a discount of discount_percentage to the original price.","def test_calculate_discount(): assert calculate_discount(100, 20) == 80 assert calculate_discount(200, 10) == 180 assert calculate_discount(50, 0) == 50"
"def get_keys_and_values(d): return list(d.keys()), list(d.values())","Gets keys and values from a dictionary.

This function returns two lists: one containing the keys and the other containing the values from the input dictionary d.","def test_get_keys_and_values(): assert get_keys_and_values({'a': 1, 'b': 2}) == (['a', 'b'], [1, 2]) assert get_keys_and_values({'x': 10}) == (['x'], [10]) assert get_keys_and_values({}) == ([], [])"
"def calculate_area_of_triangle(base, height): return 0.5 * base * height","Calculates the area of a triangle.

This function returns the area of a triangle given its base and height, using the formula 0.5 * base * height.","def test_calculate_area_of_triangle(): assert calculate_area_of_triangle(5, 4) == 10 assert calculate_area_of_triangle(7, 3) == 10.5 assert calculate_area_of_triangle(0, 10) == 0"
def find_min_in_list(lst): return min(lst) if lst else None,Finds the minimum value in a list.,"def test_find_min_in_list(): assert find_min_in_list([1, 2, 3]) == 1 assert find_min_in_list([7, 4, 9]) == 4 assert find_min_in_list([]) is None"
def calculate_cube(n): return n ** 3,"Calculates the cube of a number.

This function returns the cube of the input number n, using the formula n ** 3.",def test_calculate_cube(): assert calculate_cube(2) == 8 assert calculate_cube(3) == 27 assert calculate_cube(0) == 0
def convert_to_str(n): return str(n),"Converts a number to a string.

This function returns the string representation of the input number n.",def test_convert_to_str(): assert convert_to_str(123) == "123" assert convert_to_str(0) == "0" assert convert_to_str(-456) == "-456"
"def find_common_elements(lst1, lst2): return list(set(lst1) & set(lst2))",Finds common elements between two lists.,"def test_find_common_elements(): assert find_common_elements([1, 2, 3], [2, 3, 4]) == [2, 3] assert find_common_elements([4, 5, 6], [1, 2, 3]) == [] assert find_common_elements([1, 2, 3], [3, 3, 2]) == [2, 3]"
"def generate_factors(n): return [i for i in range(1, n + 1) if n % i == 0]","Generates factors of a number.

This function returns a list of all factors of the input number n.","def test_generate_factors(): assert generate_factors(6) == [1, 2, 3, 6] assert generate_factors(10) == [1, 2, 5, 10] assert generate_factors(13) == [1, 13]"
"def calculate_gcd(a, b): while b: a, b = b, a % b return a","Calculates the greatest common divisor (GCD) of two numbers.

This function returns the greatest common divisor of a and b using the Euclidean algorithm.","def test_calculate_gcd(): assert calculate_gcd(48, 18) == 6 assert calculate_gcd(101, 10) == 1 assert calculate_gcd(56, 98) == 14"
"def merge_dicts(d1, d2): result = d1.copy() result.update(d2) return result","Merges two dictionaries.

This function returns a new dictionary that combines keys and values from both d1 and d2. If keys overlap, values from d2 overwrite those from d1.","def test_merge_dicts(): assert merge_dicts({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2} assert merge_dicts({'x': 10}, {'x': 20, 'y': 30}) == {'x': 20, 'y': 30}"
"def find_lcm(a, b): from math import gcd return abs(a * b) // gcd(a, b)","Finds the least common multiple (LCM) of two numbers.

This function returns the least common multiple of a and b using their greatest common divisor.","def test_find_lcm(): assert find_lcm(4, 5) == 20 assert find_lcm(15, 20) == 60 assert find_lcm(7, 9) == 63"
def extract_vowels(s): return ''.join(c for c in s if c in 'aeiouAEIOU'),"Extracts vowels from a string.

This function returns a new string containing only the vowel characters from the input string s.",def test_extract_vowels(): assert extract_vowels("hello") == "eo" assert extract_vowels("Python") == "o" assert extract_vowels("abcd") == "a"
def is_perfect_square(n): return int(n**0.5) ** 2 == n,"Checks if a number is a perfect square.

This function returns True if the input number n is a perfect square, otherwise False.",def test_is_perfect_square(): assert is_perfect_square(16) assert not is_perfect_square(18) assert is_perfect_square(25)
def remove_duplicates(lst): return list(set(lst)),Removes duplicate elements from a list.,"def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates([4, 4, 4]) == [4] assert remove_duplicates([]) == []"
def sum_list(lst): return sum(lst),"Calculates the sum of elements in a list.

This function returns the total sum of all elements in the input list lst.","def test_sum_list(): assert sum_list([1, 2, 3]) == 6 assert sum_list([10, 20]) == 30 assert sum_list([]) == 0"
def get_keys(d): return d.keys(),"Retrieves keys from a dictionary.

This function returns a view object of all keys in the input dictionary d.","def test_get_keys(): assert get_keys({'a': 1, 'b': 2}) == dict_keys(['a', 'b']) assert get_keys({'x': 10}) == dict_keys(['x']) assert get_keys({}) == dict_keys([])"
"def merge_lists(lst1, lst2): return lst1 + lst2","Merges two lists.

This function returns a new list that combines elements from both lst1 and lst2.","def test_merge_lists(): assert merge_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_lists([], [5]) == [5] assert merge_lists([1, 2], []) == [1, 2]"
def reverse_string(s): return s[::-1],Reverses a string.,def test_reverse_string(): assert reverse_string("hello") == "olleh" assert reverse_string("Python") == "nohtyP" assert reverse_string("") == ""
"def is_valid_email(email): import re return re.match(r""[^@]+@[^@]+\.[^@]+"", email) is not None","Checks if an email address is valid.

This function returns True if the input string email matches a simple regex pattern for email addresses, otherwise False.",def test_is_valid_email(): assert is_valid_email("test@example.com") assert not is_valid_email("test@.com") assert not is_valid_email("test@com")
"def count_occurrences(lst, item): return lst.count(item)","Counts occurrences of an item in a list.

This function returns the number of times item appears in the input list lst.","def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences([4, 4, 4], 5) == 0 assert count_occurrences([], 1) == 0"
"def find_longest_word(words): return max(words, key=len)","Finds the longest word in a list.

This function returns the word with the maximum length from the input list of words.","def test_find_longest_word(): assert find_longest_word([""apple"", ""banana"", ""cherry""]) == ""banana"" assert find_longest_word([""cat"", ""elephant"", ""tiger""]) == ""elephant"" assert find_longest_word([""a"", ""b"", ""c""]) == ""a"""
def filter_even_numbers(lst): return [x for x in lst if x % 2 == 0],Filters even numbers from a list.,"def test_filter_even_numbers(): assert filter_even_numbers([1, 2, 3, 4]) == [2, 4] assert filter_even_numbers([5, 6, 7, 8]) == [6, 8] assert filter_even_numbers([1, 3, 5]) == []"
def factorial(n): return 1 if n == 0 else n * factorial(n - 1),Calculates the factorial of a number.,def test_factorial(): assert factorial(5) == 120 assert factorial(0) == 1 assert factorial(3) == 6
def flatten_list(nested_lst): return [item for sublist in nested_lst for item in sublist],"Flattens a nested list.

This function returns a single list containing all elements from the nested input list nested_lst.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([[5], [6, 7]]) == [5, 6, 7] assert flatten_list([]) == []"
def extract_numbers(s): return [int(word) for word in s.split() if word.isdigit()],Extracts numbers from a string.,"def test_extract_numbers(): assert extract_numbers(""hello 123 world 456"") == [123, 456] assert extract_numbers(""no numbers here"") == [] assert extract_numbers(""42 56"") == [42, 56]"
def convert_to_float(s): return float(s),"Converts a string to a float.

This function returns the floating-point representation of the input string s.",def test_convert_to_float(): assert convert_to_float("12.34") == 12.34 assert convert_to_float("0.0") == 0.0 assert convert_to_float("-56.78") == -56.78
"def find_duplicates(lst): from collections import Counter count = Counter(lst) return [item for item, freq in count.items() if freq > 1]",Finds duplicate elements in a list.,"def test_find_duplicates(): assert find_duplicates([1, 2, 2, 3, 3, 4]) == [2, 3] assert find_duplicates([5, 5, 5]) == [5] assert find_duplicates([1, 2, 3]) == []"
"def generate_fibonacci(n): a, b = 0, 1 result = [] for _ in range(n): result.append(a) a, b = b, a + b return result","Generates the first n Fibonacci numbers.

This function returns a list of the first n numbers in the Fibonacci sequence.","def test_generate_fibonacci(): assert generate_fibonacci(5) == [0, 1, 1, 2, 3] assert generate_fibonacci(3) == [0, 1, 1] assert generate_fibonacci(0) == []"
"def get_max_key(d): return max(d, key=d.get)","Finds the key with the maximum value in a dictionary.

This function returns the key associated with the maximum value in the input dictionary d.","def test_get_max_key(): assert get_max_key({'a': 1, 'b': 2}) == 'b' assert get_max_key({'x': 10, 'y': 20}) == 'y' assert get_max_key({'k': 7}) == 'k'"
"def get_min_key(d): return min(d, key=d.get)","Finds the key with the minimum value in a dictionary.

This function returns the key associated with the minimum value in the input dictionary d.","def test_get_min_key(): assert get_min_key({'a': 1, 'b': 2}) == 'a' assert get_min_key({'x': 10, 'y': 5}) == 'y' assert get_min_key({'k': 7}) == 'k'"
def generate_power_of_two(n): return [2**i for i in range(n)],"Generates the first n powers of two.

This function returns a list of the first n powers of two.","def test_generate_power_of_two(): assert generate_power_of_two(3) == [1, 2, 4] assert generate_power_of_two(5) == [1, 2, 4, 8, 16] assert generate_power_of_two(0) == []"
"def split_string(s, delimiter): return s.split(delimiter)",Splits a string by a delimiter.,"```def test_split_string(): assert split_string(""a,b,c"", "","") == [""a"", ""b"", ""c""] assert split_string(""one"
def count_digits(s): return sum(c.isdigit() for c in s),"Counts the number of digits in a string.

This function returns the total number of digit characters in the input string s.",def test_count_digits(): assert count_digits("abc123") == 3 assert count_digits("hello") == 0 assert count_digits("12345") == 5
"def generate_range(start, end): return list(range(start, end))","Generates a list of numbers in a range.

This function returns a list of integers from start to end - 1.","def test_generate_range(): assert generate_range(1, 5) == [1, 2, 3, 4] assert generate_range(0, 3) == [0, 1, 2] assert generate_range(5, 5) == []"
"def merge_sorted_lists(lst1, lst2): return sorted(lst1 + lst2)","Merges and sorts two lists.

This function returns a new list that is the result of merging lst1 and lst2 and then sorting the combined list.","def test_merge_sorted_lists(): assert merge_sorted_lists([1, 3], [2, 4]) == [1, 2, 3, 4] assert merge_sorted_lists([5, 6], [1, 2]) == [1, 2, 5, 6] assert merge_sorted_lists([], [7]) == [7]"
"def is_prime(n): if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True",Checks if a number is prime.,def test_is_prime(): assert is_prime(2) assert not is_prime(4) assert is_prime(7)
def sort_list(lst): return sorted(lst),"Sorts a list.

This function returns a new list with elements from the input list lst sorted in ascending order.","def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list([10, 5, 8]) == [5, 8, 10] assert sort_list([]) == []"
"def repeat_string(s, n): return s * n","Repeats a string n times.

This function returns a new string formed by repeating the input string s, n times.","def test_repeat_string(): assert repeat_string(""abc"", 3) == ""abcabcabc"" assert repeat_string(""x"", 5) == ""xxxxx"" assert repeat_string("""", 10) == """""
def square_numbers(lst): return [x**2 for x in lst],"Squares each number in a list.

This function returns a new list with each element from the input list lst squared.","def test_square_numbers(): assert square_numbers([1, 2, 3]) == [1, 4, 9] assert square_numbers([4, 5]) == [16, 25] assert square_numbers([]) == []"
def find_max(lst): return max(lst),"Finds the maximum value in a list.

This function returns the maximum value among the elements in the input list lst.","def test_find_max(): assert find_max([1, 2, 3]) == 3 assert find_max([10, 20, 30]) == 30 assert find_max([-5, -1, -3]) == -1"
def find_min(lst): return min(lst),"Finds the minimum value in a list.

This function returns the minimum value among the elements in the input list lst.","def test_find_min(): assert find_min([1, 2, 3]) == 1 assert find_min([10, 20, 30]) == 10 assert find_min([-5, -1, -3]) == -5"
def calculate_mean(lst): return sum(lst) / len(lst) if lst else 0,"Calculates the mean of a list of numbers.

This function returns the arithmetic mean of the elements in the input list lst. If the list is empty, it returns 0.","def test_calculate_mean(): assert calculate_mean([1, 2, 3]) == 2 assert calculate_mean([4, 5, 6]) == 5 assert calculate_mean([]) == 0"
"def remove_whitespace(s): return s.replace("" "", """")","Removes all whitespace from a string.

This function returns a new string with all spaces removed from the input string s.",def test_remove_whitespace(): assert remove_whitespace("hello world") == "helloworld" assert remove_whitespace(" abc ") == "abc" assert remove_whitespace("") == ""
"def join_list(lst, delimiter): return delimiter.join(map(str, lst))","Joins elements of a list into a string with a delimiter.

This function returns a single string created by concatenating elements of the input list lst, separated by the specified delimiter.","def test_join_list(): assert join_list([1, 2, 3], ""-"") == ""1-2-3"" assert join_list([""a"", ""b"", ""c""], "","") == ""a,b,c"" assert join_list([], "":"") == """""
def remove_non_alpha(s): return ''.join(c for c in s if c.isalpha()),"Removes non-alphabetic characters from a string.

This function returns a new string containing only the alphabetic characters from the input string s.",def test_remove_non_alpha(): assert remove_non_alpha("a1b2c3") == "abc" assert remove_non_alpha("hello!") == "hello" assert remove_non_alpha("123") == ""
def count_words(s): return len(s.split()),Counts the number of words in a string.,def test_count_words(): assert count_words("hello world") == 2 assert count_words("is great") == 3 assert count_words("") == 0
def get_unique_elements(lst): return list(set(lst)),Gets unique elements from a list.,"def test_get_unique_elements(): assert get_unique_elements([1, 2, 2, 3]) == [1, 2, 3] assert get_unique_elements([5, 5, 5]) == [5] assert get_unique_elements([]) == []"
def convert_to_uppercase(s): return s.upper(),"Converts a string to uppercase.

This function returns a new string where all characters from the input string s are converted to uppercase.",def test_convert_to_uppercase(): assert convert_to_uppercase("hello") == "HELLO" assert convert_to_uppercase("Python") == "PYTHON" assert convert_to_uppercase("") == ""
def convert_to_lowercase(s): return s.lower(),"Converts a string to lowercase.

This function returns a new string where all characters from the input string s are converted to lowercase.",def test_convert_to_lowercase(): assert convert_to_lowercase("HELLO") == "hello" assert convert_to_lowercase("Python") == "python" assert convert_to_lowercase("") == ""
"def remove_duplicates_from_string(s): return ''.join(sorted(set(s), key=s.index))","Removes duplicate characters from a string.

This function returns a new string with duplicate characters removed while preserving the original order of first occurrences.",def test_remove_duplicates_from_string(): assert remove_duplicates_from_string("banana") == "ban" assert remove_duplicates_from_string("aabbcc") == "abc" assert remove_duplicates_from_string("") == ""
"def is_divisible_by(n, divisor): return n % divisor == 0","Checks if a number is divisible by another number.

This function returns True if the input number n is divisible by divisor, otherwise False.","def test_is_divisible_by(): assert is_divisible_by(10, 2) assert not is_divisible_by(10, 3) assert is_divisible_by(21, 7)"
"def find_common_elements(lst1, lst2): return list(set(lst1).intersection(lst2))",Finds common elements between two lists.,"def test_find_common_elements(): assert find_common_elements([1, 2, 3], [2, 3, 4]) == [2, 3] assert find_common_elements([4, 5, 6], [1, 2, 3]) == [] assert find_common_elements([1, 2, 3], [3, 3, 2]) == [2, 3]"
"def get_intersection(lst1, lst2): return list(set(lst1) & set(lst2))","Computes the intersection of two lists.

This function returns a list containing only the elements that appear in both lst1 and lst2.","def test_get_intersection(): assert get_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert get_intersection([4, 5, 6], [1, 2, 3]) == [] assert get_intersection([1, 2, 3], [3, 3, 2]) == [2, 3]"
"def count_occurrences(lst, item): return lst.count(item)",Counts occurrences of an item in a list.,"def test_count_occurrences(): assert count_occurrences([1, 2, 3, 2], 2) == 2 assert count_occurrences([4, 4, 4], 4) == 3 assert count_occurrences([1, 2, 3], 4) == 0"
"def find_longest_word(words): return max(words, key=len)","Finds the longest word in a list.

This function returns the word with the maximum length from the input list words.","def test_find_longest_word(): assert find_longest_word([""cat"", ""elephant"", ""dog""]) == ""elephant"" assert find_longest_word([""apple"", ""banana"", ""cherry""]) == ""banana"" assert find_longest_word([""a"", ""ab"", ""abc""]) == ""abc"""
"def generate_random_numbers(n, start, end): import random return [random.randint(start, end) for _ in range(n)]","Generates a list of random numbers.

This function returns a list of n random integers between start and end, inclusive.","def test_generate_random_numbers(): import random random.seed(1) assert generate_random_numbers(5, 1, 10) == [6, 1, 7, 1, 8] random.seed(2) assert generate_random_numbers(3, 5, 15) == [8, 15, 5] assert generate_random_numbers(0, 1, 10) == []"
def reverse_list(lst): return lst[::-1],"Reverses the elements of a list.

This function returns a new list with the elements of the input list lst in reversed order.","def test_reverse_list(): assert reverse_list([1, 2, 3]) == [3, 2, 1] assert reverse_list([4, 5, 6, 7]) == [7, 6, 5, 4] assert reverse_list([]) == []"
"def merge_dicts(d1, d2): return {**d1, **d2}","Merges two dictionaries.

This function returns a new dictionary combining the key-value pairs from d1 and d2. If keys overlap, d2 values overwrite d1 values.","def test_merge_dicts(): assert merge_dicts({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2} assert merge_dicts({'a': 1}, {'a': 2}) == {'a': 2} assert merge_dicts({}, {'b': 2}) == {'b': 2}"
def list_to_dict(lst): return {i: lst[i] for i in range(len(lst))},"Converts a list to a dictionary with indices as keys.

This function returns a dictionary where the keys are the indices of the elements in the input list lst and the values are the elements themselves.","def test_list_to_dict(): assert list_to_dict(['a', 'b', 'c']) == {0: 'a', 1: 'b', 2: 'c'} assert list_to_dict([1, 2]) == {0: 1, 1: 2} assert list_to_dict([]) == {}"
def dict_to_list(d): return list(d.values()),"Converts a dictionary's values to a list.

This function returns a list containing all the values from the input dictionary d.","def test_dict_to_list(): assert dict_to_list({'a': 1, 'b': 2}) == [1, 2] assert dict_to_list({'x': 10}) == [10] assert dict_to_list({}) == []"
def list_sum(lst): return sum(lst),"Calculates the sum of elements in a list.

This function returns the total sum of all numeric elements in the input list lst.","def test_list_sum(): assert list_sum([1, 2, 3]) == 6 assert list_sum([10, -5, 5]) == 10 assert list_sum([]) == 0"
"def factorial_iter(n): result = 1 for i in range(1, n + 1): result *= i return result","Calculates the factorial of a number using iteration.

This function returns the factorial of the input number n by iterating from 1 to n and multiplying the values.",def test_factorial_iter(): assert factorial_iter(5) == 120 assert factorial_iter(0) == 1 assert factorial_iter(3) == 6
"def flatten_dict(d): return {k: v for subd in d.values() for k, v in subd.items()}","Flattens a dictionary of dictionaries.

This function returns a single dictionary containing all key-value pairs from nested dictionaries within the input dictionary d.","def test_flatten_dict(): assert flatten_dict({'a': {'b': 1}, 'c': {'d': 2}}) == {'b': 1, 'd': 2} assert flatten_dict({'x': {'y': 3}}) == {'y': 3} assert flatten_dict({}) == {}"
"def calculate_power(base, exponent): return base ** exponent","Calculates the power of a number.

This function returns the result of raising the base to the power of exponent.","def test_calculate_power(): assert calculate_power(2, 3) == 8 assert calculate_power(5, 0) == 1 assert calculate_power(7, 2) == 49"
def capitalize_first_letter(s): return s.capitalize(),"Capitalizes the first letter of a string.

This function returns a new string where the first letter of the input string s is capitalized and the rest of the string is in lowercase.",def test_capitalize_first_letter(): assert capitalize_first_letter("hello") == "Hello" assert capitalize_first_letter("WORLD") == "World" assert capitalize_first_letter("") == ""
"def get_even_index_elements(lst): return [lst[i] for i in range(0, len(lst), 2)]","Gets elements at even indices from a list.

This function returns a list of elements from the input list lst that are located at even indices.","def test_get_even_index_elements(): assert get_even_index_elements([1, 2, 3, 4]) == [1, 3] assert get_even_index_elements([10, 20, 30, 40, 50]) == [10, 30, 50] assert get_even_index_elements([]) == []"
def is_palindrome(s): return s == s[::-1],"Checks if a string is a palindrome.

This function returns True if the input string s reads the same forward and backward, otherwise False.",def test_is_palindrome(): assert is_palindrome("radar") assert not is_palindrome("hello") assert is_palindrome("")
"def split_by_length(s, length): return [s[i:i+length] for i in range(0, len(s), length)]","Splits a string into chunks of a specified length.

This function returns a list of substrings obtained by splitting the input string s into chunks of length.","def test_split_by_length(): assert split_by_length(""abcdefgh"", 3) == [""abc"", ""def"", ""gh""] assert split_by_length(""hello"", 2) == [""he"", ""ll"", ""o""] assert split_by_length(""test"", 5) == [""test""]"
def get_keys(d): return list(d.keys()),Gets all keys from a dictionary.,"def test_get_keys(): assert get_keys({'a': 1, 'b': 2}) == ['a', 'b'] assert get_keys({'x': 10}) == ['x'] assert get_keys({}) == []"
def get_values(d): return list(d.values()),Gets all values from a dictionary.,"def test_get_values(): assert get_values({'a': 1, 'b': 2}) == [1, 2] assert get_values({'x': 10}) == [10] assert get_values({}) == []"
"def merge_lists(lst1, lst2): return lst1 + lst2",Merges two lists.,"def test_merge_lists(): assert merge_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_lists([], [5, 6]) == [5, 6] assert merge_lists([7], []) == [7]"
def calculate_area_of_circle(radius): import math return math.pi * radius ** 2,"Calculates the area of a circle.

This function returns the area of a circle given its radius using the formula pr?",def test_calculate_area_of_circle(): import math assert calculate_area_of_circle(1) == math.pi assert calculate_area_of_circle(2) == 4 * math.pi assert calculate_area_of_circle(0) == 0
def extract_numbers_from_string(s): return [int(num) for num in s.split() if num.isdigit()],"Extracts numbers from a string.

This function returns a list of integers extracted from the input string s, ignoring non-numeric parts.","def test_extract_numbers_from_string(): assert extract_numbers_from_string(""hello 123 world 456"") == [123, 456] assert extract_numbers_from_string(""no numbers here"") == [] assert extract_numbers_from_string(""42 is the answer"") == [42]"
def find_duplicates(lst): return [item for item in set(lst) if lst.count(item) > 1],Finds duplicate elements in a list.,"def test_find_duplicates(): assert find_duplicates([1, 2, 2, 3, 3, 3]) == [2, 3] assert find_duplicates([1, 1, 2, 2, 3]) == [1, 2] assert find_duplicates([]) == []"
"def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True",Checks if a number is prime.,def test_is_prime(): assert is_prime(2) assert is_prime(5) assert not is_prime(4) assert not is_prime(1)
def sum_of_squares(lst): return sum(x ** 2 for x in lst),"Calculates the sum of squares of elements in a list.

This function returns the total sum of the squares of each element in the input list lst.","def test_sum_of_squares(): assert sum_of_squares([1, 2, 3]) == 14 assert sum_of_squares([4, 5]) == 41 assert sum_of_squares([]) == 0"
"def merge_and_sort_lists(lst1, lst2): return sorted(lst1 + lst2)","Merges and sorts two lists.

This function returns a new list combining lst1 and lst2, and sorts the resulting list.","def test_merge_and_sort_lists(): assert merge_and_sort_lists([1, 3], [2, 4]) == [1, 2, 3, 4] assert merge_and_sort_lists([4, 2], [1, 3]) == [1, 2, 3, 4] assert merge_and_sort_lists([], [5]) == [5]"
"def zip_lists(lst1, lst2): return list(zip(lst1, lst2))","Zips two lists into a list of tuples.

This function returns a list of tuples, where each tuple contains elements from lst1 and lst2 at the same index.","def test_zip_lists(): assert zip_lists([1, 2], ['a', 'b']) == [(1, 'a'), (2, 'b')] assert zip_lists([1], [2]) == [(1, 2)] assert zip_lists([], []) == []"
def unzip_list(lst): return list(zip(*lst)),"Unzips a list of tuples into separate lists.

This function returns a list of lists, where each sublist contains elements from the input list lst that were at the same position in each tuple.","def test_unzip_list(): assert unzip_list([(1, 'a'), (2, 'b')]) == ([1, 2], ['a', 'b']) assert unzip_list([(1, 2)]) == ([1], [2]) assert unzip_list([]) == ([], [])"
def count_chars(s): return {char: s.count(char) for char in set(s)},"Counts occurrences of each character in a string.

This function returns a dictionary with each character in the input string s as a key and the number of its occurrences as the value.","def test_count_chars(): assert count_chars(""hello"") == {'h': 1, 'e': 1, 'l': 2, 'o': 1} assert count_chars(""aabbcc"") == {'a': 2, 'b': 2, 'c': 2} assert count_chars("""") == {}"
def factorial_recursive(n): if n == 0: return 1 return n * factorial_recursive(n - 1),"Calculates the factorial of a number using recursion.

This function returns the factorial of the input number n by recursively multiplying n by the factorial of n - 1.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1 assert factorial_recursive(3) == 6
"def sort_dict_by_value(d): return dict(sorted(d.items(), key=lambda item: item[1]))","Sorts a dictionary by its values.

This function returns a new dictionary sorted by the values of the input dictionary d.","def test_sort_dict_by_value(): assert sort_dict_by_value({'a': 2, 'b': 1}) == {'b': 1, 'a': 2} assert sort_dict_by_value({'x': 5, 'y': 3}) == {'y': 3, 'x': 5} assert sort_dict_by_value({}) == {}"
"def get_values_greater_than(d, threshold): return {k: v for k, v in d.items() if v > threshold}","Gets dictionary items with values greater than a threshold.

This function returns a dictionary containing only the items from the input dictionary d where the value is greater than the specified threshold.","def test_get_values_greater_than(): assert get_values_greater_than({'a': 1, 'b': 2}, 1) == {'b': 2} assert get_values_greater_than({'x': 10, 'y': 5}, 7) == {'x': 10} assert get_values_greater_than({'a': 1}, 2) == {}"
"def merge_and_deduplicate_lists(lst1, lst2): return list(set(lst1 + lst2))","Merges two lists and removes duplicates.

This function returns a new list that combines lst1 and lst2 and removes any duplicate elements.","def test_merge_and_deduplicate_lists(): assert merge_and_deduplicate_lists([1, 2], [2, 3]) == [1, 2, 3] assert merge_and_deduplicate_lists([1, 1], [2, 2]) == [1, 2] assert merge_and_deduplicate_lists([], [5]) == [5]"
"def get_keys_with_value(d, value): return [k for k, v in d.items() if v == value]","Gets keys from a dictionary that have a specific value.

This function returns a list of keys from the input dictionary d where the corresponding value is equal to the specified value.","def test_get_keys_with_value(): assert get_keys_with_value({'a': 1, 'b': 2}, 1) == ['a'] assert get_keys_with_value({'x': 10, 'y': 10}, 10) == ['x', 'y'] assert get_keys_with_value({'a': 1}, 2) == []"
"def convert_to_dict(keys, values): return dict(zip(keys, values))","Converts two lists into a dictionary.

This function returns a dictionary created by zipping together the keys list and the values list.","def test_convert_to_dict(): assert convert_to_dict(['a', 'b'], [1, 2]) == {'a': 1, 'b': 2} assert convert_to_dict(['x'], [10]) == {'x': 10} assert convert_to_dict([], []) == {}"
def flatten_list(lst): return [item for sublist in lst for item in sublist],"Flattens a nested list into a single list.

This function returns a single list containing all elements from the nested input list lst, with nested lists expanded into a single level.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([[1], [2, 3], [4]]) == [1, 2, 3, 4] assert flatten_list([]) == []"
"def get_odd_index_elements(lst): return [lst[i] for i in range(1, len(lst), 2)]","Gets elements at odd indices from a list.

This function returns a list of elements from the input list lst that are located at odd indices.","def test_get_odd_index_elements(): assert get_odd_index_elements([1, 2, 3, 4]) == [2, 4] assert get_odd_index_elements([10, 20, 30, 40, 50]) == [20, 40] assert get_odd_index_elements([]) == []"
"def replace_substring(s, old, new): return s.replace(old, new)","Replaces a substring within a string.

This function returns a new string where all occurrences of the substring old in the input string s are replaced with new.","def test_replace_substring(): assert replace_substring(""hello world"", ""world"", ""there"") == ""hello there"" assert replace_substring(""foo bar foo"", ""foo"", ""baz"") == ""baz bar baz"" assert replace_substring(""test"", ""x"", ""y"") == ""test"""
def sum_of_digits(n): return sum(int(digit) for digit in str(n)),Calculates the sum of digits of a number.,def test_sum_of_digits(): assert sum_of_digits(123) == 6 assert sum_of_digits(405) == 9 assert sum_of_digits(0) == 0
def check_even_or_odd(n): return "even" if n % 2 == 0 else "odd","Checks if a number is even or odd.

This function returns ""even"" if the input number n is even, and ""odd"" if it is odd.",def test_check_even_or_odd(): assert check_even_or_odd(2) == "even" assert check_even_or_odd(3) == "odd" assert check_even_or_odd(0) == "even"
def remove_whitespace(s): return ''.join(s.split()),Removes all whitespace from a string.,def test_remove_whitespace(): assert remove_whitespace(" a b c ") == "abc" assert remove_whitespace("hello world") == "helloworld" assert remove_whitespace(" ") == ""
"def find_min_max(lst): return min(lst), max(lst)","Finds the minimum and maximum values in a list.

This function returns a tuple containing the smallest and largest values from the input list lst.","def test_find_min_max(): assert find_min_max([1, 2, 3]) == (1, 3) assert find_min_max([10, 5, 20]) == (5, 20) assert find_min_max([-1, -2, -3]) == (-3, -1)"
"def is_valid_email(email): import re return re.match(r""[^@]+@[^@]+\.[^@]+"", email) is not None","Validates an email address format.

This function returns True if the input string email matches a basic email address format, otherwise False.",def test_is_valid_email(): assert is_valid_email("test@example.com") assert not is_valid_email("test@.com") assert not is_valid_email("test@example")
def get_unique_elements(lst): return list(set(lst)),"Gets unique elements from a list.

This function returns a list of unique elements from the input list lst, removing any duplicates.","def test_get_unique_elements(): assert get_unique_elements([1, 2, 2, 3]) == [1, 2, 3] assert get_unique_elements(['a', 'b', 'a']) == ['a', 'b'] assert get_unique_elements([]) == []"
def combine_dicts(dicts): result = {} for d in dicts: result.update(d) return result,"Combines multiple dictionaries into one.

This function merges a list of dictionaries into a single dictionary, with later dictionaries overwriting earlier ones in case of key collisions.","def test_combine_dicts(): assert combine_dicts([{'a': 1}, {'b': 2}]) == {'a': 1, 'b': 2} assert combine_dicts([{'a': 1}, {'a': 2}]) == {'a': 2} assert combine_dicts([]) == {}"
"def split_string(s, delimiter): return s.split(delimiter)",Splits a string by a specified delimiter.,"def test_split_string(): assert split_string(""a,b,c"", "","") == [""a"", ""b"", ""c""] assert split_string(""hello world"", "" "") == [""hello"", ""world""] assert split_string(""one-two-three"", ""-"") == [""one"", ""two"", ""three""]"
"def remove_duplicates_from_dict(d): return {k: v for k, v in d.items() if v not in seen and not seen.add(v)}","Removes duplicate values from a dictionary.

This function returns a new dictionary with duplicate values removed, retaining only the first occurrence of each value.","def test_remove_duplicates_from_dict(): assert remove_duplicates_from_dict({'a': 1, 'b': 2, 'c': 1}) == {'a': 1, 'b': 2} assert remove_duplicates_from_dict({'x': 10, 'y': 10}) == {'x': 10} assert remove_duplicates_from_dict({}) == {}"
"def merge_sorted_lists(lst1, lst2): return sorted(lst1 + lst2)","Merges two sorted lists into one sorted list.

This function returns a new list that combines lst1 and lst2, and sorts the resulting list.","def test_merge_sorted_lists(): assert merge_sorted_lists([1, 3], [2, 4]) == [1, 2, 3, 4] assert merge_sorted_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_sorted_lists([], [5]) == [5]"
"def get_substring(s, start, end): return s[start:end]","Extracts a substring from a string.

This function returns a substring of the input string s from index start to index end.","def test_get_substring(): assert get_substring(""hello"", 1, 4) == ""ell"" assert get_substring(""world"", 0, 3) == ""wor"" assert get_substring(""test"", 2, 5) == ""st"""
def calculate_average(lst): return sum(lst) / len(lst) if lst else 0,"Calculates the average of a list of numbers.

This function returns the average of the numbers in the input list lst, or 0 if the list is empty.","def test_calculate_average(): assert calculate_average([1, 2, 3]) == 2 assert calculate_average([10, 20, 30]) == 20 assert calculate_average([]) == 0"
"def find_max_length_string(strings): return max(strings, key=len)","Finds the longest string in a list.

This function returns the string with the maximum length from the input list strings.","def test_find_max_length_string(): assert find_max_length_string([""a"", ""ab"", ""abc""]) == ""abc"" assert find_max_length_string([""short"", ""longer"", ""longest""]) == ""longest"" assert find_max_length_string([""single""]) == ""single"""
"def replace_in_dict(d, key, new_value): if key in d: d[key] = new_value","Replaces the value associated with a key in a dictionary.

This function updates the value for the specified key in the input dictionary d to new_value, if the key exists.","def test_replace_in_dict(): d = {'a': 1, 'b': 2} replace_in_dict(d, 'a', 3) assert d == {'a': 3, 'b': 2} replace_in_dict(d, 'c', 4) assert d == {'a': 3, 'b': 2}"
"def flatten_dict(d): def flatten(x, parent_key=''): items = [] for k, v in x.items(): new_key = f""{parent_key}.{k}"" if parent_key else k if isinstance(v, dict): items.extend(flatten(v, new_key).items()) else: items.append((new_key, v)) return dict(items) return flatten(d)","Flattens a nested dictionary into a single level.

This function transforms a nested dictionary into a single-level dictionary, with compound keys representing the hierarchy of the original dictionary.","def test_flatten_dict(): assert flatten_dict({'a': 1, 'b': {'c': 2, 'd': 3}}) == {'a': 1, 'b.c': 2, 'b.d': 3} assert flatten_dict({'x': {'y': {'z': 4}}}) == {'x.y.z': 4} assert flatten_dict({}) == {}"
"def generate_fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b","Generates Fibonacci sequence up to n numbers.

This function yields numbers from the Fibonacci sequence up to n terms.","def test_generate_fibonacci(): assert list(generate_fibonacci(5)) == [0, 1, 1, 2, 3] assert list(generate_fibonacci(3)) == [0, 1, 1] assert list(generate_fibonacci(0)) == []"
"def sort_list(lst, reverse=False): return sorted(lst, reverse=reverse)","Sorts a list with optional reverse order.

This function returns a sorted version of the input list lst, with an option to sort in descending order if reverse is True.","def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list([3, 1, 2], reverse=True) == [3, 2, 1] assert sort_list([]) == []"
"def count_occurrences(lst, item): return lst.count(item)","Counts occurrences of an item in a list.

This function combines two dictionaries into one, with the second dictionary's values overwriting those of the first in case of key collisions.","def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences(['a', 'b', 'a'], 'a') == 2 assert count_occurrences([], 1) == 0"
"def get_common_elements(lst1, lst2): return list(set(lst1) & set(lst2))",Gets common elements between two lists.,"def test_get_common_elements(): assert get_common_elements([1, 2, 3], [2, 3, 4]) == [2, 3] assert get_common_elements([1, 2], [3, 4]) == [] assert get_common_elements([], [1]) == []"
"def remove_element(lst, item): return [x for x in lst if x != item]","Removes all occurrences of an item from a list.

This function returns a new list with all instances of item removed from the input list lst.","def test_remove_element(): assert remove_element([1, 2, 2, 3], 2) == [1, 3] assert remove_element(['a', 'b', 'a'], 'a') == ['b'] assert remove_element([], 1) == []"
"def get_first_n_elements(lst, n): return lst[:n]","Gets the first n elements from a list.

This function returns a new list containing the first n elements from the input list lst.","def test_get_first_n_elements(): assert get_first_n_elements([1, 2, 3, 4], 2) == [1, 2] assert get_first_n_elements([5, 6, 7], 5) == [5, 6, 7] assert get_first_n_elements([], 1) == []"
"def extract_keys(d, keys): return {k: d[k] for k in keys if k in d}","Extracts specific keys from a dictionary.

This function returns a dictionary containing only the items from the input dictionary d whose keys are listed in the keys list.","def test_extract_keys(): assert extract_keys({'a': 1, 'b': 2}, ['a']) == {'a': 1} assert extract_keys({'x': 10, 'y': 20}, ['y', 'z']) == {'y': 20} assert extract_keys({'a': 1}, []) == {}"
def square_elements(lst): return [x ** 2 for x in lst],"Squares each element in a list.

This function returns a list where each element is the square of the corresponding element in the input list lst.","def test_square_elements(): assert square_elements([1, 2, 3]) == [1, 4, 9] assert square_elements([4, 5]) == [16, 25] assert square_elements([]) == []"
def flatten_list_of_lists(lst): return [item for sublist in lst for item in sublist],"Flattens a list of lists into a single list.

This function returns a single list containing all elements from the nested input list lst, which is a list of lists.","def test_flatten_list_of_lists(): assert flatten_list_of_lists([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list_of_lists([['a'], ['b', 'c']]) == ['a', 'b', 'c'] assert flatten_list_of_lists([]) == []"
"def is_divisible(x, y): return x % y == 0","Checks if x is divisible by y.

This function returns True if the input number x is divisible by y without a remainder, otherwise False.","def test_is_divisible(): assert is_divisible(10, 2) assert not is_divisible(10, 3) assert is_divisible(15, 5)"
"def get_last_n_elements(lst, n): return lst[-n:]",Gets the last n elements from a list.,"def test_get_last_n_elements(): assert get_last_n_elements([1, 2, 3, 4], 2) == [3, 4] assert get_last_n_elements([5, 6, 7], 5) == [5, 6, 7] assert get_last_n_elements([], 1) == []"
"def get_keys_with_value_greater_than(d, threshold): return {k: v for k, v in d.items() if v > threshold}","Gets dictionary items with values greater than a threshold.

This function returns a dictionary containing items from the input dictionary d where the value is greater than the specified threshold.","def test_get_keys_with_value_greater_than(): assert get_keys_with_value_greater_than({'a': 1, 'b': 2}, 1) == {'b': 2} assert get_keys_with_value_greater_than({'x': 10, 'y': 5}, 7) == {'x': 10} assert get_keys_with_value_greater_than({'a': 1}, 2) == {}"
"def calculate_product(lst): from functools import reduce return reduce(lambda x, y: x * y, lst, 1)",Calculates the product of elements in a list.,"def test_calculate_product(): assert calculate_product([1, 2, 3]) == 6 assert calculate_product([4, 5]) == 20 assert calculate_product([]) == 1"
"def get_first_n_chars(s, n): return s[:n]","Gets the first n characters from a string.

This function returns a substring consisting of the first n characters of the input string s.","def test_get_first_n_chars(): assert get_first_n_chars(""hello"", 3) == ""hel"" assert get_first_n_chars(""world"", 5) == ""world"" assert get_first_n_chars(""test"", 10) == ""test"""
def is_palindrome(s): return s == s[::-1],Checks if a string is a palindrome.,def test_is_palindrome(): assert is_palindrome("level") assert not is_palindrome("word") assert is_palindrome("radar")
def convert_to_uppercase(s): return s.upper(),Converts a string to uppercase.,def test_convert_to_uppercase(): assert convert_to_uppercase("hello") == "HELLO" assert convert_to_uppercase("world") == "WORLD" assert convert_to_uppercase("Python") == "PYTHON"
"def remove_keys(d, keys): return {k: v for k, v in d.items() if k not in keys}","Removes specified keys from a dictionary.

This function returns a new dictionary that excludes the specified keys from the input dictionary d.","def test_remove_keys(): assert remove_keys({'a': 1, 'b': 2}, ['a']) == {'b': 2} assert remove_keys({'x': 10, 'y': 20}, ['y']) == {'x': 10} assert remove_keys({'a': 1}, []) == {'a': 1}"
"def find_longest_word(words): return max(words, key=len)","Finds the longest word in a list.

This function returns a list of all keys present in the input dictionary d.","def test_find_longest_word(): assert find_longest_word([""cat"", ""elephant"", ""dog""]) == ""elephant"" assert find_longest_word([""short"", ""longer"", ""longest""]) == ""longest"" assert find_longest_word([""single""]) == ""single"""
def filter_odd_numbers(lst): return [x for x in lst if x % 2 != 0],"Filters out odd numbers from a list.

This function returns a list containing only the odd numbers from the input list lst.","def test_filter_odd_numbers(): assert filter_odd_numbers([1, 2, 3, 4]) == [1, 3] assert filter_odd_numbers([2, 4, 6]) == [] assert filter_odd_numbers([1, 3, 5]) == [1, 3, 5]"
def calculate_mean(lst): return sum(lst) / len(lst) if lst else 0,"Calculates the mean of a list of numbers.

This function returns the arithmetic mean of the numbers in the input list lst, or 0 if the list is empty.","def test_calculate_mean(): assert calculate_mean([1, 2, 3]) == 2 assert calculate_mean([10, 20, 30]) == 20 assert calculate_mean([]) == 0"
def convert_to_lowercase(s): return s.lower(),"Converts a string to lowercase.

This function returns a new string where all characters in the input string s are converted to lowercase.",def test_convert_to_lowercase(): assert convert_to_lowercase("HELLO") == "hello" assert convert_to_lowercase("WORLD") == "world" assert convert_to_lowercase("Python") == "python"
"def find_key_with_max_value(d): return max(d, key=d.get)","Finds the key with the maximum value in a dictionary.

This function returns the key associated with the highest value in the input dictionary d.","def test_find_key_with_max_value(): assert find_key_with_max_value({'a': 1, 'b': 2}) == 'b' assert find_key_with_max_value({'x': 10, 'y': 5}) == 'x' assert find_key_with_max_value({'a': 1}) == 'a'"
"def sort_dict_by_value(d): return dict(sorted(d.items(), key=lambda item: item[1]))","Sorts a dictionary by its values.

This function returns a new dictionary with items sorted by their values in ascending order.","def test_sort_dict_by_value(): assert sort_dict_by_value({'a': 2, 'b': 1}) == {'b': 1, 'a': 2} assert sort_dict_by_value({'x': 5, 'y': 10}) == {'x': 5, 'y': 10} assert sort_dict_by_value({'a': 1}) == {'a': 1}"
def flatten_list(lst): result = [] for sublist in lst: result.extend(sublist) return result,"Flattens a list of lists into a single list.

This function returns a single list containing all elements from the nested input list lst.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([['a'], ['b', 'c']]) == ['a', 'b', 'c'] assert flatten_list([]) == []"
def calculate_median(lst): sorted_lst = sorted(lst) n = len(sorted_lst) mid = n // 2 return (sorted_lst[mid] + sorted_lst[-mid-1]) / 2 if n % 2 == 0 else sorted_lst[mid],"Calculates the median of a list of numbers.

This function returns the median of the numbers in the input list lst, sorted in ascending order.","def test_calculate_median(): assert calculate_median([1, 2, 3]) == 2 assert calculate_median([1, 2, 3, 4]) == 2.5 assert calculate_median([]) == 0"
"def remove_values(d, values): return {k: v for k, v in d.items() if v not in values}","Removes dictionary items with specific values.

This function returns a new dictionary excluding items where the value is listed in values.","def test_remove_values(): assert remove_values({'a': 1, 'b': 2}, [1]) == {'b': 2} assert remove_values({'x': 10, 'y': 5}, [5]) == {'x': 10} assert remove_values({'a': 1}, [2]) == {'a': 1}"
def find_max_in_list(lst): return max(lst),"Finds the maximum value in a list.

This function returns the largest value in the input list lst.","def test_find_max_in_list(): assert find_max_in_list([1, 2, 3]) == 3 assert find_max_in_list([5, 3, 9]) == 9 assert find_max_in_list([-1, -2, -3]) == -1"
def get_unique_values(d): return list(set(d.values())),"Gets unique values from a dictionary.

This function returns a list of unique values from the input dictionary d.","def test_get_unique_values(): assert get_unique_values({'a': 1, 'b': 2}) == [1, 2] assert get_unique_values({'x': 10, 'y': 10}) == [10] assert get_unique_values({'a': 1}) == [1]"
"def split_by_delimiter(s, delimiter): return s.split(delimiter)","Splits a string by a delimiter.

This function returns a list of substrings from the input string s split by the specified delimiter.","def test_split_by_delimiter(): assert split_by_delimiter(""a,b,c"", "","") == [""a"", ""b"", ""c""] assert split_by_delimiter(""hello world"", "" "") == [""hello"", ""world""] assert split_by_delimiter(""one-two-three"", ""-"") == [""one"", ""two"", ""three""]"
def concatenate_strings(lst): return ''.join(lst),"Concatenates a list of strings.

This function returns a single string formed by concatenating all strings in the input list lst.","def test_concatenate_strings(): assert concatenate_strings([""a"", ""b"", ""c""]) == ""abc"" assert concatenate_strings([""hello"", ""world""]) == ""helloworld"" assert concatenate_strings([]) == """""
"def filter_strings(lst, length): return [s for s in lst if len(s) > length]","Filters strings in a list by length.

This function returns a list of strings from the input list lst that have a length greater than the specified length.","def test_filter_strings(): assert filter_strings([""short"", ""longer"", ""longest""], 6) == [""longest""] assert filter_strings([""a"", ""ab"", ""abc""], 1) == [""ab"", ""abc""] assert filter_strings([], 3) == []"
def calculate_sum(lst): return sum(lst),Calculates the sum of elements in a list.,"def test_calculate_sum(): assert calculate_sum([1, 2, 3]) == 6 assert calculate_sum([10, 20]) == 30 assert calculate_sum([]) == 0"
def reverse_list(lst): return lst[::-1],Reverses a list.,"def test_reverse_list(): assert reverse_list([1, 2, 3]) == [3, 2, 1] assert reverse_list(['a', 'b']) == ['b', 'a'] assert reverse_list([]) == []"
"def get_value_or_default(d, key, default=None): return d.get(key, default)","Gets the value for a key or returns a default value.

This function returns the value associated with key in the input dictionary d, or default if the key is not present.","def test_get_value_or_default(): assert get_value_or_default({'a': 1}, 'a') == 1 assert get_value_or_default({'b': 2}, 'a', 0) == 0 assert get_value_or_default({}, 'x', 'default') == 'default'"
def find_smallest_number(lst): return min(lst),"Finds the smallest number in a list.

This function returns the smallest number from the input list lst.","def test_find_smallest_number(): assert find_smallest_number([1, 2, 3]) == 1 assert find_smallest_number([5, 3, 9]) == 3 assert find_smallest_number([-1, -2, -3]) == -3"
def check_even_odd(x): return 'Even' if x % 2 == 0 else 'Odd',"Checks if a number is even or odd.

This function returns 'Even' if the input number x is even, otherwise 'Odd'.",def test_check_even_odd(): assert check_even_odd(2) == 'Even' assert check_even_odd(3) == 'Odd' assert check_even_odd(0) == 'Even'
"def create_range(start, end): return list(range(start, end))","Creates a list of numbers within a range.

This function returns a list of integers from start to end (excluding end).","def test_create_range(): assert create_range(1, 5) == [1, 2, 3, 4] assert create_range(0, 3) == [0, 1, 2] assert create_range(5, 5) == []"
"def merge_lists(lst1, lst2): return lst1 + lst2","Merges two lists.

This function concatenates two lists and returns the combined result.","def test_merge_lists(): assert merge_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert merge_lists([], [5]) == [5] assert merge_lists([1], []) == [1]"
def remove_duplicates(lst): return list(set(lst)),"Removes duplicates from a list.

This function returns a list with all duplicate values removed from the input list lst.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates(['a', 'b', 'a']) == ['a', 'b'] assert remove_duplicates([]) == []"
"def get_values_with_keys(d, keys): return [d[k] for k in keys if k in d]","Gets values for specific keys from a dictionary.

This function returns a list of values from the input dictionary d corresponding to the specified keys.","def test_get_values_with_keys(): assert get_values_with_keys({'a': 1, 'b': 2}, ['a']) == [1] assert get_values_with_keys({'x': 10, 'y': 20}, ['x', 'z']) == [10] assert get_values_with_keys({}, ['a']) == []"
def get_unique_elements(lst): return list(set(lst)),Gets unique elements from a list.,"def test_get_unique_elements(): assert get_unique_elements([1, 1, 2, 3]) == [1, 2, 3] assert get_unique_elements(['a', 'b', 'b']) == ['a', 'b'] assert get_unique_elements([]) == []"
"def generate_range(start, end, step=1): return list(range(start, end, step))","Generates a list of numbers with a specific step.

This function returns a list of integers from start to end (excluding end) with a step size of step.","def test_generate_range(): assert generate_range(0, 5) == [0, 1, 2, 3, 4] assert generate_range(1, 10, 2) == [1, 3, 5, 7, 9] assert generate_range(5, 0, -1) == [5, 4, 3, 2, 1]"
"def calculate_difference(x, y): return x - y","Calculates the difference between two numbers.

This function returns the result of subtracting y from x.","def test_calculate_difference(): assert calculate_difference(5, 3) == 2 assert calculate_difference(10, 10) == 0 assert calculate_difference(7, 9) == -2"
def get_dict_keys(d): return list(d.keys()),Retrieves keys from a dictionary.,"def test_get_dict_keys(): assert get_dict_keys({'a': 1, 'b': 2}) == ['a', 'b'] assert get_dict_keys({'x': 10}) == ['x'] assert get_dict_keys({}) == []"
def is_list_empty(lst): return len(lst) == 0,"Checks if a list is empty.

This function returns True if the input list lst is empty, otherwise False.",def test_is_list_empty(): assert is_list_empty([]) assert not is_list_empty([1]) assert not is_list_empty([0])
def find_max_value(d): return max(d.values()),"Finds the maximum value in a dictionary.

This function returns the highest value in the input dictionary d.","def test_find_max_value(): assert find_max_value({'a': 1, 'b': 2}) == 2 assert find_max_value({'x': 10, 'y': 5}) == 10 assert find_max_value({'a': 1}) == 1"
"def remove_item(d, key): d.pop(key, None)","Removes a key-value pair from a dictionary.

This function removes the item associated with the specified key from the input dictionary d, if it exists.","def test_remove_item(): d = {'a': 1, 'b': 2} remove_item(d, 'a') assert d == {'b': 2} d = {'x': 10} remove_item(d, 'y') assert d == {'x': 10}"
"def merge_dicts(d1, d2): return {**d1, **d2}","Merges two dictionaries.

This function combines two dictionaries into one, with d2 overwriting d1 where keys overlap.","def test_merge_dicts(): assert merge_dicts({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2} assert merge_dicts({'x': 10}, {'x': 20, 'y': 30}) == {'x': 20, 'y': 30}"
def convert_to_float(s): return float(s),"Converts a string to a float.

This function returns the float value of the input string s.",def test_convert_to_float(): assert convert_to_float("123.45") == 123.45 assert convert_to_float("0.0") == 0.0 assert convert_to_float("-456.78") == -456.78
"def find_common_elements(lst1, lst2): return list(set(lst1) & set(lst2))",Finds common elements between two lists.,"def test_find_common_elements(): assert find_common_elements([1, 2, 3], [2, 3, 4]) == [2, 3] assert find_common_elements(['a', 'b'], ['b', 'c']) == ['b'] assert find_common_elements([], [1]) == []"
def remove_empty_strings(lst): return [s for s in lst if s],"Removes empty strings from a list.

This function returns a list with all empty strings removed from the input list lst.","def test_remove_empty_strings(): assert remove_empty_strings([""a"", """", ""b""]) == [""a"", ""b""] assert remove_empty_strings(["""", """", """"]) == [] assert remove_empty_strings([""a""]) == [""a""]"
def calculate_product(lst): return math.prod(lst),Calculates the product of elements in a list.,"def test_calculate_product(): assert calculate_product([1, 2, 3]) == 6 assert calculate_product([4, 5]) == 20 assert calculate_product([2, 2, 2]) == 8"
"def find_indices(lst, value): return [i for i, x in enumerate(lst) if x == value]","Finds indices of a value in a list.

This function returns a list of indices where the specified value appears in the input list lst.","def test_find_indices(): assert find_indices([1, 2, 3, 2], 2) == [1, 3] assert find_indices(['a', 'b', 'a'], 'a') == [0, 2] assert find_indices([1, 1, 1], 2) == []"
"def remove_from_list(lst, value): return [x for x in lst if x != value]","Removes all occurrences of a value from a list.

This function returns a list with all instances of the specified value removed from the input list lst.","def test_remove_from_list(): assert remove_from_list([1, 2, 3, 2], 2) == [1, 3] assert remove_from_list(['a', 'b', 'a'], 'a') == ['b'] assert remove_from_list([1, 1, 1], 1) == []"
"def calculate_exponent(base, exp): return base ** exp",Calculates the exponentiation of a base.,"def test_calculate_exponent(): assert calculate_exponent(2, 3) == 8 assert calculate_exponent(5, 0) == 1 assert calculate_exponent(3, 2) == 9"
def calculate_absolute(x): return abs(x),"Calculates the absolute value of a number.

This function returns the absolute value of the input number x.",def test_calculate_absolute(): assert calculate_absolute(-5) == 5 assert calculate_absolute(0) == 0 assert calculate_absolute(3) == 3
def sum_of_squares(lst): return sum(x**2 for x in lst),"Calculates the sum of squares of numbers in a list.

This function returns the sum of each number squared from the input list lst.","def test_sum_of_squares(): assert sum_of_squares([1, 2, 3]) == 14 assert sum_of_squares([0, 4]) == 16 assert sum_of_squares([5]) == 25"
"def get_list_intersection(lst1, lst2): return list(set(lst1) & set(lst2))",Finds the intersection of two lists.,"def test_get_list_intersection(): assert get_list_intersection([1, 2, 3], [2, 3, 4]) == [2, 3] assert get_list_intersection(['a', 'b'], ['b', 'c']) == ['b'] assert get_list_intersection([], [1]) == []"
"def reverse_dict(d): return {v: k for k, v in d.items()}","Reverses a dictionary.

This function returns a dictionary with keys and values swapped. Note that if multiple keys have the same value, only one will be preserved.","def test_reverse_dict(): assert reverse_dict({'a': 1, 'b': 2}) == {1: 'a', 2: 'b'} assert reverse_dict({'x': 10, 'y': 10}) == {10: 'y'} assert reverse_dict({'a': 1}) == {1: 'a'}"
"def filter_greater_than(lst, value): return [x for x in lst if x > value]","Filters elements greater than a specified value.

This function returns a list containing only the elements from the input list lst that are greater than the specified value.","def test_filter_greater_than(): assert filter_greater_than([1, 2, 3], 1) == [2, 3] assert filter_greater_than([4, 5, 6], 5) == [6] assert filter_greater_than([0, -1, -2], -1) == [0]"
def get_dict_values(d): return list(d.values()),Retrieves values from a dictionary.,"def test_get_dict_values(): assert get_dict_values({'a': 1, 'b': 2}) == [1, 2] assert get_dict_values({'x': 10}) == [10] assert get_dict_values({}) == []"
"def count_occurrences(lst, value): return lst.count(value)","Counts occurrences of a value in a list.

This function returns the number of times value appears in the input list lst.","def test_count_occurrences(): assert count_occurrences([1, 2, 2], 2) == 2 assert count_occurrences(['a', 'b', 'a'], 'a') == 2 assert count_occurrences([1, 1, 1], 2) == 0"
"def format_string(s, *args): return s.format(*args)","Formats a string with specified arguments.

This function returns a formatted string where placeholders in s are replaced with the provided args.","def test_format_string(): assert format_string(""Hello, {}!"", ""world"") == ""Hello, world!"" assert format_string(""I have {} apples and {} oranges."", 3, 5) == ""I have 3 apples and 5 oranges."" assert format_string(""{} + {} = {}"", 1, 2, 3) == ""1 + 2 = 3"""
"def find_max_key(d): return max(d, key=d.get)","Finds the key with the maximum value in a dictionary.

This function returns the key in the input dictionary d associated with the maximum value.","def test_find_max_key(): assert find_max_key({'a': 1, 'b': 2}) == 'b' assert find_max_key({'x': 10, 'y': 20}) == 'y' assert find_max_key({'a': 1}) == 'a'"
"def is_multiple(x, y): return x % y == 0","Checks if one number is a multiple of another.

This function returns True if x is a multiple of y, otherwise False.","def test_is_multiple(): assert is_multiple(10, 2) assert not is_multiple(7, 3) assert is_multiple(20, 5)"
def calculate_mean(lst): return sum(lst) / len(lst) if lst else 0,Calculates the mean of a list of numbers.,"def test_calculate_mean(): assert calculate_mean([1, 2, 3]) == 2 assert calculate_mean([5, 10]) == 7.5 assert calculate_mean([]) == 0"
"def filter_by_type(lst, type_): return [x for x in lst if isinstance(x, type_)]","Filters elements by type in a list.

This function returns a list containing only the elements from the input list lst that are of the specified type_.","def test_filter_by_type(): assert filter_by_type([1, ""hello"", 3.5], int) == [1] assert filter_by_type([""a"", ""b"", 1], str) == [""a"", ""b""] assert filter_by_type([1, 2.5], float) == [2.5]"
def sort_dict_by_key(d): return dict(sorted(d.items())),"Sorts a dictionary by its keys.

This function returns a dictionary sorted by its keys.","def test_sort_dict_by_key(): assert sort_dict_by_key({'b': 2, 'a': 1}) == {'a': 1, 'b': 2} assert sort_dict_by_key({'x': 10, 'y': 5}) == {'x': 10, 'y': 5} assert sort_dict_by_key({}) == {}"
def count_words(s): return len(s.split()),"Counts the number of words in a string.

This function returns the number of words in the input string s.",def test_count_words(): assert count_words("hello world") == 2 assert count_words("this is a test") == 5 assert count_words("") == 0
def is_valid_email(email): return '@' in email and '.' in email,"Checks if an email address is valid.

This function returns True if the input email contains both '@' and '.', otherwise False.",def test_is_valid_email(): assert is_valid_email("test@example.com") assert not is_valid_email("invalidemail.com") assert not is_valid_email("test@.com")
def capitalize_words(s): return ' '.join(word.capitalize() for word in s.split()),"Capitalizes the first letter of each word in a string.

This function returns a string where each word in the input string s has its first letter capitalized.",def test_capitalize_words(): assert capitalize_words("hello world") == "Hello World" assert capitalize_words("programming") == "Programming" assert capitalize_words("a quick brown fox") == "A Quick Brown Fox"
def list_length(lst): return len(lst),Returns the length of a list.,"def test_list_length(): assert list_length([1, 2, 3]) == 3 assert list_length([]) == 0 assert list_length(['a', 'b', 'c']) == 3"
"def check_key_in_dict(d, key): return key in d","Checks if a key exists in a dictionary.

This function returns True if the specified key is present in the input dictionary d, otherwise False.","def test_check_key_in_dict(): assert check_key_in_dict({'a': 1}, 'a') assert not check_key_in_dict({'b': 2}, 'a') assert check_key_in_dict({}, 'a') == False"
def square_numbers(lst): return [x**2 for x in lst],"Squares each number in a list.

This function returns a list of squares of each number from the input list lst.","def test_square_numbers(): assert square_numbers([1, 2, 3]) == [1, 4, 9] assert square_numbers([0, 5]) == [0, 25] assert square_numbers([-1, -2]) == [1, 4]"
"def join_elements(lst, delimiter): return delimiter.join(map(str, lst))","Joins elements of a list into a string with a delimiter.

This function returns a string formed by joining all elements in the input list lst using the specified delimiter.","```def test_join_elements(): assert join_elements([1, 2, 3], '-') == ""1-2-3"" assert join_elements(['a', 'b'], ',') == ""a,b"" assert join_elements([], '"
def sum_dict_values(d): return sum(d.values()),"Calculates the sum of values in a dictionary.

This function returns the sum of all values in the input dictionary d.","def test_sum_dict_values(): assert sum_dict_values({'a': 1, 'b': 2}) == 3 assert sum_dict_values({'x': 10, 'y': 5}) == 15 assert sum_dict_values({}) == 0"
def get_even_numbers(lst): return [x for x in lst if x % 2 == 0],Retrieves even numbers from a list.,"def test_get_even_numbers(): assert get_even_numbers([1, 2, 3, 4]) == [2, 4] assert get_even_numbers([5, 7, 9]) == [] assert get_even_numbers([2, 4, 6]) == [2, 4, 6]"
def get_odd_numbers(lst): return [x for x in lst if x % 2 != 0],Retrieves odd numbers from a list.,"def test_get_odd_numbers(): assert get_odd_numbers([1, 2, 3, 4]) == [1, 3] assert get_odd_numbers([6, 8, 10]) == [] assert get_odd_numbers([1, 3, 5]) == [1, 3, 5]"
"def find_longest_word(words): return max(words, key=len)",Finds the longest word in a list.,"def test_find_longest_word(): assert find_longest_word([""cat"", ""elephant"", ""dog""]) == ""elephant"" assert find_longest_word([""one"", ""three"", ""five""]) == ""three"" assert find_longest_word([""a"", ""b""]) == ""a"""
def is_odd(n): return n % 2 != 0,Checks if a number is odd.,def test_is_odd(): assert is_odd(1) assert not is_odd(2) assert is_odd(7)
def convert_to_uppercase(s): return s.upper(),Converts a string to uppercase.,def test_convert_to_uppercase(): assert convert_to_uppercase("hello") == "HELLO" assert convert_to_uppercase("World") == "WORLD" assert convert_to_uppercase("Python") == "PYTHON"
def convert_to_lowercase(s): return s.lower(),Converts a string to lowercase.,def test_convert_to_lowercase(): assert convert_to_lowercase("HELLO") == "hello" assert convert_to_lowercase("World") == "world" assert convert_to_lowercase("PYTHON") == "python"
def get_string_length(s): return len(s),Returns the length of a string.,def test_get_string_length(): assert get_string_length("hello") == 5 assert get_string_length("") == 0 assert get_string_length("python") == 6
def count_vowels(s): return sum(1 for char in s if char.lower() in 'aeiou'),"Counts the number of vowels in a string.

This function returns the number of vowel characters (a, e, i, o, u) in the input string s.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("world") == 1 assert count_vowels("Python") == 1
def find_min_value(d): return min(d.values()),"Finds the minimum value in a dictionary.

This function returns the smallest value in the input dictionary d.","def test_find_min_value(): assert find_min_value({'a': 1, 'b': 2}) == 1 assert find_min_value({'x': 10, 'y': 5}) == 5 assert find_min_value({'a': 5}) == 5"
"def repeat_string(s, n): return s * n","Repeats a string n times.

This function returns the string s repeated n times.","def test_repeat_string(): assert repeat_string(""hello"", 3) == ""hellohellohello"" assert repeat_string(""a"", 0) == """" assert repeat_string(""abc"", 2) == ""abcabc"""
def flatten_list(lst): return [item for sublist in lst for item in sublist],"Flattens a nested list.

This function returns a single list containing all elements from the nested lists in lst.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([['a'], ['b', 'c']]) == ['a', 'b', 'c'] assert flatten_list([[]]) == []"
def find_unique_elements(lst): return list(set(lst)),"Finds unique elements in a list.

This function returns a list of unique elements from the input list lst, removing duplicates.","def test_find_unique_elements(): assert find_unique_elements([1, 1, 2, 3]) == [1, 2, 3] assert find_unique_elements(['a', 'b', 'a']) == ['a', 'b'] assert find_unique_elements([1, 2, 3]) == [1, 2, 3]"
def sort_list(lst): return sorted(lst),Sorts a list.,"def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list(['b', 'a', 'c']) == ['a', 'b', 'c'] assert sort_list([5, 4, 3]) == [3, 4, 5]"
def filter_odd_numbers(lst): return [x for x in lst if x % 2 != 0],Filters odd numbers from a list.,"def test_filter_odd_numbers(): assert filter_odd_numbers([1, 2, 3]) == [1, 3] assert filter_odd_numbers([4, 6, 8]) == [] assert filter_odd_numbers([1, 2, 3, 4, 5]) == [1, 3, 5]"
def capitalize_first_letter(s): return s.capitalize(),"Capitalizes the first letter of a string.

This function returns the input string s with its first letter capitalized.",def test_capitalize_first_letter(): assert capitalize_first_letter("hello") == "Hello" assert capitalize_first_letter("world") == "World" assert capitalize_first_letter("python") == "Python"
"def multiply_elements(lst, factor): return [x * factor for x in lst]","Multiplies each element in a list by a factor.

This function returns a list where each element from the input list lst is multiplied by the factor.","def test_multiply_elements(): assert multiply_elements([1, 2, 3], 2) == [2, 4, 6] assert multiply_elements([0, 5], 3) == [0, 15] assert multiply_elements([4, 6], 0) == [0, 0]"
"def subtract_from_list(lst, value): return [x - value for x in lst]","Subtracts a value from each element in a list.

This function returns a list where the specified value is subtracted from each element in the input list lst.","def test_subtract_from_list(): assert subtract_from_list([5, 10], 2) == [3, 8] assert subtract_from_list([1, 2, 3], 1) == [0, 1, 2] assert subtract_from_list([10, 20], 10) == [0, 10]"
"def split_string(s, delimiter): return s.split(delimiter)","Splits a string by a delimiter.

This function returns a new list with the elements from the input list lst in reverse order.","def test_split_string(): assert split_string(""hello,world"", "","") == [""hello"", ""world""] assert split_string(""a-b-c"", ""-"") == [""a"", ""b"", ""c""] assert split_string(""abc"", ""x"") == [""abc""]"
"def replace_substring(s, old, new): return s.replace(old, new)","Replaces occurrences of a substring in a string.

This function returns a string where all occurrences of old are replaced by new in the input string s.","def test_replace_substring(): assert replace_substring(""hello world"", ""world"", ""there"") == ""hello there"" assert replace_substring(""test test"", ""test"", ""exam"") == ""exam exam"" assert replace_substring(""abc"", ""x"", ""y"") == ""abc"""
def is_palindrome(s): return s == s[::-1],Checks if a string is a palindrome.,def test_is_palindrome(): assert is_palindrome("radar") assert not is_palindrome("hello") assert is_palindrome("madam")
def remove_duplicates(lst): return list(set(lst)),"Removes duplicate elements from a list.

This function returns a list with duplicates removed from the input list lst, preserving unique elements only.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates(['a', 'b', 'a']) == ['a', 'b'] assert remove_duplicates([1, 1, 1]) == [1]"
def sum_list(lst): return sum(lst),"Sums the elements of a list.

This function returns the total sum of all numerical elements in the input list lst.","def test_sum_list(): assert sum_list([1, 2, 3]) == 6 assert sum_list([0, 0, 0]) == 0 assert sum_list([-1, 1]) == 0"
"def merge_dicts(dict1, dict2): return {**dict1, **dict2}","Merges two dictionaries.

This function returns a new dictionary containing all key-value pairs from dict1 and dict2. Keys from dict2 will overwrite those from dict1 if there are any conflicts.","def test_merge_dicts(): assert merge_dicts({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2} assert merge_dicts({'x': 10}, {'x': 20}) == {'x': 20} assert merge_dicts({}, {'key': 'value'}) == {'key': 'value'}"
"def format_string(template, *args): return template.format(*args)","Formats a string using provided arguments.

This function returns a formatted string where placeholders in template are replaced with args.","def test_format_string(): assert format_string(""Hello, {}!"", ""world"") == ""Hello, world!"" assert format_string(""{} + {} = {}"", 1, 2, 3) == ""1 + 2 = 3"" assert format_string(""No args"") == ""No args"""
def find_max_value(d): return max(d.values()),"Finds the maximum value in a dictionary.

This function returns the highest value present in the input dictionary d.","def test_find_max_value(): assert find_max_value({'a': 1, 'b': 2}) == 2 assert find_max_value({'x': 10, 'y': 5}) == 10 assert find_max_value({'a': 7}) == 7"
"def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))","Checks if a number is prime.

This function returns True if n is a prime number, otherwise False.",def test_is_prime(): assert is_prime(2) assert is_prime(5) assert not is_prime(4) assert not is_prime(9)
def count_even_numbers(lst): return sum(1 for x in lst if x % 2 == 0),"Counts the number of even numbers in a list.

This function returns the count of even numbers in the input list lst.","def test_count_even_numbers(): assert count_even_numbers([1, 2, 3, 4]) == 2 assert count_even_numbers([5, 7, 9]) == 0 assert count_even_numbers([2, 4, 6]) == 3"
def get_last_element(lst): return lst[-1] if lst else None,Retrieves the last element of a list.,"def test_get_last_element(): assert get_last_element([1, 2, 3]) == 3 assert get_last_element(['a', 'b']) == 'b' assert get_last_element([]) == None"
def is_all_digits(s): return s.isdigit(),"Checks if a string contains only digits.

This function returns True if the input string s consists solely of digit characters, otherwise False.",def test_is_all_digits(): assert is_all_digits("123") assert not is_all_digits("abc") assert not is_all_digits("12a3")
"def get_common_elements(lst1, lst2): return list(set(lst1) & set(lst2))",Finds common elements between two lists.,"def test_get_common_elements(): assert get_common_elements([1, 2], [2, 3]) == [2] assert get_common_elements(['a', 'b'], ['b', 'c']) == ['b'] assert get_common_elements([], [1]) == []"
"def replace_odd_numbers(lst, new_value): return [new_value if x % 2 != 0 else x for x in lst]","Replaces odd numbers in a list with a new value.

This function returns a list where each odd number in lst is replaced by new_value.","def test_replace_odd_numbers(): assert replace_odd_numbers([1, 2, 3], 0) == [0, 2, 0] assert replace_odd_numbers([4, 5], 10) == [4, 10] assert replace_odd_numbers([], 1) == []"
"def get_first_n_elements(lst, n): return lst[:n]","Retrieves the first n elements of a list.

This function returns a list containing the first n elements from the input list lst.","def test_get_first_n_elements(): assert get_first_n_elements([1, 2, 3, 4], 2) == [1, 2] assert get_first_n_elements([1, 2], 5) == [1, 2] assert get_first_n_elements([], 1) == []"
def find_median(lst): sorted_lst = sorted(lst); n = len(sorted_lst); return (sorted_lst[n//2] if n % 2 != 0 else (sorted_lst[n//2 - 1] + sorted_lst[n//2]) / 2),"Finds the median of a list.

This function returns the median value of the input list lst, which is the middle value in a sorted list or the average of the two middle values if the list length is even.","def test_find_median(): assert find_median([1, 2, 3]) == 2 assert find_median([1, 2, 3, 4]) == 2.5 assert find_median([3, 1, 4, 2]) == 2.5"
def is_valid_password(password): return len(password) >= 8 and any(char.isdigit() for char in password) and any(char.isalpha() for char in password),"Checks if a password is valid.

This function returns True if the input password password is at least 8 characters long, contains both digits and letters.",def test_is_valid_password(): assert is_valid_password("Password1") assert not is_valid_password("short") assert not is_valid_password("allletters")
"def split_dict(d): return list(d.keys()), list(d.values())",Splits a dictionary into keys and values.,"def test_split_dict(): assert split_dict({'a': 1, 'b': 2}) == (['a', 'b'], [1, 2]) assert split_dict({'x': 10}) == (['x'], [10]) assert split_dict({}) == ([], [])"
def remove_whitespace(s): return s.strip(),"Removes leading and trailing whitespace from a string.

This function returns the input string s with any leading and trailing whitespace removed.",def test_remove_whitespace(): assert remove_whitespace(" hello ") == "hello" assert remove_whitespace("no_space") == "no_space" assert remove_whitespace(" ") == ""
"def flatten_dict(d): return {k: v for subdict in d.values() for k, v in subdict.items()}","Flattens a dictionary of dictionaries.

This function returns a single dictionary containing all key-value pairs from the nested dictionaries within the input dictionary d.","def test_flatten_dict(): assert flatten_dict({'a': {'x': 1}, 'b': {'y': 2}}) == {'x': 1, 'y': 2} assert flatten_dict({'a': {'a1': 1}, 'b': {'b1': 2}}) == {'a1': 1, 'b1': 2} assert flatten_dict({}) == {}"
"def to_boolean(s): return s.lower() in ['true', '1', 't', 'y', 'yes']","Converts a string to a boolean.

This function returns True if the input string s is one of the common true values (""true"", ""1"", ""t"", ""y"", ""yes""), otherwise False.",def test_to_boolean(): assert to_boolean("true") assert to_boolean("1") assert not to_boolean("false") assert not to_boolean("0")
def extract_digits(s): return ''.join(char for char in s if char.isdigit()),"Extracts digits from a string.

This function returns a string containing all digit characters from the input string s, with other characters removed.",def test_extract_digits(): assert extract_digits("a1b2c3") == "123" assert extract_digits("no digits") == "" assert extract_digits("123abc456") == "123456"
"def group_elements(lst, n): return [lst[i:i + n] for i in range(0, len(lst), n)]","Groups elements of a list into chunks.

This function returns a list of lists, where each inner list contains up to n elements from the input list lst.","def test_group_elements(): assert group_elements([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]] assert group_elements([1, 2, 3], 1) == [[1], [2], [3]] assert group_elements([], 3) == []"
def calculate_square(x): return x ** 2,"Calculates the square of a number.

This function returns the square of the input number x.",def test_calculate_square(): assert calculate_square(2) == 4 assert calculate_square(-3) == 9 assert calculate_square(0) == 0
def is_valid_email(email): return "@" in email and "." in email.split("@")[1],"Checks if an email address is valid.

This function returns True if the input email contains ""@"" and a period in the domain part of the email address.",def test_is_valid_email(): assert is_valid_email("test@example.com") assert not is_valid_email("test@.com") assert not is_valid_email("testexample.com")
"def find_longest_word(words): return max(words, key=len)",Finds the longest word in a list.,"def test_find_longest_word(): assert find_longest_word([""cat"", ""elephant"", ""tiger""]) == ""elephant"" assert find_longest_word([""a"", ""bb"", ""ccc""]) == ""ccc"" assert find_longest_word([""short"", ""longer"", ""longest""]) == ""longest"""
def get_file_extension(filename): return filename.split('.')[-1],"Extracts the file extension from a filename.

This function returns the file extension of the input filename by splitting it at the last period.",def test_get_file_extension(): assert get_file_extension("file.txt") == "txt" assert get_file_extension("archive.tar.gz") == "gz" assert get_file_extension("no_extension") == "no_extension"
def get_keys(d): return list(d.keys()),Retrieves the keys of a dictionary.,"def test_get_keys(): assert get_keys({'a': 1, 'b': 2}) == ['a', 'b'] assert get_keys({'x': 10}) == ['x'] assert get_keys({}) == []"
def get_values(d): return list(d.values()),"Retrieves the values of a dictionary.

This function returns a list of all values present in the input dictionary d.","def test_get_values(): assert get_values({'a': 1, 'b': 2}) == [1, 2] assert get_values({'x': 10}) == [10] assert get_values({}) == []"
"def increment_elements(lst, increment): return [x + increment for x in lst]","Increments each element in a list.

This function returns a list where each element from the input list lst is increased by the specified increment value.","def test_increment_elements(): assert increment_elements([1, 2, 3], 1) == [2, 3, 4] assert increment_elements([10], 5) == [15] assert increment_elements([0], -1) == [-1]"
"def filter_greater_than(lst, threshold): return [x for x in lst if x > threshold]","Filters elements greater than a threshold from a list.

This function returns a list containing only elements from lst that are greater than the specified threshold.","def test_filter_greater_than(): assert filter_greater_than([1, 2, 3], 1) == [2, 3] assert filter_greater_than([4, 5, 6], 6) == [] assert filter_greater_than([10, 20], 15) == [20]"
"def format_date(year, month, day): return f""{year:04}-{month:02}-{day:02}""","Formats a date as a string.

This function returns a string representing the date in ""YYYY-MM-DD"" format using the provided year, month, and day.","def test_format_date(): assert format_date(2024, 9, 10) == ""2024-09-10"" assert format_date(2000, 1, 1) == ""2000-01-01"" assert format_date(1999, 12, 31) == ""1999-12-31"""
def calculate_area_of_circle(radius): return 3.14159 * radius ** 2,"Calculates the area of a circle.

This function returns the area of a circle given its radius, using the formula p * radius? where p is approximately 3.14159.",def test_calculate_area_of_circle(): assert calculate_area_of_circle(1) == 3.14159 assert calculate_area_of_circle(2) == 12.56636 assert calculate_area_of_circle(0) == 0
def calculate_factorial(n): return 1 if n == 0 else n * calculate_factorial(n - 1),"Calculates the factorial of a number.

This function returns the factorial of the input number n, calculated as n! where n! = n * (n-1) * ... * 1.",def test_calculate_factorial(): assert calculate_factorial(0) == 1 assert calculate_factorial(1) == 1 assert calculate_factorial(5) == 120
def count_words(s): return len(s.split()),"Counts the number of words in a string.

This function returns the number of words in the input string s, where words are defined as sequences of characters separated by whitespace.",def test_count_words(): assert count_words("hello world") == 2 assert count_words("is awesome") == 3 assert count_words("") == 0
def filter_odd_numbers(lst): return [x for x in lst if x % 2 != 0],Filters out odd numbers from a list.,"def test_filter_odd_numbers(): assert filter_odd_numbers([1, 2, 3]) == [1, 3] assert filter_odd_numbers([4, 6, 8]) == [] assert filter_odd_numbers([1, 3, 5]) == [1, 3, 5]"
def convert_to_uppercase(s): return s.upper(),"Converts a string to uppercase.

This function returns the input string s with all characters converted to uppercase.",def test_convert_to_uppercase(): assert convert_to_uppercase("hello") == "HELLO" assert convert_to_uppercase("WORLD") == "WORLD" assert convert_to_uppercase("Python") == "PYTHON"
def find_largest_number(lst): return max(lst) if lst else None,Finds the largest number in a list.,"def test_find_largest_number(): assert find_largest_number([1, 2, 3]) == 3 assert find_largest_number([5, 10, 1]) == 10 assert find_largest_number([]) == None"
def get_unique_elements(lst): return list(set(lst)),"Retrieves unique elements from a list.

This function returns a list with duplicates removed from the input list lst, preserving only unique elements.","def test_get_unique_elements(): assert get_unique_elements([1, 2, 2, 3]) == [1, 2, 3] assert get_unique_elements(['a', 'b', 'a']) == ['a', 'b'] assert get_unique_elements([1, 1, 1]) == [1]"
def capitalize_words(s): return ' '.join(word.capitalize() for word in s.split()),"Capitalizes the first letter of each word in a string.

This function returns the input string s with each word capitalized (i.e., the first letter of each word is uppercase).",def test_capitalize_words(): assert capitalize_words("hello world") == "Hello World" assert capitalize_words("is fun") == "Is Fun" assert capitalize_words("capitalize me") == "Capitalize Me"
"def join_elements(lst, delimiter): return delimiter.join(str(x) for x in lst)","Joins elements of a list into a string.

This function returns a string where elements from the input list lst are concatenated using the specified delimiter.","```def test_join_elements(): assert join_elements([1, 2, 3], '-') == ""1-2-3"" assert join_elements(['a', 'b'], ',') == ""a,b"" assert join_elements([], '"
def remove_duplicates_from_list(lst): return list(dict.fromkeys(lst)),"Removes duplicates from a list while preserving order.

This function returns a list with duplicates removed from the input list lst, while preserving the original order of the first occurrences.","def test_remove_duplicates_from_list(): assert remove_duplicates_from_list([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates_from_list(['a', 'b', 'a']) == ['a', 'b'] assert remove_duplicates_from_list([1, 1, 1]) == [1]"
"def split_string(s, delimiter): return s.split(delimiter)","Splits a string into a list based on a delimiter.

This function returns a list of substrings obtained by splitting the input string s at each occurrence of the specified delimiter.","def test_split_string(): assert split_string(""a,b,c"", "","") == [""a"", ""b"", ""c""] assert split_string(""one two three"", "" "") == [""one"", ""two"", ""three""] assert split_string(""hello"", ""x"") == [""hello""]"
"def get_keys_with_value(d, value): return [k for k, v in d.items() if v == value]",Retrieves keys from a dictionary that have a specific value.,"def test_get_keys_with_value(): assert get_keys_with_value({'a': 1, 'b': 2}, 1) == ['a'] assert get_keys_with_value({'x': 10, 'y': 10}, 10) == ['x', 'y'] assert get_keys_with_value({'a': 1}, 2) == []"
"def get_values_for_keys(d, keys): return [d.get(k) for k in keys]","Retrieves values from a dictionary for specific keys.

This function returns a list of values from the input dictionary d corresponding to the specified keys. If a key is not present, None is returned for that key.","def test_get_values_for_keys(): assert get_values_for_keys({'a': 1, 'b': 2}, ['a']) == [1] assert get_values_for_keys({'x': 10}, ['x', 'y']) == [10, None] assert get_values_for_keys({}, ['any']) == [None]"
def is_string_empty(s): return not s,"Checks if a string is empty.

This function returns True if the input string s is empty or consists only of whitespace.",def test_is_string_empty(): assert is_string_empty("") assert is_string_empty(" ") assert not is_string_empty("not empty")
"def get_range(start, end): return list(range(start, end + 1))","Generates a list of integers in a range.

This function returns a list of integers starting from start to end, inclusive.","def test_get_range(): assert get_range(1, 3) == [1, 2, 3] assert get_range(5, 5) == [5] assert get_range(3, 1) == [3, 2, 1]"
def calculate_product(lst): return math.prod(lst),Calculates the product of elements in a list.,"def test_calculate_product(): assert calculate_product([1, 2, 3]) == 6 assert calculate_product([4, 5]) == 20 assert calculate_product([2]) == 2"
"def format_currency(amount): return ""${:,.2f}"".format(amount)","Formats a number as currency.

This function returns a string representing the input amount formatted as currency with two decimal places and commas for thousands.","def test_format_currency(): assert format_currency(1234.567) == ""$1,234.57"" assert format_currency(0) == ""$0.00"" assert format_currency(987654.321) == ""$987,654.32"""
"def calculate_area_of_rectangle(width, height): return width * height","Calculates the area of a rectangle.

This function returns the area of a rectangle given its width and height.","def test_calculate_area_of_rectangle(): assert calculate_area_of_rectangle(2, 3) == 6 assert calculate_area_of_rectangle(5, 4) == 20 assert calculate_area_of_rectangle(7, 2) == 14"
"def find_shortest_word(words): return min(words, key=len)","Finds the shortest word in a list.

This function returns the word with the minimum length from the input list words.","def test_find_shortest_word(): assert find_shortest_word([""cat"", ""elephant"", ""tiger""]) == ""cat"" assert find_shortest_word([""a"", ""bb"", ""ccc""]) == ""a"" assert find_shortest_word([""short"", ""longer"", ""longest""]) == ""short"""
def reverse_list(lst): return lst[::-1],Reverses the order of elements in a list.,"def test_reverse_list(): assert reverse_list([1, 2, 3]) == [3, 2, 1] assert reverse_list(['a', 'b']) == ['b', 'a'] assert reverse_list([]) == []"
def sum_of_squares(n): return sum(i**2 for i in range(n+1)),"Computes the sum of squares of integers up to n.

This function returns the sum of squares of all integers from 0 to n inclusive.",def test_sum_of_squares(): assert sum_of_squares(3) == 14 assert sum_of_squares(0) == 0 assert sum_of_squares(5) == 55
"def merge_dicts(d1, d2): result = d1.copy(); result.update(d2); return result","Merges two dictionaries.

This function returns a new dictionary by merging two dictionaries d1 and d2. Values in d2 overwrite those in d1 for matching keys.","def test_merge_dicts(): assert merge_dicts({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2} assert merge_dicts({'x': 10}, {'x': 20, 'y': 30}) == {'x': 20, 'y': 30} assert merge_dicts({}, {'key': 'value'}) == {'key': 'value'}"
def find_max_value(lst): return max(lst) if lst else None,Finds the maximum value in a list.,"def test_find_max_value(): assert find_max_value([1, 2, 3]) == 3 assert find_max_value([-1, -2, -3]) == -1 assert find_max_value([]) == None"
def get_even_numbers(lst): return [x for x in lst if x % 2 == 0],"Filters even numbers from a list.

This function returns True if the input string s reads the same backward as forward; otherwise, False.","def test_get_even_numbers(): assert get_even_numbers([1, 2, 3, 4]) == [2, 4] assert get_even_numbers([5, 7]) == [] assert get_even_numbers([0, 2, 4]) == [0, 2, 4]"
def get_word_count(s): return len(s.split()),"Counts the number of words in a string.

This function returns the count of words in the input string s, where words are separated by whitespace.",def test_get_word_count(): assert get_word_count("hello world") == 2 assert get_word_count("one two three") == 3 assert get_word_count("") == 0
"def extract_unique_characters(s): return ''.join(sorted(set(s), key=s.index))","Extracts unique characters from a string.

This function returns a string of unique characters from s in the order they first appear.",def test_extract_unique_characters(): assert extract_unique_characters("hello") == "helo" assert extract_unique_characters("banana") == "ban" assert extract_unique_characters("") == ""
def convert_to_lowercase(s): return s.lower(),"Converts a string to lowercase.

This function returns the input string s with all characters converted to lowercase.",def test_convert_to_lowercase(): assert convert_to_lowercase("HELLO") == "hello" assert convert_to_lowercase("World") == "world" assert convert_to_lowercase("Python") == "python"
"def get_last_n_elements(lst, n): return lst[-n:]","Retrieves the last n elements of a list.

This function returns a list containing the last n elements from the input list lst.","def test_get_last_n_elements(): assert get_last_n_elements([1, 2, 3, 4], 2) == [3, 4] assert get_last_n_elements([1, 2], 5) == [1, 2] assert get_last_n_elements([], 1) == []"
def get_string_length(s): return len(s),Retrieves the length of a string.,def test_get_string_length(): assert get_string_length("hello") == 5 assert get_string_length("") == 0 assert get_string_length("Python") == 6
"def combine_lists(lst1, lst2): return lst1 + lst2","Concatenates two lists.

This function returns a new list formed by concatenating lst1 and lst2.","def test_combine_lists(): assert combine_lists([1, 2], [3, 4]) == [1, 2, 3, 4] assert combine_lists([], [1]) == [1] assert combine_lists([1], []) == [1]"
def split_string_into_words(s): return s.split(),"Splits a string into a list of words.

This function returns a list of words obtained by splitting the input string s based on whitespace.","def test_split_string_into_words(): assert split_string_into_words(""hello world"") == [""hello"", ""world""] assert split_string_into_words(""one two three"") == [""one"", ""two"", ""three""] assert split_string_into_words("""") == []"
"def add_key_value(d, key, value): d[key] = value; return d","Adds a key-value pair to a dictionary.

This function adds a new key-value pair to the input dictionary d and returns the updated dictionary.","def test_add_key_value(): assert add_key_value({'a': 1}, 'b', 2) == {'a': 1, 'b': 2} assert add_key_value({}, 'x', 10) == {'x': 10} assert add_key_value({'key': 'value'}, 'key', 'new_value') == {'key': 'new_value'}"
"def remove_key(d, key): if key in d: del d[key]; return d","Removes a key from a dictionary.

This function removes the specified key from the dictionary d if it exists, and returns the updated dictionary.","def test_remove_key(): assert remove_key({'a': 1, 'b': 2}, 'a') == {'b': 2} assert remove_key({'x': 10}, 'y') == {'x': 10} assert remove_key({}, 'any') == {}"
def get_dict_items(d): return list(d.items()),"Retrieves the items of a dictionary as a list of tuples.

This function returns a list of key-value pairs (tuples) from the dictionary d.","def test_get_dict_items(): assert get_dict_items({'a': 1, 'b': 2}) == [('a', 1), ('b', 2)] assert get_dict_items({'x': 10}) == [('x', 10)] assert get_dict_items({}) == []"
"def multiply_elements(lst, factor): return [x * factor for x in lst]","Multiplies each element in a list by a factor.

This function returns a list with each element in lst multiplied by the factor.","def test_multiply_elements(): assert multiply_elements([1, 2, 3], 2) == [2, 4, 6] assert multiply_elements([5, 10], 0) == [0, 0] assert multiply_elements([], 3) == []"
"def filter_by_condition(lst, condition): return [x for x in lst if condition(x)]","Filters elements in a list based on a condition.

This function returns a list of elements from lst that satisfy the provided condition function.","def test_filter_by_condition(): assert filter_by_condition([1, 2, 3], lambda x: x % 2 == 0) == [2] assert filter_by_condition(['a', 'b'], lambda x: x > 'a') == ['b'] assert filter_by_condition([1, 2, 3], lambda x: x < 2) == [1]"
def capitalize_first_letter(s): return s[0].upper() + s[1:] if s else "","Capitalizes the first letter of a string.

This function returns the input string s with the first letter capitalized. If s is empty, it returns an empty string.",def test_capitalize_first_letter(): assert capitalize_first_letter("hello") == "Hello" assert capitalize_first_letter("world") == "World" assert capitalize_first_letter("") == ""
def get_dict_keys(d): return list(d.keys()),"Retrieves the keys of a dictionary as a list.

This function returns a list of keys from the input dictionary d.","def test_get_dict_keys(): assert get_dict_keys({'a': 1, 'b': 2}) == ['a', 'b'] assert get_dict_keys({'x': 10}) == ['x'] assert get_dict_keys({}) == []"
def get_dict_values(d): return list(d.values()),"Retrieves the values of a dictionary as a list.

This function returns a list of values from the input dictionary d.","def test_get_dict_values(): assert get_dict_values({'a': 1, 'b': 2}) == [1, 2] assert get_dict_values({'x': 10}) == [10] assert get_dict_values({}) == []"
def sort_list(lst): return sorted(lst),"Sorts a list in ascending order.

This function returns a new list with the elements of lst sorted in ascending order.","def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3] assert sort_list(['b', 'a']) == ['a', 'b'] assert sort_list([]) == []"
def sum_elements(lst): return sum(lst),Calculates the sum of elements in a list.,"def test_sum_elements(): assert sum_elements([1, 2, 3]) == 6 assert sum_elements([-1, 1]) == 0 assert sum_elements([]) == 0"
"def remove_element(lst, element): return [x for x in lst if x != element]","Removes all occurrences of an element from a list.

This function returns a new list with all occurrences of element removed from lst.","def test_remove_element(): assert remove_element([1, 2, 3, 2], 2) == [1, 3] assert remove_element(['a', 'b', 'a'], 'a') == ['b'] assert remove_element([], 1) == []"
"def find_common_elements(lst1, lst2): return list(set(lst1) & set(lst2))",Finds common elements between two lists.,"def test_find_common_elements(): assert find_common_elements([1, 2], [2, 3]) == [2] assert find_common_elements(['a'], ['b']) == [] assert find_common_elements([], [1, 2]) == []"
"def get_max_length_string(lst): return max(lst, key=len) if lst else """"","Finds the longest string in a list.

This function returns the string with the maximum length from the input list lst. If the list is empty, it returns an empty string.","def test_get_max_length_string(): assert get_max_length_string([""short"", ""longest""]) == ""longest"" assert get_max_length_string([""a"", ""bb"", ""ccc""]) == ""ccc"" assert get_max_length_string([]) == """""
"def generate_fibonacci(n): a, b = 0, 1; result = []; while a < n: result.append(a); a, b = b, a + b; return result","Generates a list of Fibonacci numbers up to n.

This function returns a list of Fibonacci numbers that are less than n.","def test_generate_fibonacci(): assert generate_fibonacci(10) == [0, 1, 1, 2, 3, 5, 8] assert generate_fibonacci(5) == [0, 1, 1, 2, 3] assert generate_fibonacci(1) == [0, 1]"
"def is_prime(n): if n <= 1: return False; for i in range(2, int(n**0.5) + 1): if n % i == 0: return False; return True",Checks if a number is prime.,def test_is_prime(): assert is_prime(2) assert is_prime(3) assert not is_prime(4) assert not is_prime(1)
def flatten_list(lst): result = []; for sublist in lst: result.extend(sublist); return result,"Flattens a nested list into a single list.

This function returns a single list containing all elements from the nested list lst.","def test_flatten_list(): assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4] assert flatten_list([['a'], ['b', 'c']]) == ['a', 'b', 'c'] assert flatten_list([]) == []"
"def count_occurrences(lst, element): return lst.count(element)","Counts occurrences of an element in a list.

This function returns the number of times element appears in the input list lst.","def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences(['a', 'b', 'a'], 'a') == 2 assert count_occurrences([], 1) == 0"
def to_list_of_strings(lst): return [str(x) for x in lst],"Converts all elements in a list to strings.

This function returns a new list with all elements of lst converted to strings.","def test_to_list_of_strings(): assert to_list_of_strings([1, 2, 3]) == ['1', '2', '3'] assert to_list_of_strings(['a', 'b']) == ['a', 'b'] assert to_list_of_strings([]) == []"
def find_duplicates(lst): return list(set(x for x in lst if lst.count(x) > 1)),Finds duplicate elements in a list.,"def test_find_duplicates(): assert find_duplicates([1, 2, 2, 3]) == [2] assert find_duplicates(['a', 'b', 'a']) == ['a'] assert find_duplicates([1, 2, 3]) == []"
"def merge_and_sort_lists(lst1, lst2): return sorted(lst1 + lst2)","Merges two lists and sorts the result.

This function returns a new list formed by merging lst1 and lst2, and sorting the combined list in ascending order.","def test_merge_and_sort_lists(): assert merge_and_sort_lists([3, 1], [2, 4]) == [1, 2, 3, 4] assert merge_and_sort_lists([], [1, 2]) == [1, 2] assert merge_and_sort_lists([5], []) == [5]"
def remove_duplicates(lst): return list(set(lst)),"Removes duplicate elements from a list.

This function returns a new list with duplicate elements removed from lst.","def test_remove_duplicates(): assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3] assert remove_duplicates(['a', 'b', 'a']) == ['a', 'b'] assert remove_duplicates([]) == []"
def find_largest_number(lst): return max(lst) if lst else None,"Finds the largest number in a list.

This function returns the largest number in the input list lst. If the list is empty, it returns None.","def test_find_largest_number(): assert find_largest_number([1, 2, 3]) == 3 assert find_largest_number([-1, -2]) == -1 assert find_largest_number([]) == None"
def find_smallest_number(lst): return min(lst) if lst else None,"Finds the smallest number in a list.

This function returns the smallest number in the input list lst. If the list is empty, it returns None.","def test_find_smallest_number(): assert find_smallest_number([1, 2, 3]) == 1 assert find_smallest_number([-1, -2]) == -2 assert find_smallest_number([]) == None"
"def get_keys_with_value(d, value): return [k for k, v in d.items() if v == value]","Finds keys in a dictionary that have a specific value.

This function returns a list of keys in the dictionary d that have the specified value.","def test_get_keys_with_value(): assert get_keys_with_value({'a': 1, 'b': 2}, 1) == ['a'] assert get_keys_with_value({'x': 10, 'y': 10}, 10) == ['x', 'y'] assert get_keys_with_value({}, 1) == []"
"def get_values_for_keys(d, keys): return [d.get(k) for k in keys]","Retrieves values for a list of keys from a dictionary.

This function returns a list of values from the dictionary d corresponding to the specified list of keys.","def test_get_values_for_keys(): assert get_values_for_keys({'a': 1, 'b': 2}, ['a']) == [1] assert get_values_for_keys({'x': 10}, ['x', 'y']) == [10, None] assert get_values_for_keys({}, ['key']) == [None]"
"def sort_dict_by_value(d): return dict(sorted(d.items(), key=lambda item: item[1]))",Sorts a dictionary by its values.,"def test_sort_dict_by_value(): assert sort_dict_by_value({'a': 3, 'b': 1}) == {'b': 1, 'a': 3} assert sort_dict_by_value({'x': 10, 'y': 5}) == {'y': 5, 'x': 10} assert sort_dict_by_value({}) == {}"
"def filter_dict_by_value(d, condition): return {k: v for k, v in d.items() if condition(v)}","Filters a dictionary by a condition on its values.

This function returns a dictionary containing only the items from d whose values satisfy the specified condition function.","def test_filter_dict_by_value(): assert filter_dict_by_value({'a': 1, 'b': 2}, lambda v: v > 1) == {'b': 2} assert filter_dict_by_value({'x': 10}, lambda v: v < 10) == {} assert filter_dict_by_value({}, lambda v: v > 0) == {}"
"def zip_lists(lst1, lst2): return list(zip(lst1, lst2))",Zips two lists into a list of tuples.,"def test_zip_lists(): assert zip_lists([1, 2], ['a', 'b']) == [(1, 'a'), (2, 'b')] assert zip_lists([], [1]) == [] assert zip_lists([1], []) == []"
def unzip_lists(lst): return list(zip(*lst)),"Unzips a list of tuples into separate lists.

This function returns a list of lists, where each list contains elements from the tuples at the same index in the input list of tuples lst.","def test_unzip_lists(): assert unzip_lists([(1, 'a'), (2, 'b')]) == ([1, 2], ['a', 'b']) assert unzip_lists([('x', 1), ('y', 2)]) == (['x', 'y'], [1, 2]) assert unzip_lists([]) == ([], [])"
def get_even_length_strings(lst): return [s for s in lst if len(s) % 2 == 0],"Filters strings with even lengths from a list.

This function returns a list of strings from lst that have an even length.","def test_get_even_length_strings(): assert get_even_length_strings([""hello"", ""world""]) == [""world""] assert get_even_length_strings([""a"", ""bb""]) == [""bb""] assert get_even_length_strings([""even"", ""odd""]) == [""even""]"
def get_odd_length_strings(lst): return [s for s in lst if len(s) % 2 != 0],"Filters strings with odd lengths from a list.

This function returns a list of strings from lst that have an odd length.","def test_get_odd_length_strings(): assert get_odd_length_strings([""hello"", ""world""]) == [""hello""] assert get_odd_length_strings([""a"", ""bb""]) == [""a""] assert get_odd_length_strings([""even"", ""odd""]) == [""odd""]"
def calculate_average(lst): return sum(lst) / len(lst) if lst else 0,"Calculates the average of numbers in a list.

This function returns True if the input strings s1 and s2 are anagrams of each other, otherwise False.","def test_calculate_average(): assert calculate_average([1, 2, 3]) == 2.0 assert calculate_average([10, 20]) == 15.0 assert calculate_average([]) == 0"
def count_chars(s): return {char: s.count(char) for char in set(s)},"Counts the occurrences of each character in a string.

This function returns a dictionary where keys are characters from the input string s and values are their counts.","def test_count_chars(): assert count_chars(""hello"") == {'h': 1, 'e': 1, 'l': 2, 'o': 1} assert count_chars(""aabb"") == {'a': 2, 'b': 2} assert count_chars("""") == {}"
def get_word_lengths(s): return {word: len(word) for word in s.split()},"Gets the length of each word in a string.

This function returns a dictionary where keys are words from the input string s and values are their lengths.","def test_get_word_lengths(): assert get_word_lengths(""hello world"") == {'hello': 5, 'world': 5} assert get_word_lengths(""one two three"") == {'one': 3, 'two': 3, 'three': 5} assert get_word_lengths("""") == {}"
def filter_out_odd(lst): return [x for x in lst if x % 2 == 0],"Filters out odd numbers from a list.

This function returns a list containing only the even numbers from the input list lst.","def test_filter_out_odd(): assert filter_out_odd([1, 2, 3, 4]) == [2, 4] assert filter_out_odd([5, 7, 9]) == [] assert filter_out_odd([10, 12]) == [10, 12]"
"def remove_first_occurrence(lst, value): return [x for x in lst if x != value or value is None]","Removes the first occurrence of a value from a list.

This function returns a new list with the first occurrence of value removed from lst.","def test_remove_first_occurrence(): assert remove_first_occurrence([1, 2, 3, 2], 2) == [1, 3, 2] assert remove_first_occurrence(['a', 'b', 'a'], 'a') == ['b', 'a'] assert remove_first_occurrence([1, 1, 1], None) == [1, 1, 1]"
"def calculate_difference(a, b): return a - b","Calculates the difference between two numbers.

This function returns the result of subtracting b from a.","def test_calculate_difference(): assert calculate_difference(10, 5) == 5 assert calculate_difference(5, 10) == -5 assert calculate_difference(0, 0) == 0"
"def find_min_max(lst): return (min(lst), max(lst)) if lst else (None, None)","Finds the minimum and maximum values in a list.

This function returns a tuple with the minimum and maximum values from the input list lst. If the list is empty, it returns (None, None).","def test_find_min_max(): assert find_min_max([1, 2, 3]) == (1, 3) assert find_min_max([-1, -2, 0]) == (-2, 0) assert find_min_max([]) == (None, None)"
def remove_even_numbers(lst): return [x for x in lst if x % 2 != 0],Removes even numbers from a list.,"def test_remove_even_numbers(): assert remove_even_numbers([1, 2, 3, 4]) == [1, 3] assert remove_even_numbers([2, 4]) == [] assert remove_even_numbers([1, 3]) == [1, 3]"
"def multiply_by_factor(lst, factor): return [x * factor for x in lst]",Multiplies each element in a list by a factor.,"def test_multiply_by_factor(): assert multiply_by_factor([1, 2, 3], 2) == [2, 4, 6] assert multiply_by_factor([5, 10], 0) == [0, 0] assert multiply_by_factor([], 3) == []"
"def get_max_length_string(lst): return max(lst, key=len) if lst else """"",Finds the longest string in a list.,"def test_get_max_length_string(): assert get_max_length_string([""short"", ""longest""]) == ""longest"" assert get_max_length_string([""a"", ""bb""]) == ""bb"" assert get_max_length_string([]) == """""
"def get_min_length_string(lst): return min(lst, key=len) if lst else """"","Finds the shortest string in a list.

This function returns the string with the minimum length from the input list lst. If the list is empty, it returns an empty string.","def test_get_min_length_string(): assert get_min_length_string([""short"", ""longest""]) == ""short"" assert get_min_length_string([""a"", ""bb""]) == ""a"" assert get_min_length_string([]) == """""
"def count_occurrences(lst, element): return lst.count(element)",Counts the occurrences of an element in a list.,"def test_count_occurrences(): assert count_occurrences([1, 2, 2, 3], 2) == 2 assert count_occurrences(['a', 'b', 'a'], 'a') == 2 assert count_occurrences([], 1) == 0"
"def combine_lists(lst1, lst2): return lst1 + lst2","Combines two lists into one.

This function returns a new list containing all elements from lst1 followed by all elements from lst2.","def test_combine_lists(): assert combine_lists([1], [2]) == [1, 2] assert combine_lists(['a'], ['b']) == ['a', 'b'] assert combine_lists([], [1, 2]) == [1, 2]"
def remove_whitespace(s): return ''.join(s.split()),"Removes all whitespace from a string.

This function returns the input string s with all whitespace characters removed.",def test_remove_whitespace(): assert remove_whitespace(" h e llo ") == "hello" assert remove_whitespace(" ") == "" assert remove_whitespace("a b c") == "abc"
def remove_trailing_spaces(s): return s.rstrip(),"Removes trailing spaces from a string.

This function returns the input string s with any trailing whitespace characters removed.",def test_remove_trailing_spaces(): assert remove_trailing_spaces("hello ") == "hello" assert remove_trailing_spaces("world") == "world" assert remove_trailing_spaces(" ") == ""
def remove_leading_spaces(s): return s.lstrip(),"Removes leading spaces from a string.

This function returns the input string s with any leading whitespace characters removed.",def test_remove_leading_spaces(): assert remove_leading_spaces(" hello") == "hello" assert remove_leading_spaces("world") == "world" assert remove_leading_spaces(" ") == ""
def strip_spaces(s): return s.strip(),"Removes leading and trailing spaces from a string.

This function returns the input string s with both leading and trailing whitespace characters removed.",def test_strip_spaces(): assert strip_spaces(" hello ") == "hello" assert strip_spaces("world") == "world" assert strip_spaces(" ") == ""
def extract_digits(s): return ''.join(c for c in s if c.isdigit()),"Extracts all digits from a string.

This function returns a string containing all digit characters found in the input string s.",def test_extract_digits(): assert extract_digits("a1b2c3") == "123" assert extract_digits("hello") == "" assert extract_digits("2024") == "2024"
def extract_non_digits(s): return ''.join(c for c in s if not c.isdigit()),"Extracts all non-digit characters from a string.

This function returns a string containing all non-digit characters from the input string s.",def test_extract_non_digits(): assert extract_non_digits("a1b2c3") == "abc" assert extract_non_digits("hello") == "hello" assert extract_non_digits("2024") == ""
"def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",Checks if a number is prime.,def test_is_prime(): assert is_prime(2) assert not is_prime(4) assert is_prime(7) assert not is_prime(1)
"def get_factors(n): return [i for i in range(1, n + 1) if n % i == 0]","Finds all factors of a number.

This function returns a list of all positive factors of the input number n.","def test_get_factors(): assert get_factors(6) == [1, 2, 3, 6] assert get_factors(10) == [1, 2, 5, 10] assert get_factors(1) == [1]"
def is_odd(n): return n % 2 != 0,Checks if a number is odd.,def test_is_odd(): assert is_odd(3) assert not is_odd(4) assert is_odd(-1)
def factorial(n): return 1 if n == 0 else n * factorial(n - 1),Computes the factorial of a number.,def test_factorial(): assert factorial(0) == 1 assert factorial(5) == 120 assert factorial(3) == 6
"def fibonacci(n): a, b = 0, 1; [a, b := b, a + b for _ in range(n)]",Generates the first n Fibonacci numbers.,"def test_fibonacci(): assert fibonacci(5) == [0, 1, 1, 2, 3] assert fibonacci(1) == [0] assert fibonacci(0) == []"
def is_perfect_square(n): return n == int(n**0.5) ** 2,Checks if a number is a perfect square.,def test_is_perfect_square(): assert is_perfect_square(4) assert not is_perfect_square(5) assert is_perfect_square(9)
"def power(base, exp): return base ** exp",Computes the power of a number.,"def test_power(): assert power(2, 3) == 8 assert power(5, 0) == 1 assert power(7, 2) == 49"
"def gcd(a, b): while b: a, b = b, a % b; return a","Computes the greatest common divisor (GCD) of two numbers.

This function returns the GCD of the input numbers a and b using the Euclidean algorithm.","def test_gcd(): assert gcd(8, 12) == 4 assert gcd(100, 25) == 25 assert gcd(7, 3) == 1"
"def lcm(a, b): return abs(a*b) // gcd(a, b)","Computes the least common multiple (LCM) of two numbers.

This function returns the LCM of the input numbers a and b using the formula involving GCD.","def test_lcm(): assert lcm(4, 5) == 20 assert lcm(6, 8) == 24 assert lcm(7, 3) == 21"
def convert_to_int(s): try: return int(s) except ValueError: return None,"Converts a string to an integer.

This function attempts to convert the input string s to an integer. If the conversion fails, it returns None.",def test_convert_to_int(): assert convert_to_int("123") == 123 assert convert_to_int("abc") == None assert convert_to_int("0") == 0
def count_vowels(s): return sum(c in 'aeiouAEIOU' for c in s),"Counts the number of vowels in a string.

This function returns the total number of vowel characters in the input string s.",def test_count_vowels(): assert count_vowels("hello") == 2 assert count_vowels("world") == 1 assert count_vowels("AEIOU") == 5
def count_consonants(s): return sum(c.isalpha() and c not in 'aeiouAEIOU' for c in s),"Counts the number of consonants in a string.

This function returns the total number of consonant characters in the input string s.",def test_count_consonants(): assert count_consonants("hello") == 3 assert count_consonants("world") == 4 assert count_consonants("AEIOU") == 0
def remove_punctuation(s): return ''.join(c for c in s if c.isalnum() or c.isspace()),"Removes punctuation from a string.

This function returns the input string s with all punctuation characters removed.","def test_remove_punctuation(): assert remove_punctuation(""hello, world!"") == ""hello world"" assert remove_punctuation(""goodbye."") == ""goodbye"" assert remove_punctuation(""123!@#"") == ""123"""
"def merge_dicts(dict1, dict2): result = dict1.copy(); result.update(dict2); return result","Merges two dictionaries.

This function returns a new dictionary containing all key-value pairs from dict1 and dict2. In case of key conflicts, values from dict2 are used.","def test_merge_dicts(): assert merge_dicts({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2} assert merge_dicts({'x': 5}, {'x': 10}) == {'x': 10} assert merge_dicts({}, {'a': 1}) == {'a': 1}"
"def find_common_keys(dict1, dict2): return list(set(dict1) & set(dict2))","Finds common keys between two dictionaries.

This function returns a list of keys that are present in both dictionaries dict1 and dict2.","def test_find_common_keys(): assert find_common_keys({'a': 1}, {'a': 2, 'b': 3}) == ['a'] assert find_common_keys({'x': 5}, {'y': 10}) == [] assert find_common_keys({}, {'a': 1}) == []"
"def invert_dict(d): return {v: k for k, v in d.items()}","Inverts the keys and values of a dictionary.

This function returns a new dictionary with keys and values swapped from the input dictionary d.","def test_invert_dict(): assert invert_dict({'a': 1, 'b': 2}) == {1: 'a', 2: 'b'} assert invert_dict({1: 'x'}) == {'x': 1} assert invert_dict({}) == {}"
"def flatten_dict(d): return {k: v for subdict in d.values() for k, v in subdict.items()}","Flattens a dictionary of dictionaries into a single dictionary.

This function returns a single dictionary by merging all nested dictionaries from the input dictionary d.","def test_flatten_dict(): assert flatten_dict({'a': {'b': 1}, 'c': {'d': 2}}) == {'b': 1, 'd': 2} assert flatten_dict({'x': {}, 'y': {'z': 3}}) == {'z': 3} assert flatten_dict({}) == {}"
def get_dict_items(d): return list(d.items()),"Retrieves the items (key-value pairs) of a dictionary as a list.

This function returns a list of tuples where each tuple represents a key-value pair from the input dictionary d.","def test_get_dict_items(): assert get_dict_items({'a': 1, 'b': 2}) == [('a', 1), ('b', 2)] assert get_dict_items({'x': 10}) == [('x', 10)] assert get_dict_items({}) == []"
def get_dict_length(d): return len(d),"Retrieves the number of key-value pairs in a dictionary.

This function returns the count of key-value pairs in the input dictionary d.","def test_get_dict_length(): assert get_dict_length({'a': 1, 'b': 2}) == 2 assert get_dict_length({'x': 10}) == 1 assert get_dict_length({}) == 0"
def get_keys_as_list(d): return list(d.keys()),"Retrieves the keys of a dictionary as a list.

This function returns a list containing all keys from the input dictionary d.","def test_get_keys_as_list(): assert get_keys_as_list({'a': 1, 'b': 2}) == ['a', 'b'] assert get_keys_as_list({'x': 10}) == ['x'] assert get_keys_as_list({}) == []"
def get_values_as_list(d): return list(d.values()),"Retrieves the values of a dictionary as a list.

This function returns a list containing all values from the input dictionary d.","def test_get_values_as_list(): assert get_values_as_list({'a': 1, 'b': 2}) == [1, 2] assert get_values_as_list({'x': 10}) == [10] assert get_values_as_list({}) == []"
"def is_key_in_dict(d, key): return key in d","Checks if a key exists in a dictionary.

This function returns True if the key is present in the input dictionary d, otherwise False.","def test_is_key_in_dict(): assert is_key_in_dict({'a': 1}, 'a') assert not is_key_in_dict({'b': 2}, 'a') assert not is_key_in_dict({}, 'x')"
"def is_value_in_dict(d, value): return value in d.values()","Checks if a value exists in a dictionary.

This function returns True if the value is present in the values of the input dictionary d, otherwise False.","def test_is_value_in_dict(): assert is_value_in_dict({'a': 1}, 1) assert not is_value_in_dict({'b': 2}, 1) assert not is_value_in_dict({}, 1)"
"def find_key_by_value(d, value): return next((k for k, v in d.items() if v == value), None)","Finds a key by its value in a dictionary.

This function returns the key associated with the specified value in the input dictionary d. If the value is not found, it returns None.","def test_find_key_by_value(): assert find_key_by_value({'a': 1}, 1) == 'a' assert find_key_by_value({'b': 2}, 1) == None assert find_key_by_value({}, 1) == None"
def dict_to_str(d): return str(d),"Converts a dictionary to a string.

This function returns the string representation of the input dictionary d.",def test_dict_to_str(): assert dict_to_str({'a': 1}) == "{'a': 1}" assert dict_to_str({'x': 10}) == "{'x': 10}" assert dict_to_str({}) == "{}"
"def str_to_dict(s): return eval(s) if isinstance(s, str) else {}","Converts a string to a dictionary.

This function attempts to convert the input string s to a dictionary. If the string is not a valid dictionary representation, it returns an empty dictionary.",def test_str_to_dict(): assert str_to_dict("{'a': 1}") == {'a': 1} assert str_to_dict("not a dict") == {} assert str_to_dict("{}") == {}
def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1),"Recursively calculates the factorial of a number.

This function returns the factorial of the input number n, calculated as n! = n * (n-1)! using recursion.",def test_factorial_recursive(): assert factorial_recursive(0) == 1 assert factorial_recursive(5) == 120 assert factorial_recursive(1) == 1
def fibonacci_recursive(n): return n if n <= 1 else fibonacci_recursive(n-1) + fibonacci_recursive(n-2),"Recursively calculates the nth Fibonacci number.

This function returns the nth Fibonacci number using a recursive approach.",def test_fibonacci_recursive(): assert fibonacci_recursive(5) == 5 assert fibonacci_recursive(10) == 55 assert fibonacci_recursive(0) == 0
"def merge_sort(lst): if len(lst) <= 1: return lst; mid = len(lst) // 2; left = merge_sort(lst[:mid]); right = merge_sort(lst[mid:]); return merge(left, right)","Sorts a list using the merge sort algorithm.

This function returns a sorted version of the input list lst by recursively dividing and merging sublists using the merge sort algorithm.","def test_merge_sort(): assert merge_sort([3, 1, 4, 2]) == [1, 2, 3, 4] assert merge_sort([5, 3, 8, 1]) == [1, 3, 5, 8] assert merge_sort([]) == []"
def quick_sort(lst): if len(lst) <= 1: return lst; pivot = lst[0]; less = [x for x in lst[1:] if x <= pivot]; greater = [x for x in lst[1:] if x > pivot]; return quick_sort(less) + [pivot] + quick_sort(greater),"Sorts a list using the quicksort algorithm.

This function returns a sorted version of the input list lst by recursively partitioning and sorting using the quicksort algorithm.","def test_quick_sort(): assert quick_sort([3, 1, 4, 2]) == [1, 2, 3, 4] assert quick_sort([5, 3, 8, 1]) == [1, 3, 5, 8] assert quick_sort([]) == []"
"def binary_search(lst, target): left, right = 0, len(lst) - 1; while left <= right: mid = (left + right) // 2; if lst[mid] == target: return mid; elif lst[mid] < target: left = mid + 1; else: right = mid - 1; return -1","Performs binary search on a sorted list.

This function returns the index of the target in the sorted input list lst if found, otherwise returns -1.","def test_binary_search(): assert binary_search([1, 2, 3, 4, 5], 3) == 2 assert binary_search([1, 2, 3, 4, 5], 6) == -1 assert binary_search([], 3) == -1"
"def binary_tree_height(tree): return 0 if tree is None else 1 + max(binary_tree_height(tree.left), binary_tree_height(tree.right))","Calculates the height of a binary tree.

This function returns the height of the input binary tree tree, which is the number of edges on the longest path from the root to a leaf node.","def test_binary_tree_height(): tree = Node(1, Node(2), Node(3)) assert binary_tree_height(tree) == 2 assert binary_tree_height(None) == 0"
"def levenshtein_distance(s1, s2): m, n = len(s1), len(s2); dp = [[0] * (n + 1) for _ in range(m + 1)]; for i in range(m + 1): dp[i][0] = i; for j in range(n + 1): dp[0][j] = j; for i in range(1, m + 1): for j in range(1, n + 1): dp[i][j] = min(dp[i-1][j] + 1, dp[i][j-1] + 1, dp[i-1][j-1] + (s1[i-1] != s2[j-1])); return dp[m][n]","Calculates the Levenshtein distance between two strings.

This function returns the minimum number of single-character edits (insertions, deletions, or substitutions) required to transform the string s1 into s2.","def test_levenshtein_distance(): assert levenshtein_distance(""kitten"", ""sitting"") == 3 assert levenshtein_distance(""flaw"", ""lawn"") == 2 assert levenshtein_distance(""abc"", ""abc"") == 0"
"def knapsack(weights, values, capacity): dp = [0] * (capacity + 1); for i in range(len(weights)): for j in range(capacity, weights[i] - 1, -1): dp[j] = max(dp[j], dp[j - weights[i]] + values[i]); return dp[capacity]","Solves the 0/1 knapsack problem.

This function returns the maximum value that can be obtained by selecting items with given weights and values within the given capacity.","def test_knapsack(): assert knapsack([1, 2, 3], [10, 15, 40], 6) == 55 assert knapsack([2, 3], [30, 50], 5) == 50 assert knapsack([1], [100], 0) == 0"
"def matrix_multiply(a, b): return [[sum(x * y for x, y in zip(row_a, col_b)) for col_b in zip(*b)] for row_a in a]","Multiplies two matrices.

This function returns the result of multiplying two matrices a and b. The number of columns in a must match the number of rows in b.","def test_matrix_multiply(): a = [[1, 2], [3, 4]]; b = [[2, 0], [1, 3]]; assert matrix_multiply(a, b) == [[4, 6], [10, 12]] assert matrix_multiply([[1]], [[2]]) == [[2]]"
def rotate_matrix_90(matrix): return [list(reversed(col)) for col in zip(*matrix)],"Rotates a matrix by 90 degrees clockwise.

This function returns a new matrix that is a 90-degree clockwise rotation of the input matrix matrix.","def test_rotate_matrix_90(): matrix = [[1, 2], [3, 4]]; assert rotate_matrix_90(matrix) == [[3, 1], [4, 2]] assert rotate_matrix_90([[1]]) == [[1]]"
"def find_lis_length(lst): dp = [1] * len(lst); for i in range(1, len(lst)): for j in range(i): if lst[i] > lst[j]: dp[i] = max(dp[i], dp[j] + 1); return max(dp)","Finds the length of the longest increasing subsequence in a list.

This function returns the length of the longest increasing subsequence in the input list lst.","def test_find_lis_length(): assert find_lis_length([10, 9, 2, 5, 3, 7, 101, 18]) == 4 assert find_lis_length([0, 1, 0, 3, 2, 3]) == 4 assert find_lis_length([7, 7, 7, 7]) == 1"
"def min_coin_change(coins, amount): dp = [float('inf')] * (amount + 1); dp[0] = 0; for coin in coins: for i in range(coin, amount + 1): dp[i] = min(dp[i], dp[i - coin] + 1); return dp[amount] if dp[amount] != float('inf') else -1","Solves the minimum coin change problem.

This function returns the minimum number of coins required to make up the amount amount using the available denominations coins.","def test_min_coin_change(): assert min_coin_change([1, 2, 5], 11) == 3 assert min_coin_change([2], 3) == -1 assert min_coin_change([1], 0) == 0"
"def dijkstra(graph, start): import heapq; pq = [(0, start)]; distances = {v: float('inf') for v in graph}; distances[start] = 0; while pq: (dist, current) = heapq.heappop(pq); for neighbor, weight in graph[current]: d = dist + weight; if d < distances[neighbor]: distances[neighbor] = d; heapq.heappush(pq, (d, neighbor)); return distances","Implements Dijkstra's shortest path algorithm.

This function returns the shortest distances from the start node to all other nodes in a weighted graph using Dijkstra's algorithm.","def test_dijkstra(): graph = {'A': [('B', 1), ('C', 4)], 'B': [('C', 2), ('D', 5)], 'C': [('D', 1)], 'D': []}; assert dijkstra(graph, 'A') == {'A': 0, 'B': 1, 'C': 3, 'D': 4}"
"def floyd_warshall(graph): n = len(graph); dist = [[float('inf')] * n for _ in range(n)]; for i in range(n): for j in range(n): if i == j: dist[i][j] = 0; elif graph[i][j] != 0: dist[i][j] = graph[i][j]; for k in range(n): for i in range(n): for j in range(n): dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]); return dist","Implements Floyd-Warshall's algorithm to find shortest paths between all pairs of vertices.

This function returns a matrix dist where dist[i][j] represents the shortest distance between vertices i and j.","def test_floyd_warshall(): graph = [[0, 3, float('inf'), 7], [8, 0, 2, float('inf')], [5, float('inf'), 0, 1], [2, float('inf'), float('inf'), 0]]; assert floyd_warshall(graph)[0][2] == 5"
"def longest_common_subsequence(s1, s2): m, n = len(s1), len(s2); dp = [[0] * (n + 1) for _ in range(m + 1)]; for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1; else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]); return dp[m][n]","Finds the length of the longest common subsequence (LCS) between two strings.

This function returns the length of the LCS between strings s1 and s2 using dynamic programming.","def test_longest_common_subsequence(): assert longest_common_subsequence(""abcde"", ""ace"") == 3 assert longest_common_subsequence(""abc"", ""abc"") == 3 assert longest_common_subsequence(""abc"", ""def"") == 0"
"def bellman_ford(graph, start): distances = {v: float('inf') for v in graph}; distances[start] = 0; for _ in range(len(graph) - 1): for u in graph: for v, weight in graph[u]: if distances[u] + weight < distances[v]: distances[v] = distances[u] + weight; for u in graph: for v, weight in graph[u]: if distances[u] + weight < distances[v]: return ""Negative cycle detected""; return distances","Implements Bellman-Ford's algorithm to find the shortest paths from a single source.

This function returns the shortest distances from the start node to all other nodes in a weighted graph using Bellman-Ford's algorithm. Detects negative-weight cycles.","def test_bellman_ford(): graph = {'A': [('B', -1), ('C', 4)], 'B': [('C', 3), ('D', 2), ('E', 2)], 'C': [], 'D': [('B', 1), ('C', 5)], 'E': [('D', -3)]}; assert bellman_ford(graph, 'A') == {'A': 0, 'B': -1, 'C': 2, 'D': -2, 'E': 1}"
"def heapify(arr, n, i): largest = i; left = 2 * i + 1; right = 2 * i + 2; if left < n and arr[left] > arr[largest]: largest = left; if right < n and arr[right] > arr[largest]: largest = right; if largest != i: arr[i], arr[largest] = arr[largest], arr[i]; heapify(arr, n, largest)","Maintains the heap property in a binary heap.

This function modifies the heap arr in place to ensure the heap property is satisfied starting from node i in an array of size n.","def test_heapify(): arr = [4, 10, 3, 5, 1]; heapify(arr, 5, 0); assert arr == [10, 5, 3, 4, 1]"
"def heap_sort(arr): n = len(arr); for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i); for i in range(n - 1, 0, -1): arr[i], arr[0] = arr[0], arr[i]; heapify(arr, i, 0)","Sorts an array using heap sort.

This function sorts the input array arr in ascending order using the heap sort algorithm, which first builds a max heap and then performs a series of swaps.","def test_heap_sort(): arr = [12, 11, 13, 5, 6, 7]; heap_sort(arr); assert arr == [5, 6, 7, 11, 12, 13]"
"def radix_sort(arr): max_val = max(arr); exp = 1; while max_val // exp > 0: counting_sort(arr, exp); exp *= 10","Sorts an array using radix sort.

This function sorts the input array arr in ascending order using radix sort, a non-comparative sorting algorithm based on the digits of the numbers.","def test_radix_sort(): arr = [170, 45, 75, 90, 802, 24, 2, 66]; radix_sort(arr); assert arr == [2, 24, 45, 66, 75, 90, 170, 802]"
"def counting_sort(arr, exp): n = len(arr); output = [0] * n; count = [0] * 10; for i in range(n): index = arr[i] // exp; count[index % 10] += 1; for i in range(1, 10): count[i] += count[i - 1]; for i in range(n - 1, -1, -1): index = arr[i] // exp; output[count[index % 10] - 1] = arr[i]; count[index % 10] -= 1; for i in range(n): arr[i] = output[i]","Performs counting sort based on a specific digit.

This function sorts the input array arr based on the digit represented by exp using counting sort as a subroutine for radix sort.","def test_counting_sort(): arr = [170, 45, 75, 90, 802, 24, 2, 66]; counting_sort(arr, 1); assert arr == [170, 90, 802, 2, 24, 45, 66, 75]"
def pigeonhole_sort(arr): min_val = min(arr); max_val = max(arr); size = max_val - min_val + 1; holes = [0] * size; for x in arr: holes[x - min_val] += 1; index = 0; for i in range(size): while holes[i] > 0: arr[index] = i + min_val; index += 1; holes[i] -= 1,"Sorts an array using pigeonhole sort.

This function sorts the input array arr using pigeonhole sort, which distributes elements into ""pigeonholes"" based on their values and then reassembles them in order.","def test_pigeonhole_sort(): arr = [8, 3, 2, 7, 4, 6, 8]; pigeonhole_sort(arr); assert arr == [2, 3, 4, 6, 7, 8, 8]"
"def shell_sort(arr): gap = len(arr) // 2; while gap > 0: for i in range(gap, len(arr)): temp = arr[i]; j = i; while j >= gap and arr[j - gap] > temp: arr[j] = arr[j - gap]; j -= gap; arr[j] = temp; gap //= 2","Sorts an array using shell sort.

This function sorts the input array arr using the shell sort algorithm, which sorts elements far apart first and then reduces the gap between them.","def test_shell_sort(): arr = [12, 34, 54, 2, 3]; shell_sort(arr); assert arr == [2, 3, 12, 34, 54]"
def bucket_sort(arr): max_val = max(arr); size = max_val / len(arr); buckets = [[] for _ in range(len(arr))]; for i in range(len(arr)): j = int(arr[i] / size); if j != len(arr): buckets[j].append(arr[i]); else: buckets[len(arr) - 1].append(arr[i]); for i in range(len(arr)): insertion_sort(buckets[i]); k = 0; for i in range(len(arr)): for j in range(len(buckets[i])): arr[k] = buckets[i][j]; k += 1,"Sorts an array using bucket sort.

This function sorts the input array arr using bucket sort, which distributes elements into buckets based on their values and then sorts each bucket individually.","def test_bucket_sort(): arr = [0.897, 0.565, 0.656, 0.123, 0.665, 0.343]; bucket_sort(arr); assert arr == [0.123, 0.343, 0.565, 0.656, 0.665, 0.897]"
"def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i]; j = i - 1; while j >= 0 and key < arr[j]: arr[j + 1] = arr[j]; j -= 1; arr[j + 1] = key","Sorts an array using insertion sort.

This function sorts the input array arr using insertion sort, which builds a sorted array one element at a time by shifting larger elements.","def test_insertion_sort(): arr = [12, 11, 13, 5, 6]; insertion_sort(arr); assert arr == [5, 6, 11, 12, 13]"
"def huffman_encoding(data): from heapq import heapify, heappop, heappush; from collections import defaultdict; frequency = defaultdict(int); for symbol in data: frequency[symbol] += 1; heap = [[weight, [symbol, """"]] for symbol, weight in frequency.items()]; heapify(heap); while len(heap) > 1: lo = heappop(heap); hi = heappop(heap); for pair in lo[1:]: pair[1] = '0' + pair[1]; for pair in hi[1:]: pair[1] = '1' + pair[1]; heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:]); return sorted(heappop(heap)[1:], key=lambda p: (len(p[-1]), p))","Performs Huffman encoding.

This function takes an input string data and returns the Huffman encoding of the string using a priority queue.","def test_huffman_encoding(): assert huffman_encoding(""hello"") == [['e', '00'], ['h', '01'], ['l', '10'], ['o', '11']]"
def topological_sort(graph): visited = set(); stack = []; def dfs(v): visited.add(v); for neighbor in graph[v]: if neighbor not in visited: dfs(neighbor); stack.append(v); for v in graph: if v not in visited: dfs(v); return stack[::-1],"Performs topological sorting on a directed acyclic graph (DAG).

This function returns a topologically sorted order of vertices in a directed acyclic graph graph using depth-first search.","def test_topological_sort(): graph = {'A': ['C'], 'B': ['C', 'D'], 'C': ['E'], 'D': ['F'], 'E': ['F'], 'F': []}; assert topological_sort(graph) == ['B', 'A', 'C', 'D', 'E', 'F']"
"def prim_mst(graph): import heapq; mst = []; visited = set(); start = next(iter(graph)); edges = [(cost, start, to) for to, cost in graph[start]]; heapq.heapify(edges); while edges: cost, frm, to = heapq.heappop(edges); if to not in visited: visited.add(to); mst.append((frm, to, cost)); for to_next, cost_next in graph[to]: if to_next not in visited: heapq.heappush(edges, (cost_next, to, to_next)); return mst","Finds the minimum spanning tree (MST) using Prim's algorithm.

This function returns the MST of a weighted undirected graph graph using Prim's algorithm, which grows the MST one edge at a time.","def test_prim_mst(): graph = {'A': [('B', 1), ('C', 4)], 'B': [('A', 1), ('C', 2), ('D', 5)], 'C': [('A', 4), ('B', 2), ('D', 1)], 'D': [('B', 5), ('C', 1)]}; assert prim_mst(graph) == [('A', 'B', 1), ('B', 'C', 2), ('C', 'D', 1)]"
"def kruskal_mst(graph): edges = [(cost, frm, to) for frm in graph for to, cost in graph[frm]]; edges.sort(); parent = {}; def find(v): if parent[v] != v: parent[v] = find(parent[v]); return parent[v]; def union(v1, v2): root1, root2 = find(v1), find(v2); if root1 != root2: parent[root2] = root1; for v in graph: parent[v] = v; mst = []; for cost, frm, to in edges: if find(frm) != find(to): union(frm, to); mst.append((frm, to, cost)); return mst","Finds the minimum spanning tree (MST) using Kruskal's algorithm.

This function returns the MST of a weighted undirected graph graph using Kruskal's algorithm, which selects edges based on their weights.","def test_kruskal_mst(): graph = {'A': [('B', 1), ('C', 4)], 'B': [('A', 1), ('C', 2), ('D', 5)], 'C': [('A', 4), ('B', 2), ('D', 1)], 'D': [('B', 5), ('C', 1)]}; assert kruskal_mst(graph) == [('A', 'B', 1), ('C', 'D', 1), ('B', 'C', 2)]"
"def ford_fulkerson(graph, source, sink): def bfs(parent): visited = [False] * len(graph); queue = [source]; visited[source] = True; while queue: u = queue.pop(0); for ind, val in enumerate(graph[u]): if visited[ind] == False and val > 0: queue.append(ind); visited[ind] = True; parent[ind] = u; if ind == sink: return True; return False; parent = [-1] * len(graph); max_flow = 0; while bfs(parent): path_flow = float(""Inf""); s = sink; while s != source: path_flow = min(path_flow, graph[parent[s]][s]); s = parent[s]; max_flow += path_flow; v = sink; while v != source: u = parent[v]; graph[u][v] -= path_flow; graph[v][u] += path_flow; v = parent[v]; return max_flow","Finds the maximum flow in a flow network using the Ford-Fulkerson algorithm.

This function returns the maximum flow from the source to the sink in a flow network graph using the Ford-Fulkerson algorithm.","def test_ford_fulkerson(): graph = [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]]; assert ford_fulkerson(graph, 0, 5) == 23"
def all_permutations(s): from itertools import permutations; return [''.join(p) for p in permutations(s)],"Generates all permutations of a string.

This function returns a list containing all possible permutations of the characters in the input string s.","def test_all_permutations(): assert sorted(all_permutations('abc')) == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba'] assert all_permutations('a') == ['a'] assert all_permutations('') == []"
"def longest_palindromic_substring(s): def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1; right += 1; return s[left + 1:right]; result = """"; for i in range(len(s)): temp = expand_around_center(i, i); if len(temp) > len(result): result = temp; temp = expand_around_center(i, i + 1); if len(temp) > len(result): result = temp; return result","Finds the longest palindromic substring.

This function returns the longest palindromic substring of the input string s. It uses the center expansion method to check for palindromes around each character.",def test_longest_palindromic_substring(): assert longest_palindromic_substring('babad') == 'bab' or longest_palindromic_substring('babad') == 'aba' assert longest_palindromic_substring('cbbd') == 'bb' assert longest_palindromic_substring('a') == 'a'
"def min_cost_path(matrix): rows, cols = len(matrix), len(matrix[0]); dp = [[0] * cols for _ in range(rows)]; dp[0][0] = matrix[0][0]; for i in range(1, rows): dp[i][0] = dp[i-1][0] + matrix[i][0]; for j in range(1, cols): dp[0][j] = dp[0][j-1] + matrix[0][j]; for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j]; return dp[-1][-1]","Calculates the minimum cost path in a matrix.

This function returns the minimum cost required to reach the bottom-right corner of a matrix from the top-left corner, where each cell has a cost.","def test_min_cost_path(): matrix = [[1, 3, 1], [1, 5, 1], [4, 2, 1]]; assert min_cost_path(matrix) == 7 assert min_cost_path([[1, 2], [1, 1]]) == 3"
"def max_subarray_sum(nums): max_sum = current_sum = nums[0]; for num in nums[1:]: current_sum = max(num, current_sum + num); max_sum = max(max_sum, current_sum); return max_sum","Finds the maximum sum of a subarray.

This function returns the maximum sum that can be obtained from a contiguous subarray of the input list nums. It uses Kadane's algorithm to find the solution in linear time.","def test_max_subarray_sum(): assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6 assert max_subarray_sum([1]) == 1 assert max_subarray_sum([-1, -2, -3]) == -1"
"def search_in_rotated_array(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1; else: left = mid + 1; else: if nums[mid] < target <= nums[right]: left = mid + 1; else: right = mid - 1; return -1","Searches for a target in a rotated sorted array.

This function returns the index of the target in a rotated sorted array nums, or -1 if the target is not found. It uses binary search for O(log n) complexity.","def test_search_in_rotated_array(): assert search_in_rotated_array([4, 5, 6, 7, 0, 1, 2], 0) == 4 assert search_in_rotated_array([4, 5, 6, 7, 0, 1, 2], 3) == -1 assert search_in_rotated_array([1], 0) == -1"
"def combination_sum(candidates, target): def backtrack(start, path, total): if total == target: result.append(list(path)); return; if total > target: return; for i in range(start, len(candidates)): path.append(candidates[i]); backtrack(i, path, total + candidates[i]); path.pop(); result = []; backtrack(0, [], 0); return result","Finds all unique combinations that sum to a target.

This function returns all unique combinations of numbers from candidates that sum to target. It uses backtracking to explore all possible combinations.","def test_combination_sum(): assert combination_sum([2, 3, 6, 7], 7) == [[2, 2, 3], [7]] assert combination_sum([2, 3, 5], 8) == [[2, 2, 2, 2], [2, 3, 3], [3, 5]] assert combination_sum([2], 1) == []"
"def coin_change(coins, amount): dp = [float('inf')] * (amount + 1); dp[0] = 0; for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1); return dp[amount] if dp[amount] != float('inf') else -1","Solves the coin change problem.

This function returns the minimum number of coins required to make up the amount using the given coin denominations coins. If it's not possible, it returns -1.","def test_coin_change(): assert coin_change([1, 2, 5], 11) == 3 assert coin_change([2], 3) == -1 assert coin_change([1], 0) == 0"
"def is_valid_parentheses(s): stack = []; mapping = {')': '(', '}': '{', ']': '['}; for char in s: if char in mapping: top_element = stack.pop() if stack else '#'; if mapping[char] != top_element: return False; else: stack.append(char); return not stack","Checks if parentheses are valid.

This function returns True if the input string s contains valid pairs of parentheses, brackets, or braces, otherwise False. It uses a stack to track unmatched opening parentheses.",def test_is_valid_parentheses(): assert is_valid_parentheses("()") assert is_valid_parentheses("()[]{}") assert not is_valid_parentheses("(]")
"def max_profit(prices): min_price = float('inf'); max_profit = 0; for price in prices: min_price = min(min_price, price); max_profit = max(max_profit, price - min_price); return max_profit","Finds the maximum profit from stock prices.

This function returns the maximum profit that can be achieved by buying and selling a stock given the daily prices in the list prices.","def test_max_profit(): assert max_profit([7, 1, 5, 3, 6, 4]) == 5 assert max_profit([7, 6, 4, 3, 1]) == 0 assert max_profit([1, 2]) == 1"
"def product_except_self(nums): result = [1] * len(nums); left = 1; for i in range(len(nums)): result[i] = left; left *= nums[i]; right = 1; for i in range(len(nums) - 1, -1, -1): result[i] *= right; right *= nums[i]; return result","Returns product of array except itself.

This function returns a new list where each element at index i is the product of all elements in the input list nums except the one at i, without using division.","def test_product_except_self(): assert product_except_self([1, 2, 3, 4]) == [24, 12, 8, 6] assert product_except_self([0, 1, 2, 3]) == [6, 0, 0, 0] assert product_except_self([1]) == [1]"
"def jump_game(nums): max_reach = 0; for i, num in enumerate(nums): if i > max_reach: return False; max_reach = max(max_reach, i + num); return True","Determines if you can jump to the last index.

This function returns True if it is possible to reach the last index of the list nums by jumping, where each element in nums represents the maximum jump length.","def test_jump_game(): assert jump_game([2, 3, 1, 1, 4]) assert not jump_game([3, 2, 1, 0, 4]) assert jump_game([0])"
"def largest_rectangle_area(heights): stack = []; max_area = 0; for i, h in enumerate(heights + [0]): while stack and heights[stack[-1]] > h: height = heights[stack.pop()]; width = i if not stack else i - stack[-1] - 1; max_area = max(max_area, height * width); stack.append(i); return max_area","Finds the largest rectangle in a histogram.

This function returns the largest rectangular area that can be formed in a histogram represented by the list heights, where each element is the height of a bar.","def test_largest_rectangle_area(): assert largest_rectangle_area([2, 1, 5, 6, 2, 3]) == 10 assert largest_rectangle_area([2, 4]) == 4 assert largest_rectangle_area([1]) == 1"
"def trap_rainwater(heights): if not heights: return 0; left, right = 0, len(heights) - 1; left_max, right_max = heights[left], heights[right]; water = 0; while left < right: if left_max < right_max: left += 1; left_max = max(left_max, heights[left]); water += left_max - heights[left]; else: right -= 1; right_max = max(right_max, heights[right]); water += right_max - heights[right]; return water","Calculates trapped rainwater.

This function returns the total amount of water that can be trapped between the bars represented by the list heights, where each element is the height of a bar.","def test_trap_rainwater(): assert trap_rainwater([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]) == 6 assert trap_rainwater([4, 2, 0, 3, 2, 5]) == 9 assert trap_rainwater([1, 1]) == 0"
"def longest_consecutive_sequence(nums): if not nums: return 0; nums_set = set(nums); longest = 0; for num in nums_set: if num - 1 not in nums_set: length = 0; while num + length in nums_set: length += 1; longest = max(longest, length); return longest","Finds the longest consecutive sequence in an array.

This function returns the length of the longest consecutive sequence of integers in the input list nums. It uses a set to track the elements.","def test_longest_consecutive_sequence(): assert longest_consecutive_sequence([100, 4, 200, 1, 3, 2]) == 4 assert longest_consecutive_sequence([0, -1, 1, 2]) == 4 assert longest_consecutive_sequence([]) == 0"
"def zigzag_conversion(s, num_rows): if num_rows == 1 or num_rows >= len(s): return s; rows = [''] * num_rows; curr_row, step = 0, -1; for c in s: rows[curr_row] += c; if curr_row == 0 or curr_row == num_rows - 1: step = -step; curr_row += step; return ''.join(rows)","Converts a string into a zigzag pattern.

This function returns the zigzag pattern of the input string s arranged into num_rows and concatenated row by row.","def test_zigzag_conversion(): assert zigzag_conversion('PAYPALISHIRING', 3) == 'PAHNAPLSIIGYIR' assert zigzag_conversion('AB', 1) == 'AB' assert zigzag_conversion('A', 1) == 'A'"
"def add_binary(a, b): carry, result = 0, []; a, b = list(a), list(b); while a or b or carry: carry += int(a.pop()) if a else 0; carry += int(b.pop()) if b else 0; result.append(str(carry % 2)); carry //= 2; return ''.join(result[::-1])","Adds two binary numbers.

This function returns the sum of two binary numbers represented as strings a and b, as a binary string. It uses binary addition with a carry.","def test_add_binary(): assert add_binary('11', '1') == '100' assert add_binary('1010', '1011') == '10101' assert add_binary('0', '0') == '0'"
def group_anagrams(strs): from collections import defaultdict; anagrams = defaultdict(list); for word in strs: anagrams[tuple(sorted(word))].append(word); return list(anagrams.values()),"Groups anagrams together.

This function returns a list of lists where each sublist contains words that are anagrams of each other from the input list strs. It uses a dictionary with sorted characters as keys.","def test_group_anagrams(): assert group_anagrams(['eat', 'tea', 'tan', 'ate', 'nat', 'bat']) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']] assert group_anagrams(['']) == [['']] assert group_anagrams(['a']) == [['a']]"
def rotate_image(matrix): matrix[:] = zip(*matrix[::-1]),"Rotates a matrix by 90 degrees.

This function rotates the input 2D matrix by 90 degrees in-place, changing the orientation of all elements.","def test_rotate_image(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_image(matrix); assert matrix == [(7, 4, 1), (8, 5, 2), (9, 6"
"def max_heapify(arr, n, i): largest = i; left = 2 * i + 1; right = 2 * i + 2; if left < n and arr[left] > arr[largest]: largest = left; if right < n and arr[right] > arr[largest]: largest = right; if largest != i: arr[i], arr[largest] = arr[largest], arr[i]; max_heapify(arr, n, largest)","Maintains the max-heap property.

This function ensures the max-heap property by adjusting the node at index i in the heap arr. It considers both left and right children for the heap condition.","def test_max_heapify(): arr = [4, 10, 3, 5, 1]; max_heapify(arr, 5, 0); assert arr == [10, 5, 3, 4, 1]"
"def k_largest_elements(arr, k): import heapq; return heapq.nlargest(k, arr)","Finds the k largest elements in an array.

This function returns the k largest elements from the input array arr using a max heap for efficient extraction.","def test_k_largest_elements(): assert k_largest_elements([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]"
"def merge_k_sorted_lists(lists): import heapq; merged = []; heap = [(lst[0], i, 0) for i, lst in enumerate(lists) if lst]; heapq.heapify(heap); while heap: val, list_idx, elem_idx = heapq.heappop(heap); merged.append(val); if elem_idx + 1 < len(lists[list_idx]): heapq.heappush(heap, (lists[list_idx][elem_idx + 1], list_idx, elem_idx + 1)); return merged","Merges k sorted lists into one sorted list.

This function merges k sorted lists using a min-heap to efficiently find the smallest element across all lists.","def test_merge_k_sorted_lists(): assert merge_k_sorted_lists([[1, 4, 5], [1, 3, 4], [2, 6]]) == [1, 1, 2, 3, 4, 4, 5, 6]"
"def majority_element(nums): count, candidate = 0, None; for num in nums: if count == 0: candidate = num; count += 1 if num == candidate else -1; return candidate","Finds the majority element in a list.

This function returns the majority element in the list nums, defined as the element that appears more than half the time. It uses the Boyer-Moore voting algorithm.","def test_majority_element(): assert majority_element([3, 2, 3]) == 3 assert majority_element([2, 2, 1, 1, 1, 2, 2]) == 2"
"def flatten_nested_list(nested_list): flat_list = []; def flatten(lst): for item in lst: if isinstance(item, list): flatten(item); else: flat_list.append(item); flatten(nested_list); return flat_list","Flattens a nested list.

This function recursively flattens a nested list into a single list by unpacking any lists within it.","def test_flatten_nested_list(): assert flatten_nested_list([1, [2, [3, 4]], 5]) == [1, 2, 3, 4, 5] assert flatten_nested_list([]) == []"
def calculate_median(data): data.sort(); n = len(data); if n % 2 == 0: return (data[n // 2 - 1] + data[n // 2]) / 2; return data[n // 2],"Calculates the median of a list.

This function returns the median of the list data. If the number of elements is odd, it returns the middle element; if even, it returns the average of the two middle elements.","def test_calculate_median(): assert calculate_median([1, 2, 3]) == 2 assert calculate_median([1, 2, 3, 4]) == 2.5"
"def rotate_array(nums, k): k %= len(nums); nums[:] = nums[-k:] + nums[:-k]","Rotates an array by k steps.

This function rotates the input array nums by k steps to the right, modifying the array in place.","def test_rotate_array(): arr = [1, 2, 3, 4, 5, 6, 7]; rotate_array(arr, 3); assert arr == [5, 6, 7, 1, 2, 3, 4]"
"def two_sum(nums, target): seen = {}; for i, num in enumerate(nums): diff = target - num; if diff in seen: return [seen[diff], i]; seen[num] = i","Finds indices of two numbers that add up to the target.

This function returns the indices of the two numbers in the list nums that add up to the given target. It uses a hash map for efficient lookup.","def test_two_sum(): assert two_sum([2, 7, 11, 15], 9) == [0, 1]"
def longest_common_prefix(strs): if not strs: return ""; prefix = strs[0]; for s in strs[1:]: while not s.startswith(prefix): prefix = prefix[:-1]; return prefix,"Finds the longest common prefix among strings.

This function returns the longest common prefix shared by all strings in the input list strs. If no common prefix exists, it returns an empty string.","def test_longest_common_prefix(): assert longest_common_prefix([""flower"", ""flow"", ""flight""]) == ""fl"" assert longest_common_prefix([""dog"", ""racecar"", ""car""]) == """""
"def permute(nums): result = []; def backtrack(start=0): if start == len(nums): result.append(nums[:]); for i in range(start, len(nums)): nums[start], nums[i] = nums[i], nums[start]; backtrack(start + 1); nums[start], nums[i] = nums[i], nums[start]; backtrack(); return result","Generates all permutations of a list.

This function returns all possible permutations of the input list nums using a backtracking approach.","def test_permute(): assert permute([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 2, 1], [3, 1, 2]]"
"def find_peak_element(nums): left, right = 0, len(nums) - 1; while left < right: mid = (left + right) // 2; if nums[mid] < nums[mid + 1]: left = mid + 1; else: right = mid; return left","Finds a peak element in the array.

This function returns the index of any peak element in the input list nums. A peak element is an element greater than or equal to its neighbors.","def test_find_peak_element(): assert find_peak_element([1, 2, 3, 1]) == 2 assert find_peak_element([1, 2, 1, 3, 5, 6, 4]) in [1, 5]"
"def merge_intervals(intervals): intervals.sort(key=lambda x: x[0]); merged = [intervals[0]]; for i in range(1, len(intervals)): if merged[-1][1] >= intervals[i][0]: merged[-1][1] = max(merged[-1][1], intervals[i][1]); else: merged.append(intervals[i]); return merged","Merges overlapping intervals.

This function returns a list of merged intervals by combining overlapping intervals from the input list intervals.","def test_merge_intervals(): assert merge_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]) == [[1, 6], [8, 10], [15, 18]]"
def reverse_integer(x): rev = 0; neg = x < 0; x = abs(x); while x != 0: rev = rev * 10 + x % 10; x //= 10; if rev > 2**31 - 1: return 0; return -rev if neg else rev,"Reverses an integer.

This function returns the reversed digits of the input integer x. If the reversed integer overflows 32-bit signed integer limits, it returns 0.",def test_reverse_integer(): assert reverse_integer(123) == 321 assert reverse_integer(-123) == -321 assert reverse_integer(120) == 21
"def is_happy(n): def get_next(num): return sum(int(x) ** 2 for x in str(num)); slow, fast = n, get_next(n); while fast != 1 and slow != fast: slow = get_next(slow); fast = get_next(get_next(fast)); return fast == 1","Determines if a number is happy.

This function returns True if the input number n is a happy number. A happy number is a number that eventually reaches 1 after repeatedly replacing it with the sum of the squares of its digits.",def test_is_happy(): assert is_happy(19) assert not is_happy(2)
"def is_valid_sudoku(board): def is_valid_row(row): return len(set(row) - {'.'}) == len([x for x in row if x != '.']); def is_valid_col(board, col_idx): return len(set(board[i][col_idx] for i in range(9)) - {'.'}) == len([board[i][col_idx] for i in range(9) if board[i][col_idx] != '.']); def is_valid_box(board, start_row, start_col): box = [board[i][j] for i in range(start_row, start_row + 3) for j in range(start_col, start_col + 3)]; return len(set(box) - {'.'}) == len([x for x in box if x != '.']); for i in range(9): if not is_valid_row(board[i]) or not is_valid_col(board, i): return False; for i in range(0, 9, 3): for j in range(0, 9, 3): if not is_valid_box(board, i, j): return False; return True","Validates a Sudoku board.

This function returns True if the input 9x9 Sudoku board is valid according to Sudoku rules, ensuring no repeated numbers in rows, columns, or 3x3 boxes.","def test_is_valid_sudoku(): board = [[""5"", ""3"", ""."", ""."", ""7"", ""."", ""."", ""."", "".""], [""6"", ""."", ""."", ""1"", ""9"", ""5"", ""."", ""."", "".""], [""."", ""9"", ""8"", ""."", ""."", ""."", ""."", ""6"", "".""], [""8"", ""."", ""."", ""."", ""6"", ""."", ""."", ""."", ""3""], [""4"", ""."", ""."", ""8"", ""."", ""3"", ""."", ""."", ""1""], [""7"", ""."", ""."", ""."", ""2"", ""."", ""."", ""."", ""6""], [""."", ""6"", ""."", ""."", ""."", ""."", ""2"", ""8"", "".""], [""."", ""."", ""."", ""4"", ""1"", ""9"", ""."", ""."", ""5""], [""."", ""."", ""."", ""."", ""8"", ""."", ""."", ""7"", ""9""]]; assert is_valid_sudoku(board)"
def spiral_order(matrix): result = []; while matrix: result += matrix.pop(0); matrix = list(zip(*matrix))[::-1]; return result,"Returns elements of a matrix in spiral order.

This function returns a list of elements from the input matrix arranged in spiral order, starting from the top-left corner and proceeding clockwise.","def test_spiral_order(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; assert spiral_order(matrix) == [1, 2, 3, 6, 9, 8, 7, 4, 5]"
"def calculate_power(x, n): if n == 0: return 1; if n < 0: x, n = 1 / x, -n; result = 1; while n: if n % 2: result *= x; x *= x; n //= 2; return result","Calculates x raised to the power of n.

This function returns x raised to the power n (i.e., x^n). It handles negative exponents and optimizes for efficiency using exponentiation by squaring.","def test_calculate_power(): assert calculate_power(2.0, 10) == 1024.0 assert calculate_power(2.0, -2) == 0.25"
"def decode_string(s): stack, cur_num, cur_string = [], 0, """"; for c in s: if c.isdigit(): cur_num = cur_num * 10 + int(c); elif c == '[': stack.append((cur_string, cur_num)); cur_string, cur_num = """", 0; elif c == ']': prev_string, num = stack.pop(); cur_string = prev_string + num * cur_string; else: cur_string += c; return cur_string","Decodes an encoded string.

This function decodes an encoded string s with the format k[encoded_string], where the encoded string inside the square brackets is repeated k times.",def test_decode_string(): assert decode_string("3[a]2[bc]") == "aaabcbc" assert decode_string("3[a2[c]]") == "accaccacc" assert decode_string("2[abc]3[cd]ef") == "abcabccdcdcdef"
"def longest_substring_without_repeating_characters(s): char_map = {}; left = max_len = 0; for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1); char_map[s[right]] = right; max_len = max(max_len, right - left + 1); return max_len","Finds the length of the longest substring without repeating characters.

This function returns the length of the longest substring in s that contains no repeated characters. It uses a sliding window approach with a hash map.",def test_longest_substring_without_repeating_characters(): assert longest_substring_without_repeating_characters("abcabcbb") == 3 assert longest_substring_without_repeating_characters("bbbbb") == 1 assert longest_substring_without_repeating_characters("pwwkew") == 3
"def binary_tree_inorder_traversal(root): result, stack = [], []; while stack or root: while root: stack.append(root); root = root.left; node = stack.pop(); result.append(node.val); root = node.right; return result","Performs inorder traversal of a binary tree.

This function returns a list of node values from an inorder traversal of a binary tree rooted at root. It uses an iterative approach with a stack.","def test_binary_tree_inorder_traversal(): root = TreeNode(1, None, TreeNode(2, TreeNode(3), None)); assert binary_tree_inorder_traversal(root) == [1, 3, 2]"
"def binary_tree_level_order_traversal(root): from collections import deque; result, queue = [], deque([root]); while queue: level = []; for _ in range(len(queue)): node = queue.popleft(); if node: level.append(node.val); queue.append(node.left); queue.append(node.right); if level: result.append(level); return result","Performs level order traversal of a binary tree.

This function returns a list of node values from a level order traversal of a binary tree rooted at root. It uses a queue for breadth-first traversal.","def test_binary_tree_level_order_traversal(): root = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert binary_tree_level_order_traversal(root) == [[3], [9, 20], [15, 7]]"
def is_perfect_square(num): x = num // 2; seen = set(); while x * x != num: seen.add(x); x = (x + (num // x)) // 2; if x in seen: return False; return True,"Determines if a number is a perfect square.

This function returns True if the input number num is a perfect square, and False otherwise. It uses the Babylonian method for approximation.",def test_is_perfect_square(): assert is_perfect_square(16) assert not is_perfect_square(14) assert is_perfect_square(1)
"def validate_ip_address(ip): import re; pattern = r""(\d{1,3}\.){3}\d{1,3}""; if re.fullmatch(pattern, ip): return all(0 <= int(num) <= 255 for num in ip.split('.')); return False","Validates an IPv4 address.

This function returns True if the input string ip is a valid IPv4 address, otherwise returns False. It ensures each segment is between 0 and 255.",def test_validate_ip_address(): assert validate_ip_address("192.168.1.1") assert not validate_ip_address("256.256.256.256") assert validate_ip_address("0.0.0.0")
"def string_compression(s): compressed = []; count = 1; for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1; else: compressed.append(s[i - 1] + str(count) if count > 1 else s[i - 1]); count = 1; compressed.append(s[-1] + str(count) if count > 1 else s[-1]); return ''.join(compressed)","Compresses a string by counting consecutive characters.

This function returns a compressed version of the string s where consecutive repeated characters are represented by the character followed by the count.",def test_string_compression(): assert string_compression("aabcccccaaa") == "a2bc5a3" assert string_compression("abc") == "abc"
"def rotate_linked_list(head, k): if not head or not head.next: return head; length, tail = 1, head; while tail.next: tail = tail.next; length += 1; k = k % length; if k == 0: return head; new_tail = head; for _ in range(length - k - 1): new_tail = new_tail.next; new_head = new_tail.next; new_tail.next = None; tail.next = head; return new_head","Rotates a linked list by k positions.

This function returns a linked list rotated to the right by k positions, adjusting the pointers in-place. It handles edge cases where the list is shorter than k.","def test_rotate_linked_list(): head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))); assert linked_list_to_list(rotate_linked_list(head, 2)) == [4, 5, 1, 2, 3]"
def power_of_three(n): return n > 0 and 1162261467 % n == 0,"Determines if a number is a power of three.

This function returns True if the input number n is a power of three, and False otherwise. It uses the largest power of three that fits in an integer.",def test_power_of_three(): assert power_of_three(27) assert not power_of_three(0) assert power_of_three(1)
def reverse_words_in_string(s): return ' '.join(reversed(s.split())),"Reverses the words in a string.

This function returns a new string where the order of the words in the input string s is reversed, while maintaining the spaces between them.",def test_reverse_words_in_string(): assert reverse_words_in_string("the sky is blue") == "blue is sky the" assert reverse_words_in_string("hello world") == "world hello"
"def find_duplicate_number(nums): slow, fast = nums[0], nums[nums[0]]; while slow != fast: slow, fast = nums[slow], nums[nums[fast]]; slow = 0; while slow != fast: slow, fast = nums[slow], nums[fast]; return slow","Finds the duplicate number in an array.

This function returns the duplicate number in a list nums containing integers where only one number repeats. It uses Floyd's Tortoise and Hare algorithm.","def test_find_duplicate_number(): assert find_duplicate_number([1, 3, 4, 2, 2]) == 2 assert find_duplicate_number([3, 1, 3, 4, 2]) == 3"
def find_missing_number(nums): return len(nums) * (len(nums) + 1) // 2 - sum(nums),"Finds the missing number in an array.

This function returns the missing number in a list nums containing distinct numbers from 0 to n. It uses the sum formula for arithmetic progression.","def test_find_missing_number(): assert find_missing_number([3, 0, 1]) == 2 assert find_missing_number([9, 6, 4, 2, 3, 5, 7, 0, 1]) == 8"
"def multiply_strings(num1, num2): res = [0] * (len(num1) + len(num2)); for i in range(len(num1) - 1, -1, -1): for j in range(len(num2) - 1, -1, -1): mul = (ord(num1[i]) - ord('0')) * (ord(num2[j]) - ord('0')); p1, p2 = i + j, i + j + 1; summ = mul + res[p2]; res[p1] += summ // 10; res[p2] = summ % 10; result = ''.join(map(str, res)).lstrip('0'); return result or '0'","Multiplies two non-negative integers represented as strings.

This function returns the product of two non-negative integers num1 and num2 represented as strings, without converting the strings to integers directly.","def test_multiply_strings(): assert multiply_strings(""123"", ""456"") == ""56088"" assert multiply_strings(""2"", ""3"") == ""6"""
"def valid_palindrome(s): i, j = 0, len(s) - 1; while i < j: if s[i] != s[j]: skip_left = s[i + 1:j + 1]; skip_right = s[i:j]; return skip_left == skip_left[::-1] or skip_right == skip_right[::-1]; i += 1; j -= 1; return True","Determines if a string can be a palindrome by removing at most one character.

This function returns True if the input string s can be made into a palindrome by removing at most one character, otherwise returns False.",def test_valid_palindrome(): assert valid_palindrome("abca") assert not valid_palindrome("abc") assert valid_palindrome("a")
"def search_2d_matrix(matrix, target): if not matrix: return False; row, col = 0, len(matrix[0]) - 1; while row < len(matrix) and col >= 0: if matrix[row][col] == target: return True; elif matrix[row][col] > target: col -= 1; else: row += 1; return False","Searches for a target value in a 2D matrix.

This function returns True if the target value target exists in the matrix, where each row is sorted in ascending order and the first integer of each row is greater than the last integer of the previous row.","def test_search_2d_matrix(): matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]]; assert search_2d_matrix(matrix, 3) assert not search_2d_matrix(matrix, 13)"
"def min_window_substring(s, t): from collections import Counter; need, missing = Counter(t), len(t); left, start, end = 0, 0, 0; for right, char in enumerate(s, 1): missing -= need[char] > 0; need[char] -= 1; if not missing: while left < right and need[s[left]] < 0: need[s[left]] += 1; left += 1; if not end or right - left < end - start: start, end = left, right; return s[start:end]","Finds the minimum window in a string containing all characters of another string.

This function returns the smallest substring in s that contains all characters from the string t. It uses a sliding window approach with a hash map to track character counts.","def test_min_window_substring(): assert min_window_substring(""ADOBECODEBANC"", ""ABC"") == ""BANC"" assert min_window_substring(""a"", ""a"") == ""a"" assert min_window_substring(""a"", ""aa"") == """""
def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2; left_half = arr[:mid]; right_half = arr[mid:]; merge_sort(left_half); merge_sort(right_half); i = j = k = 0; while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i]; i += 1; else: arr[k] = right_half[j]; j += 1; k += 1; while i < len(left_half): arr[k] = left_half[i]; i += 1; k += 1; while j < len(right_half): arr[k] = right_half[j]; j += 1; k += 1,"Sorts an array using merge sort.

This function sorts the input list arr using the merge sort algorithm, which recursively divides the list and merges sorted halves back together.","def test_merge_sort(): arr = [12, 11, 13, 5, 6, 7]; merge_sort(arr); assert arr == [5, 6, 7, 11, 12, 13]"
"def is_subsequence(s, t): iter_t = iter(t); return all(char in iter_t for char in s)","Determines if a string is a subsequence of another string.

This function returns True if the string s is a subsequence of the string t, meaning s can be obtained by deleting characters from t without changing the order of the remaining characters.","def test_is_subsequence(): assert is_subsequence(""abc"", ""ahbgdc"") assert not is_subsequence(""axc"", ""ahbgdc"")"
"def find_min_in_rotated_sorted_array(nums): left, right = 0, len(nums) - 1; while left < right: mid = (left + right) // 2; if nums[mid] > nums[right]: left = mid + 1; else: right = mid; return nums[left]","Finds the minimum element in a rotated sorted array.

This function returns the minimum element from the rotated sorted list nums. It uses binary search to find the pivot where the rotation occurred.","def test_find_min_in_rotated_sorted_array(): assert find_min_in_rotated_sorted_array([3, 4, 5, 1, 2]) == 1 assert find_min_in_rotated_sorted_array([4, 5, 6, 7, 0, 1, 2]) == 0"
"def remove_k_digits(num, k): stack = []; for digit in num: while k and stack and stack[-1] > digit: stack.pop(); k -= 1; stack.append(digit); return ''.join(stack[:-k or None]).lstrip('0') or '0'","Removes k digits to form the smallest possible number.

This function returns the smallest possible number by removing exactly k digits from the string num. It uses a stack to construct the result while maintaining the smallest possible order.","def test_remove_k_digits(): assert remove_k_digits(""1432219"", 3) == ""1219"" assert remove_k_digits(""10200"", 1) == ""200"""
"def flood_fill(image, sr, sc, new_color): old_color = image[sr][sc]; if old_color == new_color: return image; def dfs(r, c): if r < 0 or c < 0 or r >= len(image) or c >= len(image[0]) or image[r][c] != old_color: return; image[r][c] = new_color; dfs(r+1, c); dfs(r-1, c); dfs(r, c+1); dfs(r, c-1); dfs(sr, sc); return image","Fills an area of an image with a new color using depth-first search (DFS).

This function returns the modified image where all connected components starting from image[sr][sc] with the same color are filled with new_color.","def test_flood_fill(): image = [[1,1,1],[1,1,0],[1,0,1]]; assert flood_fill(image, 1, 1, 2) == [[2,2,2],[2,2,0],[2,0,1]]"
"def knapsack_01(values, weights, W): dp = [[0 for _ in range(W + 1)] for _ in range(len(values) + 1)]; for i in range(1, len(values) + 1): for w in range(1, W + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]); else: dp[i][w] = dp[i - 1][w]; return dp[-1][-1]","Solves the 0/1 knapsack problem using dynamic programming.

This function returns the maximum value that can be obtained by picking items with given values and weights such that the total weight does not exceed W.","def test_knapsack_01(): assert knapsack_01([60, 100, 120], [10, 20, 30], 50) == 220"
"def bitwise_and_range(m, n): shift = 0; while m != n: m >>= 1; n >>= 1; shift += 1; return m << shift","Finds the bitwise AND of all numbers in a range.

This function returns the bitwise AND of all integers in the inclusive range from m to n. It optimizes by identifying the common prefix of the binary representations.","def test_bitwise_and_range(): assert bitwise_and_range(5, 7) == 4 assert bitwise_and_range(0, 1) == 0"
"def count_primes(n): if n < 2: return 0; sieve = [True] * n; sieve[0] = sieve[1] = False; for i in range(2, int(n ** 0.5) + 1): if sieve[i]: for j in range(i * i, n, i): sieve[j] = False; return sum(sieve)","Counts prime numbers less than n.

This function returns the count of prime numbers less than n using the Sieve of Eratosthenes.",def test_count_primes(): assert count_primes(10) == 4 assert count_primes(0) == 0 assert count_primes(1) == 0
"def add_two_numbers(l1, l2): dummy = ListNode(0); curr, carry = dummy, 0; while l1 or l2 or carry: x = l1.val if l1 else 0; y = l2.val if l2 else 0; carry, out = divmod(x + y + carry, 10); curr.next = ListNode(out); curr = curr.next; l1 = l1.next if l1 else None; l2 = l2.next if l2 else None; return dummy.next","Adds two numbers represented as linked lists.

This function returns the sum of two numbers where each number is represented as a linked list. The digits are stored in reverse order, and each node contains a single digit.","def test_add_two_numbers(): l1 = ListNode(2, ListNode(4, ListNode(3))); l2 = ListNode(5, ListNode(6, ListNode(4))); assert linked_list_to_list(add_two_numbers(l1, l2)) == [7, 0, 8]"
"def count_bits(n): res = [0] * (n + 1); for i in range(1, n + 1): res[i] = res[i >> 1] + (i & 1); return res","Counts the number of 1's in the binary representation of each number up to n.

This function returns a list where each element at index i represents the number of 1's in the binary representation of the number i, for all i in the range [0, n].","def test_count_bits(): assert count_bits(2) == [0, 1, 1] assert count_bits(5) == [0, 1, 1, 2, 1, 2]"
def convert_to_title(column_number): result = ""; while column_number: column_number -= 1; result = chr(column_number % 26 + ord('A')) + result; column_number //= 26; return result,"Converts a column number to its corresponding Excel column title.

This function returns the Excel column title corresponding to the given column_number, where 1 corresponds to ""A"", 2 to ""B"", and so on.",def test_convert_to_title(): assert convert_to_title(1) == "A" assert convert_to_title(28) == "AB" assert convert_to_title(701) == "ZY"
def factorial_trailing_zeroes(n): count = 0; while n > 0: n //= 5; count += n; return count,"Counts trailing zeroes in the factorial of n.

This function returns the number of trailing zeroes in the factorial of n. Trailing zeroes are produced by factors of 10, which are generated by factors of 2 and 5.",def test_factorial_trailing_zeroes(): assert factorial_trailing_zeroes(5) == 1 assert factorial_trailing_zeroes(30) == 7
"def word_ladder_length(begin_word, end_word, word_list): from collections import deque; word_set = set(word_list); if end_word not in word_set: return 0; queue = deque([(begin_word, 1)]); while queue: word, length = queue.popleft(); if word == end_word: return length; for i in range(len(word)): for c in 'abcdefghijklmnopqrstuvwxyz': new_word = word[:i] + c + word[i + 1:]; if new_word in word_set: word_set.remove(new_word); queue.append((new_word, length + 1)); return 0","Finds the length of the shortest transformation sequence from begin_word to end_word.

This function returns the length of the shortest transformation sequence from begin_word to end_word, changing only one letter at a time. Each transformed word must exist in the word list.","def test_word_ladder_length(): assert word_ladder_length(""hit"", ""cog"", [""hot"", ""dot"", ""dog"", ""lot"", ""log"", ""cog""]) == 5 assert word_ladder_length(""hit"", ""cog"", [""hot"", ""dot"", ""dog"", ""lot"", ""log""]) == 0"
def min_moves_to_equal_array(nums): nums.sort(); median = nums[len(nums) // 2]; return sum(abs(num - median) for num in nums),"Finds the minimum moves to equalize the array elements.

This function returns the minimum number of moves required to make all elements in the list nums equal. Each move consists of incrementing or decrementing an element by 1.","def test_min_moves_to_equal_array(): assert min_moves_to_equal_array([1, 2, 3]) == 2 assert min_moves_to_equal_array([1, 10, 2, 9]) == 16"
"def find_anagrams(s, p): from collections import Counter; result, p_count, s_count = [], Counter(p), Counter(s[:len(p) - 1]); for i in range(len(p) - 1, len(s)): s_count[s[i]] += 1; if s_count == p_count: result.append(i - len(p) + 1); s_count[s[i - len(p) + 1]] -= 1; if s_count[s[i - len(p) + 1]] == 0: del s_count[s[i - len(p) + 1]]; return result","Finds all anagrams of p in s.

This function returns a list of starting indices of all anagrams of string p in string s. It uses a sliding window to efficiently compare character frequencies.","def test_find_anagrams(): assert find_anagrams(""cbaebabacd"", ""abc"") == [0, 6] assert find_anagrams(""abab"", ""ab"") == [0, 1, 2]"
"def next_permutation(nums): i = j = len(nums) - 1; while i > 0 and nums[i - 1] >= nums[i]: i -= 1; if i == 0: nums.reverse(); return; k = i - 1; while nums[j] <= nums[k]: j -= 1; nums[k], nums[j] = nums[j], nums[k]; nums[i:] = reversed(nums[i:])","Finds the next lexicographical permutation.

This function modifies the list nums in-place to transform it into the next lexicographical permutation. If such a permutation doesn't exist, it transforms nums into the smallest permutation.","def test_next_permutation(): nums = [1, 2, 3]; next_permutation(nums); assert nums == [1, 3, 2]"
"def find_kth_largest(nums, k): import heapq; return heapq.nlargest(k, nums)[-1]","Finds the k-th largest element in an array.

This function returns the k-th largest element in the input list nums. It uses a max-heap to efficiently find the k largest elements.","def test_find_kth_largest(): assert find_kth_largest([3, 2, 1, 5, 6, 4], 2) == 5 assert find_kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4"
def increasing_triplet(nums): first = second = float('inf'); for num in nums: if num <= first: first = num; elif num <= second: second = num; else: return True; return False,"Determines if there is an increasing triplet subsequence.

This function returns True if the input list nums contains an increasing subsequence of at least three elements, otherwise returns False.","def test_increasing_triplet(): assert increasing_triplet([1, 2, 3, 4, 5]) assert not increasing_triplet([5, 4, 3, 2, 1])"
"def max_product_subarray(nums): max_prod = min_prod = result = nums[0]; for num in nums[1:]: temp = max_prod; max_prod = max(num, max_prod * num, min_prod * num); min_prod = min(num, temp * num, min_prod * num); result = max(result, max_prod); return result","Finds the maximum product of a contiguous subarray.

This function returns the maximum product of a contiguous subarray in the input list nums. It keeps track of both the maximum and minimum products at each step due to the possibility of negative numbers.","def test_max_product_subarray(): assert max_product_subarray([2, 3, -2, 4]) == 6 assert max_product_subarray([-2, 0, -1]) == 0"
"def valid_palindrome_ii(s): def is_palindrome_range(i, j): return all(s[k] == s[j - k + i] for k in range(i, j)); for i in range(len(s) // 2): if s[i] != s[~i]: j = len(s) - 1 - i; return is_palindrome_range(i + 1, j) or is_palindrome_range(i, j - 1); return True",Determines if a string can be a palindrome by removing at most one character.,def test_valid_palindrome_ii(): assert valid_palindrome_ii("abca") assert not valid_palindrome_ii("abc")
"def largest_number(nums): nums = sorted(map(str, nums), key=lambda x: x*10, reverse=True); return str(int(''.join(nums)))","Forms the largest number by arranging the list of integers.

This function returns a string representing the largest number that can be formed by rearranging the integers in the input list nums. It handles cases where the numbers could form leading zeroes.","def test_largest_number(): assert largest_number([10, 2]) == ""210"" assert largest_number([3, 30, 34, 5, 9]) == ""9534330"""
"def max_sum_submatrix(matrix, k): from sortedcontainers import SortedList; def max_sum_no_larger_than_k(arr): max_sum = float('-inf'); curr_sum = 0; s_list = SortedList([0]); for num in arr: curr_sum += num; idx = s_list.bisect_left(curr_sum - k); if idx < len(s_list): max_sum = max(max_sum, curr_sum - s_list[idx]); s_list.add(curr_sum); return max_sum; rows, cols = len(matrix), len(matrix[0]); result = float('-inf'); for left in range(cols): row_sums = [0] * rows; for right in range(left, cols): for r in range(rows): row_sums[r] += matrix[r][right]; result = max(result, max_sum_no_larger_than_k(row_sums)); return result","Finds the maximum sum of a submatrix no larger than k.

This function returns the maximum sum of a submatrix in the input 2D matrix matrix that does not exceed k. It uses the Kadane-like approach for 2D matrices.","def test_max_sum_submatrix(): matrix = [[1, 0, 1], [0, -2, 3]]; assert max_sum_submatrix(matrix, 2) == 2 assert max_sum_submatrix([[2, 2, -1]], 3) == 3"
def spiral_matrix(matrix): result = []; while matrix: result += matrix.pop(0); matrix = list(zip(*matrix))[::-1]; return result,Returns elements of a matrix in spiral order.,"def test_spiral_matrix(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; assert spiral_matrix(matrix) == [1, 2, 3, 6, 9, 8, 7, 4, 5]"
"def rotate_image(matrix): n = len(matrix); for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j]; matrix[i][j] = matrix[n - j - 1][i]; matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]; matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]; matrix[j][n - i - 1] = temp","Rotates a matrix by 90 degrees in-place.

This function rotates the input 2D matrix in-place by 90 degrees clockwise. It uses a layer-by-layer approach to swap the matrix elements.","def test_rotate_image(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_image(matrix); assert matrix == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"
"def maximum_gap(nums): if len(nums) < 2: return 0; min_num, max_num = min(nums), max(nums); bucket_size = max(1, (max_num - min_num) // (len(nums) - 1)); bucket_count = (max_num - min_num) // bucket_size + 1; buckets = [[None, None] for _ in range(bucket_count)]; for num in nums: idx = (num - min_num) // bucket_size; if buckets[idx][0] is None: buckets[idx][0] = buckets[idx][1] = num; else: buckets[idx][0] = min(buckets[idx][0], num); buckets[idx][1] = max(buckets[idx][1], num); max_gap, prev_max = 0, min_num; for bucket in buckets: if bucket[0] is not None: max_gap = max(max_gap, bucket[0] - prev_max); prev_max = bucket[1]; return max_gap","Finds the maximum gap between sorted elements in an array.

This function returns the maximum gap between successive elements in the sorted form of the input array nums. It uses bucket sorting for linear time complexity.","def test_maximum_gap(): assert maximum_gap([3, 6, 9, 1]) == 3 assert maximum_gap([10]) == 0"
"def integer_to_roman(num): val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]; syb = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]; roman_num = """"; for i in range(len(val)): while num >= val[i]: roman_num += syb[i]; num -= val[i]; return roman_num","Converts an integer to a Roman numeral.

This function returns the Roman numeral representation of the input integer num. It uses predefined values and symbols for efficient conversion.",def test_integer_to_roman(): assert integer_to_roman(3) == "III" assert integer_to_roman(58) == "LVIII" assert integer_to_roman(1994) == "MCMXCIV"
"def roman_to_integer(s): roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}; total = 0; for i in range(len(s)): if i > 0 and roman[s[i]] > roman[s[i - 1]]: total += roman[s[i]] - 2 * roman[s[i - 1]]; else: total += roman[s[i]]; return total","Converts a Roman numeral to an integer.

This function returns the integer representation of the input Roman numeral string s. It accounts for subtraction rules in Roman numerals (e.g., IV = 4).",def test_roman_to_integer(): assert roman_to_integer("III") == 3 assert roman_to_integer("LVIII") == 58 assert roman_to_integer("MCMXCIV") == 1994
def group_by_anagrams(strs): from collections import defaultdict; anagrams = defaultdict(list); for word in strs: sorted_word = ''.join(sorted(word)); anagrams[sorted_word].append(word); return list(anagrams.values()),"Groups strings by anagrams.

This function returns a list of lists, where each sublist contains words that are anagrams of each other from the input list strs. It uses sorting to group anagrams.","def test_group_by_anagrams(): assert group_by_anagrams([""eat"", ""tea"", ""tan"", ""ate"", ""nat"", ""bat""]) == [[""eat"", ""tea"", ""ate""], [""tan"", ""nat""], [""bat""]]"
def length_of_last_word(s): return len(s.rstrip().split(' ')[-1]),"Returns the length of the last word in a string.

This function returns the length of the last word in the input string s, ignoring any trailing spaces.",def test_length_of_last_word(): assert length_of_last_word("Hello World") == 5 assert length_of_last_word(" fly me to the moon ") == 4
def valid_number(s): try: float(s); return True; except ValueError: return False,"Determines if a string is a valid number.

This function returns True if the input string s can be converted to a floating-point number, otherwise returns False. It handles edge cases like scientific notation.",def test_valid_number(): assert valid_number("0") assert not valid_number("abc") assert valid_number("2.718")
"def generate_parentheses(n): result = []; def backtrack(current, open_count, close_count): if len(current) == 2 * n: result.append(current); return; if open_count < n: backtrack(current + ""("", open_count + 1, close_count); if close_count < open_count: backtrack(current + "")"", open_count, close_count + 1); backtrack("""", 0, 0); return result","Generates all valid combinations of parentheses.

This function returns a list of all valid combinations of n pairs of parentheses. It uses backtracking to explore all possibilities.","def test_generate_parentheses(): assert generate_parentheses(3) == [""((()))"", ""(()())"", ""(())()"", ""()(())"", ""()()()""]"
"def remove_nth_from_end(head, n): dummy = ListNode(0, head); first = second = dummy; for _ in range(n + 1): first = first.next; while first: first, second = first.next, second.next; second.next = second.next.next; return dummy.next","Removes the nth node from the end of a linked list.

This function returns the linked list after removing the n-th node from the end of the list. It uses two pointers to find the node efficiently.","def test_remove_nth_from_end(): head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))); assert linked_list_to_list(remove_nth_from_end(head, 2)) == [1, 2, 3, 5]"
"def zigzag_conversion(s, num_rows): if num_rows == 1: return s; rows = [''] * min(num_rows, len(s)); cur_row, going_down = 0, False; for char in s: rows[cur_row] += char; if cur_row == 0 or cur_row == num_rows - 1: going_down = not going_down; cur_row += 1 if going_down else -1; return ''.join(rows)","Converts a string into a zigzag pattern.

This function returns the string s written in a zigzag pattern with num_rows rows. The characters are arranged diagonally and read row by row.","def test_zigzag_conversion(): assert zigzag_conversion(""PAYPALISHIRING"", 3) == ""PAHNAPLSIIGYIR"" assert zigzag_conversion(""AB"", 1) == ""AB"""
"def atoi(s): s = s.strip(); if not s: return 0; sign, i, total = (-1 if s[0] == '-' else 1), 1 if s[0] in ['-', '+'] else 0, 0; while i < len(s) and s[i].isdigit(): total = total * 10 + int(s[i]); i += 1; total *= sign; return max(min(total, 2 ** 31 - 1), -2 ** 31)","Converts a string to an integer (atoi).

This function returns the integer value represented by the string s, following the behavior of the C atoi function. It handles optional leading whitespace, signs, and non-digit characters.",def test_atoi(): assert atoi("42") == 42 assert atoi(" -42") == -42 assert atoi("4193 with words") == 4193
"def maximum_subarray(nums): max_sum = cur_sum = nums[0]; for num in nums[1:]: cur_sum = max(num, cur_sum + num); max_sum = max(max_sum, cur_sum); return max_sum","Finds the maximum sum of a contiguous subarray.

This function returns the maximum sum of a contiguous subarray in the input list nums. It uses Kadane's algorithm to achieve linear time complexity.","def test_maximum_subarray(): assert maximum_subarray([-2,1,-3,4,-1,2,1,-5,4]) == 6 assert maximum_subarray([1]) == 1"
"def three_sum(nums): nums.sort(); result = []; for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue; left, right = i + 1, len(nums) - 1; while left < right: total = nums[i] + nums[left] + nums[right]; if total < 0: left += 1; elif total > 0: right -= 1; else: result.append([nums[i], nums[left], nums[right]]); while left < right and nums[left] == nums[left + 1]: left += 1; while left < right and nums[right] == nums[right - 1]: right -= 1; left += 1; right -= 1; return result","Finds all unique triplets that sum to zero.

This function returns a list of all unique triplets [a, b, c] in the input list nums such that a + b + c = 0. It uses two pointers and sorting to optimize the solution.","def test_three_sum(): assert three_sum([-1, 0, 1, 2, -1, -4]) == [[-1, -1, 2], [-1, 0, 1]]"
"def trapping_rainwater(height): left, right = 0, len(height) - 1; left_max, right_max, water = 0, 0, 0; while left < right: if height[left] < height[right]: if height[left] >= left_max: left_max = height[left]; else: water += left_max - height[left]; left += 1; else: if height[right] >= right_max: right_max = height[right]; else: water += right_max - height[right]; right -= 1; return water","Calculates the total amount of trapped rainwater.

This function returns the total amount of water trapped between the bars represented by the heights in the list height. It uses a two-pointer approach to find trapped water in linear time.","def test_trapping_rainwater(): assert trapping_rainwater([0,1,0,2,1,0,1,3,2,1,2,1]) == 6 assert trapping_rainwater([4,2,0,3,2,5]) == 9"
"def climb_stairs(n): if n == 1: return 1; first, second = 1, 2; for i in range(3, n + 1): first, second = second, first + second; return second","Finds the number of distinct ways to climb n stairs.

This function returns the number of distinct ways to climb n stairs. Each time, you can either climb 1 or 2 steps. The problem is equivalent to finding the nth Fibonacci number.",def test_climb_stairs(): assert climb_stairs(2) == 2 assert climb_stairs(3) == 3
def reverse_linked_list(head): prev = None; while head: next_node = head.next; head.next = prev; prev = head; head = next_node; return prev,"Reverses a linked list.

This function returns the head of the reversed linked list. It reverses the pointers of the list nodes iteratively.","def test_reverse_linked_list(): head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))); assert linked_list_to_list(reverse_linked_list(head)) == [5, 4, 3, 2, 1]"
"def can_jump(nums): max_reach = 0; for i, num in enumerate(nums): if i > max_reach: return False; max_reach = max(max_reach, i + num); return True","Determines if you can jump to the last index.

This function returns True if you can reach the last index of the list nums by jumping, where each element in nums represents the maximum jump length at that index.","def test_can_jump(): assert can_jump([2, 3, 1, 1, 4]) assert not can_jump([3, 2, 1, 0, 4])"
"def length_of_longest_substring(s): char_index = {}; left = max_len = 0; for right, char in enumerate(s): if char in char_index and char_index[char] >= left: left = char_index[char] + 1; char_index[char] = right; max_len = max(max_len, right - left + 1); return max_len","Finds the length of the longest substring without repeating characters.

This function returns the length of the longest substring in the input string s that contains no repeating characters. It uses a sliding window and hash map to track character positions.",def test_length_of_longest_substring(): assert length_of_longest_substring("abcabcbb") == 3 assert length_of_longest_substring("bbbbb") == 1
"def unique_paths(m, n): dp = [[1] * n for _ in range(m)]; for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1]; return dp[-1][-1]","Finds the number of unique paths in a grid.

This function returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. You can only move either down or right at any point.","def test_unique_paths(): assert unique_paths(3, 7) == 28 assert unique_paths(3, 2) == 3"
"def coin_change(coins, amount): dp = [float('inf')] * (amount + 1); dp[0] = 0; for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1); return dp[amount] if dp[amount] != float('inf') else -1","Finds the minimum number of coins to make up the amount.

This function returns the minimum number of coins needed to make up the amount using the denominations in the list coins. If it's not possible, it returns -1.","def test_coin_change(): assert coin_change([1, 2, 5], 11) == 3 assert coin_change([2], 3) == -1"
"def longest_common_subsequence(text1, text2): dp = [[0] * (len(text2) + 1) for _ in range(len(text1) + 1)]; for i in range(1, len(text1) + 1): for j in range(1, len(text2) + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1; else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]); return dp[-1][-1]","Finds the length of the longest common subsequence.

This function returns the length of the longest common subsequence between two strings text1 and text2. It uses dynamic programming to solve the problem in O(n*m) time.","def test_longest_common_subsequence(): assert longest_common_subsequence(""abcde"", ""ace"") == 3 assert longest_common_subsequence(""abc"", ""abc"") == 3"
"def detect_cycle(head): slow, fast = head, head; while fast and fast.next: slow = slow.next; fast = fast.next.next; if slow == fast: slow = head; while slow != fast: slow = slow.next; fast = fast.next; return slow; return None","Detects if a cycle exists in a linked list.

This function returns the node where the cycle begins in a linked list. It uses Floyd? Tortoise and Hare algorithm to detect the cycle and find the starting node.","def test_detect_cycle(): head = ListNode(3, ListNode(2, ListNode(0, ListNode(-4)))); head.next.next.next.next = head.next; assert detect_cycle(head) == head.next"
"def product_of_array_except_self(nums): result, prod = [1] * len(nums), 1; for i in range(len(nums)): result[i] = prod; prod *= nums[i]; prod = 1; for i in range(len(nums) - 1, -1, -1): result[i] *= prod; prod *= nums[i]; return result",Returns product of array except itself.,"def test_product_of_array_except_self(): assert product_of_array_except_self([1, 2, 3, 4]) == [24, 12, 8, 6]"
"def hamming_distance(x, y): return bin(x ^ y).count('1')","Calculates the Hamming distance between two integers.

This function returns the Hamming distance between two integers x and y, which is the number of positions at which the corresponding bits differ.","def test_hamming_distance(): assert hamming_distance(1, 4) == 2 assert hamming_distance(3, 1) == 1"
"def pascal_triangle(n): result = [[1]]; for i in range(1, n): row = [1]; for j in range(1, i): row.append(result[i-1][j-1] + result[i-1][j]); row.append(1); result.append(row); return result","Generates Pascal's Triangle up to n rows.

This function returns the first n rows of Pascal's Triangle, where each number is the sum of the two directly above it.","def test_pascal_triangle(): assert pascal_triangle(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"
def is_power_of_two(n): return n > 0 and (n & (n - 1)) == 0,"Determines if a number is a power of two.

This function returns True if the input number n is a power of two, and False otherwise. It uses bitwise operations for efficient calculation.",def test_is_power_of_two(): assert is_power_of_two(16) assert not is_power_of_two(18) assert is_power_of_two(1)
"def max_area(height): left, right = 0, len(height) - 1; max_water = 0; while left < right: max_water = max(max_water, min(height[left], height[right]) * (right - left)); if height[left] < height[right]: left += 1; else: right -= 1; return max_water","Finds the maximum area of water trapped between lines.

This function returns the maximum area of water that can be trapped between the vertical lines represented by the input list height. It uses a two-pointer approach to find the maximum area.","def test_max_area(): assert max_area([1, 8, 6, 2, 5, 4, 8, 3, 7]) == 49 assert max_area([1, 1]) == 1"
"def nth_ugly_number(n): ugly = [1]; i2 = i3 = i5 = 0; for _ in range(1, n): next_ugly = min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5); ugly.append(next_ugly); if next_ugly == ugly[i2] * 2: i2 += 1; if next_ugly == ugly[i3] * 3: i3 += 1; if next_ugly == ugly[i5] * 5: i5 += 1; return ugly[-1]","Finds the nth ugly number.

This function returns the nth ugly number. Ugly numbers are positive numbers whose prime factors are limited to 2, 3, and 5. It uses dynamic programming to generate ugly numbers in sequence.",def test_nth_ugly_number(): assert nth_ugly_number(10) == 12 assert nth_ugly_number(1) == 1
def single_number(nums): result = 0; for num in nums: result ^= num; return result,"Finds the single number in a list.

This function returns the single number in the list nums where every element appears twice except for one. It uses bitwise XOR to find the unique number.","def test_single_number(): assert single_number([2, 2, 1]) == 1 assert single_number([4, 1, 2, 1, 2]) == 4"
"def find_first_missing_positive(nums): n = len(nums); for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]; for i in range(n): if nums[i] != i + 1: return i + 1; return n + 1","Finds the first missing positive integer.

This function returns the first missing positive integer in the input list nums. It uses an in-place cyclic sort to achieve O(n) time complexity.","def test_find_first_missing_positive(): assert find_first_missing_positive([3, 4, -1, 1]) == 2 assert find_first_missing_positive([1, 2, 0]) == 3"
"def find_median_sorted_arrays(nums1, nums2): A, B = nums1, nums2; total = len(A) + len(B); half = total // 2; if len(A) > len(B): A, B = B, A; l, r = 0, len(A) - 1; while True: i = (l + r) // 2; j = half - i - 2; Aleft = A[i] if i >= 0 else float('-inf'); Aright = A[i + 1] if (i + 1) < len(A) else float('inf'); Bleft = B[j] if j >= 0 else float('-inf'); Bright = B[j + 1] if (j + 1) < len(B) else float('inf'); if Aleft <= Bright and Bleft <= Aright: if total % 2: return min(Aright, Bright); return (max(Aleft, Bleft) + min(Aright, Bright)) / 2; elif Aleft > Bright: r = i - 1; else: l = i + 1","Finds the median of two sorted arrays.

This function returns the median of two sorted arrays nums1 and nums2. It uses binary search to find the correct partition between the two arrays.","def test_find_median_sorted_arrays(): assert find_median_sorted_arrays([1, 3], [2]) == 2.0 assert find_median_sorted_arrays([1, 2], [3, 4]) == 2.5"
"def set_zeroes(matrix): rows, cols = len(matrix), len(matrix[0]); row_zero, col_zero = False, False; for i in range(rows): if matrix[i][0] == 0: col_zero = True; for j in range(cols): if matrix[i][j] == 0: matrix[0][j] = matrix[i][0] = 0; for i in range(1, rows): for j in range(1, cols): if matrix[i][0] == 0 or matrix[0][j] == 0: matrix[i][j] = 0; if row_zero: matrix[0] = [0] * cols; if col_zero: for i in range(rows): matrix[i][0] = 0","Sets matrix rows and columns to zeroes based on initial zeroes.

This function modifies the input matrix such that if any element is 0, its entire row and column are set to 0. It optimizes space usage by storing the zero information in the matrix itself.","def test_set_zeroes(): matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]; set_zeroes(matrix); assert matrix == [[1, 0, 1], [0, 0, 0], [1, 0, 1]]"
"def count_islands(grid): def dfs(i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0': return; grid[i][j] = '0'; dfs(i + 1, j); dfs(i - 1, j); dfs(i, j + 1); dfs(i, j - 1); islands = 0; for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == '1': dfs(i, j); islands += 1; return islands","Counts the number of islands in a 2D grid.

This function returns the number of islands in the input 2D grid grid, where 1 represents land and 0 represents water. It uses depth-first search to mark visited land.","def test_count_islands(): grid = [[""1"",""1"",""1"",""1"",""0""],[""1"",""1"",""0"",""1"",""0""],[""1"",""1"",""0"",""0"",""0""],[""0"",""0"",""0"",""0"",""0""]]; assert count_islands(grid) == 1"
"def valid_parentheses(s): stack = []; mapping = {')': '(', '}': '{', ']': '['}; for char in s: if char in mapping: top_element = stack.pop() if stack else '#'; if mapping[char] != top_element: return False; else: stack.append(char); return not stack",Checks if parentheses are valid.,def test_valid_parentheses(): assert valid_parentheses("()") assert valid_parentheses("()[]{}") assert not valid_parentheses("(]")
"def min_window_substring(s, t): from collections import Counter; need, missing = Counter(t), len(t); left, start, end = 0, 0, 0; for right, char in enumerate(s, 1): missing -= need[char] > 0; need[char] -= 1; if not missing: while left < right and need[s[left]] < 0: need[s[left]] += 1; left += 1; if not end or right - left < end - start: start, end = left, right; return s[start:end]",Finds the minimum window in a string containing all characters of another string.,"def test_min_window_substring(): assert min_window_substring(""ADOBECODEBANC"", ""ABC"") == ""BANC"" assert min_window_substring(""a"", ""a"") == ""a"""
"def merge_two_sorted_lists(l1, l2): dummy = ListNode(0); current = dummy; while l1 and l2: if l1.val < l2.val: current.next = l1; l1 = l1.next; else: current.next = l2; l2 = l2.next; current = current.next; current.next = l1 or l2; return dummy.next","Merges two sorted linked lists.

This function returns a merged linked list from two input sorted linked lists l1 and l2. The merged list is sorted in ascending order.","def test_merge_two_sorted_lists(): l1 = ListNode(1, ListNode(2, ListNode(4))); l2 = ListNode(1, ListNode(3, ListNode(4))); assert linked_list_to_list(merge_two_sorted_lists(l1, l2)) == [1, 1, 2, 3, 4, 4]"
def flatten_binary_tree(root): def flatten_rec(node): if not node: return None; left_last = flatten_rec(node.left); right_last = flatten_rec(node.right); if node.left: left_last.right = node.right; node.right = node.left; node.left = None; return right_last or left_last or node; flatten_rec(root),"Flattens a binary tree to a linked list in-place.

This function modifies the input binary tree root to flatten it into a linked list in-place, where each node? right child points to the next node in a preorder traversal.","def test_flatten_binary_tree(): root = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5, None, TreeNode(6))); flatten_binary_tree(root); assert binary_tree_to_list(root) == [1, 2, 3, 4, 5, 6]"
"def find_kth_smallest(matrix, k): from heapq import heappop, heappush; n = len(matrix); heap = [(matrix[i][0], i, 0) for i in range(min(k, n))]; for _ in range(k - 1): val, r, c = heappop(heap); if c < n - 1: heappush(heap, (matrix[r][c + 1], r, c + 1)); return heappop(heap)[0]","Finds the k-th smallest element in a sorted matrix.

This function returns the k-th smallest element in a sorted matrix, where each row and each column is sorted in ascending order. It uses a min-heap to find the element efficiently.","def test_find_kth_smallest(): matrix = [[1, 5, 9], [10, 11, 13], [12, 13, 15]]; assert find_kth_smallest(matrix, 8) == 13"
def quicksort(arr): if len(arr) <= 1: return arr; pivot = arr[len(arr) // 2]; left = [x for x in arr if x < pivot]; middle = [x for x in arr if x == pivot]; right = [x for x in arr if x > pivot]; return quicksort(left) + middle + quicksort(right),"Sorts an array using quicksort algorithm.

This function sorts the input array arr using the quicksort algorithm, which divides the array around a pivot and recursively sorts the left and right subarrays.","def test_quicksort(): assert quicksort([3, 6, 8, 10, 1, 2, 1]) == [1, 1, 2, 3, 6, 8, 10]"
def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2; left = arr[:mid]; right = arr[mid:]; merge_sort(left); merge_sort(right); i = j = k = 0; while i < len(left) and j < len(right): if left[i] < right[j]: arr[k] = left[i]; i += 1; else: arr[k] = right[j]; j += 1; k += 1; while i < len(left): arr[k] = left[i]; i += 1; k += 1; while j < len(right): arr[k] = right[j]; j += 1; k += 1,"Sorts an array using merge sort algorithm.

This function sorts the input array arr using the merge sort algorithm, which recursively divides the array into two halves and merges them back in sorted order.","def test_merge_sort(): arr = [12, 11, 13, 5, 6, 7]; merge_sort(arr); assert arr == [5, 6, 7, 11, 12, 13]"
"def bubble_sort(arr): for i in range(len(arr)): for j in range(0, len(arr) - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j]","Sorts an array using bubble sort algorithm.

This function sorts the input array arr using the bubble sort algorithm, which repeatedly swaps adjacent elements if they are in the wrong order until the array is sorted.","def test_bubble_sort(): arr = [64, 34, 25, 12, 22, 11, 90]; bubble_sort(arr); assert arr == [11, 12, 22, 25, 34, 64, 90]"
"def binary_search(arr, x): left, right = 0, len(arr) - 1; while left <= right: mid = (left + right) // 2; if arr[mid] == x: return mid; elif arr[mid] < x: left = mid + 1; else: right = mid - 1; return -1","Performs binary search on a sorted array.

This function returns the index of the element x in the sorted array arr using binary search. If x is not found, it returns -1. The function runs in O(log n) time.","def test_binary_search(): arr = [2, 3, 4, 10, 40]; assert binary_search(arr, 10) == 3 assert binary_search(arr, 11) == -1"
"def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i]; j = i - 1; while j >= 0 and key < arr[j]: arr[j + 1] = arr[j]; j -= 1; arr[j + 1] = key","Sorts an array using insertion sort algorithm.

This function sorts the input array arr using the insertion sort algorithm, which iterates through the array and inserts each element into its correct position in the sorted part of the array.","def test_insertion_sort(): arr = [12, 11, 13, 5, 6]; insertion_sort(arr); assert arr == [5, 6, 11, 12, 13]"
"def selection_sort(arr): for i in range(len(arr)): min_idx = i; for j in range(i + 1, len(arr)): if arr[j] < arr[min_idx]: min_idx = j; arr[i], arr[min_idx] = arr[min_idx], arr[i]","Sorts an array using selection sort algorithm.

This function sorts the input array arr using the selection sort algorithm, which selects the smallest element from the unsorted part and swaps it with the first unsorted element.","def test_selection_sort(): arr = [64, 25, 12, 22, 11]; selection_sort(arr); assert arr == [11, 12, 22, 25, 64]"
"def shell_sort(arr): gap = len(arr) // 2; while gap > 0: for i in range(gap, len(arr)): temp = arr[i]; j = i; while j >= gap and arr[j - gap] > temp: arr[j] = arr[j - gap]; j -= gap; arr[j] = temp; gap //= 2","Sorts an array using shell sort algorithm.

This function sorts the input array arr using the shell sort algorithm, which is an optimization of insertion sort that allows the exchange of far apart elements by progressively reducing gaps.","def test_shell_sort(): arr = [12, 34, 54, 2, 3]; shell_sort(arr); assert arr == [2, 3, 12, 34, 54]"
"def heap_sort(arr): def heapify(arr, n, i): largest = i; left = 2 * i + 1; right = 2 * i + 2; if left < n and arr[i] < arr[left]: largest = left; if right < n and arr[largest] < arr[right]: largest = right; if largest != i: arr[i], arr[largest] = arr[largest], arr[i]; heapify(arr, n, largest); for i in range(len(arr) // 2 - 1, -1, -1): heapify(arr, len(arr), i); for i in range(len(arr) - 1, 0, -1): arr[i], arr[0] = arr[0], arr[i]; heapify(arr, i, 0)","Sorts an array using heap sort algorithm.

This function sorts the input array arr using the heap sort algorithm, which builds a max heap and then extracts the maximum element to sort the array.","def test_heap_sort(): arr = [12, 11, 13, 5, 6, 7]; heap_sort(arr); assert arr == [5, 6, 7, 11, 12, 13]"
"def counting_sort(arr): output = [0] * len(arr); count = [0] * (max(arr) + 1); for num in arr: count[num] += 1; for i in range(1, len(count)): count[i] += count[i - 1]; for num in arr[::-1]: output[count[num] - 1] = num; count[num] -= 1; for i in range(len(arr)): arr[i] = output[i]","Sorts an array using counting sort algorithm.

This function sorts the input array arr using the counting sort algorithm, which counts the occurrences of each element and uses this information to place elements in the sorted order.","def test_counting_sort(): arr = [4, 2, 2, 8, 3, 3, 1]; counting_sort(arr); assert arr == [1, 2, 2, 3, 3, 4, 8]"
"def radix_sort(arr): def counting_sort_radix(arr, exp): output = [0] * len(arr); count = [0] * 10; for i in arr: count[(i // exp) % 10] += 1; for i in range(1, 10): count[i] += count[i - 1]; for i in arr[::-1]: output[count[(i // exp) % 10] - 1] = i; count[(i // exp) % 10] -= 1; for i in range(len(arr)): arr[i] = output[i]; max_val = max(arr); exp = 1; while max_val // exp > 0: counting_sort_radix(arr, exp); exp *= 10","Sorts an array using radix sort algorithm.

This function sorts the input array arr using the radix sort algorithm, which sorts the array digit by digit, starting with the least significant digit, using counting sort as a subroutine.","def test_radix_sort(): arr = [170, 45, 75, 90, 802, 24, 2, 66]; radix_sort(arr); assert arr == [2, 24, 45, 66, 75, 90, 170, 802]"
def bucket_sort(arr): max_val = max(arr); size = max_val // len(arr) + 1; buckets = [[] for _ in range(size)]; for i in arr: buckets[i // size].append(i); for bucket in buckets: bucket.sort(); result = []; for bucket in buckets: result.extend(bucket); for i in range(len(arr)): arr[i] = result[i],"Sorts an array using bucket sort algorithm.

This function sorts the input array arr using the bucket sort algorithm, which distributes elements into buckets and then sorts each bucket individually before combining them into a sorted array.","def test_bucket_sort(): arr = [30, 40, 10, 80, 5, 12, 70, 45]; bucket_sort(arr); assert arr == [5, 10, 12, 30, 40, 45, 70, 80]"
def fibonacci_recursive(n): if n <= 1: return n; return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2),"Computes the nth Fibonacci number recursively.

This function returns the nth Fibonacci number using a recursive approach. It follows the recurrence relation F(n) = F(n - 1) + F(n - 2).",def test_fibonacci_recursive(): assert fibonacci_recursive(5) == 5 assert fibonacci_recursive(10) == 55
"def fibonacci_dynamic(n): fib = [0, 1]; for i in range(2, n + 1): fib.append(fib[i - 1] + fib[i - 2]); return fib[n]","Computes the nth Fibonacci number using dynamic programming.

This function returns the nth Fibonacci number using dynamic programming to store intermediate results and avoid redundant calculations.",def test_fibonacci_dynamic(): assert fibonacci_dynamic(5) == 5 assert fibonacci_dynamic(10) == 55
def palindrome(s): return s == s[::-1],"Checks if a string is a palindrome.

This function returns True if the input string s is a palindrome (reads the same forwards and backwards), and False otherwise. It uses string slicing to check for palindrome.",def test_palindrome(): assert palindrome("racecar") assert not palindrome("hello")
"def gcd(a, b): while b: a, b = b, a % b; return a","Computes the greatest common divisor (GCD) of two numbers.

This function returns the greatest common divisor (GCD) of two integers a and b using the Euclidean algorithm, which repeatedly applies the formula GCD(a, b) = GCD(b, a % b) until b becomes 0.","def test_gcd(): assert gcd(48, 18) == 6 assert gcd(101, 103) == 1"
"def lcm(a, b): return abs(a * b) // gcd(a, b)","Computes the least common multiple (LCM) of two numbers.

This function returns the least common multiple (LCM) of two integers a and b. It uses the formula LCM(a, b) = abs(a * b) / GCD(a, b).","def test_lcm(): assert lcm(4, 5) == 20 assert lcm(12, 15) == 60"
"def is_prime(n): if n <= 1: return False; for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False; return True","Checks if a number is prime.

This function returns True if the input number n is prime, and False otherwise. It checks divisibility of n by numbers up to the square root of n.",def test_is_prime(): assert is_prime(7) assert not is_prime(4)
def factorial_recursive(n): if n == 0: return 1; return n * factorial_recursive(n - 1),"Computes the factorial of a number recursively.

This function returns the factorial of the input number n using recursion. The factorial of n is defined as the product of all positive integers less than or equal to n.",def test_factorial_recursive(): assert factorial_recursive(5) == 120 assert factorial_recursive(0) == 1
"def factorial_iterative(n): result = 1; for i in range(2, n + 1): result *= i; return result","Computes the factorial of a number iteratively.

This function returns the factorial of the input number n using an iterative approach. It multiplies all integers from 2 to n to compute the factorial.",def test_factorial_iterative(): assert factorial_iterative(5) == 120 assert factorial_iterative(0) == 1
def reverse_string(s): return s[::-1],"Reverses a string.

This function returns the reversed version of the input string s. It uses Python's string slicing feature to reverse the characters in the string.",def test_reverse_string(): assert reverse_string("hello") == "olleh" assert reverse_string("abc") == "cba"
def reverse_integer(n): rev = 0; neg = n < 0; n = abs(n); while n != 0: rev = rev * 10 + n % 10; n //= 10; if rev > 2 ** 31 - 1: return 0; return -rev if neg else rev,"Reverses the digits of an integer.

This function returns the integer formed by reversing the digits of the input integer n. If the reversed integer overflows, it returns 0. It handles both positive and negative integers.",def test_reverse_integer(): assert reverse_integer(123) == 321 assert reverse_integer(-123) == -321 assert reverse_integer(120) == 21
"def two_sum(nums, target): lookup = {}; for i, num in enumerate(nums): if target - num in lookup: return [lookup[target - num], i]; lookup[num] = i","Finds two numbers in an array that sum up to a target value.

This function returns the indices of two numbers in the input list nums that add up to the target value target. It uses a hash map to store the difference between the target and each element.","def test_two_sum(): assert two_sum([2, 7, 11, 15], 9) == [0, 1] assert two_sum([3, 2, 4], 6) == [1, 2]"
"def add_two_numbers(l1, l2): carry, head = 0, ListNode(0); curr = head; while l1 or l2 or carry: v1 = l1.val if l1 else 0; v2 = l2.val if l2 else 0; carry, val = divmod(v1 + v2 + carry, 10); curr.next = ListNode(val); curr = curr.next; if l1: l1 = l1.next; if l2: l2 = l2.next; return head.next","Adds two numbers represented as linked lists.

This function returns the sum of two numbers represented as linked lists l1 and l2, where each node contains a single digit. The digits are stored in reverse order, and the function returns the result as a linked list.","def test_add_two_numbers(): l1 = ListNode(2, ListNode(4, ListNode(3))); l2 = ListNode(5, ListNode(6, ListNode(4))); assert linked_list_to_list(add_two_numbers(l1, l2)) == [7, 0, 8]"
"def can_construct(ransom_note, magazine): from collections import Counter; ransom_counter = Counter(ransom_note); magazine_counter = Counter(magazine); for char, count in ransom_counter.items(): if magazine_counter[char] < count: return False; return True","Checks if ransom note can be constructed from magazine letters.

This function returns True if the ransom_note can be constructed by using letters from the magazine, and False otherwise. It uses a counter to compare character frequencies between the two strings.","def test_can_construct(): assert can_construct(""a"", ""b"") == False assert can_construct(""aa"", ""aab"") == True"
"def first_unique_character(s): from collections import Counter; counter = Counter(s); for i, char in enumerate(s): if counter[char] == 1: return i; return -1","Finds the index of the first unique character in a string.

This function returns the index of the first non-repeating character in the input string s. It uses a counter to count the occurrences of each character and iterates through the string to find the first unique one.",def test_first_unique_character(): assert first_unique_character("leetcode") == 0 assert first_unique_character("loveleetcode") == 2
"def generate_parentheses(n): result = []; def backtrack(current, open_count, close_count): if len(current) == 2 * n: result.append(current); return; if open_count < n: backtrack(current + ""("", open_count + 1, close_count); if close_count < open_count: backtrack(current + "")"", open_count, close_count + 1); backtrack("""", 0, 0); return result","Generates all combinations of well-formed parentheses.

This function returns a list of all valid combinations of n pairs of parentheses. It uses backtracking to explore all possibilities, ensuring that parentheses are balanced.","def test_generate_parentheses(): assert generate_parentheses(3) == [""((()))"", ""(()())"", ""(())()"", ""()(())"", ""()()()""]"
"def search_rotated_array(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1; else: left = mid + 1; else: if nums[mid] < target <= nums[right]: left = mid + 1; else: right = mid - 1; return -1","Searches for a target in a rotated sorted array.

This function returns the index of target in the rotated sorted array nums, or -1 if it is not found. It uses binary search while accounting for the rotated nature of the array.","def test_search_rotated_array(): assert search_rotated_array([4, 5, 6, 7, 0, 1, 2], 0) == 4 assert search_rotated_array([4, 5, 6, 7, 0, 1, 2], 3) == -1"
"def valid_sudoku(board): def is_valid_row(row): return len(set(row) - {'.'}) == len([x for x in row if x != '.']); def is_valid_col(board, col_idx): return len(set(board[i][col_idx] for i in range(9)) - {'.'}) == len([board[i][col_idx] for i in range(9) if board[i][col_idx] != '.']); def is_valid_box(board, start_row, start_col): box = [board[i][j] for i in range(start_row, start_row + 3) for j in range(start_col, start_col + 3)]; return len(set(box) - {'.'}) == len([x for x in box if x != '.']); for i in range(9): if not is_valid_row(board[i]) or not is_valid_col(board, i): return False; for i in range(0, 9, 3): for j in range(0, 9, 3): if not is_valid_box(board, i, j): return False; return True","Validates a Sudoku board.

This function checks if a 9x9 Sudoku board is valid according to Sudoku rules (no duplicates in rows, columns, and boxes).","def test_valid_sudoku(): board = [[""5"", ""3"", ""."", ""."", ""7"", ""."", ""."", ""."", "".""], [""6"", ""."", ""."", ""1"", ""9"", ""5"", ""."", ""."", "".""], [""."", ""9"", ""8"", ""."", ""."", ""."", ""."", ""6"", "".""], [""8"", ""."", ""."", ""."", ""6"", ""."", ""."", ""."", ""3""], [""4"", ""."", ""."", ""8"", ""."", ""3"", ""."", ""."", ""1""], [""7"", ""."", ""."", ""."", ""2"", ""."", ""."", ""."", ""6""], [""."", ""6"", ""."", ""."", ""."", ""."", ""2"", ""8"", "".""], [""."", ""."", ""."", ""4"", ""1"", ""9"", ""."", ""."", ""5""], [""."", ""."", ""."", ""."", ""8"", ""."", ""."", ""7"", ""9""]]; assert valid_sudoku(board) == True"
"def min_cost_climbing_stairs(cost): n = len(cost); dp = [0] * (n + 1); for i in range(2, n + 1): dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]); return dp[-1]","Calculates the minimum cost to climb to the top of a staircase.

This function returns the minimum cost to reach the top of a staircase, where cost[i] represents the cost of step i. You can start from either step 0 or step 1 and move one or two steps at a time.","def test_min_cost_climbing_stairs(): assert min_cost_climbing_stairs([10, 15, 20]) == 15 assert min_cost_climbing_stairs([1, 100, 1, 1, 1, 100, 1, 1, 100, 1]) == 6"
"def unique_paths_with_obstacles(obstacle_grid): m, n = len(obstacle_grid), len(obstacle_grid[0]); if obstacle_grid[0][0] == 1: return 0; dp = [[0] * n for _ in range(m)]; dp[0][0] = 1; for i in range(1, m): dp[i][0] = dp[i - 1][0] if obstacle_grid[i][0] == 0 else 0; for j in range(1, n): dp[0][j] = dp[0][j - 1] if obstacle_grid[0][j] == 0 else 0; for i in range(1, m): for j in range(1, n): if obstacle_grid[i][j] == 0: dp[i][j] = dp[i - 1][j] + dp[i][j - 1]; return dp[-1][-1]","Finds the number of unique paths in a grid with obstacles.

This function returns the number of unique paths from the top-left corner to the bottom-right corner of a grid that contains obstacles. If a cell contains an obstacle, it is blocked and cannot be passed through.","def test_unique_paths_with_obstacles(): assert unique_paths_with_obstacles([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == 2 assert unique_paths_with_obstacles([[0, 1], [0, 0]]) == 1"
"def maximal_rectangle(matrix): if not matrix: return 0; dp = [0] * len(matrix[0]); max_area = 0; for row in matrix: for i in range(len(row)): dp[i] = dp[i] + 1 if row[i] == '1' else 0; max_area = max(max_area, largest_rectangle_histogram(dp)); return max_area; def largest_rectangle_histogram(heights): stack, max_area = [], 0; heights.append(0); for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()]; width = i if not stack else i - stack[-1] - 1; max_area = max(max_area, height * width); stack.append(i); return max_area","Finds the area of the largest rectangle in a binary matrix.

This function returns the area of the largest rectangle containing only 1's in a binary matrix. It uses dynamic programming and the largest rectangle histogram approach.","def test_maximal_rectangle(): matrix = [[""1"", ""0"", ""1"", ""0"", ""0""], [""1"", ""0"", ""1"", ""1"", ""1""], [""1"", ""1"", ""1"", ""1"", ""1""], [""1"", ""0"", ""0"", ""1"", ""0""]]; assert maximal_rectangle(matrix) == 6"
"def validate_ip_address(IP): def is_ipv4(s): try: return str(int(s)) == s and 0 <= int(s) <= 255 except: return False; def is_ipv6(s): if len(s) > 4: return False; try: return int(s, 16) >= 0 except: return False; if IP.count(""."") == 3 and all(is_ipv4(i) for i in IP.split(""."")): return ""IPv4""; if IP.count("":"") == 7 and all(is_ipv6(i) for i in IP.split("":"")): return ""IPv6""; return ""Neither""","Validates if an IP address is IPv4 or IPv6.

This function returns whether the input string IP is a valid IPv4 address, IPv6 address, or neither. It uses string splitting and basic validation for each segment.",def test_validate_ip_address(): assert validate_ip_address("172.16.254.1") == "IPv4" assert validate_ip_address("2001:0db8:85a3:0000:0000:8a2e:0370:7334") == "IPv6" assert validate_ip_address("256.256.256.256") == "Neither"
def group_anagrams(strs): from collections import defaultdict; anagrams = defaultdict(list); for s in strs: anagrams[tuple(sorted(s))].append(s); return list(anagrams.values()),"Groups anagrams together.

This function groups the input list of strings strs by their anagrams and returns the grouped anagrams. It uses sorting to identify anagrams and stores them in a dictionary.","def test_group_anagrams(): assert group_anagrams([""eat"", ""tea"", ""tan"", ""ate"", ""nat"", ""bat""]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]"
"def first_missing_positive(nums): n = len(nums); for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]; for i in range(n): if nums[i] != i + 1: return i + 1; return n + 1","Finds the first missing positive integer.

This function returns the first missing positive integer in the input list nums. It uses in-place swapping to arrange numbers and identify the missing integer.","def test_first_missing_positive(): assert first_missing_positive([3, 4, -1, 1]) == 2 assert first_missing_positive([1, 2, 0]) == 3"
"def flatten_nested_list(nestedList): def flatten_generator(nested): for i in nested: if isinstance(i, list): yield from flatten_generator(i); else: yield i; return list(flatten_generator(nestedList))","Flattens a nested list.

This function returns a flattened version of the input nestedList, where each nested list is recursively unpacked into a single list of elements. It uses a generator to handle arbitrary nesting.","def test_flatten_nested_list(): assert flatten_nested_list([1, [2, [3, 4], 5], 6]) == [1, 2, 3, 4, 5, 6]"
"def evaluate_reverse_polish_notation(tokens): stack = []; for token in tokens: if token in ""+-*/"": b, a = stack.pop(), stack.pop(); if token == '+': stack.append(a + b); elif token == '-': stack.append(a - b); elif token == '*': stack.append(a * b); else: stack.append(int(float(a) / b)); else: stack.append(int(token)); return stack[0]","Evaluates an expression in Reverse Polish Notation.

This function evaluates the input expression tokens, which is given in Reverse Polish Notation (RPN), and returns the result. It uses a stack to handle operations.","def test_evaluate_reverse_polish_notation(): assert evaluate_reverse_polish_notation([""2"", ""1"", ""+"", ""3"", ""*""]) == 9 assert evaluate_reverse_polish_notation([""4"", ""13"", ""5"", ""/"", ""+""]) == 6"
"def search_range(nums, target): def binary_search_left(nums, target): left, right = 0, len(nums); while left < right: mid = (left + right) // 2; if nums[mid] < target: left = mid + 1; else: right = mid; return left; def binary_search_right(nums, target): left, right = 0, len(nums); while left < right: mid = (left + right) // 2; if nums[mid] <= target: left = mid + 1; else: right = mid; return left - 1; left_idx = binary_search_left(nums, target); right_idx = binary_search_right(nums, target); if left_idx <= right_idx: return [left_idx, right_idx]; return [-1, -1]","Finds the start and end position of a target value in a sorted array.

This function returns the start and end indices of the target value target in the sorted list nums. It uses two binary search functions to find the left and right boundaries.","def test_search_range(): assert search_range([5, 7, 7, 8, 8, 10], 8) == [3, 4] assert search_range([5, 7, 7, 8, 8, 10], 6) == [-1, -1]"
"def merge_k_sorted_lists(lists): from heapq import heappop, heappush; heap = []; for i, lst in enumerate(lists): if lst: heappush(heap, (lst.val, i, lst)); head = point = ListNode(0); while heap: val, i, node = heappop(heap); point.next = ListNode(val); point = point.next; if node.next: heappush(heap, (node.next.val, i, node.next)); return head.next","Merges k sorted linked lists into one sorted list.

This function merges k sorted linked lists and returns one sorted linked list. It uses a min-heap to efficiently merge the nodes from the k lists.","def test_merge_k_sorted_lists(): l1 = ListNode(1, ListNode(4, ListNode(5))); l2 = ListNode(1, ListNode(3, ListNode(4))); l3 = ListNode(2, ListNode(6)); assert linked_list_to_list(merge_k_sorted_lists([l1, l2, l3])) == [1, 1, 2, 3, 4, 4, 5, 6]"
def spiral_order(matrix): if not matrix: return []; result = []; while matrix: result += matrix.pop(0); if matrix and matrix[0]: for row in matrix: result.append(row.pop()); if matrix: result += matrix.pop()[::-1]; if matrix and matrix[0]: for row in matrix[::-1]: result.append(row.pop(0)); return result,"Returns the elements of a matrix in spiral order.

This function returns a list of the elements of the input 2D matrix in spiral order, starting from the top-left corner and moving inwards in a spiral.","def test_spiral_order(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; assert spiral_order(matrix) == [1, 2, 3, 6, 9, 8, 7, 4, 5]"
"def rotate_image(matrix): n = len(matrix); for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j]; matrix[i][j] = matrix[n - j - 1][i]; matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]; matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]; matrix[j][n - i - 1] = temp","Rotates an image (matrix) by 90 degrees clockwise.

This function rotates the input n x n matrix by 90 degrees clockwise in place. The matrix represents an image where each element is a pixel.","def test_rotate_image(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_image(matrix); assert matrix == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"
"def longest_increasing_path(matrix): if not matrix: return 0; m, n = len(matrix), len(matrix[0]); dp = [[-1] * n for _ in range(m)]; def dfs(i, j): if dp[i][j] != -1: return dp[i][j]; max_path = 1; for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]: if 0 <= i + x < m and 0 <= j + y < n and matrix[i + x][j + y] > matrix[i][j]: max_path = max(max_path, 1 + dfs(i + x, j + y)); dp[i][j] = max_path; return dp[i][j]; return max(dfs(i, j) for i in range(m) for j in range(n))","Finds the length of the longest increasing path in a matrix.

This function returns the length of the longest increasing path in the input matrix, where each move must be to an adjacent cell with a strictly greater value. It uses depth-first search and memoization.","def test_longest_increasing_path(): matrix = [[9, 9, 4], [6, 6, 8], [2, 1, 1]]; assert longest_increasing_path(matrix) == 4"
"def word_break(s, word_dict): dp = [False] * (len(s) + 1); dp[0] = True; for i in range(1, len(s) + 1): for word in word_dict: if dp[i - len(word)] and s[i - len(word):i] == word: dp[i] = True; break; return dp[-1]","Determines if a string can be segmented into a space-separated sequence of dictionary words.

This function returns True if the input string s can be segmented into a space-separated sequence of words found in the word_dict. It uses dynamic programming to track possible segmentations.","def test_word_break(): assert word_break(""leetcode"", [""leet"", ""code""]) assert not word_break(""applepenapple"", [""pen"", ""apple""])"
"def search_2d_matrix(matrix, target): if not matrix or not matrix[0]: return False; rows, cols = len(matrix), len(matrix[0]); left, right = 0, rows * cols - 1; while left <= right: mid = (left + right) // 2; mid_val = matrix[mid // cols][mid % cols]; if mid_val == target: return True; elif mid_val < target: left = mid + 1; else: right = mid - 1; return False","Searches for a target value in a 2D matrix.

This function returns True if the target value exists in the input matrix, where each row is sorted, and the first integer of each row is greater than the last integer of the previous row. It uses binary search.","def test_search_2d_matrix(): matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]]; assert search_2d_matrix(matrix, 3) assert not search_2d_matrix(matrix, 13)"
"def kth_largest_element(nums, k): import heapq; return heapq.nlargest(k, nums)[-1]","Finds the k-th largest element in an array.

This function returns the k-th largest element in the input list nums. It uses a heap to efficiently find the k largest elements and returns the last one.","def test_kth_largest_element(): assert kth_largest_element([3, 2, 1, 5, 6, 4], 2) == 5 assert kth_largest_element([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4"
"def longest_palindromic_subsequence(s): n = len(s); dp = [[0] * n for _ in range(n)]; for i in range(n): dp[i][i] = 1; for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1; if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2; else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]); return dp[0][-1]","Finds the length of the longest palindromic subsequence in a string.

This function returns the length of the longest subsequence in the input string s that is also a palindrome. It uses dynamic programming to find the longest palindromic subsequence.",def test_longest_palindromic_subsequence(): assert longest_palindromic_subsequence("bbbab") == 4 assert longest_palindromic_subsequence("cbbd") == 2
"def find_duplicate(nums): slow, fast = nums[0], nums[0]; while True: slow = nums[slow]; fast = nums[nums[fast]]; if slow == fast: break; slow = nums[0]; while slow != fast: slow, fast = nums[slow], nums[fast]; return slow","Finds the duplicate number in an array where one number repeats.

This function returns the duplicate number in the input list nums where each element appears once except for one number that repeats. It uses Floyd? cycle detection algorithm.","def test_find_duplicate(): assert find_duplicate([1, 3, 4, 2, 2]) == 2 assert find_duplicate([3, 1, 3, 4, 2]) == 3"
"def lowest_common_ancestor(root, p, q): if not root or root == p or root == q: return root; left = lowest_common_ancestor(root.left, p, q); right = lowest_common_ancestor(root.right, p, q); if left and right: return root; return left if left else right","Finds the lowest common ancestor (LCA) of two nodes in a binary tree.

This function returns the lowest common ancestor (LCA) of two nodes p and q in a binary tree. The LCA is the deepest node that is an ancestor of both p and q.","def test_lowest_common_ancestor(): root = TreeNode(3, TreeNode(5, TreeNode(6), TreeNode(2, TreeNode(7), TreeNode(4))), TreeNode(1, TreeNode(0), TreeNode(8))); p, q = root.left, root.left.right.right; assert lowest_common_ancestor(root, p, q) == root.left"
def flatten_binary_tree(root): def flatten_rec(node): if not node: return None; left_last = flatten_rec(node.left); right_last = flatten_rec(node.right); if node.left: left_last.right = node.right; node.right = node.left; node.left = None; return right_last or left_last or node; flatten_rec(root),"Flattens a binary tree into a linked list in-place.

This function flattens the input binary tree in-place into a linked list where the right child points to the next node in a pre-order traversal, and the left child is always None.","def test_flatten_binary_tree(): root = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5, None, TreeNode(6))); flatten_binary_tree(root); assert binary_tree_to_list(root) == [1, 2, 3, 4, 5, 6]"
"def num_islands(grid): def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == ""0"": return; grid[i][j] = ""0""; dfs(grid, i + 1, j); dfs(grid, i - 1, j); dfs(grid, i, j + 1); dfs(grid, i, j - 1); if not grid: return 0; count = 0; for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == ""1"": dfs(grid, i, j); count += 1; return count","Finds the number of islands in a grid.

This function returns the number of islands in the input grid. An island is formed by connecting adjacent lands (represented by '1'). It uses depth-first search (DFS) to mark visited lands.","def test_num_islands(): grid = [[""1"",""1"",""1"",""1"",""0""],[""1"",""1"",""0"",""1"",""0""],[""1"",""1"",""0"",""0"",""0""],[""0"",""0"",""0"",""0"",""0""]]; assert num_islands(grid) == 1 assert num_islands([[""1"",""0""],[""0"",""1""]]) == 2"
"def longest_valid_parentheses(s): stack = [-1]; max_len = 0; for i, c in enumerate(s): if c == '(': stack.append(i); else: stack.pop(); if not stack: stack.append(i); else: max_len = max(max_len, i - stack[-1]); return max_len","Finds the length of the longest valid parentheses substring.

This function returns the length of the longest valid parentheses substring in the input string s. It uses a stack to track open parentheses and calculate the length of valid pairs.",def test_longest_valid_parentheses(): assert longest_valid_parentheses("(()") == 2 assert longest_valid_parentheses(")()())") == 4
"def coin_combinations(amount, coins): dp = [0] * (amount + 1); dp[0] = 1; for coin in coins: for x in range(coin, amount + 1): dp[x] += dp[x - coin]; return dp[amount]","Counts the number of ways to make a certain amount using coins.

This function returns the number of ways to make the amount amount using the coin denominations in the list coins. It uses dynamic programming to calculate the number of combinations.","def test_coin_combinations(): assert coin_combinations(5, [1, 2, 5]) == 4 assert coin_combinations(3, [2]) == 0"
"def length_of_longest_substring(s): used_chars = {}; max_len = start = 0; for i, c in enumerate(s): if c in used_chars and used_chars[c] >= start: start = used_chars[c] + 1; max_len = max(max_len, i - start + 1); used_chars[c] = i; return max_len","Finds the length of the longest substring without repeating characters.

This function returns the length of the longest substring in the input string s that contains no repeating characters. It uses a sliding window and a dictionary to track the positions of characters.",def test_length_of_longest_substring(): assert length_of_longest_substring("abcabcbb") == 3 assert length_of_longest_substring("bbbbb") == 1
"def product_except_self(nums): result = [1] * len(nums); left = 1; for i in range(len(nums)): result[i] = left; left *= nums[i]; right = 1; for i in range(len(nums) - 1, -1, -1): result[i] *= right; right *= nums[i]; return result","Computes the product of all elements except self for each index.

This function returns a list result where result[i] is the product of all elements in the input list nums except nums[i]. It runs in O(n) time and doesn't use division.","def test_product_except_self(): assert product_except_self([1, 2, 3, 4]) == [24, 12, 8, 6]"
"def can_jump(nums): last_pos = len(nums) - 1; for i in range(len(nums) - 2, -1, -1): if i + nums[i] >= last_pos: last_pos = i; return last_pos == 0","Determines if you can jump to the last index in an array.

This function returns True if it is possible to reach the last index of the input list nums starting from the first index, and False otherwise. It uses a greedy approach to track the furthest reachable index.","def test_can_jump(): assert can_jump([2, 3, 1, 1, 4]) == True assert can_jump([3, 2, 1, 0, 4]) == False"
"def rob(nums): if not nums: return 0; if len(nums) <= 2: return max(nums); prev1, prev2 = 0, 0; for num in nums: prev1, prev2 = max(prev2 + num, prev1), prev1; return prev1","Maximizes the amount of money that can be robbed without robbing two adjacent houses.

This function returns the maximum amount of money that can be robbed from the list of houses nums, where adjacent houses cannot both be robbed. It uses dynamic programming to track loot amounts.","def test_rob(): assert rob([1, 2, 3, 1]) == 4 assert rob([2, 7, 9, 3, 1]) == 12"
"def word_ladder_length(beginWord, endWord, wordList): from collections import deque; wordList = set(wordList); if endWord not in wordList: return 0; queue = deque([(beginWord, 1)]); while queue: word, steps = queue.popleft(); if word == endWord: return steps; for i in range(len(word)): for c in 'abcdefghijklmnopqrstuvwxyz': new_word = word[:i] + c + word[i + 1:]; if new_word in wordList: wordList.remove(new_word); queue.append((new_word, steps + 1)); return 0","Finds the shortest transformation sequence from beginWord to endWord.

This function returns the length of the shortest transformation sequence from beginWord to endWord, where only one letter can be changed at a time and each transformed word must be in the word list.","def test_word_ladder_length(): assert word_ladder_length(""hit"", ""cog"", [""hot"", ""dot"", ""dog"", ""lot"", ""log"", ""cog""]) == 5 assert word_ladder_length(""hit"", ""cog"", [""hot"", ""dot"", ""dog"", ""lot"", ""log""]) == 0"
"def num_decodings(s): if not s or s[0] == ""0"": return 0; dp = [0] * (len(s) + 1); dp[0] = dp[1] = 1; for i in range(2, len(s) + 1): if s[i - 1] != ""0"": dp[i] += dp[i - 1]; if 10 <= int(s[i - 2:i]) <= 26: dp[i] += dp[i - 2]; return dp[-1]","Decodes a string of digits into letters using mapping (1-26 to A-Z).

This function returns the number of ways to decode the input string s, where each digit or pair of digits is mapped to letters ('1' -> 'A', '2' -> 'B', ..., '26' -> 'Z'). It uses dynamic programming to count the valid decodings.",def test_num_decodings(): assert num_decodings("12") == 2 assert num_decodings("226") == 3
"def permute(nums): result = []; def backtrack(start=0): if start == len(nums): result.append(nums[:]); for i in range(start, len(nums)): nums[start], nums[i] = nums[i], nums[start]; backtrack(start + 1); nums[start], nums[i] = nums[i], nums[start]; backtrack(); return result","Generates all permutations of a list.

This function returns all possible permutations of the input list nums using a backtracking approach to generate permutations.","def test_permute(): assert permute([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"
def is_palindrome(x): if x < 0: return False; return str(x) == str(x)[::-1],"Checks if an integer is a palindrome.

This function returns True if the input integer x is a palindrome (reads the same forwards and backwards) and False otherwise. It converts the integer to a string and compares it with its reverse.",def test_is_palindrome(): assert is_palindrome(121) assert not is_palindrome(-121) assert not is_palindrome(10)
"def climb_stairs(n): if n == 1: return 1; prev1, prev2 = 1, 2; for i in range(3, n + 1): prev1, prev2 = prev2, prev1 + prev2; return prev2",Finds the number of distinct ways to climb n stairs.,def test_climb_stairs(): assert climb_stairs(2) == 2 assert climb_stairs(3) == 3
"def min_window_substring(s, t): from collections import Counter; t_count, window = Counter(t), {}; have, need = 0, len(t_count); res, res_len = [-1, -1], float('inf'); l = 0; for r in range(len(s)): c = s[r]; window[c] = window.get(c, 0) + 1; if c in t_count and window[c] == t_count[c]: have += 1; while have == need: if (r - l + 1) < res_len: res = [l, r]; res_len = r - l + 1; window[s[l]] -= 1; if s[l] in t_count and window[s[l]] < t_count[s[l]]: have -= 1; l += 1; l, r = res; return s[l:r+1] if res_len != float('inf') else """"","Finds the minimum window substring containing all characters of another string.

This function returns the smallest substring in s that contains all characters from string t. It uses a sliding window with a hash map to track character frequencies.","def test_min_window_substring(): assert min_window_substring(""ADOBECODEBANC"", ""ABC"") == ""BANC"" assert min_window_substring(""a"", ""a"") == ""a"""
"def wiggle_sort(nums): nums.sort(); half = (len(nums) + 1) // 2; nums[::2], nums[1::2] = nums[:half][::-1], nums[half:][::-1]","Rearranges numbers in a wiggle fashion (nums[0] < nums[1] > nums[2] < nums[3]...).

This function sorts the input list nums and rearranges it in such a way that nums[0] < nums[1] > nums[2] < nums[3].... It splits the list into two halves and interleaves them.","def test_wiggle_sort(): nums = [1, 5, 1, 1, 6, 4]; wiggle_sort(nums); assert nums == [1, 6, 1, 5, 1, 4]"
"def top_k_frequent(nums, k): from collections import Counter; return [item for item, _ in Counter(nums).most_common(k)]","Finds the k most frequent elements in a list.

This function returns the k most frequent elements in the input list nums. It uses Python's Counter class to count the frequency of elements and returns the k most common ones.","def test_top_k_frequent(): assert top_k_frequent([1, 1, 1, 2, 2, 3], 2) == [1, 2]"
"def min_path_sum(grid): m, n = len(grid), len(grid[0]); for i in range(1, m): grid[i][0] += grid[i - 1][0]; for j in range(1, n): grid[0][j] += grid[0][j - 1]; for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i - 1][j], grid[i][j - 1]); return grid[-1][-1]","Finds the minimum path sum in a grid.

This function returns the minimum path sum from the top-left corner to the bottom-right corner of a grid, where you can only move right or down. It uses dynamic programming to accumulate the minimum costs.","def test_min_path_sum(): grid = [[1, 3, 1], [1, 5, 1], [4, 2, 1]]; assert min_path_sum(grid) == 7"
"def min_cut_palindrome_partition(s): n = len(s); dp = [x for x in range(n)]; palin = [[False] * n for _ in range(n)]; for i in range(n): palin[i][i] = True; for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1; if s[i] == s[j] and (length == 2 or palin[i + 1][j - 1]): palin[i][j] = True; for i in range(n): if palin[0][i]: dp[i] = 0; else: dp[i] = min(dp[j] + 1 for j in range(i) if palin[j + 1][i]); return dp[-1]","Finds the minimum cuts needed to partition a string into palindromes.

This function returns the minimum number of cuts required to partition the input string s such that every substring is a palindrome. It uses dynamic programming to calculate the number of cuts.",def test_min_cut_palindrome_partition(): assert min_cut_palindrome_partition("aab") == 1 assert min_cut_palindrome_partition("a") == 0
"def binary_tree_level_order_traversal(root): if not root: return []; result, queue = [], [root]; while queue: level, next_queue = [], []; for node in queue: level.append(node.val); if node.left: next_queue.append(node.left); if node.right: next_queue.append(node.right); result.append(level); queue = next_queue; return result","Performs level-order traversal on a binary tree.

This function returns a list of lists, where each inner list contains the node values at each level of the binary tree root. It uses breadth-first search to traverse the tree level by level.","def test_binary_tree_level_order_traversal(): root = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert binary_tree_level_order_traversal(root) == [[3], [9, 20], [15, 7]]"
"def count_of_smaller_numbers_after_self(nums): result, indices = [0] * len(nums), list(range(len(nums))); def merge_sort(start, end): if end <= start: return; mid = (start + end) // 2; merge_sort(start, mid); merge_sort(mid + 1, end); merge(start, end, mid); def merge(start, end, mid): temp = []; i, j = start, mid + 1; count_right = 0; while i <= mid and j <= end: if nums[indices[i]] > nums[indices[j]]: count_right += 1; temp.append(indices[j]); j += 1; else: result[indices[i]] += count_right; temp.append(indices[i]); i += 1; while i <= mid: result[indices[i]] += count_right; temp.append(indices[i]); i += 1; while j <= end: temp.append(indices[j]); j += 1; for k in range(len(temp)): indices[start + k] = temp[k]; merge_sort(0, len(nums) - 1); return result","Counts how many smaller numbers come after each number in the array.

This function returns a list where each element represents the count of smaller numbers that come after it in the input list nums. It uses a modified merge sort algorithm to count inversions.","def test_count_of_smaller_numbers_after_self(): assert count_of_smaller_numbers_after_self([5, 2, 6, 1]) == [2, 1, 1, 0]"
"def invert_binary_tree(root): if not root: return None; root.left, root.right = invert_binary_tree(root.right), invert_binary_tree(root.left); return root","Inverts a binary tree.

This function inverts a binary tree by swapping the left and right children of each node. It uses recursive depth-first search to traverse the tree and swap the children.","def test_invert_binary_tree(): root = TreeNode(4, TreeNode(2, TreeNode(1), TreeNode(3)), TreeNode(7, TreeNode(6), TreeNode(9))); inverted = invert_binary_tree(root); assert binary_tree_to_list(inverted) == [4, 7, 2, 9, 6, 3, 1]"
def count_bits(n): return [bin(i).count('1') for i in range(n + 1)],"Counts the number of 1's in binary representations of numbers.

This function returns a list of integers, where each element at index i represents the number of 1's in the binary representation of i. It uses Python's bin() to count the bits.","def test_count_bits(): assert count_bits(2) == [0, 1, 1] assert count_bits(5) == [0, 1, 1, 2, 1, 2]"
"def max_subarray(nums): max_current = max_global = nums[0]; for num in nums[1:]: max_current = max(num, max_current + num); if max_current > max_global: max_global = max_current; return max_global","Finds the largest sum of a contiguous subarray.

This function returns the largest sum that can be obtained from a contiguous subarray of the input list nums. It uses Kadane's algorithm to keep track of the current maximum sum and updates the global maximum.","def test_max_subarray(): assert max_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6 assert max_subarray([1]) == 1"
"def count_say(n): if n == 1: return ""1""; prev = count_say(n - 1); result, count = """", 1; for i in range(1, len(prev)): if prev[i] == prev[i - 1]: count += 1; else: result += str(count) + prev[i - 1]; count = 1; result += str(count) + prev[-1]; return result","Generates the n-th term in the ""count and say"" sequence.

This function returns the n-th term in the ""count and say"" sequence. The sequence starts with ""1"", and each subsequent term is generated by describing the previous term in terms of the count of each consecutive digit.",def test_count_say(): assert count_say(4) == "1211" assert count_say(1) == "1"
"def letter_combinations(digits): if not digits: return []; mapping = {""2"": ""abc"", ""3"": ""def"", ""4"": ""ghi"", ""5"": ""jkl"", ""6"": ""mno"", ""7"": ""pqrs"", ""8"": ""tuv"", ""9"": ""wxyz""}; result = ['']; for digit in digits: result = [prefix + letter for prefix in result for letter in mapping[digit]]; return result","Generates all possible letter combinations from digits.

This function returns all possible letter combinations that the input string of digits could represent. It maps each digit to corresponding letters on a phone keypad and generates combinations using a recursive approach.","def test_letter_combinations(): assert letter_combinations(""23"") == ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf'] assert letter_combinations("""") == []"
"def unique_bst(n): dp = [0] * (n + 1); dp[0], dp[1] = 1, 1; for i in range(2, n + 1): for j in range(i): dp[i] += dp[j] * dp[i - j - 1]; return dp[n]","Counts unique binary search trees.

This function returns the number of unique binary search trees (BST) that can be constructed using n distinct integers. It uses dynamic programming to calculate the number of BSTs based on the number of nodes.",def test_unique_bst(): assert unique_bst(3) == 5 assert unique_bst(1) == 1
"def search_insert(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; elif nums[mid] < target: left = mid + 1; else: right = mid - 1; return left","Finds the index where a target should be inserted.

This function returns the index at which the target value should be inserted in the sorted list nums. It uses binary search to find the appropriate position.","def test_search_insert(): assert search_insert([1, 3, 5, 6], 5) == 2 assert search_insert([1, 3, 5, 6], 2) == 1"
"def climb_stairs(n): if n == 1: return 1; dp = [0] * (n + 1); dp[1], dp[2] = 1, 2; for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2]; return dp[n]","Finds the number of distinct ways to climb stairs.

This function returns the number of distinct ways to climb n stairs, where each time you can either climb 1 or 2 steps. It uses dynamic programming to calculate the number of ways.",def test_climb_stairs(): assert climb_stairs(2) == 2 assert climb_stairs(3) == 3
def check_palindrome(s): s = ''.join(c.lower() for c in s if c.isalnum()); return s == s[::-1],"Checks if a string is a palindrome, considering only alphanumeric characters.

This function returns True if the input string s is a palindrome when considering only alphanumeric characters and ignoring cases. It filters out non-alphanumeric characters before checking if the string reads the same backward.","def test_check_palindrome(): assert check_palindrome(""A man, a plan, a canal: Panama"") assert not check_palindrome(""race a car"")"
def rotate_matrix(matrix): matrix[:] = [list(row) for row in zip(*matrix[::-1])],"Rotates a matrix by 90 degrees clockwise.

This function modifies the input n x n matrix by rotating it 90 degrees clockwise in-place. It uses matrix transposition and row reversal to achieve the rotation.","def test_rotate_matrix(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_matrix(matrix); assert matrix == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"
"def is_valid_sudoku(board): def is_valid_unit(unit): return len(unit) == len(set(unit)); for row in board: if not is_valid_unit([x for x in row if x != "".""]): return False; for col in zip(*board): if not is_valid_unit([x for x in col if x != "".""]): return False; for i in range(0, 9, 3): for j in range(0, 9, 3): if not is_valid_unit([board[x][y] for x in range(i, i + 3) for y in range(j, j + 3) if board[x][y] != "".""]): return False; return True","Validates a Sudoku board.

This function returns True if the given 9x9 Sudoku board is valid according to the rules of Sudoku, where each row, column, and 3x3 box must contain the numbers 1-9 without repetition.","def test_is_valid_sudoku(): board = [[""5"", ""3"", ""."", ""."", ""7"", ""."", ""."", ""."", "".""], [""6"", ""."", ""."", ""1"", ""9"", ""5"", ""."", ""."", "".""], [""."", ""9"", ""8"", ""."", ""."", ""."", ""."", ""6"", "".""], [""8"", ""."", ""."", ""."", ""6"", ""."", ""."", ""."", ""3""], [""4"", ""."", ""."", ""8"", ""."", ""3"", ""."", ""."", ""1""], [""7"", ""."", ""."", ""."", ""2"", ""."", ""."", ""."", ""6""], [""."", ""6"", ""."", ""."", ""."", ""."", ""2"", ""8"", "".""], [""."", ""."", ""."", ""4"", ""1"", ""9"", ""."", ""."", ""5""], [""."", ""."", ""."", ""."", ""8"", ""."", ""."", ""7"", ""9""]]; assert is_valid_sudoku(board) == True"
"def four_sum(nums, target): nums.sort(); result = []; def k_sum(start, k, target, current): if k == 2: left, right = start, len(nums) - 1; while left < right: s = nums[left] + nums[right]; if s == target: result.append(current + [nums[left], nums[right]]); left += 1; right -= 1; while left < right and nums[left] == nums[left - 1]: left += 1; while left < right and nums[right] == nums[right + 1]: right -= 1; elif s < target: left += 1; else: right -= 1; return; for i in range(start, len(nums) - k + 1): if i > start and nums[i] == nums[i - 1]: continue; k_sum(i + 1, k - 1, target - nums[i], current + [nums[i]]); k_sum(0, 4, target, []); return result","Finds all unique quadruplets that sum to a target.

This function returns a list of all unique quadruplets in the input list nums that sum to the target value. It uses a recursive approach for k-sum and two pointers for the 2-sum case.","def test_four_sum(): assert four_sum([1, 0, -1, 0, -2, 2], 0) == [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] assert four_sum([2, 2, 2, 2, 2], 8) == [[2, 2, 2, 2]]"
"def max_profit(prices): min_price, max_profit = float('inf'), 0; for price in prices: min_price = min(min_price, price); max_profit = max(max_profit, price - min_price); return max_profit","Calculates the maximum profit from buying and selling stock.

This function returns the maximum profit that can be made from buying and selling stock on different days, where the input list prices represents the stock prices on each day. You may complete only one transaction.","def test_max_profit(): assert max_profit([7, 1, 5, 3, 6, 4]) == 5 assert max_profit([7, 6, 4, 3, 1]) == 0"
"def word_search(board, word): def dfs(board, word, i, j, idx): if idx == len(word): return True; if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[idx]: return False; temp, board[i][j] = board[i][j], ""#""; found = dfs(board, word, i + 1, j, idx + 1) or dfs(board, word, i - 1, j, idx + 1) or dfs(board, word, i, j + 1, idx + 1) or dfs(board, word, i, j - 1, idx + 1); board[i][j] = temp; return found; for i in range(len(board)): for j in range(len(board[0])): if dfs(board, word, i, j, 0): return True; return False","Determines if a word exists in a grid of letters.

This function returns True if the input word exists in the grid board, and False otherwise. The word can be constructed from letters of sequentially adjacent cells, but the same letter cell may not be used more than once.","def test_word_search(): board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]]; assert word_search(board, ""ABCCED"") == True assert word_search(board, ""SEE"") == True assert word_search(board, ""ABCB"") == False"
"def is_anagram(s, t): return sorted(s) == sorted(t)","Checks if two strings are anagrams.

This function returns True if the input strings s and t are anagrams of each other, and False otherwise. It uses sorting to compare the characters in both strings.","def test_is_anagram(): assert is_anagram(""anagram"", ""nagaram"") assert not is_anagram(""rat"", ""car"")"
"def largest_rectangle_histogram(heights): stack, max_area = [], 0; heights.append(0); for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()]; width = i if not stack else i - stack[-1] - 1; max_area = max(max_area, height * width); stack.append(i); return max_area","Finds the largest rectangle area in a histogram.

This function returns the area of the largest rectangle that can be formed from the histogram represented by the list heights. It uses a stack to calculate the area efficiently.","def test_largest_rectangle_histogram(): assert largest_rectangle_histogram([2, 1, 5, 6, 2, 3]) == 10 assert largest_rectangle_histogram([2, 4]) == 4"
"def evaluate_rpn(tokens): stack = []; for token in tokens: if token in ""+-*/"": b, a = stack.pop(), stack.pop(); stack.append(eval(f'{a}{token}{b}')); else: stack.append(int(token)); return stack[0]","Evaluates a Reverse Polish Notation (RPN) expression.

This function evaluates the input list tokens that represents a mathematical expression in Reverse Polish Notation (RPN). It uses a stack to perform arithmetic operations in the correct order.","def test_evaluate_rpn(): assert evaluate_rpn([""2"", ""1"", ""+"", ""3"", ""*""]) == 9 assert evaluate_rpn([""4"", ""13"", ""5"", ""/"", ""+""]) == 6"
"def is_valid_parentheses(s): stack = []; mapping = {"")"": ""("", ""}"": ""{"", ""]"": ""[""}; for char in s: if char in mapping: top_element = stack.pop() if stack else '#'; if mapping[char] != top_element: return False; else: stack.append(char); return not stack","Checks if parentheses in a string are valid.

This function returns True if the parentheses in the input string s are valid (i.e., they are properly closed and nested), and False otherwise. It uses a stack to track open parentheses and ensures they match correctly.",def test_is_valid_parentheses(): assert is_valid_parentheses("()") assert is_valid_parentheses("()[]{}") assert not is_valid_parentheses("(]")
"def int_to_roman(num): val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]; syb = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]; roman = """"; for i in range(len(val)): while num >= val[i]: roman += syb[i]; num -= val[i]; return roman","Converts an integer to a Roman numeral.

This function converts the input integer num to its corresponding Roman numeral. It iterates through predefined values and symbols to construct the Roman numeral.",def test_int_to_roman(): assert int_to_roman(3) == "III" assert int_to_roman(58) == "LVIII" assert int_to_roman(1994) == "MCMXCIV"
"def roman_to_int(s): roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}; total = 0; for i in range(len(s) - 1): if roman[s[i]] < roman[s[i + 1]]: total -= roman[s[i]]; else: total += roman[s[i]]; return total + roman[s[-1]]","Converts a Roman numeral to an integer.

This function converts the input Roman numeral string s into its corresponding integer. It processes the string from left to right, subtracting values if a smaller numeral appears before a larger one.",def test_roman_to_int(): assert roman_to_int("III") == 3 assert roman_to_int("LVIII") == 58 assert roman_to_int("MCMXCIV") == 1994
def is_happy(n): def get_next(n): return sum(int(x) ** 2 for x in str(n)); seen = set(); while n != 1 and n not in seen: seen.add(n); n = get_next(n); return n == 1,"Determines if a number is a happy number.

This function returns True if the input number n is a happy number (i.e., repeatedly replacing the number by the sum of the squares of its digits eventually leads to 1). If it enters a cycle, the number is not happy.",def test_is_happy(): assert is_happy(19) assert not is_happy(2)
"def valid_palindrome(s): left, right = 0, len(s) - 1; while left < right: if s[left] != s[right]: def is_pal(s, left, right): while left < right: if s[left] != s[right]: return False; left += 1; right -= 1; return True; return is_pal(s, left + 1, right) or is_pal(s, left, right - 1); left += 1; right -= 1; return True","Checks if a string can become a palindrome by removing one character.

This function returns True if the input string s can become a palindrome by removing at most one character. It uses two-pointer technique to check palindrome validity and allows a single mismatch.",def test_valid_palindrome(): assert valid_palindrome("abca") assert not valid_palindrome("abc")
"def climb_stairs_with_obstacles(n, obstacles): if obstacles[0]: return 0; dp = [0] * (n + 1); dp[0], dp[1] = 1, 1; for i in range(2, n + 1): if obstacles[i - 1]: dp[i] = 0; else: dp[i] = dp[i - 1] + dp[i - 2]; return dp[n]","Finds the number of ways to climb stairs with obstacles.

This function returns the number of ways to climb n stairs with obstacles, where obstacles[i] is True if step i+1 is blocked. It uses dynamic programming to calculate the possible paths.","def test_climb_stairs_with_obstacles(): assert climb_stairs_with_obstacles(3, [False, False, False]) == 3 assert climb_stairs_with_obstacles(3, [False, True, False]) == 1"
"def word_break_ii(s, wordDict): memo = {}; def backtrack(start): if start == len(s): return ['']; if start in memo: return memo[start]; result = []; for end in range(start + 1, len(s) + 1): if s[start:end] in wordDict: for sub in backtrack(end): result.append(s[start:end] + ('' if sub == '' else ' ') + sub); memo[start] = result; return result; return backtrack(0)","Finds all ways to break a string into valid words from a dictionary.

This function returns all possible ways to break the input string s into valid words using the given word dictionary wordDict. It uses backtracking with memoization to explore valid partitions.","def test_word_break_ii(): assert word_break_ii(""catsanddog"", [""cat"", ""cats"", ""and"", ""sand"", ""dog""]) == [""cats and dog"", ""cat sand dog""] assert word_break_ii(""pineapplepenapple"", [""apple"", ""pen"", ""applepen"", ""pine"", ""pineapple""]) == [""pine apple pen apple"", ""pineapple pen apple"", ""pine applepen apple""]"
"def sum_of_left_leaves(root): def dfs(node, is_left): if not node: return 0; if not node.left and not node.right: return node.val if is_left else 0; return dfs(node.left, True) + dfs(node.right, False); return dfs(root, False)","Computes the sum of left leaves in a binary tree.

This function returns the sum of all left leaves in the binary tree rooted at root. A leaf is considered a left leaf if it is the left child of its parent. It uses depth-first search (DFS) to traverse the tree.","def test_sum_of_left_leaves(): root = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert sum_of_left_leaves(root) == 24"
"def intersection_of_two_arrays(nums1, nums2): return list(set(nums1) & set(nums2))","Finds the intersection of two arrays.

This function returns a list of unique elements that are present in both input lists nums1 and nums2. It uses set operations to compute the intersection.","def test_intersection_of_two_arrays(): assert intersection_of_two_arrays([1, 2, 2, 1], [2, 2]) == [2] assert intersection_of_two_arrays([4, 9, 5], [9, 4, 9, 8, 4]) == [9, 4]"
"def combination_sum_ii(candidates, target): result = []; candidates.sort(); def backtrack(start, target, current): if target == 0: result.append(list(current)); return; for i in range(start, len(candidates)): if i > start and candidates[i] == candidates[i - 1]: continue; if candidates[i] > target: break; current.append(candidates[i]); backtrack(i + 1, target - candidates[i], current); current.pop(); backtrack(0, target, []); return result","Finds all unique combinations that sum to a target value (no repetition of candidates).

This function returns a list of all unique combinations of numbers from candidates that sum to target. Each number can only be used once. It uses backtracking and skips duplicate values.","def test_combination_sum_ii(): assert combination_sum_ii([10, 1, 2, 7, 6, 1, 5], 8) == [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]] assert combination_sum_ii([2, 5, 2, 1, 2], 5) == [[1, 2, 2], [5]]"
"def top_k_frequent_elements(nums, k): from collections import Counter; return [x for x, _ in Counter(nums).most_common(k)]","Finds the k most frequent elements in a list.

This function returns the k most frequent elements from the input list nums. It uses the Counter class from Python's collections module to count frequencies and returns the k most common elements.","def test_top_k_frequent_elements(): assert top_k_frequent_elements([1, 1, 1, 2, 2, 3], 2) == [1, 2] assert top_k_frequent_elements([1], 1) == [1]"
def single_number(nums): result = 0; for num in nums: result ^= num; return result,"Finds the element that appears only once in a list.

This function returns the single number that appears exactly once in the input list nums, where every other number appears twice. It uses bitwise XOR to cancel out the duplicate numbers.","def test_single_number(): assert single_number([2, 2, 1]) == 1 assert single_number([4, 1, 2, 1, 2]) == 4"
"def word_ladder(beginWord, endWord, wordList): from collections import deque; wordList = set(wordList); if endWord not in wordList: return 0; queue = deque([(beginWord, 1)]); while queue: word, steps = queue.popleft(); if word == endWord: return steps; for i in range(len(word)): for c in 'abcdefghijklmnopqrstuvwxyz': new_word = word[:i] + c + word[i + 1:]; if new_word in wordList: wordList.remove(new_word); queue.append((new_word, steps + 1)); return 0",Finds the shortest transformation sequence from beginWord to endWord.,"def test_word_ladder(): assert word_ladder(""hit"", ""cog"", [""hot"", ""dot"", ""dog"", ""lot"", ""log"", ""cog""]) == 5 assert word_ladder(""hit"", ""cog"", [""hot"", ""dot"", ""dog"", ""lot"", ""log""]) == 0"
"def kth_largest(nums, k): import heapq; return heapq.nlargest(k, nums)[-1]","Finds the k-th largest element in a list.

This function returns the k-th largest element in the input list nums. It uses Python? heapq.nlargest() function to find the k largest elements and then returns the last one.","def test_kth_largest(): assert kth_largest([3, 2, 1, 5, 6, 4], 2) == 5 assert kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4"
"def longest_consecutive_sequence(nums): nums_set, max_len = set(nums), 0; for num in nums_set: if num - 1 not in nums_set: current_num, current_len = num, 1; while current_num + 1 in nums_set: current_num += 1; current_len += 1; max_len = max(max_len, current_len); return max_len","Finds the length of the longest consecutive sequence in an array.

This function returns the length of the longest consecutive elements sequence in the input list nums. It uses a set to achieve O(n) complexity.","def test_longest_consecutive_sequence(): assert longest_consecutive_sequence([100, 4, 200, 1, 3, 2]) == 4 assert longest_consecutive_sequence([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9"
"def unique_permutations(nums): result = []; nums.sort(); def backtrack(start): if start == len(nums): result.append(nums[:]); return; for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue; nums[start], nums[i] = nums[i], nums[start]; backtrack(start + 1); nums[start], nums[i] = nums[i], nums[start]; backtrack(0); return result","Generates all unique permutations of a list.

This function returns all unique permutations of the input list nums, ensuring that there are no duplicate permutations. It uses backtracking to explore all possibilities and skips duplicates.","def test_unique_permutations(): assert unique_permutations([1, 1, 2]) == [[1, 1, 2], [1, 2, 1], [2, 1, 1]] assert unique_permutations([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"
"def merge_two_sorted_lists(l1, l2): dummy = ListNode(0); tail = dummy; while l1 and l2: if l1.val < l2.val: tail.next, l1 = l1, l1.next; else: tail.next, l2 = l2, l2.next; tail = tail.next; tail.next = l1 or l2; return dummy.next","Merges two sorted linked lists.

This function merges two sorted linked lists l1 and l2 into one sorted linked list and returns the head of the merged list. It iterates through both lists and appends the smaller node to the result list.","def test_merge_two_sorted_lists(): l1 = ListNode(1, ListNode(2, ListNode(4))); l2 = ListNode(1, ListNode(3, ListNode(4))); assert linked_list_to_list(merge_two_sorted_lists(l1, l2)) == [1, 1, 2, 3, 4, 4]"
"def set_matrix_zeroes(matrix): rows, cols = len(matrix), len(matrix[0]); row_zero = any(matrix[0][j] == 0 for j in range(cols)); col_zero = any(matrix[i][0] == 0 for i in range(rows)); for i in range(1, rows): for j in range(1, cols): if matrix[i][j] == 0: matrix[i][0] = matrix[0][j] = 0; for i in range(1, rows): for j in range(1, cols): if matrix[i][0] == 0 or matrix[0][j] == 0: matrix[i][j] = 0; if row_zero: for j in range(cols): matrix[0][j] = 0; if col_zero: for i in range(rows): matrix[i][0] = 0","Sets matrix elements to zero if a zero is encountered in the matrix.

This function modifies the input matrix in place such that if any element is zero, all elements in its row and column are set to zero. It uses constant space to keep track of zero rows and columns.","def test_set_matrix_zeroes(): matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]; set_matrix_zeroes(matrix); assert matrix == [[1, 0, 1], [0, 0, 0], [1, 0, 1]]"
"def longest_palindrome(s): if not s: return """"; def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1; right += 1; return s[left+1:right]; result = """"; for i in range(len(s)): odd_pal = expand_around_center(i, i); even_pal = expand_around_center(i, i+1); result = max(result, odd_pal, even_pal, key=len); return result","Finds the longest palindromic substring.

This function returns the longest palindromic substring in the input string s. It expands around the center for both odd and even length palindromes and tracks the longest one.",def test_longest_palindrome(): assert longest_palindrome("babad") == "bab" or longest_palindrome("babad") == "aba" assert longest_palindrome("cbbd") == "bb"
"def coin_change(coins, amount): dp = [float('inf')] * (amount + 1); dp[0] = 0; for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1); return dp[amount] if dp[amount] != float('inf') else -1","Finds the fewest number of coins that make up a given amount.

This function returns the minimum number of coins needed to make up the given amount. It uses dynamic programming to calculate the minimum number of coins for each value up to amount.","def test_coin_change(): assert coin_change([1, 2, 5], 11) == 3 assert coin_change([2], 3) == -1"
"def edit_distance(word1, word2): dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]; for i in range(len(word1) + 1): dp[i][0] = i; for j in range(len(word2) + 1): dp[0][j] = j; for i in range(1, len(word1) + 1): for j in range(1, len(word2) + 1): if word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1]; else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1; return dp[-1][-1]","Computes the minimum number of operations to convert one string to another.

This function returns the minimum number of edit operations (insert, delete, or replace) required to convert word1 to word2. It uses dynamic programming to build the solution.","def test_edit_distance(): assert edit_distance(""horse"", ""ros"") == 3 assert edit_distance(""intention"", ""execution"") == 5"
"def num_decodings(s): if not s: return 0; dp = [0] * (len(s) + 1); dp[0] = 1; dp[1] = 0 if s[0] == '0' else 1; for i in range(2, len(s) + 1): if s[i - 1] != '0': dp[i] += dp[i - 1]; if 10 <= int(s[i - 2:i]) <= 26: dp[i] += dp[i - 2]; return dp[-1]","Decodes a string of digits into the number of possible letter combinations.

This function returns the number of ways to decode a string s where 'A' = 1, 'B' = 2, ..., 'Z' = 26. It uses dynamic programming to calculate the number of valid decodings.",def test_num_decodings(): assert num_decodings("12") == 2 assert num_decodings("226") == 3
"def max_profit(prices): max_profit, min_price = 0, float('inf'); for price in prices: min_price = min(min_price, price); max_profit = max(max_profit, price - min_price); return max_profit","Finds the maximum profit from a list of stock prices.

This function returns the maximum profit that can be obtained by buying and selling a stock, where the input list prices represents daily prices. The stock must be bought before it is sold.","def test_max_profit(): assert max_profit([7, 1, 5, 3, 6, 4]) == 5 assert max_profit([7, 6, 4, 3, 1]) == 0"
"def merge_k_sorted_lists(lists): from heapq import heappush, heappop; heap = []; for i, lst in enumerate(lists): if lst: heappush(heap, (lst.val, i, lst)); head = ListNode(0); curr = head; while heap: val, i, node = heappop(heap); curr.next = ListNode(val); curr = curr.next; if node.next: heappush(heap, (node.next.val, i, node.next)); return head.next","Merges k sorted linked lists into one sorted list.

This function merges k sorted linked lists into a single sorted linked list. It uses a heap to efficiently merge the nodes from all the lists.","def test_merge_k_sorted_lists(): l1 = ListNode(1, ListNode(4, ListNode(5))); l2 = ListNode(1, ListNode(3, ListNode(4))); l3 = ListNode(2, ListNode(6)); assert linked_list_to_list(merge_k_sorted_lists([l1, l2, l3])) == [1, 1, 2, 3, 4, 4, 5, 6]"
"def longest_increasing_subsequence(nums): if not nums: return 0; dp = [1] * len(nums); for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1); return max(dp)","Finds the length of the longest increasing subsequence.

This function returns the length of the longest increasing subsequence in the input list nums. It uses dynamic programming to build the solution by comparing each element with all previous ones.","def test_longest_increasing_subsequence(): assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4"
"def generate_parentheses(n): result = []; def backtrack(current, open_count, close_count): if len(current) == 2 * n: result.append(current); return; if open_count < n: backtrack(current + '(', open_count + 1, close_count); if close_count < open_count: backtrack(current + ')', open_count, close_count + 1); backtrack("""", 0, 0); return result","Generates all combinations of well-formed parentheses.

This function returns a list of all valid combinations of n pairs of parentheses. It uses backtracking to explore all possibilities while maintaining the balance between open and close parentheses.","def test_generate_parentheses(): assert generate_parentheses(3) == [""((()))"", ""(()())"", ""(())()"", ""()(())"", ""()()()""] assert generate_parentheses(1) == [""()""]"
"def flood_fill(image, sr, sc, new_color): rows, cols = len(image), len(image[0]); color = image[sr][sc]; if color == new_color: return image; def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or image[r][c] != color: return; image[r][c] = new_color; dfs(r+1, c); dfs(r-1, c); dfs(r, c+1); dfs(r, c-1); dfs(sr, sc); return image","Fills an area in an image with a new color using DFS.

This function modifies the image by replacing the color at (sr, sc) and all connected cells with the same color using depth-first search (DFS).","def test_flood_fill(): image = [[1, 1, 1], [1, 1, 0], [1, 0, 1]]; assert flood_fill(image, 1, 1, 2) == [[2, 2, 2], [2, 2, 0], [2, 0, 1]]"
"def max_subarray_sum(nums): max_current = max_global = nums[0]; for num in nums[1:]: max_current = max(num, max_current + num); max_global = max(max_global, max_current); return max_global","Finds the maximum sum of a contiguous subarray.

This function returns the maximum sum of any contiguous subarray in the input list nums. It uses Kadane? algorithm to track the maximum current sum and updates the global maximum sum.","def test_max_subarray_sum(): assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6 assert max_subarray_sum([1]) == 1"
"def permutations(nums): result = []; def backtrack(start): if start == len(nums): result.append(nums[:]); return; for i in range(start, len(nums)): nums[start], nums[i] = nums[i], nums[start]; backtrack(start + 1); nums[start], nums[i] = nums[i], nums[start]; backtrack(0); return result","Generates all permutations of a list.

This function returns a list of all possible permutations of the input list nums. It uses backtracking to explore all possible configurations of the elements in the list.","def test_permutations(): assert permutations([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"
"def combination_sum_iii(k, n): result = []; def backtrack(start, target, path): if len(path) == k and target == 0: result.append(path[:]); return; for i in range(start, 10): if target - i >= 0: backtrack(i + 1, target - i, path + [i]); backtrack(1, n, []); return result","Finds all combinations of k numbers that sum to n.

This function returns a list of all unique combinations of k distinct numbers that add up to n. It uses backtracking to explore all possible combinations from numbers 1 to 9.","def test_combination_sum_iii(): assert combination_sum_iii(3, 7) == [[1, 2, 4]] assert combination_sum_iii(3, 9) == [[1, 2, 6], [1, 3, 5], [2, 3, 4]]"
"def trap_rain_water(height): left, right = 0, len(height) - 1; left_max, right_max, water_trapped = 0, 0, 0; while left < right: if height[left] < height[right]: if height[left] >= left_max: left_max = height[left]; else: water_trapped += left_max - height[left]; left += 1; else: if height[right] >= right_max: right_max = height[right]; else: water_trapped += right_max - height[right]; right -= 1; return water_trapped","Computes the amount of rainwater trapped between heights.

This function returns the total amount of water trapped between heights represented by the input list height. It uses a two-pointer approach to calculate the trapped water.","def test_trap_rain_water(): assert trap_rain_water([0,1,0,2,1,0,1,3,2,1,2,1]) == 6 assert trap_rain_water([4,2,0,3,2,5]) == 9"
"def is_valid_bst(root, low=float('-inf'), high=float('inf')): if not root: return True; if not (low < root.val < high): return False; return is_valid_bst(root.left, low, root.val) and is_valid_bst(root.right, root.val, high)","Validates if a binary tree is a valid binary search tree (BST).

This function returns True if the input binary tree rooted at root is a valid BST, and False otherwise. It uses recursion to verify that each node falls within the allowed range.","def test_is_valid_bst(): root = TreeNode(2, TreeNode(1), TreeNode(3)); assert is_valid_bst(root) root = TreeNode(5, TreeNode(1), TreeNode(4, TreeNode(3), TreeNode(6))); assert not is_valid_bst(root)"
"def knapsack(weights, values, W): n = len(weights); dp = [[0] * (W + 1) for _ in range(n + 1)]; for i in range(1, n + 1): for w in range(W + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]); else: dp[i][w] = dp[i - 1][w]; return dp[n][W]","Solves the 0/1 knapsack problem.

This function returns the maximum value that can be obtained with a knapsack of capacity W and items of given weights and values. It uses dynamic programming to solve the problem.","def test_knapsack(): weights = [1, 3, 4, 5]; values = [1, 4, 5, 7]; assert knapsack(weights, values, 7) == 9"
"def shortest_path_binary_matrix(grid): if grid[0][0] or grid[-1][-1]: return -1; n = len(grid); directions = [(1, 1), (1, 0), (0, 1), (1, -1), (-1, 1), (-1, 0), (0, -1), (-1, -1)]; queue = deque([(0, 0, 1)]); while queue: x, y, dist = queue.popleft(); if (x, y) == (n - 1, n - 1): return dist; for dx, dy in directions: nx, ny = x + dx, y + dy; if 0 <= nx < n and 0 <= ny < n and not grid[nx][ny]: grid[nx][ny] = 1; queue.append((nx, ny, dist + 1)); return -1","Finds the shortest path in a binary matrix.

This function returns the length of the shortest path from the top-left to the bottom-right corner in a binary matrix grid, where 0 represents an open cell and 1 represents an obstacle.","def test_shortest_path_binary_matrix(): grid = [[0, 1], [1, 0]]; assert shortest_path_binary_matrix(grid) == 2 grid = [[1, 0], [0, 0]]; assert shortest_path_binary_matrix(grid) == -1"
"def reconstruct_itinerary(tickets): from collections import defaultdict; graph = defaultdict(list); for frm, to in sorted(tickets)[::-1]: graph[frm].append(to); result = []; def dfs(airport): while graph[airport]: dfs(graph[airport].pop()); result.append(airport); dfs('JFK'); return result[::-1]","Reconstructs the itinerary based on given flight tickets.

This function returns the itinerary that uses all given tickets starting from ""JFK"". It uses depth-first search (DFS) to visit all destinations in lexical order.","def test_reconstruct_itinerary(): tickets = [[""MUC"", ""LHR""], [""JFK"", ""MUC""], [""SFO"", ""SJC""], [""LHR"", ""SFO""]]; assert reconstruct_itinerary(tickets) == [""JFK"", ""MUC"", ""LHR"", ""SFO"", ""SJC""] tickets = [[""JFK"",""SFO""],[""JFK"",""ATL""],[""SFO"",""ATL""],[""ATL"",""JFK""],[""ATL"",""SFO""]]; assert reconstruct_itinerary(tickets) == [""JFK"",""ATL"",""JFK"",""SFO"",""ATL"",""SFO""]"
"def longest_common_subsequence(text1, text2): dp = [[0] * (len(text2) + 1) for _ in range(len(text1) + 1)]; for i in range(1, len(text1) + 1): for j in range(1, len(text2) + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1; else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]); return dp[-1][-1]","Finds the length of the longest common subsequence between two strings.

This function returns the length of the longest common subsequence between the two input strings text1 and text2. It uses dynamic programming to build the solution.","def test_longest_common_subsequence(): assert longest_common_subsequence(""abcde"", ""ace"") == 3 assert longest_common_subsequence(""abc"", ""abc"") == 3 assert longest_common_subsequence(""abc"", ""def"") == 0"
"def alien_order(words): from collections import defaultdict, deque; graph = defaultdict(set); in_degree = {char: 0 for word in words for char in word}; for i in range(len(words) - 1): for c1, c2 in zip(words[i], words[i + 1]): if c1 != c2: if c2 not in graph[c1]: graph[c1].add(c2); in_degree[c2] += 1; break; else: if len(words[i]) > len(words[i + 1]): return """"; queue = deque([char for char in in_degree if in_degree[char] == 0]); result = []; while queue: char = queue.popleft(); result.append(char); for neighbor in graph[char]: in_degree[neighbor] -= 1; if in_degree[neighbor] == 0: queue.append(neighbor); return """".join(result) if len(result) == len(in_degree) else """"","Determines the order of characters in an alien language.

This function returns the correct character order in an alien language given a sorted list of words in that language. It uses topological sorting to find the order.","def test_alien_order(): assert alien_order([""wrt"", ""wrf"", ""er"", ""ett"", ""rftt""]) == ""wertf"" assert alien_order([""z"", ""x"", ""z""]) == """""
"def word_break(s, word_dict): dp = [False] * (len(s) + 1); dp[0] = True; for i in range(1, len(s) + 1): for word in word_dict: if dp[i - len(word)] and s[i - len(word):i] == word: dp[i] = True; break; return dp[-1]","Determines if a string can be segmented into a space-separated sequence of dictionary words.

This function returns True if the input string s can be segmented into a space-separated sequence of words from the word_dict. It uses dynamic programming to track the possible segmentations.","def test_word_break(): assert word_break(""leetcode"", [""leet"", ""code""]) assert not word_break(""applepenapple"", [""cats"", ""dog""])"
"def lowest_common_ancestor(root, p, q): if not root or root == p or root == q: return root; left = lowest_common_ancestor(root.left, p, q); right = lowest_common_ancestor(root.right, p, q); if left and right: return root; return left if left else right","Finds the lowest common ancestor of two nodes in a binary tree.

This function returns the lowest common ancestor (LCA) of two nodes p and q in the binary tree rooted at root. The LCA is the deepest node that is an ancestor of both p and q.","def test_lowest_common_ancestor(): root = TreeNode(3, TreeNode(5, TreeNode(6), TreeNode(2, TreeNode(7), TreeNode(4))), TreeNode(1, TreeNode(0), TreeNode(8))); p, q = root.left, root.left.right.right; assert lowest_common_ancestor(root, p, q) == root.left"
"def palindrome_partitioning(s): result = []; def backtrack(start, path): if start == len(s): result.append(path[:]); return; for i in range(start + 1, len(s) + 1): if s[start:i] == s[start:i][::-1]: backtrack(i, path + [s[start:i]]); backtrack(0, []); return result","Finds all possible palindrome partitions of a string.

This function returns a list of all possible ways to partition the input string s such that each substring is a palindrome. It uses backtracking to explore all possible partitions.","def test_palindrome_partitioning(): assert palindrome_partitioning(""aab"") == [[""a"", ""a"", ""b""], [""aa"", ""b""]] assert palindrome_partitioning(""civic"") == [[""c"", ""i"", ""v"", ""i"", ""c""], [""civic""]]"
"def max_path_sum(root): def helper(node): if not node: return (float('-inf'), 0); left_max, left_single = helper(node.left); right_max, right_single = helper(node.right); max_single = max(left_single + node.val, right_single + node.val, node.val); max_top = max(max_single, left_single + node.val + right_single); return (max(max_top, left_max, right_max), max_single); return helper(root)[0]","Finds the maximum path sum in a binary tree.

This function returns the maximum sum of any path in the binary tree rooted at root. A path can start and end at any node, and it includes at least one node.","def test_max_path_sum(): root = TreeNode(1, TreeNode(2), TreeNode(3)); assert max_path_sum(root) == 6 root = TreeNode(-10, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert max_path_sum(root) == 42"
"def sliding_window_max(nums, k): from collections import deque; result = []; deq = deque(); for i in range(len(nums)): while deq and deq[0] < i - k + 1: deq.popleft(); while deq and nums[deq[-1]] < nums[i]: deq.pop(); deq.append(i); if i >= k - 1: result.append(nums[deq[0]]); return result","Finds the maximum value in every sliding window of size k.

This function returns a list of the maximum values in each sliding window of size k as it moves across the input list nums. It uses a deque to efficiently track the maximum in each window.","def test_sliding_window_max(): assert sliding_window_max([1,3,-1,-3,5,3,6,7], 3) == [3, 3, 5, 5, 6, 7] assert sliding_window_max([9, 11, 8, 5, 7, 10], 2) == [11, 11, 8, 7, 10]"
"def word_ladder(begin_word, end_word, word_list): from collections import deque; word_list = set(word_list); if end_word not in word_list: return 0; queue = deque([(begin_word, 1)]); while queue: word, length = queue.popleft(); if word == end_word: return length; for i in range(len(word)): for c in 'abcdefghijklmnopqrstuvwxyz': new_word = word[:i] + c + word[i + 1:]; if new_word in word_list: word_list.remove(new_word); queue.append((new_word, length + 1)); return 0","Finds the length of the shortest transformation sequence from begin_word to end_word.

This function returns the length of the shortest transformation sequence from begin_word to end_word, where each transformation must change exactly one letter and the resulting word must be in the word list.","def test_word_ladder(): assert word_ladder(""hit"", ""cog"", [""hot"", ""dot"", ""dog"", ""lot"", ""log"", ""cog""]) == 5 assert word_ladder(""hit"", ""cog"", [""hot"", ""dot"", ""dog"", ""lot"", ""log""]) == 0"
"def unique_paths(m, n): dp = [[1] * n for _ in range(m)]; for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1]; return dp[-1][-1]","Finds the number of unique paths from the top-left to the bottom-right corner of a grid.

This function returns the number of unique paths from the top-left corner to the bottom-right corner of a m x n grid. The only allowed moves are to the right or down.","def test_unique_paths(): assert unique_paths(3, 7) == 28 assert unique_paths(3, 2) == 3"
"def restore_ip_addresses(s): result = []; def backtrack(start, dots, path): if dots == 4 and start == len(s): result.append(path[:-1]); return; if dots > 4: return; for i in range(1, 4): if start + i <= len(s) and (i == 1 or s[start] != '0') and 0 <= int(s[start:start + i]) <= 255: backtrack(start + i, dots + 1, path + s[start:start + i] + "".""); backtrack(0, 0, """"); return result","Restores all possible valid IP addresses from a string.

This function returns a list of all possible valid IP addresses that can be obtained by inserting three dots into the input string s. It uses backtracking to explore all possible placements of dots.","def test_restore_ip_addresses(): assert restore_ip_addresses(""25525511135"") == [""255.255.11.135"", ""255.255.111.35""] assert restore_ip_addresses(""0000"") == [""0.0.0.0""]"
"def kth_smallest(matrix, k): import heapq; heap = [(matrix[i][0], i, 0) for i in range(len(matrix))]; heapq.heapify(heap); for _ in range(k - 1): val, row, col = heapq.heappop(heap); if col + 1 < len(matrix[0]): heapq.heappush(heap, (matrix[row][col + 1], row, col + 1)); return heapq.heappop(heap)[0]","Finds the k-th smallest element in a sorted matrix.

This function returns the k-th smallest element in a sorted matrix where each row and column is sorted in ascending order. It uses a min-heap to efficiently extract the smallest elements.","def test_kth_smallest(): matrix = [[1, 5, 9], [10, 11, 13], [12, 13, 15]]; assert kth_smallest(matrix, 8) == 13 matrix = [[-5]]; assert kth_smallest(matrix, 1) == -5"
"def min_distance(word1, word2): dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]; for i in range(len(word1) + 1): dp[i][0] = i; for j in range(len(word2) + 1): dp[0][j] = j; for i in range(1, len(word1) + 1): for j in range(1, len(word2) + 1): if word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1]; else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1; return dp[-1][-1]","Computes the minimum number of edit operations to convert one string to another.

This function returns the minimum number of operations (insertions, deletions, or substitutions) required to convert word1 to word2. It uses dynamic programming to compute the edit distance.","def test_min_distance(): assert min_distance(""horse"", ""ros"") == 3 assert min_distance(""intention"", ""execution"") == 5"
"def next_permutation(nums): i = len(nums) - 2; while i >= 0 and nums[i] >= nums[i + 1]: i -= 1; if i >= 0: j = len(nums) - 1; while nums[j] <= nums[i]: j -= 1; nums[i], nums[j] = nums[j], nums[i]; nums[i + 1:] = reversed(nums[i + 1:])","Modifies a list to its next lexicographical permutation.

This function modifies the input list nums in place to produce the next lexicographical permutation. If no next permutation exists, the list is rearranged to its smallest possible order.","def test_next_permutation(): nums = [1, 2, 3]; next_permutation(nums); assert nums == [1, 3, 2] nums = [3, 2, 1]; next_permutation(nums); assert nums == [1, 2, 3]"
"def accounts_merge(accounts): from collections import defaultdict; parent = {}; def find(x): if parent[x] != x: parent[x] = find(parent[x]); return parent[x]; def union(x, y): parent[find(x)] = find(y); email_to_name = {}; for account in accounts: name = account[0]; for email in account[1:]: parent.setdefault(email, email); email_to_name[email] = name; for email in account[1:]: union(account[1], email); unions = defaultdict(list); for email in parent: unions[find(email)].append(email); return [[email_to_name[v[0]]] + sorted(v) for v in unions.values()]","Merges accounts based on common email addresses.

This function returns a merged list of accounts where each account consists of a name followed by unique email addresses. If two accounts share any email address, they are merged into one.","def test_accounts_merge(): accounts = [[""John"", ""johnsmith@mail.com"", ""john00@mail.com""], [""John"", ""johnnybravo@mail.com""], [""John"", ""johnsmith@mail.com"", ""john_newyork@mail.com""], [""Mary"", ""mary@mail.com""]]; assert accounts_merge(accounts) == [[""John"", ""john00@mail.com"", ""john_newyork@mail.com"", ""johnsmith@mail.com""], [""John"", ""johnnybravo@mail.com""], [""Mary"", ""mary@mail.com""]]"
"def is_scramble(s1, s2): if len(s1) != len(s2): return False; if s1 == s2: return True; if sorted(s1) != sorted(s2): return False; for i in range(1, len(s1)): if (is_scramble(s1[:i], s2[:i]) and is_scramble(s1[i:], s2[i:])) or (is_scramble(s1[:i], s2[-i:]) and is_scramble(s1[i:], s2[:-i])): return True; return False","Determines if a string is a scrambled version of another.

This function returns True if s2 is a scrambled version of s1, and False otherwise. A scrambled string is created by recursively swapping the two halves of the string.","def test_is_scramble(): assert is_scramble(""great"", ""rgeat"") assert not is_scramble(""abcde"", ""caebd"")"
"def longest_consecutive(nums): num_set, max_len = set(nums), 0; for num in nums: if num - 1 not in num_set: current_num, current_len = num, 1; while current_num + 1 in num_set: current_num += 1; current_len += 1; max_len = max(max_len, current_len); return max_len","Finds the length of the longest consecutive sequence in an array.

This function returns the length of the longest consecutive sequence of numbers in the input list nums. It uses a set to efficiently check the presence of consecutive numbers.","def test_longest_consecutive(): assert longest_consecutive([100, 4, 200, 1, 3, 2]) == 4 assert longest_consecutive([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9"
def flatten_binary_tree(root): def flatten_tree(node): if not node: return None; left_tail = flatten_tree(node.left); right_tail = flatten_tree(node.right); if left_tail: left_tail.right = node.right; node.right = node.left; node.left = None; return right_tail if right_tail else left_tail if not root: return; flatten_tree(root),"Flattens a binary tree to a linked list in-place.

This function modifies the binary tree rooted at root in-place so that it becomes a flattened linked list where the right child points to the next node in a pre-order traversal, and the left child is always None.","def test_flatten_binary_tree(): root = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5, None, TreeNode(6))); flatten_binary_tree(root); assert binary_tree_to_list(root) == [1, 2, 3, 4, 5, 6]"
"def solve_sudoku(board): def is_valid(board, r, c, num): for i in range(9): if board[i][c] == num or board[r][i] == num: return False; block_row, block_col = 3 * (r // 3), 3 * (c // 3); for i in range(block_row, block_row + 3): for j in range(block_col, block_col + 3): if board[i][j] == num: return False; return True; def solve(): for r in range(9): for c in range(9): if board[r][c] == '.': for num in '123456789': if is_valid(board, r, c, num): board[r][c] = num; if solve(): return True; board[r][c] = '.'; return False; return True; solve()","Solves a Sudoku puzzle using backtracking.

This function solves the input 9x9 Sudoku board in place using a backtracking algorithm. It fills in the empty cells while ensuring that the board remains valid according to Sudoku rules.","def test_solve_sudoku(): board = [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]; solve_sudoku(board); assert board == [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""],[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""],[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""],[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""],[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""],[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""],[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""],[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""],[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]]"
"def search_rotated_sorted_array(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1; else: left = mid + 1; else: if nums[mid] < target <= nums[right]: left = mid + 1; else: right = mid - 1; return -1","Searches for a target in a rotated sorted array.

This function returns the index of target in the rotated sorted array nums, or -1 if the target is not found. It uses a modified binary search to account for the rotation in the array.","def test_search_rotated_sorted_array(): assert search_rotated_sorted_array([4, 5, 6, 7, 0, 1, 2], 0) == 4 assert search_rotated_sorted_array([4, 5, 6, 7, 0, 1, 2], 3) == -1"
"def remove_invalid_parentheses(s): def is_valid(expr): balance = 0; for char in expr: if char == '(': balance += 1; elif char == ')': balance -= 1; if balance < 0: return False; return balance == 0; level = {s}; while level: valid = list(filter(is_valid, level)); if valid: return valid; next_level = set(); for expr in level: for i in range(len(expr)): if expr[i] in '()': next_level.add(expr[:i] + expr[i+1:]); level = next_level","Removes the minimum number of invalid parentheses to make a string valid.

This function returns all possible strings obtained by removing the minimum number of invalid parentheses to make the input string s valid. It uses breadth-first search (BFS) to explore all possible modifications.","def test_remove_invalid_parentheses(): assert remove_invalid_parentheses(""()())()"") == [""()()()"", ""(())()""] assert remove_invalid_parentheses(""(a)())()"") == [""(a)()()"", ""(a())()""]"
def hamming_weight(n): count = 0; while n: n &= n - 1; count += 1; return count,"Counts the number of 1's in the binary representation of an integer.

This function returns the number of 1 bits (Hamming weight) in the binary representation of the input integer n. It uses bit manipulation to efficiently count the 1 bits.",def test_hamming_weight(): assert hamming_weight(11) == 3 assert hamming_weight(128) == 1 assert hamming_weight(255) == 8
"def find_max_consecutive_ones(nums): max_count = 0; current_count = 0; for num in nums: if num == 1: current_count += 1; else: max_count = max(max_count, current_count); current_count = 0; return max(max_count, current_count)","Finds the maximum number of consecutive 1s in a binary array.

This function returns the maximum number of consecutive 1s in the input binary array nums. It keeps track of the current consecutive sequence of 1s and updates the max count whenever a 0 is encountered.","def test_find_max_consecutive_ones(): assert find_max_consecutive_ones([1,1,0,1,1,1]) == 3 assert find_max_consecutive_ones([1,0,1,1,0,1]) == 2"
"def rotate_array(nums, k): k %= len(nums); nums[:] = nums[-k:] + nums[:-k]","Rotates an array by k steps.

This function rotates the input list nums by k steps to the right. The rotation is achieved by slicing the array and concatenating the two slices.","def test_rotate_array(): nums = [1, 2, 3, 4, 5, 6, 7]; rotate_array(nums, 3); assert nums == [5, 6, 7, 1, 2, 3, 4]"
"def search_insert_position(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; elif nums[mid] < target: left = mid + 1; else: right = mid - 1; return left","Finds the insertion position of a target in a sorted list.

This function returns the index at which the target should be inserted in the input sorted list nums. It uses binary search to find the correct position.","def test_search_insert_position(): assert search_insert_position([1, 3, 5, 6], 5) == 2 assert search_insert_position([1, 3, 5, 6], 2) == 1"
"def reverse_linked_list(head): prev, curr = None, head; while curr: next_node = curr.next; curr.next = prev; prev = curr; curr = next_node; return prev","Reverses a singly linked list.

This function reverses the input singly linked list and returns the head of the new reversed list. It iterates through the list, reversing the next pointers as it goes.","def test_reverse_linked_list(): head = ListNode(1, ListNode(2, ListNode(3, ListNode(4)))); new_head = reverse_linked_list(head); assert linked_list_to_list(new_head) == [4, 3, 2, 1]"
"def merge_two_sorted_arrays(nums1, m, nums2, n): while m > 0 and n > 0: if nums1[m - 1] > nums2[n - 1]: nums1[m + n - 1] = nums1[m - 1]; m -= 1; else: nums1[m + n - 1] = nums2[n - 1]; n -= 1; if n > 0: nums1[:n] = nums2[:n]","Merges two sorted arrays into one.

This function merges two sorted arrays, nums1 and nums2, in-place. The result is stored in nums1, which has enough space to accommodate both arrays.","def test_merge_two_sorted_arrays(): nums1 = [1, 2, 3, 0, 0, 0]; merge_two_sorted_arrays(nums1, 3, [2, 5, 6], 3); assert nums1 == [1, 2, 2, 3, 5, 6]"
"def product_except_self(nums): n = len(nums); output = [1] * n; left_product = 1; for i in range(n): output[i] = left_product; left_product *= nums[i]; right_product = 1; for i in range(n - 1, -1, -1): output[i] *= right_product; right_product *= nums[i]; return output","Computes the product of all elements except self in an array.

This function returns a list output where each element is the product of all elements in nums except for the element at that index. It avoids division and computes the result in O(n) time.","def test_product_except_self(): assert product_except_self([1, 2, 3, 4]) == [24, 12, 8, 6]"
"def count_and_say(n): result = ""1""; for _ in range(n - 1): prev = result; result = """"; count = 1; for j in range(1, len(prev)): if prev[j] == prev[j - 1]: count += 1; else: result += str(count) + prev[j - 1]; count = 1; result += str(count) + prev[-1]; return result","Generates the n-th term in the ""count and say"" sequence.

This function returns the n-th term in the ""count and say"" sequence, which starts with ""1"", and each subsequent term is generated by describing the previous term in terms of digit count.",def test_count_and_say(): assert count_and_say(4) == "1211" assert count_and_say(1) == "1"
def missing_number(nums): n = len(nums); expected_sum = n * (n + 1) // 2; actual_sum = sum(nums); return expected_sum - actual_sum,"Finds the missing number in a sequence of integers.

This function returns the missing number from the input list nums containing n distinct numbers from 0 to n. It uses the sum formula to calculate the expected sum and subtracts the actual sum to find the missing number.","def test_missing_number(): assert missing_number([3, 0, 1]) == 2 assert missing_number([9, 6, 4, 2, 3, 5, 7, 0, 1]) == 8"
"def first_missing_positive(nums): n = len(nums); for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]; for i in range(n): if nums[i] != i + 1: return i + 1; return n + 1","Finds the smallest missing positive integer in an unsorted list.

This function returns the smallest missing positive integer in the input list nums. It uses in-place swapping to arrange the numbers such that each number is placed in its correct index, and then identifies the first missing number.","def test_first_missing_positive(): assert first_missing_positive([3, 4, -1, 1]) == 2 assert first_missing_positive([1, 2, 0]) == 3"
"def find_duplicate(nums): slow, fast = nums[0], nums[0]; while True: slow = nums[slow]; fast = nums[nums[fast]]; if slow == fast: break; slow = nums[0]; while slow != fast: slow = nums[slow]; fast = nums[fast]; return slow","Finds the duplicate number in a list.

This function returns the duplicate number in the input list nums, where each number appears exactly once except for one number which repeats. It uses Floyd? Tortoise and Hare cycle detection algorithm.","def test_find_duplicate(): assert find_duplicate([1, 3, 4, 2, 2]) == 2 assert find_duplicate([3, 1, 3, 4, 2]) == 3"
"def find_min_rotated_sorted_array(nums): left, right = 0, len(nums) - 1; while left < right: mid = (left + right) // 2; if nums[mid] > nums[right]: left = mid + 1; else: right = mid; return nums[left]","Finds the minimum element in a rotated sorted array.

This function returns the minimum element in the input rotated sorted array nums. It uses binary search to find the minimum by comparing mid and right values.","def test_find_min_rotated_sorted_array(): assert find_min_rotated_sorted_array([3, 4, 5, 1, 2]) == 1 assert find_min_rotated_sorted_array([4, 5, 6, 7, 0, 1, 2]) == 0"
"def binary_tree_paths(root): def dfs(node, path, paths): if not node: return; path += str(node.val); if not node.left and not node.right: paths.append(path); else: path += ""->""; dfs(node.left, path, paths); dfs(node.right, path, paths); paths = []; dfs(root, """", paths); return paths","Finds all root-to-leaf paths in a binary tree.

This function returns a list of all root-to-leaf paths in the binary tree rooted at root. It uses depth-first search (DFS) to traverse the tree and construct the paths.","def test_binary_tree_paths(): root = TreeNode(1, TreeNode(2, None, TreeNode(5)), TreeNode(3)); assert binary_tree_paths(root) == [""1->2->5"", ""1->3""]"
"def serialize(root): def dfs(node): if not node: return ""None,""; return str(node.val) + "","" + dfs(node.left) + dfs(node.right); return dfs(root)","Serializes a binary tree to a string.

This function serializes the input binary tree rooted at root to a string using pre-order traversal. The string representation is used to store or transmit the structure of the tree.","def test_serialize(): root = TreeNode(1, TreeNode(2), TreeNode(3, TreeNode(4), TreeNode(5))); assert serialize(root) == ""1,2,None,None,3,4,None,None,5,None,None,"""
"def deserialize(data): def dfs(nodes): val = nodes.pop(0); if val == ""None"": return None; node = TreeNode(int(val)); node.left = dfs(nodes); node.right = dfs(nodes); return node; return dfs(data.split("",""))","Deserializes a string back into a binary tree.

This function deserializes the input string back into a binary tree. The string should be in the format generated by a pre-order traversal from the serialize function.","def test_deserialize(): data = ""1,2,None,None,3,4,None,None,5,None,None,""; root = deserialize(data); assert serialize(root) == data"
"def longest_palindromic_subsequence(s): dp = [[0] * len(s) for _ in range(len(s))]; for i in range(len(s)): dp[i][i] = 1; for length in range(2, len(s) + 1): for i in range(len(s) - length + 1): j = i + length - 1; if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2; else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]); return dp[0][-1]","Finds the length of the longest palindromic subsequence in a string.

This function returns the length of the longest palindromic subsequence in the input string s. It uses dynamic programming to compute the longest subsequence.",def test_longest_palindromic_subsequence(): assert longest_palindromic_subsequence("bbbab") == 4 assert longest_palindromic_subsequence("cbbd") == 2
"def integer_to_roman(num): val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]; syb = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]; roman = """"; for i in range(len(val)): while num >= val[i]: roman += syb[i]; num -= val[i]; return roman","Converts an integer to a Roman numeral.

This function returns the Roman numeral representation of the input integer num. It uses predefined values and symbols to construct the Roman numeral.",def test_integer_to_roman(): assert integer_to_roman(3) == "III" assert integer_to_roman(1994) == "MCMXCIV"
"def roman_to_integer(s): roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}; total = 0; for i in range(len(s) - 1): if roman[s[i]] < roman[s[i + 1]]: total -= roman[s[i]]; else: total += roman[s[i]]; return total + roman[s[-1]]","Converts a Roman numeral to an integer.

This function returns the integer representation of the input Roman numeral string s. It processes the string from left to right and subtracts values when a smaller numeral appears before a larger one.",def test_roman_to_integer(): assert roman_to_integer("III") == 3 assert roman_to_integer("MCMXCIV") == 1994
"def longest_substring_without_repeating_characters(s): char_map = {}; left, max_len = 0, 0; for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1); char_map[s[right]] = right; max_len = max(max_len, right - left + 1); return max_len","Finds the length of the longest substring without repeating characters.

This function returns the length of the longest substring without repeating characters in the input string s. It uses a sliding window approach and a hash map to track the last occurrence of each character.",def test_longest_substring_without_repeating_characters(): assert longest_substring_without_repeating_characters("abcabcbb") == 3 assert longest_substring_without_repeating_characters("bbbbb") == 1
"def unique_binary_search_trees(n): dp = [0] * (n + 1); dp[0], dp[1] = 1, 1; for i in range(2, n + 1): for j in range(i): dp[i] += dp[j] * dp[i - j - 1]; return dp[n]","Counts unique binary search trees that can be constructed with n distinct integers.

This function returns the number of unique binary search trees (BSTs) that can be constructed using n distinct integers. It uses dynamic programming to compute the number of unique BSTs for each number of nodes.",def test_unique_binary_search_trees(): assert unique_binary_search_trees(3) == 5 assert unique_binary_search_trees(1) == 1
"def bitwise_and_of_range(m, n): shift = 0; while m != n: m >>= 1; n >>= 1; shift += 1; return m << shift","Finds the bitwise AND of all numbers in a given range.

This function returns the bitwise AND of all numbers between m and n (inclusive). It shifts both numbers right until they are equal, then shifts the result back to the left by the number of shifts performed.","def test_bitwise_and_of_range(): assert bitwise_and_of_range(5, 7) == 4 assert bitwise_and_of_range(0, 1) == 0"
"def detect_cycle(head): slow, fast = head, head; while fast and fast.next: slow = slow.next; fast = fast.next.next; if slow == fast: slow = head; while slow != fast: slow = slow.next; fast = fast.next; return slow return None","Detects if a cycle exists in a linked list.

This function detects if a cycle exists in a singly linked list. If a cycle exists, it returns the node where the cycle begins; otherwise, it returns None. It uses Floyd? cycle detection algorithm (Tortoise and Hare).","def test_detect_cycle(): head = ListNode(3, ListNode(2, ListNode(0, ListNode(-4)))); head.next.next.next.next = head.next; assert detect_cycle(head) == head.next"
"def flatten_list(nested_list): result = []; def flatten(sublist): for item in sublist: if isinstance(item, list): flatten(item); else: result.append(item); flatten(nested_list); return result","Flattens a nested list.

This function takes a nested list and returns a flattened version of it, where all nested lists are recursively unpacked into a single list.","def test_flatten_list(): assert flatten_list([1, [2, [3, 4], 5], 6]) == [1, 2, 3, 4, 5, 6]"
def longest_common_prefix(strs): if not strs: return ""; prefix = strs[0]; for s in strs[1:]: while not s.startswith(prefix): prefix = prefix[:-1]; if not prefix: return ""; return prefix,"Finds the longest common prefix among a list of strings.

This function returns the longest common prefix among the input list strs. If there is no common prefix, it returns an empty string.","def test_longest_common_prefix(): assert longest_common_prefix([""flower"",""flow"",""flight""]) == ""fl"" assert longest_common_prefix([""dog"",""racecar"",""car""]) == """""
def is_power_of_two(n): return n > 0 and (n & (n - 1)) == 0,"Checks if a number is a power of two.

This function returns True if the input integer n is a power of two; otherwise, it returns False. It uses bit manipulation to check the condition.",def test_is_power_of_two(): assert is_power_of_two(16) assert not is_power_of_two(18)
"def move_zeroes(nums): zero_pos = 0; for i in range(len(nums)): if nums[i] != 0: nums[i], nums[zero_pos] = nums[zero_pos], nums[i]; zero_pos += 1","Moves all zeros to the end of the array.

This function moves all the 0s in the input list nums to the end, while maintaining the relative order of the non-zero elements. It performs the operation in-place.","def test_move_zeroes(): nums = [0, 1, 0, 3, 12]; move_zeroes(nums); assert nums == [1, 3, 12, 0, 0]"
def is_palindrome(s): s = ''.join(c.lower() for c in s if c.isalnum()); return s == s[::-1],"Checks if a string is a palindrome.

This function checks whether the input string s is a palindrome, considering only alphanumeric characters and ignoring case. It returns True if the string is a palindrome and False otherwise.","def test_is_palindrome(): assert is_palindrome(""A man, a plan, a canal: Panama"") assert not is_palindrome(""race a car"")"
"def valid_anagram(s, t): return sorted(s) == sorted(t)","Checks if two strings are anagrams of each other.

This function returns True if the input strings s and t are anagrams of each other (i.e., they contain the same characters in a different order), and False otherwise.","def test_valid_anagram(): assert valid_anagram(""anagram"", ""nagaram"") assert not valid_anagram(""rat"", ""car"")"
"def climb_stairs(n): if n == 1: return 1; first, second = 1, 2; for i in range(3, n + 1): first, second = second, first + second; return second","Computes the number of ways to climb stairs.

This function returns the number of distinct ways to climb a staircase with n steps, where you can either take 1 or 2 steps at a time. It uses dynamic programming to compute the result efficiently.",def test_climb_stairs(): assert climb_stairs(2) == 2 assert climb_stairs(3) == 3
"def invert_tree(root): if not root: return None; root.left, root.right = invert_tree(root.right), invert_tree(root.left); return root","Inverts a binary tree.

This function inverts the input binary tree, swapping the left and right children of every node, and returns the root of the inverted tree. It uses recursion to traverse and invert the tree.","def test_invert_tree(): root = TreeNode(4, TreeNode(2, TreeNode(1), TreeNode(3)), TreeNode(7, TreeNode(6), TreeNode(9))); inverted_root = invert_tree(root); assert binary_tree_to_list(inverted_root) == [4, 7, 2, 9, 6, 3, 1]"
"def valid_parentheses(s): stack = []; mapping = {"")"": ""("", ""}"": ""{"", ""]"": ""[""}; for char in s: if char in mapping: top_element = stack.pop() if stack else '#'; if mapping[char] != top_element: return False; else: stack.append(char); return not stack",Validates if parentheses in a string are valid.,def test_valid_parentheses(): assert valid_parentheses("()") assert valid_parentheses("()[]{}") assert not valid_parentheses("(]")
def subsets(nums): result = [[]]; for num in nums: result += [item + [num] for item in result]; return result,"Generates all subsets of a list.

This function returns a list of all possible subsets (the power set) of the input list nums. It uses an iterative approach to generate subsets by adding each element to existing subsets.","def test_subsets(): assert subsets([1, 2, 3]) == [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]"
"def generate_pascals_triangle(num_rows): result = [[1]]; for i in range(1, num_rows): row = [1]; for j in range(1, i): row.append(result[i-1][j-1] + result[i-1][j]); row.append(1); result.append(row); return result","Generates Pascal's triangle with a given number of rows.

This function returns the first num_rows rows of Pascal's triangle. It builds each row by summing the appropriate elements from the previous row.","def test_generate_pascals_triangle(): assert generate_pascals_triangle(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"
"def search_in_rotated_sorted_array(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1; else: left = mid + 1; else: if nums[mid] < target <= nums[right]: left = mid + 1; else: right = mid - 1; return -1","Searches for a target in a rotated sorted array.

This function returns the index of the target in the rotated sorted array nums, or -1 if the target is not found. It uses a modified binary search to account for the rotation.","def test_search_in_rotated_sorted_array(): assert search_in_rotated_sorted_array([4, 5, 6, 7, 0, 1, 2], 0) == 4 assert search_in_rotated_sorted_array([4, 5, 6, 7, 0, 1, 2], 3) == -1"
"def longest_palindrome(s): def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1; right += 1; return right - left - 1; start, end = 0, 0; for i in range(len(s)): len1 = expand_around_center(i, i); len2 = expand_around_center(i, i + 1); max_len = max(len1, len2); if max_len > end - start: start = i - (max_len - 1) // 2; end = i + max_len // 2; return s[start:end + 1]","Finds the longest palindromic substring in a string.

This function returns the longest palindromic substring in the input string s. It uses a two-pointer technique to expand around potential centers of palindromes.","def test_longest_palindrome(): assert longest_palindrome(""babad"") in [""bab"", ""aba""] assert longest_palindrome(""cbbd"") == ""bb"""
"def three_sum(nums): nums.sort(); result = []; for i in range(len(nums)): if i > 0 and nums[i] == nums[i - 1]: continue; left, right = i + 1, len(nums) - 1; while left < right: total = nums[i] + nums[left] + nums[right]; if total == 0: result.append([nums[i], nums[left], nums[right]]); left += 1; right -= 1; while left < right and nums[left] == nums[left - 1]: left += 1; while left < right and nums[right] == nums[right + 1]: right -= 1; elif total < 0: left += 1; else: right -= 1; return result","Finds all unique triplets that sum to zero.

This function returns all unique triplets in the input list nums such that the sum of the three numbers is zero. It uses a sorted array and two-pointer technique to find the triplets.","def test_three_sum(): assert three_sum([-1, 0, 1, 2, -1, -4]) == [[-1, -1, 2], [-1, 0, 1]] assert three_sum([0, 1, 1]) == []"
"def next_greater_element(nums1, nums2): stack, mapping = [], {}; for num in nums2: while stack and stack[-1] < num: mapping[stack.pop()] = num; stack.append(num); return [mapping.get(num, -1) for num in nums1]","Finds the next greater element for each element in nums1 from nums2.

This function returns a list of the next greater element for each element in nums1 as found in nums2. If no greater element exists, it returns -1. It uses a stack to track the next greater elements efficiently.","def test_next_greater_element(): assert next_greater_element([4, 1, 2], [1, 3, 4, 2]) == [-1, 3, -1] assert next_greater_element([2, 4], [1, 2, 3, 4]) == [3, -1]"
"def merge_sorted_arrays(nums1, nums2): i = j = 0; result = []; while i < len(nums1) and j < len(nums2): if nums1[i] < nums2[j]: result.append(nums1[i]); i += 1; else: result.append(nums2[j]); j += 1; result.extend(nums1[i:]); result.extend(nums2[j:]); return result","Merges two sorted arrays into one sorted array.

This function merges two sorted arrays nums1 and nums2 into a single sorted array. It compares elements from both arrays and adds the smaller one to the result array.","def test_merge_sorted_arrays(): assert merge_sorted_arrays([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]"
"def reverse_string(s): left, right = 0, len(s) - 1; s = list(s); while left < right: s[left], s[right] = s[right], s[left]; left += 1; right -= 1; return ''.join(s)","Reverses a string.

This function reverses the input string s and returns the reversed string. It uses a two-pointer approach to swap characters from both ends of the string.",def test_reverse_string(): assert reverse_string("hello") == "olleh" assert reverse_string("Hannah") == "hannaH"
"def max_depth_binary_tree(root): if not root: return 0; return 1 + max(max_depth_binary_tree(root.left), max_depth_binary_tree(root.right))","Computes the maximum depth of a binary tree.

This function returns the maximum depth of the binary tree rooted at root. It uses recursion to traverse the tree and compute the maximum depth from the root to any leaf.","def test_max_depth_binary_tree(): root = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert max_depth_binary_tree(root) == 3"
"def is_ugly(n): if n <= 0: return False; for factor in [2, 3, 5]: while n % factor == 0: n //= factor; return n == 1","Determines if a number is an ""ugly"" number.

This function returns True if the input integer n is an ""ugly"" number (i.e., its prime factors are limited to 2, 3, and 5) and False otherwise.",def test_is_ugly(): assert is_ugly(6) assert not is_ugly(14)
"def count_primes(n): sieve = [True] * n; sieve[:2] = [False, False]; for i in range(2, int(n ** 0.5) + 1): if sieve[i]: for j in range(i * i, n, i): sieve[j] = False; return sum(sieve)","Counts the number of prime numbers less than n.

This function returns the number of prime numbers that are less than the input integer n. It uses the Sieve of Eratosthenes algorithm to find all primes.",def test_count_primes(): assert count_primes(10) == 4 assert count_primes(100) == 25
"def rob_houses(nums): if not nums: return 0; if len(nums) == 1: return nums[0]; prev1, prev2 = 0, 0; for num in nums: temp = prev1; prev1 = max(prev2 + num, prev1); prev2 = temp; return prev1","Finds the maximum amount of money that can be robbed from a series of houses.

This function returns the maximum sum of money that can be robbed from the input list nums, where adjacent houses cannot be robbed on the same night. It uses dynamic programming to optimize the solution.","def test_rob_houses(): assert rob_houses([1, 2, 3, 1]) == 4 assert rob_houses([2, 7, 9, 3, 1]) == 12"
"def find_disappeared_numbers(nums): return list(set(range(1, len(nums) + 1)) - set(nums))","Finds the numbers that are missing from a list.

This function returns a list of numbers that are missing from the input list nums, which contains numbers between 1 and n (inclusive) with some numbers potentially missing.","def test_find_disappeared_numbers(): assert find_disappeared_numbers([4, 3, 2, 7, 8, 2, 3, 1]) == [5, 6]"
"def combination_sum_ii(candidates, target): result = []; candidates.sort(); def backtrack(start, target, path): if target == 0: result.append(path); return; for i in range(start, len(candidates)): if i > start and candidates[i] == candidates[i - 1]: continue; if candidates[i] > target: break; backtrack(i + 1, target - candidates[i], path + [candidates[i]]); backtrack(0, target, []); return result","Finds all unique combinations of numbers that sum to a target, with each number used at most once.

This function returns a list of all unique combinations of numbers from candidates that sum to target. Each number in candidates may only be used once. It uses backtracking to explore all combinations.","def test_combination_sum_ii(): assert combination_sum_ii([10, 1, 2, 7, 6, 1, 5], 8) == [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]"
"def number_of_boomerangs(points): result = 0; for i in points: dist_count = {}; for j in points: dist = (i[0] - j[0]) ** 2 + (i[1] - j[1]) ** 2; dist_count[dist] = dist_count.get(dist, 0) + 1; for count in dist_count.values(): result += count * (count - 1); return result","Counts the number of boomerangs among a set of points.

This function returns the number of boomerangs in the input list of points. A boomerang is defined as a tuple of points (i, j, k) where the distance between i and j equals the distance between i and k.","def test_number_of_boomerangs(): assert number_of_boomerangs([[0, 0], [1, 0], [2, 0]]) == 2 assert number_of_boomerangs([[1, 1], [2, 2], [3, 3]]) == 0"
"def can_jump(nums): max_reach = 0; for i, num in enumerate(nums): if i > max_reach: return False; max_reach = max(max_reach, i + num); return True","Determines if it's possible to jump to the last index in an array.

This function returns True if it is possible to reach the last index in the input list nums, where each element represents the maximum number of steps you can jump forward from that position.","def test_can_jump(): assert can_jump([2, 3, 1, 1, 4]) assert not can_jump([3, 2, 1, 0, 4])"
"def coin_change(coins, amount): dp = [float('inf')] * (amount + 1); dp[0] = 0; for coin in coins: for i in range(coin, amount + 1): dp[i] = min(dp[i], dp[i - coin] + 1); return dp[amount] if dp[amount] != float('inf') else -1","Finds the minimum number of coins to make a given amount.

This function returns the fewest number of coins needed to make up the given amount using the coins in coins. If it is not possible to make the amount, it returns -1.","def test_coin_change(): assert coin_change([1, 2, 5], 11) == 3 assert coin_change([2], 3) == -1"
"def longest_palindromic_substring(s): def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1; right += 1; return right - left - 1; start, end = 0, 0; for i in range(len(s)): len1 = expand_around_center(i, i); len2 = expand_around_center(i, i + 1); max_len = max(len1, len2); if max_len > end - start: start = i - (max_len - 1) // 2; end = i + max_len // 2; return s[start:end + 1]","Finds the longest palindromic substring in a string.

This function returns the longest palindromic substring in the input string s. It uses the expand-around-center technique to check for palindromes starting from each character.","def test_longest_palindromic_substring(): assert longest_palindromic_substring(""babad"") in [""bab"", ""aba""] assert longest_palindromic_substring(""cbbd"") == ""bb"""
"def max_subarray_sum(nums): max_current = max_global = nums[0]; for num in nums[1:]: max_current = max(num, max_current + num); max_global = max(max_global, max_current); return max_global","Finds the maximum sum of a contiguous subarray.

This function returns the maximum sum of any contiguous subarray in the input list nums. It uses Kadane's algorithm to track the maximum current sum and the global maximum sum.","def test_max_subarray_sum(): assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6"
def rotate_image(matrix): matrix[:] = [list(row) for row in zip(*matrix[::-1])],"Rotates a 2D matrix 90 degrees clockwise.

This function rotates the input 2D matrix in place by 90 degrees clockwise. It first transposes the matrix and then reverses each row.","def test_rotate_image(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_image(matrix); assert matrix == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"
"def trap_rain_water(height): left, right = 0, len(height) - 1; left_max, right_max = 0, 0; water = 0; while left < right: if height[left] < height[right]: left_max = max(left_max, height[left]); water += left_max - height[left]; left += 1; else: right_max = max(right_max, height[right]); water += right_max - height[right]; right -= 1; return water","Computes how much water can be trapped between bars.

This function returns the amount of water that can be trapped after raining, given an input list height representing the elevation of bars. It uses a two-pointer technique to calculate trapped water efficiently.","def test_trap_rain_water(): assert trap_rain_water([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]) == 6"
"def max_area(height): left, right = 0, len(height) - 1; max_area = 0; while left < right: max_area = max(max_area, min(height[left], height[right]) * (right - left)); if height[left] < height[right]: left += 1; else: right -= 1; return max_area","Finds the maximum area of water that can be contained.

This function returns the maximum area of water that can be contained between two vertical lines in the input list height. It uses a two-pointer approach to find the optimal solution.","def test_max_area(): assert max_area([1, 8, 6, 2, 5, 4, 8, 3, 7]) == 49"
"def decode_ways(s): if not s or s[0] == '0': return 0; n = len(s); dp = [0] * (n + 1); dp[0], dp[1] = 1, 1; for i in range(2, n + 1): if 1 <= int(s[i-1:i]) <= 9: dp[i] += dp[i-1]; if 10 <= int(s[i-2:i]) <= 26: dp[i] += dp[i-2]; return dp[n]","Decodes a string of digits into the number of valid letter combinations.

This function returns the number of ways to decode the input string s, where 'A' = 1, 'B' = 2, ..., 'Z' = 26. It uses dynamic programming to calculate the number of valid decodings.",def test_decode_ways(): assert decode_ways("12") == 2 assert decode_ways("226") == 3
"def length_of_lis(nums): dp = [1] * len(nums); for i in range(len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1); return max(dp)","Finds the length of the longest increasing subsequence.

This function returns the length of the longest increasing subsequence in the input list nums. It uses dynamic programming to build a table of the longest subsequences at each index.","def test_length_of_lis(): assert length_of_lis([10, 9, 2, 5, 3, 7, 101, 18]) == 4"
"def num_squares(n): dp = [float('inf')] * (n + 1); dp[0] = 0; for i in range(1, n + 1): for j in range(1, int(i ** 0.5) + 1): dp[i] = min(dp[i], dp[i - j * j] + 1); return dp[n]","Finds the least number of perfect squares that sum to n.

This function returns the least number of perfect squares (1, 4, 9, ...) whose sum is equal to the input n. It uses dynamic programming to minimize the number of squares needed.",def test_num_squares(): assert num_squares(12) == 3 assert num_squares(13) == 2
"def jump_game_ii(nums): n = len(nums); jumps, current_end, farthest = 0, 0, 0; for i in range(n - 1): farthest = max(farthest, i + nums[i]); if i == current_end: jumps += 1; current_end = farthest; return jumps","Finds the minimum number of jumps to reach the end of the array.

This function returns the minimum number of jumps required to reach the last index in the input list nums, where each element represents the maximum jump length at that position.","def test_jump_game_ii(): assert jump_game_ii([2, 3, 1, 1, 4]) == 2 assert jump_game_ii([2, 3, 0, 1, 4]) == 2"
"def integer_break(n): dp = [0] * (n + 1); for i in range(2, n + 1): for j in range(1, i): dp[i] = max(dp[i], j * (i - j), j * dp[i - j]); return dp[n]","Breaks an integer into the sum of at least two positive integers and maximizes the product.

This function returns the maximum product you can obtain by breaking the input integer n into the sum of at least two positive integers. It uses dynamic programming to maximize the product.",def test_integer_break(): assert integer_break(10) == 36 assert integer_break(8) == 18
"def isomorphic_strings(s, t): mapping_s, mapping_t = {}, {}; for c1, c2 in zip(s, t): if mapping_s.get(c1, c2) != c2 or mapping_t.get(c2, c1) != c1: return False; mapping_s[c1], mapping_t[c2] = c2, c1; return True","Checks if two strings are isomorphic.

This function returns True if the input strings s and t are isomorphic, meaning each character in s can be replaced to get t, and False otherwise. It uses two dictionaries to track the mappings.","def test_isomorphic_strings(): assert isomorphic_strings(""egg"", ""add"") assert not isomorphic_strings(""foo"", ""bar"")"
"def shortest_unsorted_subarray(nums): sorted_nums = sorted(nums); left, right = 0, len(nums) - 1; while left < len(nums) and nums[left] == sorted_nums[left]: left += 1; while right > left and nums[right] == sorted_nums[right]: right -= 1; return right - left + 1 if left < right else 0","Finds the length of the shortest subarray that, if sorted, makes the whole array sorted.

This function returns the length of the shortest subarray in nums that, when sorted, makes the entire array sorted. It uses sorting and two-pointer techniques to find the bounds of the unsorted portion.","def test_shortest_unsorted_subarray(): assert shortest_unsorted_subarray([2, 6, 4, 8, 10, 9, 15]) == 5 assert shortest_unsorted_subarray([1, 2, 3, 4]) == 0"
"def remove_element(nums, val): i = 0; for j in range(len(nums)): if nums[j] != val: nums[i] = nums[j]; i += 1; return i","Removes all instances of a value in place and returns the new length.

This function removes all instances of val in the input list nums in place and returns the new length of the list. It uses two pointers to efficiently shift elements.","def test_remove_element(): nums = [3, 2, 2, 3]; length = remove_element(nums, 3); assert nums[:length] == [2, 2]"
"def three_sum_closest(nums, target): nums.sort(); closest = float('inf'); for i in range(len(nums) - 2): left, right = i + 1, len(nums) - 1; while left < right: total = nums[i] + nums[left] + nums[right]; if abs(total - target) < abs(closest - target): closest = total; if total < target: left += 1; elif total > target: right -= 1; else: return target; return closest","Finds the sum of three integers closest to the target.

This function returns the sum of three integers in the input list nums that is closest to the given target. It uses sorting and a two-pointer technique to minimize the difference between the sum and the target.","def test_three_sum_closest(): assert three_sum_closest([-1, 2, 1, -4], 1) == 2"
"def sort_colors(nums): low, high, mid = 0, len(nums) - 1, 0; while mid <= high: if nums[mid] == 0: nums[low], nums[mid] = nums[mid], nums[low]; low += 1; mid += 1; elif nums[mid] == 2: nums[high], nums[mid] = nums[mid], nums[high]; high -= 1; else: mid += 1","Sorts an array of colors represented as 0s, 1s, and 2s.

This function sorts the input list nums consisting of 0s, 1s, and 2s, which represent different colors. It uses the Dutch National Flag algorithm to sort the colors in place.","def test_sort_colors(): nums = [2, 0, 2, 1, 1, 0]; sort_colors(nums); assert nums == [0, 0, 1, 1, 2, 2]"
def spiral_order(matrix): result = []; while matrix: result += matrix.pop(0); if matrix and matrix[0]: for row in matrix: result.append(row.pop()); if matrix: result += matrix.pop()[::-1]; if matrix and matrix[0]: for row in matrix[::-1]: result.append(row.pop(0)); return result,"Returns elements of a matrix in spiral order.

This function returns the elements of the input 2D matrix in spiral order, starting from the top-left corner and moving inward. It repeatedly removes layers of the matrix to form the spiral.","def test_spiral_order(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; assert spiral_order(matrix) == [1, 2, 3, 6, 9, 8, 7, 4, 5]"
def length_of_last_word(s): return len(s.strip().split()[-1]),"Finds the length of the last word in a string.

This function returns the length of the last word in the input string s, ignoring trailing spaces. It splits the string into words and calculates the length of the last word.",def test_length_of_last_word(): assert length_of_last_word("Hello World") == 5 assert length_of_last_word(" ") == 0
"def max_profit_ii(prices): profit = 0; for i in range(1, len(prices)): if prices[i] > prices[i - 1]: profit += prices[i] - prices[i - 1]; return profit","Finds the maximum profit from buying and selling stocks multiple times.

This function returns the maximum profit that can be obtained by buying and selling stocks multiple times, given a list prices where each element represents the stock price on a given day.","def test_max_profit_ii(): assert max_profit_ii([7, 1, 5, 3, 6, 4]) == 7"
"def next_permutation(nums): i = len(nums) - 2; while i >= 0 and nums[i] >= nums[i + 1]: i -= 1; if i >= 0: j = len(nums) - 1; while nums[j] <= nums[i]: j -= 1; nums[i], nums[j] = nums[j], nums[i]; nums[i + 1:] = reversed(nums[i + 1:])","Modifies a list to its next lexicographical permutation.

This function modifies the input list nums in place to produce the next lexicographical permutation. If no such permutation exists, the list is rearranged to its smallest order.","def test_next_permutation(): nums = [1, 2, 3]; next_permutation(nums); assert nums == [1, 3, 2]"
"def word_search(board, word): def dfs(i, j, k): if k == len(word): return True; if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]: return False; temp, board[i][j] = board[i][j], '#'; result = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1); board[i][j] = temp; return result; for i in range(len(board)): for j in range(len(board[0])): if dfs(i, j, 0): return True; return False","Checks if a word exists in a 2D grid of letters.

This function returns True if the word word can be found in the 2D grid board, where the word must be constructed from letters of sequentially adjacent cells, and False otherwise.","def test_word_search(): board = [[""A"",""B"",""C"",""E""], [""S"",""F"",""C"",""S""], [""A"",""D"",""E"",""E""]]; assert word_search(board, ""ABCCED"") assert not word_search(board, ""ABCB"")"
"def valid_palindrome(s): i, j = 0, len(s) - 1; while i < j: if s[i] != s[j]: return s[i:j] == s[i:j][::-1] or s[i+1:j+1] == s[i+1:j+1][::-1]; i += 1; j -= 1; return True","Determines if a string can become a palindrome by deleting at most one character.

This function returns True if the input string s can be transformed into a palindrome by deleting at most one character, and False otherwise. It uses a two-pointer approach to find the mismatch and checks the remaining substring.",def test_valid_palindrome(): assert valid_palindrome("abca") assert not valid_palindrome("abc")
"def check_subarray_sum(nums, k): prefix_sum = 0; seen = {0: -1}; for i, num in enumerate(nums): prefix_sum = (prefix_sum + num) % k; if prefix_sum in seen: if i - seen[prefix_sum] > 1: return True; else: seen[prefix_sum] = i; return False","Checks if a continuous subarray sums to a multiple of k.

This function returns True if the input list nums contains a continuous subarray that sums to a multiple of k, and False otherwise. It uses a prefix sum and modulus to check for subarrays.","def test_check_subarray_sum(): assert check_subarray_sum([23, 2, 4, 6, 7], 6) assert not check_subarray_sum([23, 2, 6, 4, 7], 13)"
"def flood_fill(image, sr, sc, new_color): rows, cols = len(image), len(image[0]); color = image[sr][sc]; if color == new_color: return image; def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or image[r][c] != color: return; image[r][c] = new_color; dfs(r+1, c); dfs(r-1, c); dfs(r, c+1); dfs(r, c-1); dfs(sr, sc); return image","Fills a connected region of an image with a new color using DFS.

This function modifies the input 2D list image by replacing the color at position (sr, sc) and all connected cells with the same color using depth-first search (DFS).","def test_flood_fill(): image = [[1, 1, 1], [1, 1, 0], [1, 0, 1]]; assert flood_fill(image, 1, 1, 2) == [[2, 2, 2], [2, 2, 0], [2, 0, 1]]"
"def find_words(board, words): def dfs(r, c, node, prefix): if ""*"" in node: result.add(prefix); for (dr, dc), char in [((1, 0), board[r+1][c]), ((0, 1), board[r][c+1]), ((-1, 0), board[r-1][c]), ((0, -1), board[r][c-1])]: if 0 <= r+dr < len(board) and 0 <= c+dc < len(board[0]) and board[r+dr][c+dc] in node: dfs(r+dr, c+dc, node[board[r+dr][c+dc]], prefix+char); result, trie = set(), {}; for word in words: node = trie; for char in word: node = node.setdefault(char, {}); node[""*""] = True; for r in range(len(board)): for c in range(len(board[0])): if board[r][c] in trie: dfs(r, c, trie[board[r][c]], board[r][c]); return list(result)","Finds all valid words in a grid of letters using a trie.

This function returns a list of all words from the input list words that can be found in the 2D grid board. It uses a trie (prefix tree) and depth-first search (DFS) to locate the words.","def test_find_words(): board = [[""o"",""a"",""a"",""n""],[""e"",""t"",""a"",""e""],[""i"",""h"",""k"",""r""],[""i"",""f"",""l"",""v""]]; words = [""oath"",""pea"",""eat"",""rain""]; assert set(find_words(board, words)) == {""oath"", ""eat""}"
"def can_place_flowers(flowerbed, n): count = 0; for i in range(len(flowerbed)): if flowerbed[i] == 0 and (i == 0 or flowerbed[i - 1] == 0) and (i == len(flowerbed) - 1 or flowerbed[i + 1] == 0): flowerbed[i] = 1; count += 1; if count >= n: return True; return count >= n","Determines if n new flowers can be planted in a flowerbed without violating the planting rule.

This function returns True if n new flowers can be planted in the input list flowerbed, where no two flowers can be planted in adjacent plots, and False otherwise.","def test_can_place_flowers(): assert can_place_flowers([1, 0, 0, 0, 1], 1) assert not can_place_flowers([1, 0, 0, 0, 1], 2)"
"def find_peak(nums): left, right = 0, len(nums) - 1; while left < right: mid = (left + right) // 2; if nums[mid] < nums[mid + 1]: left = mid + 1; else: right = mid; return left","Finds a peak element in an array.

This function returns the index of a peak element in the input list nums, where a peak element is one that is greater than its neighbors. It uses binary search to find the peak efficiently.","def test_find_peak(): assert find_peak([1, 2, 3, 1]) == 2 assert find_peak([1, 2, 1, 3, 5, 6, 4]) in [1, 5]"
"def remove_duplicates_sorted(nums): if not nums: return 0; i = 0; for j in range(1, len(nums)): if nums[j] != nums[i]: i += 1; nums[i] = nums[j]; return i + 1","Removes duplicates from a sorted array in place.

This function removes duplicates from the input sorted list nums in place, modifying the array such that each element appears only once. It returns the new length of the array without duplicates.","def test_remove_duplicates_sorted(): nums = [1, 1, 2]; assert remove_duplicates_sorted(nums) == 2 assert nums[:2] == [1, 2]"
"def valid_sudoku(board): def is_valid_unit(unit): unit = [x for x in unit if x != '.']; return len(unit) == len(set(unit)); for row in board: if not is_valid_unit(row): return False; for col in zip(*board): if not is_valid_unit(col): return False; for i in range(0, 9, 3): for j in range(0, 9, 3): if not is_valid_unit([board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]): return False; return True","Validates if a Sudoku board is valid.

This function returns True if the input 9x9 Sudoku board is valid according to Sudoku rules, and False otherwise. It checks rows, columns, and 3x3 grids.","def test_valid_sudoku(): board = [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""], [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""], [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""], [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""], [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""], [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""], [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""], [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""], [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]; assert valid_sudoku(board)"
"def minimum_in_rotated_array(nums): left, right = 0, len(nums) - 1; while left < right: mid = (left + right) // 2; if nums[mid] > nums[right]: left = mid + 1; else: right = mid; return nums[left]","Finds the minimum element in a rotated sorted array.

This function returns the minimum element in the input rotated sorted array nums. It uses binary search to find the smallest element by comparing the middle element with the rightmost element.","def test_minimum_in_rotated_array(): assert minimum_in_rotated_array([3, 4, 5, 1, 2]) == 1 assert minimum_in_rotated_array([4, 5, 6, 7, 0, 1, 2]) == 0"
"def merge_k_sorted_lists(lists): import heapq; heap = []; for i, l in enumerate(lists): if l: heapq.heappush(heap, (l.val, i, l)); result = ListNode(None); current = result; while heap: val, i, node = heapq.heappop(heap); current.next = node; current = current.next; if node.next: heapq.heappush(heap, (node.next.val, i, node.next)); return result.next","Merges k sorted linked lists into one sorted list.

This function merges k sorted linked lists into a single sorted linked list. It uses a min-heap to efficiently find the smallest node among all lists at each step.","def test_merge_k_sorted_lists(): lists = [ListNode(1, ListNode(4, ListNode(5))), ListNode(1, ListNode(3, ListNode(4))), ListNode(2, ListNode(6))]; assert linked_list_to_list(merge_k_sorted_lists(lists)) == [1, 1, 2, 3, 4, 4, 5, 6]"
"def find_median_sorted_arrays(nums1, nums2): A, B = sorted((nums1, nums2), key=len); m, n = len(A), len(B); imin, imax, half_len = 0, m, (m + n + 1) // 2; while imin <= imax: i = (imin + imax) // 2; j = half_len - i; if i < m and B[j - 1] > A[i]: imin = i + 1; elif i > 0 and A[i - 1] > B[j]: imax = i - 1; else: if i == 0: max_of_left = B[j - 1]; elif j == 0: max_of_left = A[i - 1]; else: max_of_left = max(A[i - 1], B[j - 1]); if (m + n) % 2 == 1: return max_of_left; if i == m: min_of_right = B[j]; elif j == n: min_of_right = A[i]; else: min_of_right = min(A[i], B[j]); return (max_of_left + min_of_right) / 2.0","Finds the median of two sorted arrays.

This function returns the median of two sorted arrays nums1 and nums2. It uses a binary search to partition the two arrays such that the left half contains the smaller elements and the right half contains the larger elements.","def test_find_median_sorted_arrays(): assert find_median_sorted_arrays([1, 3], [2]) == 2.0 assert find_median_sorted_arrays([1, 2], [3, 4]) == 2.5"
"def coin_change_ways(coins, amount): dp = [0] * (amount + 1); dp[0] = 1; for coin in coins: for i in range(coin, amount + 1): dp[i] += dp[i - coin]; return dp[amount]","Counts the number of ways to make a given amount with coins.

This function returns the number of ways to make up the given amount using the coins in coins. It uses dynamic programming to calculate the number of combinations to form the amount.","def test_coin_change_ways(): assert coin_change_ways([1, 2, 5], 5) == 4 assert coin_change_ways([2], 3) == 0"
"def sliding_window_max(nums, k): from collections import deque; result, dq = [], deque(); for i, num in enumerate(nums): if dq and dq[0] == i - k: dq.popleft(); while dq and nums[dq[-1]] < num: dq.pop(); dq.append(i); if i >= k - 1: result.append(nums[dq[0]]); return result","Finds the maximum value in each sliding window of size k.

This function returns a list of the maximum values in each sliding window of size k as it slides over the input list nums. It uses a deque to keep track of the index of the maximum value in the current window.","def test_sliding_window_max(): assert sliding_window_max([1, 3, -1, -3, 5, 3, 6, 7], 3) == [3, 3, 5, 5, 6, 7]"
"def combination_sum(candidates, target): result = []; def backtrack(start, target, path): if target == 0: result.append(path); return; for i in range(start, len(candidates)): if candidates[i] > target: break; backtrack(i, target - candidates[i], path + [candidates[i]]); candidates.sort(); backtrack(0, target, []); return result","Finds all combinations of numbers that sum to a target.

This function returns a list of all combinations of numbers from candidates that sum to target. Each number can be used an unlimited number of times. It uses backtracking to explore possible combinations.","def test_combination_sum(): assert combination_sum([2, 3, 6, 7], 7) == [[2, 2, 3], [7]] assert combination_sum([2, 3, 5], 8) == [[2, 2, 2, 2], [2, 3, 3], [3, 5]]"
"def max_path_sum_binary_tree(root): def helper(node): nonlocal max_sum; if not node: return 0; left_gain = max(helper(node.left), 0); right_gain = max(helper(node.right), 0); max_sum = max(max_sum, node.val + left_gain + right_gain); return node.val + max(left_gain, right_gain); max_sum = float('-inf'); helper(root); return max_sum","Finds the maximum path sum in a binary tree.

This function returns the maximum path sum in the binary tree rooted at root. A path can be any sequence of nodes connected by edges, starting and ending at any node. The function uses recursion to calculate the maximum gain from each node.","def test_max_path_sum_binary_tree(): root = TreeNode(1, TreeNode(2), TreeNode(3)); assert max_path_sum_binary_tree(root) == 6"
"def h_index(citations): citations.sort(reverse=True); h = 0; for i, c in enumerate(citations): if c >= i + 1: h = i + 1; else: break; return h","Computes the h-index for a researcher based on their citations.

This function returns the h-index, which is the maximum number h such that the researcher has at least h papers with at least h citations each. It sorts the list of citations in descending order and finds the h-index.","def test_h_index(): assert h_index([3, 0, 6, 1, 5]) == 3 assert h_index([1, 3, 1]) == 1"
"def climbing_stairs(n): a, b = 1, 1; for _ in range(n): a, b = b, a + b; return a","Computes the number of ways to climb stairs.

This function returns the number of distinct ways to climb a staircase with n steps, where each time you can climb 1 or 2 steps. It uses dynamic programming to efficiently calculate the result.",def test_climbing_stairs(): assert climbing_stairs(2) == 2 assert climbing_stairs(3) == 3
def group_anagrams(strs): from collections import defaultdict; groups = defaultdict(list); for s in strs: key = ''.join(sorted(s)); groups[key].append(s); return list(groups.values()),"Groups anagrams from a list of strings.

This function returns a list of lists, where each sublist contains strings from the input strs that are anagrams of each other. It uses a hash map to group the strings by their sorted character sequence.","def test_group_anagrams(): assert group_anagrams([""eat"", ""tea"", ""tan"", ""ate"", ""nat"", ""bat""]) == [[""eat"", ""tea"", ""ate""], [""tan"", ""nat""], [""bat""]]"
"def permute_unique(nums): result = []; nums.sort(); def backtrack(path, used): if len(path) == len(nums): result.append(path[:]); return; for i in range(len(nums)): if used[i] or i > 0 and nums[i] == nums[i - 1] and not used[i - 1]: continue; used[i] = True; backtrack(path + [nums[i]], used); used[i] = False; backtrack([], [False] * len(nums)); return result","Finds all unique permutations of a list of numbers.

This function returns a list of all unique permutations of the input list nums. It uses backtracking to generate permutations and skips duplicates by sorting the list and tracking usage.","def test_permute_unique(): assert permute_unique([1, 1, 2]) == [[1, 1, 2], [1, 2, 1], [2, 1, 1]]"
"def unique_paths(m, n): dp = [[1] * n for _ in range(m)]; for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1]; return dp[m - 1][n - 1]","Finds the number of unique paths in a grid.

This function returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid, where you can only move right or down. It uses dynamic programming to calculate the number of paths.","def test_unique_paths(): assert unique_paths(3, 7) == 28 assert unique_paths(3, 2) == 3"
"def rotate_image_90(matrix): n = len(matrix); for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]; for row in matrix: row.reverse()","Rotates a 2D matrix 90 degrees clockwise.

This function modifies the input 2D matrix in place by rotating it 90 degrees clockwise. It first transposes the matrix and then reverses each row to achieve the rotation.","def test_rotate_image_90(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_image_90(matrix); assert matrix == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"
"def count_subarrays_with_sum(nums, k): count, current_sum = 0, 0; sum_dict = {0: 1}; for num in nums: current_sum += num; if current_sum - k in sum_dict: count += sum_dict[current_sum - k]; sum_dict[current_sum] = sum_dict.get(current_sum, 0) + 1; return count","Counts the number of subarrays that sum to k.

This function returns the number of contiguous subarrays in the input list nums that sum to k. It uses a hash map to track the cumulative sum and count the subarrays.","def test_count_subarrays_with_sum(): assert count_subarrays_with_sum([1, 1, 1], 2) == 2 assert count_subarrays_with_sum([1, 2, 3], 3) == 2"
"def longest_subarray_with_limit(nums, limit): from collections import deque; max_deque, min_deque = deque(), deque(); left, result = 0, 0; for right, num in enumerate(nums): while max_deque and nums[max_deque[-1]] <= num: max_deque.pop(); while min_deque and nums[min_deque[-1]] >= num: min_deque.pop(); max_deque.append(right); min_deque.append(right); while nums[max_deque[0]] - nums[min_deque[0]] > limit: left += 1; if max_deque[0] < left: max_deque.popleft(); if min_deque[0] < left: min_deque.popleft(); result = max(result, right - left + 1); return result","Finds the longest subarray with absolute difference within a limit.

This function returns the length of the longest contiguous subarray in the input list nums where the absolute difference between any two elements is less than or equal to limit. It uses two deques to track the maximum and minimum values.","def test_longest_subarray_with_limit(): assert longest_subarray_with_limit([8, 2, 4, 7], 4) == 2 assert longest_subarray_with_limit([10, 1, 2, 4, 7, 2], 5) == 4"
"def search_range(nums, target): def find_left(): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] < target: left = mid + 1; else: right = mid - 1; return left; def find_right(): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] <= target: left = mid + 1; else: right = mid - 1; return right; left, right = find_left(), find_right(); return [left, right] if left <= right else [-1, -1]","Finds the starting and ending position of a target in a sorted array.

This function returns the starting and ending position of the target in the input sorted array nums. It uses binary search to find the left and right boundaries of the target.","def test_search_range(): assert search_range([5, 7, 7, 8, 8, 10], 8) == [3, 4] assert search_range([5, 7, 7, 8, 8, 10], 6) == [-1, -1]"
"def find_missing_ranges(nums, lower, upper): result = []; prev = lower - 1; for i in range(len(nums) + 1): curr = nums[i] if i < len(nums) else upper + 1; if prev + 1 <= curr - 1: result.append(format_range(prev + 1, curr - 1)); prev = curr; return result def format_range(start, end): return str(start) if start == end else f""{start}->{end}""","Finds missing ranges in a list of numbers.

This function returns a list of ranges representing the numbers missing between lower and upper, given the sorted list nums. Each range is formatted as either a single number or a range.","def test_find_missing_ranges(): assert find_missing_ranges([0, 1, 3, 50, 75], 0, 99) == [""2"", ""4-49"", ""51-74"", ""76-99""]"
"def alien_order(words): from collections import defaultdict, deque; adj = defaultdict(set); in_degree = {c: 0 for word in words for c in word}; for i in range(len(words) - 1): word1, word2 = words[i], words[i + 1]; min_len = min(len(word1), len(word2)); if word1[:min_len] == word2[:min_len] and len(word1) > len(word2): return """"; for j in range(min_len): if word1[j] != word2[j]: if word2[j] not in adj[word1[j]]: adj[word1[j]].add(word2[j]); in_degree[word2[j]] += 1; break; zero_in_degree_queue = deque([c for c in in_degree if in_degree[c] == 0]); order = []; while zero_in_degree_queue: c = zero_in_degree_queue.popleft(); order.append(c); for neighbor in adj[c]: in_degree[neighbor] -= 1; if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor); return """".join(order) if len(order) == len(in_degree) else """"","Finds the order of characters in an alien dictionary.

This function returns the order of characters in the alien language based on a list of words. It builds a graph from the characters and performs topological sorting to derive the order.","def test_alien_order(): assert alien_order([""wrt"", ""wrf"", ""er"", ""ett"", ""rftt""]) == ""wertf"" assert alien_order([""z"", ""x"", ""z""]) == """""
"def find_itinerary(tickets): from collections import defaultdict; adj = defaultdict(list); for u, v in sorted(tickets, reverse=True): adj[u].append(v); result = []; def dfs(airport): while adj[airport]: dfs(adj[airport].pop()); result.append(airport); dfs(""JFK""); return result[::-1]","Finds the itinerary from a list of flight tickets.

This function returns the itinerary that uses all given tickets, where each ticket represents a flight from one airport to another. The itinerary must start at ""JFK"" and be lexicographically smallest.","def test_find_itinerary(): assert find_itinerary([[""MUC"", ""LHR""], [""JFK"", ""MUC""], [""SFO"", ""SJC""], [""LHR"", ""SFO""]]) == [""JFK"", ""MUC"", ""LHR"", ""SFO"", ""SJC""]"
"def palindrome_pairs(words): result = []; words_map = {word[::-1]: i for i, word in enumerate(words)}; for i, word in enumerate(words): for j in range(len(word) + 1): prefix, suffix = word[:j], word[j:]; if prefix in words_map and words_map[prefix] != i and suffix == suffix[::-1]: result.append([i, words_map[prefix]]); if j != len(word) and suffix in words_map and words_map[suffix] != i and prefix == prefix[::-1]: result.append([words_map[suffix], i]); return result","Finds all palindrome pairs in a list of words.

This function returns a list of pairs [i, j] where the concatenation of words[i] + words[j] forms a palindrome. It uses a hash map for efficient lookup of reversed words.","def test_palindrome_pairs(): assert palindrome_pairs([""bat"", ""tab"", ""cat""]) == [[0, 1], [1, 0]] assert palindrome_pairs([""abcd"", ""dcba"", ""lls"", ""s"", ""sssll""]) == [[0, 1], [1, 0], [3, 2], [2, 4]]"
"def kth_smallest_in_matrix(matrix, k): import heapq; n = len(matrix); heap = [(matrix[i][0], i, 0) for i in range(min(k, n))]; heapq.heapify(heap); for _ in range(k - 1): val, r, c = heapq.heappop(heap); if c + 1 < n: heapq.heappush(heap, (matrix[r][c + 1], r, c + 1)); return heapq.heappop(heap)[0]","Finds the k-th smallest element in a sorted matrix.

This function returns the k-th smallest element in the input n x n matrix, where each row and column is sorted in ascending order. It uses a min-heap to efficiently find the k-th smallest element.","def test_kth_smallest_in_matrix(): matrix = [[1, 5, 9], [10, 11, 13], [12, 13, 15]]; assert kth_smallest_in_matrix(matrix, 8) == 13"
"def max_consecutive_ones_ii(nums): left = right = max_len = zeros = 0; while right < len(nums): if nums[right] == 0: zeros += 1; while zeros == 2: if nums[left] == 0: zeros -= 1; left += 1; max_len = max(max_len, right - left + 1); right += 1; return max_len","Finds the maximum number of consecutive 1s in a binary array if at most one 0 can be flipped.

This function returns the length of the longest contiguous subarray of 1s in the input binary list nums, where you are allowed to flip at most one 0 to 1. It uses a sliding window approach.","def test_max_consecutive_ones_ii(): assert max_consecutive_ones_ii([1, 0, 1, 1, 0, 1]) == 4"
"def accounts_merge(accounts): from collections import defaultdict; parent, email_to_name = {}, {}; def find(x): parent[x] = parent.get(x, x); if parent[x] != x: parent[x] = find(parent[x]); return parent[x]; def union(x, y): parent[find(x)] = find(y); for account in accounts: name = account[0]; for email in account[1:]: email_to_name[email] = name; union(account[1], email); merged_accounts = defaultdict(list); for email in email_to_name: merged_accounts[find(email)].append(email); return [[email_to_name[emails[0]]] + sorted(emails) for emails in merged_accounts.values()]","Merges accounts with the same email addresses.

This function returns a merged list of accounts where accounts with common emails are merged. Each account contains a name and multiple email addresses. It uses union-find to group emails belonging to the same person.","def test_accounts_merge(): accounts = [[""John"", ""johnsmith@mail.com"", ""john00@mail.com""], [""John"", ""johnnybravo@mail.com""], [""John"", ""johnsmith@mail.com"", ""john_newyork@mail.com""], [""Mary"", ""mary@mail.com""]]; assert accounts_merge(accounts) == [[""John"", ""john00@mail.com"", ""john_newyork@mail.com"", ""johnsmith@mail.com""], [""John"", ""johnnybravo@mail.com""], [""Mary"", ""mary@mail.com""]]"
"def longest_substring_with_k_distinct(s, k): left, max_len = 0, 0; char_count = {}; for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1; while len(char_count) > k: char_count[s[left]] -= 1; if char_count[s[left]] == 0: del char_count[s[left]]; left += 1; max_len = max(max_len, right - left + 1); return max_len","Finds the longest substring with at most k distinct characters.

This function returns the length of the longest substring of s that contains at most k distinct characters. It uses a sliding window technique to keep track of the current window of characters.","def test_longest_substring_with_k_distinct(): assert longest_substring_with_k_distinct(""eceba"", 2) == 3 assert longest_substring_with_k_distinct(""aa"", 1) == 2"
"def network_delay_time(times, n, k): import heapq; graph = defaultdict(list); for u, v, w in times: graph[u].append((v, w)); min_heap = [(0, k)]; dist = {}; while min_heap: d, node = heapq.heappop(min_heap); if node in dist: continue; dist[node] = d; for neighbor, weight in graph[node]: if neighbor not in dist: heapq.heappush(min_heap, (d + weight, neighbor)); return max(dist.values()) if len(dist) == n else -1","Finds the time it takes for all nodes to receive a signal.

This function returns the time it will take for all nodes in a network to receive a signal starting from node k. It uses Dijkstra's algorithm to calculate the shortest paths from k to all other nodes.","def test_network_delay_time(): assert network_delay_time([[2, 1, 1], [2, 3, 1], [3, 4, 1]], 4, 2) == 2"
def reverse_words(s): return " ".join(reversed(s.split())),"Reverses the words in a string.

This function takes the input string s and returns a new string where the order of the words is reversed, but the characters within each word remain in the original order.",def test_reverse_words(): assert reverse_words("the sky is blue") == "blue is sky the"
"def max_chunks_to_make_sorted(arr): max_so_far, chunks = 0, 0; for i, num in enumerate(arr): max_so_far = max(max_so_far, num); if max_so_far == i: chunks += 1; return chunks","Finds the maximum number of chunks that can be sorted individually to result in a fully sorted array.

This function returns the maximum number of chunks into which the input list arr can be divided such that sorting each chunk individually results in the entire array being sorted.","def test_max_chunks_to_make_sorted(): assert max_chunks_to_make_sorted([4, 3, 2, 1, 0]) == 1 assert max_chunks_to_make_sorted([1, 0, 2, 3, 4]) == 4"
"def majority_element(nums): count, candidate = 0, None; for num in nums: if count == 0: candidate = num; count += (1 if num == candidate else -1); return candidate","Finds the majority element in a list.

This function returns the majority element in the input list nums, which is defined as the element that appears more than n/2 times. It uses the Boyer-Moore Voting Algorithm to find the majority element in linear time.","def test_majority_element(): assert majority_element([3, 2, 3]) == 3 assert majority_element([2, 2, 1, 1, 1, 2, 2]) == 2"
"def construct_binary_tree(preorder, inorder): if not preorder or not inorder: return None; root_val = preorder.pop(0); root = TreeNode(root_val); inorder_idx = inorder.index(root_val); root.left = construct_binary_tree(preorder, inorder[:inorder_idx]); root.right = construct_binary_tree(preorder, inorder[inorder_idx + 1:]); return root","Constructs a binary tree from preorder and inorder traversal.

This function constructs and returns the root of a binary tree given the preorder and inorder traversal lists of the tree. It uses recursion to reconstruct the tree by identifying the root and recursively building the left and right subtrees.","def test_construct_binary_tree(): preorder = [3, 9, 20, 15, 7]; inorder = [9, 3, 15, 20, 7]; root = construct_binary_tree(preorder, inorder); assert tree_to_list(root) == [3, 9, 20, 15, 7]"
"def min_path_sum(grid): rows, cols = len(grid), len(grid[0]); for r in range(1, rows): grid[r][0] += grid[r - 1][0]; for c in range(1, cols): grid[0][c] += grid[0][c - 1]; for r in range(1, rows): for c in range(1, cols): grid[r][c] += min(grid[r - 1][c], grid[r][c - 1]); return grid[-1][-1]","Finds the minimum path sum in a grid.

This function returns the minimum path sum from the top-left corner to the bottom-right corner of the input 2D grid, where each cell contains a non-negative integer, and you can only move right or down.","def test_min_path_sum(): grid = [[1, 3, 1], [1, 5, 1], [4, 2, 1]]; assert min_path_sum(grid) == 7"
"def word_ladder(begin_word, end_word, word_list): from collections import deque; word_set = set(word_list); queue = deque([(begin_word, 1)]); while queue: word, steps = queue.popleft(); if word == end_word: return steps; for i in range(len(word)): for c in ""abcdefghijklmnopqrstuvwxyz"": new_word = word[:i] + c + word[i + 1:]; if new_word in word_set: word_set.remove(new_word); queue.append((new_word, steps + 1)); return 0","Finds the length of the shortest transformation sequence from begin_word to end_word.

This function returns the length of the shortest transformation sequence from begin_word to end_word, where each transformation must change exactly one letter and the transformed word must be in the word list. It uses BFS for the search.","def test_word_ladder(): assert word_ladder(""hit"", ""cog"", [""hot"", ""dot"", ""dog"", ""lot"", ""log"", ""cog""]) == 5 assert word_ladder(""hit"", ""cog"", [""hot"", ""dot"", ""dog"", ""lot"", ""log""]) == 0"
"def maximum_product_subarray(nums): max_product = min_product = result = nums[0]; for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product; max_product = max(num, max_product * num); min_product = min(num, min_product * num); result = max(result, max_product); return result","Finds the maximum product of a contiguous subarray.

This function returns the maximum product that can be obtained from a contiguous subarray of the input list nums. It tracks both the maximum and minimum products for each subarray since multiplying by a negative number can swap the maximum and minimum.","def test_maximum_product_subarray(): assert maximum_product_subarray([2, 3, -2, 4]) == 6 assert maximum_product_subarray([-2, 0, -1]) == 0"
"def longest_increasing_path(matrix): if not matrix or not matrix[0]: return 0; rows, cols = len(matrix), len(matrix[0]); dp = [[0] * cols for _ in range(rows)]; directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]; def dfs(r, c): if dp[r][c]: return dp[r][c]; max_len = 1; for dr, dc in directions: nr, nc = r + dr, c + dc; if 0 <= nr < rows and 0 <= nc < cols and matrix[nr][nc] > matrix[r][c]: max_len = max(max_len, 1 + dfs(nr, nc)); dp[r][c] = max_len; return max_len; return max(dfs(r, c) for r in range(rows) for c in range(cols))","Finds the longest increasing path in a matrix.

This function returns the length of the longest strictly increasing path in the input 2D matrix. It uses depth-first search (DFS) and memoization to efficiently explore all paths from each cell.","def test_longest_increasing_path(): matrix = [[9, 9, 4], [6, 6, 8], [2, 1, 1]]; assert longest_increasing_path(matrix) == 4"
"def house_robber(nums): if not nums: return 0; if len(nums) == 1: return nums[0]; prev1, prev2 = 0, 0; for num in nums: prev1, prev2 = max(prev2 + num, prev1), prev1; return prev1","Finds the maximum amount of money that can be robbed from non-adjacent houses.

This function returns the maximum sum that can be robbed from a series of houses, where adjacent houses cannot be robbed on the same night. It uses dynamic programming to track the maximum amount that can be robbed up to each house.","def test_house_robber(): assert house_robber([1, 2, 3, 1]) == 4 assert house_robber([2, 7, 9, 3, 1]) == 12"
"def partition_labels(s): last_index = {char: i for i, char in enumerate(s)}; partitions = []; start = end = 0; for i, char in enumerate(s): end = max(end, last_index[char]); if i == end: partitions.append(i - start + 1); start = i + 1; return partitions","Finds partition labels in a string.

This function returns a list of integers representing the size of partitions in the input string s. Each character appears in at most one partition, and each partition is the largest possible segment where no character appears outside of it.","def test_partition_labels(): assert partition_labels(""ababcbacadefegdehijhklij"") == [9, 7, 8]"
"def find_duplicate_subtrees(root): from collections import defaultdict; def serialize(node): if not node: return ""#""; serial = f""{node.val},{serialize(node.left)},{serialize(node.right)}""; trees[serial].append(node); return serial; trees = defaultdict(list); serialize(root); return [nodes[0] for nodes in trees.values() if len(nodes) > 1]","Finds all duplicate subtrees in a binary tree.

This function returns a list of root nodes for all duplicate subtrees in the binary tree rooted at root. A duplicate subtree is defined as two or more subtrees that have the same structure and node values.","def test_find_duplicate_subtrees(): root = TreeNode(1, TreeNode(2, TreeNode(4)), TreeNode(3, TreeNode(2, TreeNode(4)), TreeNode(4))); assert len(find_duplicate_subtrees(root)) == 2"
def find_bottom_left_value(root): from collections import deque; queue = deque([root]); while queue: node = queue.popleft(); if node.right: queue.append(node.right); if node.left: queue.append(node.left); return node.val,"Finds the bottom-left value of a binary tree.

This function returns the value of the leftmost node in the last row of the binary tree rooted at root. It uses breadth-first search (BFS) to traverse the tree level by level from right to left.","def test_find_bottom_left_value(): root = TreeNode(1, TreeNode(2, TreeNode(4)), TreeNode(3, TreeNode(5, TreeNode(7)), TreeNode(6))); assert find_bottom_left_value(root) == 7"
"def nth_ugly_number(n): ugly_nums = [1]; i2 = i3 = i5 = 0; while len(ugly_nums) < n: next_ugly = min(ugly_nums[i2] * 2, ugly_nums[i3] * 3, ugly_nums[i5] * 5); if next_ugly == ugly_nums[i2] * 2: i2 += 1; if next_ugly == ugly_nums[i3] * 3: i3 += 1; if next_ugly == ugly_nums[i5] * 5: i5 += 1; ugly_nums.append(next_ugly); return ugly_nums[-1]","Finds the n-th ugly number.

This function returns the n-th ugly number, where ugly numbers are positive integers whose prime factors are limited to 2, 3, and 5. It uses dynamic programming to generate ugly numbers sequentially.",def test_nth_ugly_number(): assert nth_ugly_number(10) == 12
"def remove_invalid_parentheses(s): def is_valid(expr): count = 0; for c in expr: if c == '(': count += 1; if c == ')': count -= 1; if count < 0: return False; return count == 0; level = {s}; while level: valid = list(filter(is_valid, level)); if valid: return valid; level = {expr[:i] + expr[i + 1:] for expr in level for i in range(len(expr))}","Removes invalid parentheses.

This function returns all possible strings obtained by removing the minimum number of invalid parentheses from the input string s, such that the remaining string is valid. It uses a breadth-first search (BFS) approach.","def test_remove_invalid_parentheses(): assert set(remove_invalid_parentheses(""()())()"")) == {""()()()"", ""(())()""}"
"def word_break(s, word_dict): dp = [False] * (len(s) + 1); dp[0] = True; for i in range(1, len(s) + 1): for word in word_dict: if dp[i - len(word)] and s[i - len(word):i] == word: dp[i] = True; return dp[-1]","Determines if a string can be segmented into a sequence of dictionary words.

This function returns True if the input string s can be segmented into a sequence of one or more dictionary words from word_dict, and False otherwise. It uses dynamic programming to track the possible segmentations.","def test_word_break(): assert word_break(""leetcode"", {""leet"", ""code""}) assert not word_break(""catsandog"", {""cats"", ""dog"", ""sand"", ""and"", ""cat""})"
"def subarray_sum_equals_k(nums, k): count = 0; prefix_sum = 0; prefix_sum_count = {0: 1}; for num in nums: prefix_sum += num; count += prefix_sum_count.get(prefix_sum - k, 0); prefix_sum_count[prefix_sum] = prefix_sum_count.get(prefix_sum, 0) + 1; return count","Finds the number of subarrays that sum to k.

This function returns the number of contiguous subarrays in the input list nums that sum to k. It uses a hash map to track the prefix sum and its frequency to efficiently count valid subarrays.","def test_subarray_sum_equals_k(): assert subarray_sum_equals_k([1, 1, 1], 2) == 2 assert subarray_sum_equals_k([1, 2, 3], 3) == 2"
"def serialize_binary_tree(root): def dfs(node): if not node: return ""None,""; return str(node.val) + "","" + dfs(node.left) + dfs(node.right); return dfs(root)","Serializes a binary tree to a string.

This function returns a string representation of the binary tree rooted at root using pre-order traversal. The serialized string can be used to store or transmit the structure of the tree.","def test_serialize_binary_tree(): root = TreeNode(1, TreeNode(2), TreeNode(3, TreeNode(4), TreeNode(5))); assert serialize_binary_tree(root) == ""1,2,None,None,3,4,None,None,5,None,None,"""
"def deserialize_binary_tree(data): def dfs(nodes): val = nodes.pop(0); if val == ""None"": return None; node = TreeNode(int(val)); node.left = dfs(nodes); node.right = dfs(nodes); return node; return dfs(data.split("",""))","Deserializes a string back into a binary tree.

This function returns the root of a binary tree deserialized from the input string data, which is assumed to be in the format produced by pre-order traversal.","def test_deserialize_binary_tree(): data = ""1,2,None,None,3,4,None,None,5,None,None,""; root = deserialize_binary_tree(data); assert serialize_binary_tree(root) == data"
"def find_max_average(nums, k): curr_sum = sum(nums[:k]); max_sum = curr_sum; for i in range(k, len(nums)): curr_sum += nums[i] - nums[i - k]; max_sum = max(max_sum, curr_sum); return max_sum / k","Finds the maximum average of a subarray of length k.

This function returns the maximum average value of any contiguous subarray of length k from the input list nums. It uses a sliding window technique to efficiently compute the sum of each subarray.","def test_find_max_average(): assert find_max_average([1, 12, -5, -6, 50, 3], 4) == 12.75"
"def flip_equiv(root1, root2): if not root1 and not root2: return True; if not root1 or not root2 or root1.val != root2.val: return False; return (flip_equiv(root1.left, root2.left) and flip_equiv(root1.right, root2.right)) or (flip_equiv(root1.left, root2.right) and flip_equiv(root1.right, root2.left))","Checks if two binary trees are flip equivalent.

This function returns True if the two binary trees rooted at root1 and root2 are flip equivalent, meaning they are either the same or can be transformed into each other by flipping left and right children.","def test_flip_equiv(): root1 = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5, TreeNode(7), TreeNode(8))), TreeNode(3, None, TreeNode(6))); root2 = TreeNode(1, TreeNode(3, TreeNode(6), None), TreeNode(2, TreeNode(4), TreeNode(5, TreeNode(8), TreeNode(7)))); assert flip_equiv(root1, root2)"
"def daily_temperatures(T): result = [0] * len(T); stack = []; for i, temp in enumerate(T): while stack and temp > T[stack[-1]]: j = stack.pop(); result[j] = i - j; stack.append(i); return result","Finds the number of days until a warmer temperature.

This function returns a list where each element at index i represents the number of days until a warmer temperature occurs for the day i. If no warmer day exists, the value is 0. It uses a stack to track temperatures.","def test_daily_temperatures(): assert daily_temperatures([73, 74, 75, 71, 69, 72, 76, 73]) == [1, 1, 4, 2, 1, 1, 0, 0]"
"def generate_parenthesis(n): result = []; def backtrack(S="""", left=0, right=0): if len(S) == 2 * n: result.append(S); return; if left < n: backtrack(S + ""("", left + 1, right); if right < left: backtrack(S + "")"", left, right + 1); backtrack(); return result","Generates all combinations of valid parentheses.

This function returns a list of all combinations of n pairs of valid parentheses. It uses backtracking to generate the combinations by recursively building valid sequences of parentheses.","def test_generate_parenthesis(): assert generate_parenthesis(3) == [""((()))"", ""(()())"", ""(())()"", ""()(())"", ""()()()""]"
def count_battleships(board): count = 0; for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == 'X' and (i == 0 or board[i-1][j] != 'X') and (j == 0 or board[i][j-1] != 'X'): count += 1; return count,"Counts the number of battleships on a board.

This function returns the number of battleships on the input m x n board, where each battleship is represented by consecutive 'X' characters horizontally or vertically. It avoids counting the same battleship more than once.","def test_count_battleships(): board = [[""X"", ""."", ""."", ""X""], [""."", ""."", ""."", ""X""], [""."", ""."", ""."", ""X""]]; assert count_battleships(board) == 2"
"def schedule_course(courses): import heapq; courses.sort(key=lambda x: x[1]); total_time = 0; max_heap = []; for duration, last_day in courses: if total_time + duration <= last_day: total_time += duration; heapq.heappush(max_heap, -duration); elif max_heap and -max_heap[0] > duration: total_time += duration + heapq.heappop(max_heap); heapq.heappush(max_heap, -duration); return len(max_heap)","Finds the maximum number of courses that can be taken.

This function returns the maximum number of courses that can be taken from the input list courses, where each course is represented by its duration and last day to complete. It uses a greedy approach with a max-heap to track the courses taken.","def test_schedule_course(): assert schedule_course([[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]) == 3"
"def is_subsequence(s, t): it = iter(t); return all(c in it for c in s)","Checks if a string is a subsequence of another.

This function returns True if the input string s is a subsequence of t, meaning that all characters of s appear in t in the same order, but not necessarily consecutively. It uses an iterator to check the sequence.","def test_is_subsequence(): assert is_subsequence(""abc"", ""ahbgdc"") assert not is_subsequence(""axc"", ""ahbgdc"")"
"def reorder_list(head): if not head: return; slow, fast = head, head; while fast and fast.next: slow = slow.next; prev, curr = None, slow; while curr: next_node = curr.next; curr.next = prev; prev = curr; curr = next_node; first, second = head, prev; while second.next: first.next, first = second, first.next; second.next, second = first, second.next","Reorders a linked list in a specific manner.

This function reorders the input linked list such that the nodes are rearranged in the following order: L0 ? Ln ? L1 ? Ln-1 ? L2 ? Ln-2 ? ? where L0 is the head of the list. It uses a two-pointer approach to split, reverse, and merge the list.","def test_reorder_list(): head = ListNode(1, ListNode(2, ListNode(3, ListNode(4)))); reorder_list(head); assert linked_list_to_list(head) == [1, 4, 2, 3]"
"def range_sum_bst(root, low, high): if not root: return 0; if root.val < low: return range_sum_bst(root.right, low, high); if root.val > high: return range_sum_bst(root.left, low, high); return root.val + range_sum_bst(root.left, low, high) + range_sum_bst(root.right, low, high)","Computes the sum of values within a range in a binary search tree.

This function returns the sum of all node values in the binary search tree rooted at root that lie within the range [low, high]. It uses a depth-first search (DFS) to traverse the tree and accumulate the sum.","def test_range_sum_bst(): root = TreeNode(10, TreeNode(5, TreeNode(3), TreeNode(7)), TreeNode(15, None, TreeNode(18))); assert range_sum_bst(root, 7, 15) == 32"
"def get_sum(a, b): while b != 0: carry = a & b; a = a ^ b; b = carry << 1; return a","Computes the sum of two integers without using the + operator.

This function returns the sum of two integers a and b without using the + or - operator. It uses bit manipulation with XOR and bit shifts to simulate addition.","def test_get_sum(): assert get_sum(1, 2) == 3 assert get_sum(-1, 1) == 0"
"def num_islands(grid): def dfs(r, c): if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == ""0"": return; grid[r][c] = ""0""; dfs(r + 1, c); dfs(r - 1, c); dfs(r, c + 1); dfs(r, c - 1); count = 0; for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == ""1"": dfs(r, c); count += 1; return count","Counts the number of islands in a 2D grid.

This function returns the number of islands in the input 2D grid, where '1' represents land and '0' represents water. It uses depth-first search (DFS) to traverse the grid and count disconnected islands.","def test_num_islands(): grid = [[""1"", ""1"", ""0"", ""0"", ""0""], [""1"", ""1"", ""0"", ""0"", ""0""], [""0"", ""0"", ""1"", ""0"", ""0""], [""0"", ""0"", ""0"", ""1"", ""1""]]; assert num_islands(grid) == 3"
def increasing_triplet(nums): first = second = float('inf'); for n in nums: if n <= first: first = n; elif n <= second: second = n; else: return True; return False,"Checks for an increasing triplet subsequence.

This function returns True if the input list nums contains an increasing triplet subsequence, i.e., three elements in increasing order. It uses a greedy approach to track the smallest and second smallest elements.","def test_increasing_triplet(): assert increasing_triplet([1, 2, 3, 4, 5]) assert not increasing_triplet([5, 4, 3, 2, 1])"
"def unique_paths_with_obstacles(obstacle_grid): m, n = len(obstacle_grid), len(obstacle_grid[0]); dp = [[0] * n for _ in range(m)]; dp[0][0] = 1 if obstacle_grid[0][0] == 0 else 0; for i in range(m): for j in range(n): if obstacle_grid[i][j] == 1: continue; if i > 0: dp[i][j] += dp[i-1][j]; if j > 0: dp[i][j] += dp[i][j-1]; return dp[-1][-1]","Finds unique paths in a grid with obstacles.

This function returns the number of unique paths from the top-left corner to the bottom-right corner of a 2D grid obstacle_grid, where 1 represents an obstacle and 0 represents a free space. It uses dynamic programming to compute the result.","def test_unique_paths_with_obstacles(): obstacle_grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]; assert unique_paths_with_obstacles(obstacle_grid) == 2"
"def is_one_edit_distance(s, t): if abs(len(s) - len(t)) > 1: return False; for i in range(min(len(s), len(t))): if s[i] != t[i]: if len(s) == len(t): return s[i+1:] == t[i+1:]; if len(s) < len(t): return s[i:] == t[i+1:]; if len(s) > len(t): return s[i+1:] == t[i:]; return abs(len(s) - len(t)) == 1","Checks if two strings are one edit distance apart.

This function returns True if the input strings s and t are exactly one edit distance apart, where an edit can be an insertion, deletion, or substitution of a single character.","def test_is_one_edit_distance(): assert is_one_edit_distance(""abc"", ""ab"") assert not is_one_edit_distance(""abc"", ""def"")"
def construct_maximum_binary_tree(nums): if not nums: return None; max_val = max(nums); max_idx = nums.index(max_val); root = TreeNode(max_val); root.left = construct_maximum_binary_tree(nums[:max_idx]); root.right = construct_maximum_binary_tree(nums[max_idx + 1:]); return root,"Constructs a maximum binary tree.

This function returns the root of a maximum binary tree constructed from the input list nums, where the largest element is the root, and the left and right subtrees are built recursively from the elements on either side of the largest element.","def test_construct_maximum_binary_tree(): nums = [3, 2, 1, 6, 0, 5]; root = construct_maximum_binary_tree(nums); assert tree_to_list(root) == [6, 3, 5, None, 2, 0, None, None, 1]"
"def rob_houses_circular(nums): if len(nums) == 1: return nums[0]; def rob(nums): prev1, prev2 = 0, 0; for num in nums: prev1, prev2 = max(prev2 + num, prev1), prev1; return prev1; return max(rob(nums[1:]), rob(nums[:-1]))","Finds the maximum sum of non-adjacent houses in a circular arrangement.

This function returns the maximum sum of non-adjacent houses that can be robbed from a circular arrangement of houses. It solves two subproblems: excluding the first house and excluding the last house.","def test_rob_houses_circular(): assert rob_houses_circular([2, 3, 2]) == 3 assert rob_houses_circular([1, 2, 3, 1]) == 4"
"def path_sum(root, sum): if not root: return False; if not root.left and not root.right: return sum == root.val; return path_sum(root.left, sum - root.val) or path_sum(root.right, sum - root.val)","Checks if there is a root-to-leaf path with a given sum.

This function returns True if there exists a root-to-leaf path in the binary tree rooted at root such that the sum of the node values along the path equals the input sum.","def test_path_sum(): root = TreeNode(5, TreeNode(4, TreeNode(11, TreeNode(7), TreeNode(2))), TreeNode(8, TreeNode(13), TreeNode(4, None, TreeNode(1)))); assert path_sum(root, 22) assert not path_sum(root, 27)"
"def merge_two_sorted_lists(l1, l2): dummy = ListNode(0); current = dummy; while l1 and l2: if l1.val < l2.val: current.next = l1; l1 = l1.next; else: current.next = l2; l2 = l2.next; current = current.next; current.next = l1 if l1 else l2; return dummy.next","Merges two sorted linked lists.

This function returns the merged sorted linked list formed by combining the two input sorted linked lists l1 and l2. It uses an iterative approach to build the merged list.","def test_merge_two_sorted_lists(): l1 = ListNode(1, ListNode(2, ListNode(4))); l2 = ListNode(1, ListNode(3, ListNode(4))); merged = merge_two_sorted_lists(l1, l2); assert linked_list_to_list(merged) == [1, 1, 2, 3, 4, 4]"
"def min_cost_climbing_stairs(cost): dp = [0] * len(cost); dp[0], dp[1] = cost[0], cost[1]; for i in range(2, len(cost)): dp[i] = cost[i] + min(dp[i-1], dp[i-2]); return min(dp[-1], dp[-2])","Finds the minimum cost to climb stairs.

This function returns the minimum cost to reach the top of a staircase where each step has a cost associated with it. You can start from either of the first two steps, and you can either climb one or two steps at a time.","def test_min_cost_climbing_stairs(): assert min_cost_climbing_stairs([10, 15, 20]) == 15 assert min_cost_climbing_stairs([1, 100, 1, 1, 1, 100, 1, 1, 100, 1]) == 6"
def has_cycle(head): slow = fast = head; while fast and fast.next: slow = slow.next; fast = fast.next.next; if slow == fast: return True; return False,"Detects if a linked list has a cycle.

This function returns True if the input linked list contains a cycle, where a node? next pointer points to a previous node. It uses Floyd's Tortoise and Hare algorithm to detect cycles in O(n) time.","def test_has_cycle(): head = ListNode(3, ListNode(2, ListNode(0, ListNode(-4)))); head.next.next.next.next = head.next; assert has_cycle(head)"
"def permute(nums): result = []; def backtrack(start): if start == len(nums): result.append(nums[:]); return; for i in range(start, len(nums)): nums[start], nums[i] = nums[i], nums[start]; backtrack(start + 1); nums[start], nums[i] = nums[i], nums[start]; backtrack(0); return result","Finds all permutations of a list of numbers.

This function returns a list of all possible permutations of the input list nums. It uses backtracking to generate all permutations by swapping elements.","def test_permute(): assert permute([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 2, 1], [3, 1, 2]]"
"def find_disjoint_intervals(intervals): intervals.sort(key=lambda x: x[1]); last_end = float('-inf'); result = 0; for start, end in intervals: if start >= last_end: result += 1; last_end = end; return result","Finds the maximum number of disjoint intervals.

This function returns the maximum number of non-overlapping intervals from the input list intervals. It sorts the intervals by their end time and selects intervals greedily.","def test_find_disjoint_intervals(): assert find_disjoint_intervals([[1, 3], [2, 4], [3, 5]]) == 2 assert find_disjoint_intervals([[1, 2], [2, 3], [3, 4], [1, 3]]) == 3"
"def binary_search(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; elif nums[mid] < target: left = mid + 1; else: right = mid - 1; return -1","Performs binary search on a sorted list.

This function returns the index of target in the sorted input list nums. If the target is not found, it returns -1. It uses binary search with a time complexity of O(log n).","def test_binary_search(): assert binary_search([1, 2, 3, 4, 5], 3) == 2 assert binary_search([1, 2, 3, 4, 5], 6) == -1"
"def set_zeroes(matrix): rows, cols = len(matrix), len(matrix[0]); row_zero = any(matrix[0][j] == 0 for j in range(cols)); col_zero = any(matrix[i][0] == 0 for i in range(rows)); for i in range(1, rows): for j in range(1, cols): if matrix[i][j] == 0: matrix[i][0] = matrix[0][j] = 0; for i in range(1, rows): for j in range(1, cols): if matrix[i][0] == 0 or matrix[0][j] == 0: matrix[i][j] = 0; if row_zero: for j in range(cols): matrix[0][j] = 0; if col_zero: for i in range(rows): matrix[i][0] = 0","Sets matrix rows and columns to zero based on cell values.

This function modifies the input matrix in place such that if an element in the matrix is 0, its entire row and column are set to 0. It uses constant space by marking rows and columns with zeroes in the first row and column.","def test_set_zeroes(): matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]; set_zeroes(matrix); assert matrix == [[1, 0, 1], [0, 0, 0], [1, 0, 1]]"
"def jump_game(nums): farthest = 0; for i in range(len(nums)): if i > farthest: return False; farthest = max(farthest, i + nums[i]); return True","Checks if it's possible to reach the last index in an array.

This function returns True if it is possible to reach the last index of the input list nums, where each element represents the maximum jump length at that position. It uses a greedy approach to track the farthest position reachable.","def test_jump_game(): assert jump_game([2, 3, 1, 1, 4]) assert not jump_game([3, 2, 1, 0, 4])"
"def max_product(nums): max_prod = min_prod = result = nums[0]; for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod; max_prod = max(num, max_prod * num); min_prod = min(num, min_prod * num); result = max(result, max_prod); return result","Finds the maximum product of a subarray.

This function returns the maximum product that can be obtained from a contiguous subarray of the input list nums. It uses a dynamic programming approach to track the maximum and minimum products up to each element.","def test_max_product(): assert max_product([2, 3, -2, 4]) == 6 assert max_product([-2, 0, -1]) == 0"
"def is_valid_sudoku(board): def is_valid_block(block): block = [x for x in block if x != '.']; return len(block) == len(set(block)); for row in board: if not is_valid_block(row): return False; for col in zip(*board): if not is_valid_block(col): return False; for i in range(0, 9, 3): for j in range(0, 9, 3): block = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]; if not is_valid_block(block): return False; return True","Validates a Sudoku board.

This function returns True if the input 9x9 Sudoku board is valid according to the rules of Sudoku, and False otherwise. It checks each row, column, and 3x3 subgrid for duplicates.","def test_is_valid_sudoku(): board = [[""5"", ""3"", ""."", ""."", ""7"", ""."", ""."", ""."", "".""], [""6"", ""."", ""."", ""1"", ""9"", ""5"", ""."", ""."", "".""], [""."", ""9"", ""8"", ""."", ""."", ""."", ""."", ""6"", "".""], [""8"", ""."", ""."", ""."", ""6"", ""."", ""."", ""."", ""3""], [""4"", ""."", ""."", ""8"", ""."", ""3"", ""."", ""."", ""1""], [""7"", ""."", ""."", ""."", ""2"", ""."", ""."", ""."", ""6""], [""."", ""6"", ""."", ""."", ""."", ""."", ""2"", ""8"", "".""], [""."", ""."", ""."", ""4"", ""1"", ""9"", ""."", ""."", ""5""], [""."", ""."", ""."", ""."", ""8"", ""."", ""."", ""7"", ""9""]]; assert is_valid_sudoku(board)"
def reverse_linked_list(head): prev = None; current = head; while current: next_node = current.next; current.next = prev; prev = current; current = next_node; return prev,"Reverses a linked list.

This function takes the head of a linked list and returns a new head representing the reversed linked list. It iteratively reverses the direction of the pointers between nodes.","def test_reverse_linked_list(): head = ListNode(1, ListNode(2, ListNode(3))); new_head = reverse_linked_list(head); assert linked_list_to_list(new_head) == [3, 2, 1]"
"def can_complete_circuit(gas, cost): total, tank, start = 0, 0, 0; for i in range(len(gas)): total += gas[i] - cost[i]; tank += gas[i] - cost[i]; if tank < 0: start = i + 1; tank = 0; return start if total >= 0 else -1","Determines if you can complete a circuit with gas stations.

This function returns the starting gas station index if it is possible to complete a circular route using the input gas and cost arrays. If it is not possible, it returns -1.","def test_can_complete_circuit(): assert can_complete_circuit([1, 2, 3, 4, 5], [3, 4, 5, 1, 2]) == 3 assert can_complete_circuit([2, 3, 4], [3, 4, 3]) == -1"
"def count_palindromic_substrings(s): def expand_around_center(left, right): count = 0; while left >= 0 and right < len(s) and s[left] == s[right]: count += 1; left -= 1; right += 1; return count; result = 0; for i in range(len(s)): result += expand_around_center(i, i); result += expand_around_center(i, i + 1); return result","Counts the number of palindromic substrings.

This function returns the total number of palindromic substrings in the input string s. It uses the expand-around-center approach to find palindromes centered at each character or between pairs of characters.",def test_count_palindromic_substrings(): assert count_palindromic_substrings("abc") == 3 assert count_palindromic_substrings("aaa") == 6
"def search_in_rotated_array(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1; else: left = mid + 1; else: if nums[mid] < target <= nums[right]: left = mid + 1; else: right = mid - 1; return -1","Searches for a target in a rotated sorted array.

This function returns the index of target in the input rotated sorted array nums. If target is not found, it returns -1. It uses binary search to handle the rotated nature of the array.","def test_search_in_rotated_array(): assert search_in_rotated_array([4, 5, 6, 7, 0, 1, 2], 0) == 4 assert search_in_rotated_array([4, 5, 6, 7, 0, 1, 2], 3) == -1"
"def climb_stairs(n): if n == 1: return 1; first, second = 1, 2; for _ in range(2, n): first, second = second, first + second; return second","Finds the number of ways to climb stairs.

This function returns the number of distinct ways to climb a staircase with n steps, where each time you can climb either 1 or 2 steps. It uses dynamic programming to calculate the number of ways.",def test_climb_stairs(): assert climb_stairs(2) == 2 assert climb_stairs(3) == 3
"def min_meeting_rooms(intervals): intervals.sort(key=lambda x: x[0]); end_times = []; heapq.heapify(end_times); for interval in intervals: if end_times and end_times[0] <= interval[0]: heapq.heappop(end_times); heapq.heappush(end_times, interval[1]); return len(end_times)","Finds the minimum number of meeting rooms required.

This function returns the minimum number of meeting rooms required to accommodate all the meetings, given their start and end times. It uses a min-heap to track the earliest meeting ending time.","def test_min_meeting_rooms(): assert min_meeting_rooms([[0, 30], [5, 10], [15, 20]]) == 2 assert min_meeting_rooms([[7, 10], [2, 4]]) == 1"
"def kth_smallest_in_bst(root, k): def inorder(node): return inorder(node.left) + [node.val] + inorder(node.right) if node else []; return inorder(root)[k - 1]","Finds the k-th smallest element in a binary search tree.

This function returns the k-th smallest element in the binary search tree rooted at root. It uses in-order traversal to collect the elements in sorted order.","def test_kth_smallest_in_bst(): root = TreeNode(3, TreeNode(1, None, TreeNode(2)), TreeNode(4)); assert kth_smallest_in_bst(root, 1) == 1"
"def longest_palindrome(s): def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1; right += 1; return s[left + 1:right]; result = """"; for i in range(len(s)): odd = expand_around_center(i, i); even = expand_around_center(i, i + 1); result = max(result, odd, even, key=len); return result","Finds the longest palindromic substring.

This function returns the longest palindromic substring in the input string s. It uses the expand-around-center technique to find palindromes centered at each character and between pairs of characters.","def test_longest_palindrome(): assert longest_palindrome(""babad"") in [""bab"", ""aba""] assert longest_palindrome(""cbbd"") == ""bb"""
"def all_paths_source_to_target(graph): result = []; def dfs(node, path): if node == len(graph) - 1: result.append(path[:]); return; for neighbor in graph[node]: dfs(neighbor, path + [neighbor]); dfs(0, [0]); return result","Finds all paths from source to target in a directed graph.

This function returns all possible paths from the source node (0) to the target node (n-1) in the input directed graph graph. It uses depth-first search (DFS) to explore all paths.","def test_all_paths_source_to_target(): assert all_paths_source_to_target([[1, 2], [3], [3], []]) == [[0, 1, 3], [0, 2, 3]]"
"def maximum_depth_of_binary_tree(root): if not root: return 0; left_depth = maximum_depth_of_binary_tree(root.left); right_depth = maximum_depth_of_binary_tree(root.right); return max(left_depth, right_depth) + 1","Computes the maximum depth of a binary tree.

This function returns the maximum depth of the binary tree rooted at root. It recursively calculates the depth of the left and right subtrees, returning the greater value plus one.","def test_maximum_depth_of_binary_tree(): root = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert maximum_depth_of_binary_tree(root) == 3"
"def partition_array(nums, k): left, right = 0, len(nums) - 1; while left <= right: if nums[left] < k: left += 1; elif nums[right] >= k: right -= 1; else: nums[left], nums[right] = nums[right], nums[left]; return left","Partitions an array based on a pivot.

This function partitions the input array nums such that all elements less than k are moved to the left, and all elements greater than or equal to k are moved to the right. It returns the partition index.","def test_partition_array(): nums = [3, 2, 2, 1]; partition = partition_array(nums, 2); assert nums[:partition] == [1] and nums[partition:] == [3, 2, 2]"
"def longest_consecutive(nums): num_set = set(nums); longest_streak = 0; for num in num_set: if num - 1 not in num_set: current_num = num; current_streak = 1; while current_num + 1 in num_set: current_num += 1; current_streak += 1; longest_streak = max(longest_streak, current_streak); return longest_streak","Finds the length of the longest consecutive sequence in an array.

This function returns the length of the longest consecutive sequence of numbers in the input list nums. It uses a hash set to efficiently find the starting point of each sequence.","def test_longest_consecutive(): assert longest_consecutive([100, 4, 200, 1, 3, 2]) == 4"
"def merge_intervals(intervals): intervals.sort(key=lambda x: x[0]); merged = []; for interval in intervals: if not merged or merged[-1][1] < interval[0]: merged.append(interval); else: merged[-1][1] = max(merged[-1][1], interval[1]); return merged","Merges overlapping intervals.

This function returns a list of merged intervals from the input list intervals. It sorts the intervals by start time and merges overlapping intervals by adjusting their end times.","def test_merge_intervals(): assert merge_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]) == [[1, 6], [8, 10], [15, 18]]"
"def decode_string(s): stack = []; current_string = """"; current_num = 0; for char in s: if char.isdigit(): current_num = current_num * 10 + int(char); elif char == '[': stack.append((current_string, current_num)); current_string, current_num = """", 0; elif char == ']': prev_string, num = stack.pop(); current_string = prev_string + num * current_string; else: current_string += char; return current_string","Decodes a string with repeated patterns.

This function returns the decoded version of the input string s, where patterns like ""3[a2[c]]"" are expanded to ""accaccacc"". It uses a stack to handle nested patterns and numbers.",def test_decode_string(): assert decode_string("3[a2[c]]") == "accaccacc" assert decode_string("2[abc]3[cd]ef") == "abcabccdcdcdef"
"def is_valid_parentheses(s): stack = []; mapping = {"")"": ""("", ""}"": ""{"", ""]"": ""[""}; for char in s: if char in mapping: top_element = stack.pop() if stack else ""#""; if mapping[char] != top_element: return False; else: stack.append(char); return not stack","Checks if a string has valid parentheses.

This function returns True if the input string s contains valid pairs of parentheses, and False otherwise. It uses a stack to keep track of opening parentheses and matches them with closing parentheses.",def test_is_valid_parentheses(): assert is_valid_parentheses("()[]{}") assert not is_valid_parentheses("(]")
"def number_of_islands(grid): if not grid: return 0; def dfs(r, c): if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == '0': return; grid[r][c] = '0'; dfs(r+1, c); dfs(r-1, c); dfs(r, c+1); dfs(r, c-1); count = 0; for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == '1': dfs(r, c); count += 1; return count","Counts the number of islands in a grid.

This function returns the number of islands in the input grid, where '1' represents land and '0' represents water. It uses depth-first search (DFS) to traverse and mark visited land areas.","def test_number_of_islands(): grid = [[""1"", ""1"", ""0"", ""0"", ""0""], [""1"", ""1"", ""0"", ""0"", ""0""], [""0"", ""0"", ""1"", ""0"", ""0""], [""0"", ""0"", ""0"", ""1"", ""1""]]; assert number_of_islands(grid) == 3"
"def min_window_substring(s, t): from collections import Counter; t_count = Counter(t); current_count = Counter(); start = 0; min_len = float('inf'); result = """"; formed = 0; for end in range(len(s)): current_count[s[end]] += 1; if current_count[s[end]] == t_count[s[end]]: formed += 1; while formed == len(t_count): if end - start + 1 < min_len: min_len = end - start + 1; result = s[start:end + 1]; current_count[s[start]] -= 1; if current_count[s[start]] < t_count[s[start]]: formed -= 1; start += 1; return result","Finds the minimum window substring that contains all characters of another string.

This function returns the smallest substring of s that contains all the characters of t. It uses a sliding window approach to find the valid substring and keep track of character frequencies.","def test_min_window_substring(): assert min_window_substring(""ADOBECODEBANC"", ""ABC"") == ""BANC"""
"def kth_largest_element_in_stream(k, nums): import heapq; min_heap = []; heapq.heapify(min_heap); for num in nums: heapq.heappush(min_heap, num); if len(min_heap) > k: heapq.heappop(min_heap); return min_heap[0]","Finds the k-th largest element in a stream of numbers.

This function returns the k-th largest element from the input list nums. It uses a min-heap to maintain the k largest elements seen so far.","def test_kth_largest_element_in_stream(): assert kth_largest_element_in_stream(3, [4, 5, 8, 2]) == 4 assert kth_largest_element_in_stream(1, [3, 2, 1, 5, 6, 4]) == 6"
"def maximum_profit(prices): min_price = float('inf'); max_profit = 0; for price in prices: if price < min_price: min_price = price; max_profit = max(max_profit, price - min_price); return max_profit","Finds the maximum profit from stock prices.

This function returns the maximum profit that can be obtained by buying and selling a stock once, given a list of daily prices. It tracks the minimum price seen so far and calculates the maximum profit based on the current price.","def test_maximum_profit(): assert maximum_profit([7, 1, 5, 3, 6, 4]) == 5 assert maximum_profit([7, 6, 4, 3, 1]) == 0"
def reverse_words_in_string(s): return " ".join(reversed(s.split())),"Reverses the words in a string.

This function returns a new string where the words in the input string s are reversed, but the characters within each word remain in their original order. It uses Python's built-in string and list functions to reverse the words.",def test_reverse_words_in_string(): assert reverse_words_in_string("the sky is blue") == "blue is sky the"
"def find_min(nums): left, right = 0, len(nums) - 1; while left < right: mid = (left + right) // 2; if nums[mid] > nums[right]: left = mid + 1; else: right = mid; return nums[left]","Finds the minimum element in a rotated sorted array.

This function returns the minimum element in the input rotated sorted array nums. It uses binary search to find the pivot where the array rotation occurs.","def test_find_min(): assert find_min([3, 4, 5, 1, 2]) == 1 assert find_min([4, 5, 6, 7, 0, 1, 2]) == 0"
"def gcd(a, b): while b: a, b = b, a % b; return a","Calculates the greatest common divisor (GCD) of two numbers.

This function returns the GCD of two integers a and b using the Euclidean algorithm. The GCD is the largest positive integer that divides both a and b.","def test_gcd(): assert gcd(54, 24) == 6 assert gcd(48, 18) == 6"
def binary_tree_inorder_traversal(root): return binary_tree_inorder_traversal(root.left) + [root.val] + binary_tree_inorder_traversal(root.right) if root else [],"Performs in-order traversal of a binary tree.

This function returns a list of node values obtained by performing in-order traversal of the binary tree rooted at root. It visits the left subtree, the root, and the right subtree recursively.","def test_binary_tree_inorder_traversal(): root = TreeNode(1, None, TreeNode(2, TreeNode(3))); assert binary_tree_inorder_traversal(root) == [1, 3, 2]"
def group_by_anagrams(words): from collections import defaultdict; anagrams = defaultdict(list); for word in words: sorted_word = ''.join(sorted(word)); anagrams[sorted_word].append(word); return list(anagrams.values()),"Groups anagrams from a list of words.

This function returns a list of lists, where each sublist contains words that are anagrams of each other from the input list words. It uses a dictionary to group words by their sorted character sequence.","def test_group_by_anagrams(): assert group_by_anagrams([""eat"", ""tea"", ""tan"", ""ate"", ""nat"", ""bat""]) == [[""eat"", ""tea"", ""ate""], [""tan"", ""nat""], [""bat""]]"
"def longest_common_subsequence(text1, text2): dp = [[0] * (len(text2) + 1) for _ in range(len(text1) + 1)]; for i in range(1, len(text1) + 1): for j in range(1, len(text2) + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1; else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]); return dp[-1][-1]","Finds the length of the longest common subsequence between two strings.

This function returns the length of the longest common subsequence (LCS) between two strings text1 and text2. It uses dynamic programming to calculate the LCS in O(n*m) time.","def test_longest_common_subsequence(): assert longest_common_subsequence(""abcde"", ""ace"") == 3 assert longest_common_subsequence(""abc"", ""def"") == 0"
def reverse_integer(x): sign = -1 if x < 0 else 1; x = abs(x); reversed_x = int(str(x)[::-1]); return sign * reversed_x if -2**31 <= reversed_x <= 2**31 - 1 else 0,"Reverses an integer.

This function returns the reverse of the input integer x. If the reversed integer overflows, it returns 0. The function handles both positive and negative numbers.",def test_reverse_integer(): assert reverse_integer(123) == 321 assert reverse_integer(-123) == -321 assert reverse_integer(1534236469) == 0
def generate_subsets(nums): result = [[]]; for num in nums: result += [curr + [num] for curr in result]; return result,"Generates all subsets of a list.

This function returns a list of all possible subsets (the power set) of the input list nums. It uses an iterative approach to build subsets by adding each element to existing subsets.","def test_generate_subsets(): assert generate_subsets([1, 2, 3]) == [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]"
"def longest_increasing_subsequence(nums): if not nums: return 0; dp = [1] * len(nums); for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1); return max(dp)","Finds the length of the longest increasing subsequence in a list.

This function returns the length of the longest increasing subsequence (LIS) in the input list nums. It uses dynamic programming to compute the LIS in O(n^2) time.","def test_longest_increasing_subsequence(): assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4"
"def palindrome_partitioning(s): result = []; def is_palindrome(sub): return sub == sub[::-1]; def backtrack(start, path): if start == len(s): result.append(path); return; for i in range(start + 1, len(s) + 1): if is_palindrome(s[start:i]): backtrack(i, path + [s[start:i]]); backtrack(0, []); return result","Partitions a string into all possible palindrome partitions.

This function returns all possible ways to partition the input string s such that every substring in each partition is a palindrome. It uses backtracking to explore all possible partitions.","def test_palindrome_partitioning(): assert palindrome_partitioning(""aab"") == [[""a"", ""a"", ""b""], [""aa"", ""b""]]"
"def my_sqrt(x): left, right = 0, x; while left <= right: mid = (left + right) // 2; if mid * mid == x: return mid; elif mid * mid < x: left = mid + 1; else: right = mid - 1; return right","Computes the integer square root of a number.

This function returns the integer square root of the input number x. It uses binary search to find the largest integer n such that n * n <= x.",def test_my_sqrt(): assert my_sqrt(8) == 2 assert my_sqrt(16) == 4
"def combination_sum2(candidates, target): result = []; candidates.sort(); def backtrack(start, path, remaining): if remaining == 0: result.append(path); return; for i in range(start, len(candidates)): if i > start and candidates[i] == candidates[i - 1]: continue; if candidates[i] > remaining: break; backtrack(i + 1, path + [candidates[i]], remaining - candidates[i]); backtrack(0, [], target); return result","Finds all unique combinations that sum to a target.

This function returns a list of all unique combinations of elements in candidates that sum to target. Each element in candidates can be used only once. It uses backtracking to generate combinations.","def test_combination_sum2(): assert combination_sum2([10, 1, 2, 7, 6, 1, 5], 8) == [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]"
"def min_cost_tickets(days, costs): dp = [0] * (days[-1] + 1); day_set = set(days); for i in range(1, len(dp)): if i not in day_set: dp[i] = dp[i - 1]; else: dp[i] = min(dp[i - 1] + costs[0], dp[max(0, i - 7)] + costs[1], dp[max(0, i - 30)] + costs[2]); return dp[-1]","Finds the minimum cost to cover all travel days with tickets.

This function returns the minimum cost to cover all travel days using tickets with durations of 1, 7, and 30 days. It uses dynamic programming to compute the minimum cost for each day.","def test_min_cost_tickets(): assert min_cost_tickets([1, 4, 6, 7, 8, 20], [2, 7, 15]) == 11 assert min_cost_tickets([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], [2, 7, 15]) == 17"
def find_duplicate(nums): slow = fast = nums[0]; while True: slow = nums[slow]; fast = nums[nums[fast]]; if slow == fast: break; fast = nums[0]; while slow != fast: slow = nums[slow]; fast = nums[fast]; return slow,"Finds the duplicate number in an array.

This function returns the duplicate number in the input array nums containing n + 1 integers where each integer is between 1 and n. It uses Floyd's Tortoise and Hare algorithm to detect the cycle caused by the duplicate.","def test_find_duplicate(): assert find_duplicate([1, 3, 4, 2, 2]) == 2 assert find_duplicate([3, 1, 3, 4, 2]) == 3"
"def search_matrix(matrix, target): if not matrix: return False; rows, cols = len(matrix), len(matrix[0]); left, right = 0, rows * cols - 1; while left <= right: mid = (left + right) // 2; mid_val = matrix[mid // cols][mid % cols]; if mid_val == target: return True; elif mid_val < target: left = mid + 1; else: right = mid - 1; return False","Searches for a target in a matrix.

This function returns True if the target value exists in the 2D matrix matrix, where each row is sorted, and the first element of each row is greater than the last element of the previous row. It uses binary search to find the target.","def test_search_matrix(): matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]]; assert search_matrix(matrix, 3) assert not search_matrix(matrix, 13)"
"def find_k_closest_elements(arr, k, x): left, right = 0, len(arr) - 1; while right - left >= k: if abs(arr[left] - x) > abs(arr[right] - x): left += 1; else: right -= 1; return arr[left:right + 1]","Finds the k closest elements to a target value.

This function returns the k closest elements to the target x in the sorted input list arr. It uses a sliding window approach to find the k elements with the smallest absolute difference to x.","def test_find_k_closest_elements(): assert find_k_closest_elements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4] assert find_k_closest_elements([1, 2, 3, 4, 5], 4, -1) == [1, 2, 3, 4]"
"def multiply_strings(num1, num2): res = [0] * (len(num1) + len(num2)); num1, num2 = num1[::-1], num2[::-1]; for i in range(len(num1)): for j in range(len(num2)): res[i + j] += int(num1[i]) * int(num2[j]); res[i + j + 1] += res[i + j] // 10; res[i + j] %= 10; while len(res) > 1 and res[-1] == 0: res.pop(); return ''.join(map(str, res[::-1]))","Multiplies two non-negative integers represented as strings.

This function returns the product of two non-negative integers num1 and num2, represented as strings. It performs multiplication similarly to how it is done manually and returns the result as a string.","def test_multiply_strings(): assert multiply_strings(""123"", ""456"") == ""56088"" assert multiply_strings(""2"", ""3"") == ""6"""
"def count_unique_paths(m, n): dp = [[1] * n for _ in range(m)]; for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1]; return dp[m - 1][n - 1]","Finds the number of unique paths in a grid.

This function returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. It uses dynamic programming to calculate the number of ways to reach each cell.","def test_count_unique_paths(): assert count_unique_paths(3, 7) == 28 assert count_unique_paths(3, 2) == 3"
"def can_partition(nums): total_sum = sum(nums); if total_sum % 2 != 0: return False; target = total_sum // 2; dp = [False] * (target + 1); dp[0] = True; for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num]; return dp[target]","Determines if the array can be partitioned into two subsets with equal sums.

This function returns True if the input array nums can be partitioned into two subsets with equal sums, and False otherwise. It uses dynamic programming to solve the subset-sum problem.","def test_can_partition(): assert can_partition([1, 5, 11, 5]) assert not can_partition([1, 2, 3, 5])"
"def swap_pairs(head): dummy = ListNode(0); dummy.next = head; prev, curr = dummy, head; while curr and curr.next: next_pair = curr.next.next; second = curr.next; second.next = curr; curr.next = next_pair; prev.next = second; prev = curr; curr = next_pair; return dummy.next","Swaps every two adjacent nodes in a linked list.

This function swaps every two adjacent nodes in the input linked list head. It uses iteration to modify the pointers and returns the new head of the list.","def test_swap_pairs(): head = ListNode(1, ListNode(2, ListNode(3, ListNode(4)))); new_head = swap_pairs(head); assert linked_list_to_list(new_head) == [2, 1, 4, 3]"
"def num_ways(n, k): if n == 0: return 0; if n == 1: return k; same, diff = 0, k; for i in range(2, n + 1): same, diff = diff, (same + diff) * (k - 1); return same + diff","Finds the number of ways to paint a fence with k colors.

This function returns the number of ways to paint n fence posts using k colors such that no more than two adjacent fence posts have the same color. It uses dynamic programming to compute the solution efficiently.","def test_num_ways(): assert num_ways(3, 2) == 6 assert num_ways(4, 3) == 24"
"def is_happy_number(n): def next_number(num): return sum(int(digit) ** 2 for digit in str(num)); slow, fast = n, next_number(n); while fast != 1 and slow != fast: slow = next_number(slow); fast = next_number(next_number(fast)); return fast == 1","Determines if a number is a happy number.

This function returns True if the input integer n is a happy number, and False otherwise. A happy number is defined by repeatedly replacing the number with the sum of the squares of its digits until it equals 1.",def test_is_happy_number(): assert is_happy_number(19) assert not is_happy_number(20)
def sum_of_left_leaves(root): if not root: return 0; left_sum = sum_of_left_leaves(root.left); right_sum = sum_of_left_leaves(root.right); if root.left and not root.left.left and not root.left.right: return root.left.val + right_sum; return left_sum + right_sum,"Calculates the sum of all left leaves in a binary tree.

This function returns the sum of all left leaves in the binary tree rooted at root. A left leaf is a node that is the left child of its parent and has no children.","def test_sum_of_left_leaves(): root = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert sum_of_left_leaves(root) == 24"
"def find_closest_value_in_bst(tree, target): closest = float('inf'); current = tree; while current: if abs(target - closest) > abs(target - current.val): closest = current.val; current = current.left if target < current.val else current.right; return closest","Finds the closest value to a target in a binary search tree.

This function returns the value in the binary search tree that is closest to the given target. It uses a binary search approach to minimize the difference between the node values and the target.","def test_find_closest_value_in_bst(): root = TreeNode(10, TreeNode(5), TreeNode(15, TreeNode(13), TreeNode(22))); assert find_closest_value_in_bst(root, 12) == 13"
"def all_divisors(n): return [i for i in range(1, n // 2 + 1) if n % i == 0] + [n]","Finds all divisors of a number.

This function returns a list of all divisors of the input integer n. A divisor is a number that divides n without leaving a remainder.","def test_all_divisors(): assert all_divisors(28) == [1, 2, 4, 7, 14, 28] assert all_divisors(12) == [1, 2, 3, 4, 6, 12]"
"def bitwise_and_of_range(m, n): shift = 0; while m != n: m >>= 1; n >>= 1; shift += 1; return m << shift","Calculates the bitwise AND of all numbers in a range.

This function returns the result of performing a bitwise AND on all integers between m and n, inclusive. It repeatedly shifts m and n right until they are equal, then shifts the result back.","def test_bitwise_and_of_range(): assert bitwise_and_of_range(5, 7) == 4 assert bitwise_and_of_range(0, 1) == 0"
"def find_majority_element(nums): count, candidate = 0, None; for num in nums: if count == 0: candidate = num; count += 1 if num == candidate else -1; return candidate","Finds the majority element in an array.

This function returns the majority element in the input array nums, where the majority element is defined as the element that appears more than n/2 times. It uses the Boyer-Moore Voting Algorithm to find the majority in O(n) time.","def test_find_majority_element(): assert find_majority_element([3, 2, 3]) == 3 assert find_majority_element([2, 2, 1, 1, 1, 2, 2]) == 2"
"def reverse_vowels(s): vowels = set('aeiouAEIOU'); s = list(s); left, right = 0, len(s) - 1; while left < right: if s[left] not in vowels: left += 1; elif s[right] not in vowels: right -= 1; else: s[left], s[right] = s[right], s[left]; left += 1; right -= 1; return ''.join(s)","Reverses the vowels in a string.

This function returns a new string where the vowels in the input string s are reversed, while the order of the consonants remains the same. It uses two pointers to swap the vowels.",def test_reverse_vowels(): assert reverse_vowels("hello") == "holle" assert reverse_vowels("leetcode") == "leotcede"
"def split_array_largest_sum(nums, m): def valid(mid): count, current_sum = 1, 0; for num in nums: current_sum += num; if current_sum > mid: count += 1; current_sum = num; return count <= m; left, right = max(nums), sum(nums); while left < right: mid = (left + right) // 2; if valid(mid): right = mid; else: left = mid + 1; return left","Splits an array into m subarrays with the largest possible sum minimized.

This function returns the minimum largest sum among m subarrays into which the input list nums is split. It uses binary search to find the optimal solution.","def test_split_array_largest_sum(): assert split_array_largest_sum([7, 2, 5, 10, 8], 2) == 18 assert split_array_largest_sum([1, 2, 3, 4, 5], 2) == 9"
def remove_duplicates_sorted_list(head): current = head; while current and current.next: if current.val == current.next.val: current.next = current.next.next; else: current = current.next; return head,"Removes duplicates from a sorted linked list.

This function removes all duplicates from a sorted linked list and returns the head of the modified list. It uses an iterative approach to skip duplicate nodes.","def test_remove_duplicates_sorted_list(): head = ListNode(1, ListNode(1, ListNode(2))); new_head = remove_duplicates_sorted_list(head); assert linked_list_to_list(new_head) == [1, 2]"
"def candy_distribution(ratings): n = len(ratings); candies = [1] * n; for i in range(1, n): if ratings[i] > ratings[i - 1]: candies[i] = candies[i - 1] + 1; for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: candies[i] = max(candies[i], candies[i + 1] + 1); return sum(candies)","Distributes candies according to children's ratings.

This function returns the minimum number of candies required to distribute to children based on their ratings. Each child must receive at least one candy, and children with higher ratings receive more candies than their neighbors.","def test_candy_distribution(): assert candy_distribution([1, 0, 2]) == 5 assert candy_distribution([1, 2, 2]) == 4"
"def delete_duplicates_from_unsorted_list(head): seen = set(); dummy = ListNode(0); dummy.next = head; prev, curr = dummy, head; while curr: if curr.val in seen: prev.next = curr.next; else: seen.add(curr.val); prev = curr; curr = curr.next; return dummy.next","Removes duplicates from an unsorted linked list.

This function removes all duplicates from an unsorted linked list. It uses a set to track seen values and returns the head of the modified list.","def test_delete_duplicates_from_unsorted_list(): head = ListNode(1, ListNode(2, ListNode(3, ListNode(2)))); new_head = delete_duplicates_from_unsorted_list(head); assert linked_list_to_list(new_head) == [1, 2, 3]"
"def number_of_connected_components(n, edges): parent = list(range(n)); def find(x): if parent[x] != x: parent[x] = find(parent[x]); return parent[x]; def union(x, y): rootX, rootY = find(x), find(y); if rootX != rootY: parent[rootY] = rootX; for x, y in edges: union(x, y); return len(set(find(x) for x in range(n)))","Finds the number of connected components in a graph.

This function returns the number of connected components in a graph with n nodes and the given edges. It uses the union-find algorithm to group connected components.","def test_number_of_connected_components(): assert number_of_connected_components(5, [[0, 1], [1, 2], [3, 4]]) == 2 assert number_of_connected_components(4, [[0, 1], [2, 3]]) == 2"
def minimum_moves_to_equal_array_elements(nums): min_num = min(nums); return sum(num - min_num for num in nums),"Calculates the minimum moves to equalize an array.

This function returns the minimum number of moves required to make all elements in the input list nums equal, where a move involves incrementing n - 1 elements by 1.","def test_minimum_moves_to_equal_array_elements(): assert minimum_moves_to_equal_array_elements([1, 2, 3]) == 3 assert minimum_moves_to_equal_array_elements([1, 1, 1]) == 0"
def robot_return_to_origin(moves): x = y = 0; for move in moves: if move == 'U': y += 1; elif move == 'D': y -= 1; elif move == 'L': x -= 1; elif move == 'R': x += 1; return x == 0 and y == 0,"Determines if a robot returns to the origin.

This function returns True if the robot returns to the origin after executing a series of moves in the input string moves, where 'U', 'D', 'L', and 'R' represent up, down, left, and right movements, respectively.",def test_robot_return_to_origin(): assert robot_return_to_origin("UD") assert not robot_return_to_origin("LL")
"def peak_index_in_mountain_array(arr): left, right = 0, len(arr) - 1; while left < right: mid = (left + right) // 2; if arr[mid] < arr[mid + 1]: left = mid + 1; else: right = mid; return left","Finds the peak index in a mountain array.

This function returns the peak index of the input mountain array arr, where elements strictly increase up to the peak and then strictly decrease. It uses binary search to find the peak.","def test_peak_index_in_mountain_array(): assert peak_index_in_mountain_array([0, 2, 1, 0]) == 1 assert peak_index_in_mountain_array([0, 10, 5, 2]) == 1"
"def nth_super_ugly_number(n, primes): ugly_numbers = [1]; indices = [0] * len(primes); next_multiples = list(primes); for _ in range(1, n): next_ugly = min(next_multiples); ugly_numbers.append(next_ugly); for i in range(len(primes)): if next_multiples[i] == next_ugly: indices[i] += 1; next_multiples[i] = primes[i] * ugly_numbers[indices[i]]; return ugly_numbers[-1]","Finds the n-th super ugly number.

This function returns the n-th super ugly number, where super ugly numbers are positive integers whose prime factors are in the input list primes. It uses dynamic programming and a min-heap to generate the sequence.","def test_nth_super_ugly_number(): assert nth_super_ugly_number(12, [2, 7, 13, 19]) == 32 assert nth_super_ugly_number(1, [2, 3, 5]) == 1"
def repeated_substring_pattern(s): return (s + s)[1:-1].find(s) != -1,"Checks if a string contains a repeated substring pattern.

This function returns True if the input string s can be constructed by repeating a substring, and False otherwise. It uses string manipulation to efficiently check for repeated patterns.",def test_repeated_substring_pattern(): assert repeated_substring_pattern("abab") assert not repeated_substring_pattern("aba")
"def can_jump(nums): max_reach = 0; for i, num in enumerate(nums): if i > max_reach: return False; max_reach = max(max_reach, i + num); return True","Determines if it is possible to reach the last index of an array.

This function returns True if it is possible to reach the last index of the input list nums, where each element represents the maximum jump length from that position, and False otherwise.","def test_can_jump(): assert can_jump([2, 3, 1, 1, 4]) assert not can_jump([3, 2, 1, 0, 4])"
"def pancake_sort(arr): def flip(end): arr[:end+1] = arr[:end+1][::-1]; for size in range(len(arr), 1, -1): max_idx = arr.index(max(arr[:size])); if max_idx != size - 1: flip(max_idx); flip(size - 1); return arr","Sorts an array using only pancake flips.

This function sorts the input list arr using pancake flips. A pancake flip reverses the elements of the array up to a given index. The function repeatedly finds the largest element and moves it to its correct position using flips.","def test_pancake_sort(): assert pancake_sort([3, 2, 4, 1]) == [1, 2, 3, 4] assert pancake_sort([1, 2, 3]) == [1, 2, 3]"
def min_stack(): stack = []; min_stack = []; def push(val): stack.append(val); if not min_stack or val <= min_stack[-1]: min_stack.append(val); def pop(): if stack.pop() == min_stack[-1]: min_stack.pop(); def top(): return stack[-1]; def get_min(): return min_stack[-1],"Implements a stack with constant-time min retrieval.

This function defines a stack that supports push, pop, top, and retrieving the minimum element in constant time. It uses two stacks: one for the main stack and one to keep track of the minimum elements.",def test_min_stack(): s = min_stack(); s.push(5); s.push(2); s.push(8); assert s.get_min() == 2; s.pop(); assert s.get_min() == 2; s.pop(); assert s.get_min() == 5
"def matrix_multiplication(A, B): result = [[0] * len(B[0]) for _ in range(len(A))]; for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j]; return result","Multiplies two matrices.

This function returns the product of two matrices A and B. The matrices are assumed to be compatible for multiplication. The function uses triple nested loops to compute the matrix multiplication.","def test_matrix_multiplication(): A = [[1, 2], [3, 4]]; B = [[5, 6], [7, 8]]; assert matrix_multiplication(A, B) == [[19, 22], [43, 50]]"
"def max_area_histogram(heights): stack, max_area = [], 0; for i, h in enumerate(heights + [0]): while stack and heights[stack[-1]] > h: height = heights[stack.pop()]; width = i if not stack else i - stack[-1] - 1; max_area = max(max_area, height * width); stack.append(i); return max_area","Finds the largest rectangle in a histogram.

This function returns the area of the largest rectangle that can be formed in a histogram represented by the input list heights. It uses a stack to keep track of the indices of the bars.","def test_max_area_histogram(): assert max_area_histogram([2, 1, 5, 6, 2, 3]) == 10 assert max_area_histogram([1, 2, 3, 4, 5]) == 9"
"def rotate_matrix(matrix): n = len(matrix); for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j]; matrix[i][j] = matrix[n - j - 1][i]; matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]; matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]; matrix[j][n - i - 1] = temp","Rotates a matrix 90 degrees clockwise.

This function rotates the input square matrix matrix by 90 degrees clockwise in place. It swaps elements in layers, starting from the outermost layer and working inward.","def test_rotate_matrix(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_matrix(matrix); assert matrix == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"
"def valid_palindrome_ii(s): def is_palindrome_range(i, j): return all(s[k] == s[j-k+i] for k in range(i, (j+i)//2+1)); for i in range(len(s) // 2): if s[i] != s[~i]: j = len(s) - 1 - i; return is_palindrome_range(i+1, j) or is_palindrome_range(i, j-1); return True","Checks if a string can be a palindrome by deleting at most one character.

This function returns True if the input string s can become a palindrome by removing at most one character, and False otherwise. It uses two-pointer comparison and recursion to handle the check.",def test_valid_palindrome_ii(): assert valid_palindrome_ii("abca") assert not valid_palindrome_ii("abc")
"def interval_intersection(A, B): i, j, res = 0, 0, []; while i < len(A) and j < len(B): lo = max(A[i][0], B[j][0]); hi = min(A[i][1], B[j][1]); if lo <= hi: res.append([lo, hi]); if A[i][1] < B[j][1]: i += 1; else: j += 1; return res","Finds intersections between two lists of intervals.

This function returns a list of intervals representing the intersections between the intervals in the input lists A and B. Each interval in A and B is assumed to be disjoint and sorted by the start time.","def test_interval_intersection(): A = [[0, 2], [5, 10], [13, 23]]; B = [[1, 5], [8, 12], [15, 24]]; assert interval_intersection(A, B) == [[1, 2], [5, 5], [8, 10], [15, 23]]"
"def insertion_sort(nums): for i in range(1, len(nums)): key = nums[i]; j = i - 1; while j >= 0 and key < nums[j]: nums[j + 1] = nums[j]; j -= 1; nums[j + 1] = key; return nums","Sorts an array using insertion sort.

This function returns the sorted version of the input list nums using the insertion sort algorithm. It repeatedly inserts the current element into the sorted portion of the list.","def test_insertion_sort(): assert insertion_sort([12, 11, 13, 5, 6]) == [5, 6, 11, 12, 13] assert insertion_sort([4, 3, 2, 1]) == [1, 2, 3, 4]"
"def balanced_binary_tree(root): def height(node): if not node: return 0; left = height(node.left); right = height(node.right); if left == -1 or right == -1 or abs(left - right) > 1: return -1; return max(left, right) + 1; return height(root) != -1","Checks if a binary tree is height-balanced.

This function returns True if the binary tree rooted at root is height-balanced, and False otherwise. A height-balanced binary tree is one in which the height difference between the left and right subtrees is at most 1 for every node.","def test_balanced_binary_tree(): root = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert balanced_binary_tree(root) root_unbalanced = TreeNode(1, TreeNode(2, TreeNode(3))); assert not balanced_binary_tree(root_unbalanced)"
"def three_sum(nums): nums.sort(); res = []; for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue; left, right = i + 1, len(nums) - 1; while left < right: s = nums[i] + nums[left] + nums[right]; if s < 0: left += 1; elif s > 0: right -= 1; else: res.append([nums[i], nums[left], nums[right]]); while left < right and nums[left] == nums[left + 1]: left += 1; while left < right and nums[right] == nums[right - 1]: right -= 1; left += 1; right -= 1; return res","Finds all unique triplets that sum to zero.

This function returns all unique triplets [a, b, c] in the input list nums such that a + b + c = 0. It uses sorting and two pointers to find the triplets in O(n^2) time.","def test_three_sum(): assert three_sum([-1, 0, 1, 2, -1, -4]) == [[-1, -1, 2], [-1, 0, 1]] assert three_sum([0, 1, 1]) == []"
"def combination_sum_iii(k, n): res = []; def backtrack(start, target, path): if len(path) == k and target == 0: res.append(path[:]); return; for i in range(start, 10): if target - i < 0: break; backtrack(i + 1, target - i, path + [i]); backtrack(1, n, []); return res","Finds all valid combinations of k numbers that sum to n.

This function returns all valid combinations of k numbers that sum to n, where only numbers 1 through 9 can be used, and each combination should be unique. It uses backtracking to generate the combinations.","def test_combination_sum_iii(): assert combination_sum_iii(3, 7) == [[1, 2, 4]] assert combination_sum_iii(3, 9) == [[1, 2, 6], [1, 3, 5], [2, 3, 4]]"
"def binary_gap(N): last, max_gap = -1, 0; for i in range(32): if (N >> i) & 1: if last != -1: max_gap = max(max_gap, i - last); last = i; return max_gap","Finds the longest binary gap between two consecutive 1s in a binary representation of a number.

This function returns the longest distance between two consecutive 1s in the binary representation of the input integer N. It shifts bits and checks each bit's value.",def test_binary_gap(): assert binary_gap(22) == 2 assert binary_gap(8) == 0
"def diagonal_traverse(matrix): if not matrix: return []; res, m, n, d = [], len(matrix), len(matrix[0]), 1; row, col = 0, 0; for _ in range(m * n): res.append(matrix[row][col]); if d == 1: if col == n - 1: row += 1; d = -1; elif row == 0: col += 1; d = -1; else: row -= 1; col += 1; else: if row == m - 1: col += 1; d = 1; elif col == 0: row += 1; d = 1; else: row += 1; col -= 1; return res","Returns all elements of a matrix in diagonal order.

This function returns the elements of the input matrix in diagonal order, starting from the top-left corner and alternating between diagonals. It handles boundary conditions to switch between upward and downward diagonals.","def test_diagonal_traverse(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; assert diagonal_traverse(matrix) == [1, 2, 4, 7, 5, 3, 6, 8, 9]"
"def flatten_nested_list(nested_list): def flatten(nested): for el in nested: if isinstance(el, list): yield from flatten(el); else: yield el; return list(flatten(nested_list))","Flattens a nested list of integers.

This function returns a flattened version of the input list nested_list, where the list may contain other nested lists of integers. It uses recursion and generators to handle arbitrarily nested lists.","def test_flatten_nested_list(): assert flatten_nested_list([1, [2, [3, 4]], 5]) == [1, 2, 3, 4, 5] assert flatten_nested_list([1, [2, [3]], 4, 5]) == [1, 2, 3, 4, 5]"
"def max_sliding_window(nums, k): deque, res = [], []; for i, num in enumerate(nums): if deque and deque[0] == i - k: deque.pop(0); while deque and nums[deque[-1]] < num: deque.pop(); deque.append(i); if i >= k - 1: res.append(nums[deque[0]]); return res","Finds the maximum element in each sliding window of size k.

This function returns a list of the maximum elements in each sliding window of size k in the input list nums. It uses a deque to maintain the indices of potential maximums in the current window.","def test_max_sliding_window(): assert max_sliding_window([1, 3, -1, -3, 5, 3, 6, 7], 3) == [3, 3, 5, 5, 6, 7] assert max_sliding_window([1, -1], 1) == [1, -1]"
"def spiral_matrix(n): matrix = [[0] * n for _ in range(n)]; num, left, right, top, bottom = 1, 0, n - 1, 0, n - 1; while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num; num += 1; top += 1; for i in range(top, bottom + 1): matrix[i][right] = num; num += 1; right -= 1; for i in range(right, left - 1, -1): matrix[bottom][i] = num; num += 1; bottom -= 1; for i in range(bottom, top - 1, -1): matrix[i][left] = num; num += 1; left += 1; return matrix","Generates an n x n matrix filled with elements in spiral order.

This function returns an n x n matrix filled with the integers from 1 to n^2, arranged in spiral order starting from the top-left corner. It uses a four-pointer approach to fill the matrix layer by layer.","def test_spiral_matrix(): assert spiral_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]] assert spiral_matrix(1) == [[1]]"
"def zigzag_conversion(s, num_rows): if num_rows == 1 or num_rows >= len(s): return s; rows, current_row, going_down = [''] * num_rows, 0, False; for c in s: rows[current_row] += c; if current_row == 0 or current_row == num_rows - 1: going_down = not going_down; current_row += 1 if going_down else -1; return ''.join(rows)","Converts a string into zigzag order.

This function returns the string s arranged in zigzag order across num_rows rows. It simulates the zigzag pattern and collects the characters row by row. The zigzag pattern follows a vertical and diagonal movement.","def test_zigzag_conversion(): assert zigzag_conversion(""PAYPALISHIRING"", 3) == ""PAHNAPLSIIGYIR"" assert zigzag_conversion(""ABC"", 1) == ""ABC"""
"def dutch_national_flag(nums): low, mid, high = 0, 0, len(nums) - 1; while mid <= high: if nums[mid] == 0: nums[low], nums[mid] = nums[mid], nums[low]; low += 1; mid += 1; elif nums[mid] == 1: mid += 1; else: nums[mid], nums[high] = nums[high], nums[mid]; high -= 1","Sorts an array of 0s, 1s, and 2s in place.

This function sorts an array containing only 0s, 1s, and 2s using the Dutch National Flag algorithm. It uses three pointers to rearrange the elements in linear time.","def test_dutch_national_flag(): nums = [2, 0, 1]; dutch_national_flag(nums); assert nums == [0, 1, 2]"
"def reverse_string_in_place(s): left, right = 0, len(s) - 1; while left < right: s[left], s[right] = s[right], s[left]; left += 1; right -= 1","Reverses a string in place.

This function reverses the input list s, where each element is a character. It uses two pointers to swap characters at the beginning and end of the list, gradually moving inward.","def test_reverse_string_in_place(): s = list(""hello""); reverse_string_in_place(s); assert s == [""o"", ""l"", ""l"", ""e"", ""h""]"
def find_missing_number(nums): n = len(nums) + 1; return n * (n - 1) // 2 - sum(nums),"Finds the missing number from an array of 1 to n.

This function returns the missing number in a list nums that contains numbers from 1 to n, where one number is missing. It uses the formula for the sum of the first n numbers to find the missing element.","def test_find_missing_number(): assert find_missing_number([3, 0, 1]) == 2 assert find_missing_number([9,6,4,2,3,5,7,0,1]) == 8"
"def search_insert_position(nums, target): left, right = 0, len(nums) - 1; while left <= right: mid = (left + right) // 2; if nums[mid] == target: return mid; elif nums[mid] < target: left = mid + 1; else: right = mid - 1; return left","Finds the insertion position of a target in a sorted array.

This function returns the index at which the target value should be inserted into the input sorted list nums. If the target is already present, it returns its current index. It uses binary search to find the correct position.","def test_search_insert_position(): assert search_insert_position([1, 3, 5, 6], 5) == 2 assert search_insert_position([1, 3, 5, 6], 2) == 1"
"def max_subarray_sum(nums): current_sum = max_sum = nums[0]; for num in nums[1:]: current_sum = max(num, current_sum + num); max_sum = max(max_sum, current_sum); return max_sum","Finds the maximum sum of a subarray.

This function returns the maximum sum of a contiguous subarray in the input list nums. It uses Kadane? algorithm to compute the maximum subarray sum in O(n) time.","def test_max_subarray_sum(): assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6 assert max_subarray_sum([1]) == 1"
"def roman_to_int(s): values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}; total = 0; for i in range(len(s)): if i > 0 and values[s[i]] > values[s[i - 1]]: total += values[s[i]] - 2 * values[s[i - 1]]; else: total += values[s[i]]; return total","Converts a Roman numeral to an integer.

This function converts the input Roman numeral string s to an integer. It uses a dictionary to map Roman symbols to their integer values and handles the subtractive notation by checking the previous symbol.",def test_roman_to_int(): assert roman_to_int("III") == 3 assert roman_to_int("IV") == 4 assert roman_to_int("IX") == 9
def transpose_matrix(matrix): return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))],"Transposes a matrix.

This function returns the transpose of the input matrix matrix, where the rows and columns are swapped. It uses a list comprehension to generate the transposed matrix.","def test_transpose_matrix(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; assert transpose_matrix(matrix) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]"
"def is_valid_bst(root, low=float('-inf'), high=float('inf')): if not root: return True; if not (low < root.val < high): return False; return is_valid_bst(root.left, low, root.val) and is_valid_bst(root.right, root.val, high)","Checks if a binary tree is a valid binary search tree.

This function returns True if the binary tree rooted at root is a valid binary search tree, and False otherwise. It recursively checks if each node? value is within a valid range.","def test_is_valid_bst(): root = TreeNode(2, TreeNode(1), TreeNode(3)); assert is_valid_bst(root)"
def single_number(nums): result = 0; for num in nums: result ^= num; return result,"Finds the single number in an array where every other number appears twice.

This function returns the single number in the input list nums, where every element appears twice except for one. It uses bitwise XOR to isolate the unique number.","def test_single_number(): assert single_number([2, 2, 1]) == 1 assert single_number([4, 1, 2, 1, 2]) == 4"
"def merge_two_sorted_arrays(nums1, nums2): merged, i, j = [], 0, 0; while i < len(nums1) and j < len(nums2): if nums1[i] < nums2[j]: merged.append(nums1[i]); i += 1; else: merged.append(nums2[j]); j += 1; merged += nums1[i:] + nums2[j:]; return merged","Merges two sorted arrays into one sorted array.

This function returns a merged sorted array from the two input sorted arrays nums1 and nums2. It uses a two-pointer approach to merge the arrays in linear time.","def test_merge_two_sorted_arrays(): assert merge_two_sorted_arrays([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6] assert merge_two_sorted_arrays([0, 1], [2, 3]) == [0, 1, 2, 3]"
"def add_binary(a, b): result, carry, i, j = [], 0, len(a) - 1, len(b) - 1; while i >= 0 or j >= 0 or carry: total = carry; if i >= 0: total += int(a[i]); if j >= 0: total += int(b[j]); result.append(str(total % 2)); carry = total // 2; i -= 1; j -= 1; return ''.join(reversed(result))","Adds two binary strings.

This function returns the sum of two binary strings a and b as a binary string. It simulates binary addition by iterating from the end of both strings and keeping track of the carry.","def test_add_binary(): assert add_binary(""11"", ""1"") == ""100"" assert add_binary(""1010"", ""1011"") == ""10101"""
"def find_kth_largest(nums, k): return sorted(nums, reverse=True)[k - 1]","Finds the k-th largest element in an array.

This function returns the k-th largest element in the input list nums. It sorts the list in descending order and returns the element at the k-th position.","def test_find_kth_largest(): assert find_kth_largest([3, 2, 1, 5, 6, 4], 2) == 5 assert find_kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4"
"def num_ways_to_climb_stairs(n): if n == 1: return 1; dp = [0] * (n + 1); dp[1], dp[2] = 1, 2; for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2]; return dp[n]","Finds the number of ways to climb a staircase with n steps.

This function returns the number of distinct ways to climb a staircase with n steps, where each time you can either climb 1 or 2 steps. It uses dynamic programming to solve the problem in O(n) time.",def test_num_ways_to_climb_stairs(): assert num_ways_to_climb_stairs(2) == 2 assert num_ways_to_climb_stairs(3) == 3
"def rotate_array(nums, k): k %= len(nums); nums[:] = nums[-k:] + nums[:-k]","Rotates an array to the right by k steps.

This function rotates the input list nums to the right by k steps. It handles cases where k is larger than the length of the list by using modulo arithmetic.","def test_rotate_array(): nums = [1, 2, 3, 4, 5, 6, 7]; rotate_array(nums, 3); assert nums == [5, 6, 7, 1, 2, 3, 4]"
"def valid_mountain_array(arr): i, n = 0, len(arr); while i + 1 < n and arr[i] < arr[i + 1]: i += 1; if i == 0 or i == n - 1: return False; while i + 1 < n and arr[i] > arr[i + 1]: i += 1; return i == n - 1","Checks if an array is a valid mountain array.

This function returns True if the input list arr is a valid mountain array, meaning it has an increasing sequence followed by a strictly decreasing sequence, and False otherwise.","def test_valid_mountain_array(): assert valid_mountain_array([0, 3, 2, 1]) assert not valid_mountain_array([3, 5, 5])"
"def find_peak_element(nums): left, right = 0, len(nums) - 1; while left < right: mid = (left + right) // 2; if nums[mid] > nums[mid + 1]: right = mid; else: left = mid + 1; return left","Finds a peak element in an array.

This function returns the index of a peak element in the input list nums, where a peak element is greater than its neighbors. It uses binary search to find the peak in O(log n) time.","def test_find_peak_element(): assert find_peak_element([1, 2, 3, 1]) == 2 assert find_peak_element([1, 2, 1, 3, 5, 6, 4]) in {1, 5}"
"def longest_consecutive_sequence(nums): num_set, longest = set(nums), 0; for num in nums: if num - 1 not in num_set: current_num, current_streak = num, 1; while current_num + 1 in num_set: current_num += 1; current_streak += 1; longest = max(longest, current_streak); return longest","Finds the longest consecutive sequence in an array.

This function returns the length of the longest consecutive sequence of numbers in the input list nums. It uses a set to efficiently check for consecutive numbers.","def test_longest_consecutive_sequence(): assert longest_consecutive_sequence([100, 4, 200, 1, 3, 2]) == 4 assert longest_consecutive_sequence([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9"
"def house_robber(nums): if not nums: return 0; if len(nums) == 1: return nums[0]; dp = [0] * len(nums); dp[0], dp[1] = nums[0], max(nums[0], nums[1]); for i in range(2, len(nums)): dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]); return dp[-1]","Finds the maximum amount of money a robber can rob without robbing two adjacent houses.

This function returns the maximum amount of money a robber can rob from the input list nums, where each element represents the amount of money in a house. The robber cannot rob two adjacent houses.","def test_house_robber(): assert house_robber([1, 2, 3, 1]) == 4 assert house_robber([2, 7, 9, 3, 1]) == 12"
"def climb_stairs_with_memo(n, memo={}): if n <= 2: return n; if n not in memo: memo[n] = climb_stairs_with_memo(n - 1, memo) + climb_stairs_with_memo(n - 2, memo); return memo[n]","Finds the number of ways to climb stairs using memoization.

This function returns the number of distinct ways to climb a staircase with n steps, where each time you can climb either 1 or 2 steps. It uses memoization to optimize recursive calls.",def test_climb_stairs_with_memo(): assert climb_stairs_with_memo(5) == 8 assert climb_stairs_with_memo(10) == 89
"def zigzag_level_order(root): if not root: return []; res, queue, reverse = [], [root], False; while queue: level, next_queue = [], []; for node in queue: level.append(node.val); if node.left: next_queue.append(node.left); if node.right: next_queue.append(node.right); if reverse: level.reverse(); res.append(level); queue = next_queue; reverse = not reverse; return res","Returns the zigzag level-order traversal of a binary tree.

This function returns the zigzag level-order traversal of the binary tree rooted at root, alternating between left-to-right and right-to-left at each level. It uses a queue and a flag to reverse levels as needed.","def test_zigzag_level_order(): root = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert zigzag_level_order(root) == [[3], [20, 9], [15, 7]]"
"def number_of_arithmetic_slices(nums): count, total = 0, 0; for i in range(2, len(nums)): if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]: count += 1; total += count; else: count = 0; return total","Counts the number of arithmetic slices in an array.

This function returns the number of arithmetic slices in the input list nums. An arithmetic slice is a subarray of at least three elements where the difference between consecutive elements is constant.","def test_number_of_arithmetic_slices(): assert number_of_arithmetic_slices([1, 2, 3, 4]) == 3 assert number_of_arithmetic_slices([1, 2, 3, 8, 9, 10]) == 2"
"def largest_divisible_subset(nums): nums.sort(); dp = [[num] for num in nums]; for i in range(len(nums)): for j in range(i): if nums[i] % nums[j] == 0 and len(dp[j]) + 1 > len(dp[i]): dp[i] = dp[j] + [nums[i]]; return max(dp, key=len)","Finds the largest divisible subset in an array.

This function returns the largest subset of the input list nums where every pair of elements (a, b) in the subset satisfies a % b == 0 or b % a == 0. It uses dynamic programming to build the subset.","def test_largest_divisible_subset(): assert largest_divisible_subset([1, 2, 3]) == [1, 2] assert largest_divisible_subset([1, 2, 4, 8]) == [1, 2, 4, 8]"
"def can_attend_meetings(intervals): intervals.sort(key=lambda x: x[0]); for i in range(1, len(intervals)): if intervals[i][0] < intervals[i - 1][1]: return False; return True","Checks if a person can attend all meetings.

This function returns True if a person can attend all the meetings represented by the input list intervals, where each interval is a meeting time. It checks for overlapping intervals by sorting and comparing start and end times.","def test_can_attend_meetings(): assert can_attend_meetings([[0, 30], [5, 10], [15, 20]]) == False assert can_attend_meetings([[7, 10], [2, 4]]) == True"
"def sum_root_to_leaf_numbers(root, current_sum=0): if not root: return 0; current_sum = current_sum * 10 + root.val; if not root.left and not root.right: return current_sum; return sum_root_to_leaf_numbers(root.left, current_sum) + sum_root_to_leaf_numbers(root.right, current_sum)","Calculates the sum of all root-to-leaf numbers.

This function returns the sum of all root-to-leaf numbers in the binary tree rooted at root, where each root-to-leaf path forms a number. It uses depth-first search to traverse the tree and build the numbers.","def test_sum_root_to_leaf_numbers(): root = TreeNode(1, TreeNode(2), TreeNode(3)); assert sum_root_to_leaf_numbers(root) == 25"
"def kth_smallest_in_sorted_matrix(matrix, k): flat = [element for row in matrix for element in row]; flat.sort(); return flat[k - 1]","Finds the k-th smallest element in a sorted matrix.

This function returns the k-th smallest element in the input matrix, where each row and column is sorted in ascending order. It flattens the matrix and sorts it to find the k-th smallest element.","def test_kth_smallest_in_sorted_matrix(): matrix = [[1, 5, 9], [10, 11, 13], [12, 13, 15]]; assert kth_smallest_in_sorted_matrix(matrix, 8) == 13"
"def can_jump_to_end(nums): max_reach = 0; for i, num in enumerate(nums): if i > max_reach: return False; max_reach = max(max_reach, i + num); return True","Determines if you can reach the last index.

This function returns True if it is possible to reach the last index of the input list nums, where each element represents the maximum jump length at that position, and False otherwise.","def test_can_jump_to_end(): assert can_jump_to_end([2, 3, 1, 1, 4]) assert not can_jump_to_end([3, 2, 1, 0, 4])"
"def unique_paths_iii(grid): def dfs(x, y, remain): if not (0 <= x < len(grid)) or not (0 <= y < len(grid[0])) or grid[x][y] < 0: return 0; if grid[x][y] == 2: return remain == 0; temp, grid[x][y] = grid[x][y], -2; paths = dfs(x+1, y, remain-1) + dfs(x-1, y, remain-1) + dfs(x, y+1, remain-1) + dfs(x, y-1, remain-1); grid[x][y] = temp; return paths; start_x = start_y = 0; empty_cells = 1; for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: start_x, start_y = i, j; if grid[i][j] == 0: empty_cells += 1; return dfs(start_x, start_y, empty_cells)","Counts all unique paths from start to end in a grid.

This function returns the number of unique paths from the start cell to the end cell in the input grid grid, where the path must visit all non-obstacle cells exactly once. It uses depth-first search (DFS) to explore all paths.","def test_unique_paths_iii(): grid = [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 2, -1]]; assert unique_paths_iii(grid) == 2"
"def champagne_tower(poured, query_row, query_glass): tower = [[0] * k for k in range(1, query_row + 3)]; tower[0][0] = poured; for r in range(query_row): for c in range(r + 1): if tower[r][c] > 1: overflow = (tower[r][c] - 1) / 2; tower[r+1][c] += overflow; tower[r+1][c+1] += overflow; tower[r][c] = 1; return min(1, tower[query_row][query_glass])","Calculates the amount of champagne in a glass.

This function returns the amount of champagne in the glass at position query_glass in row query_row of a champagne tower after pouring poured glasses of champagne into the top glass.","def test_champagne_tower(): assert champagne_tower(1, 1, 1) == 0 assert champagne_tower(2, 1, 1) == 0.5"
"def isomorphic_strings(s, t): s_map, t_map = {}, {}; for i in range(len(s)): if s_map.get(s[i], t[i]) != t[i] or t_map.get(t[i], s[i]) != s[i]: return False; s_map[s[i]] = t[i]; t_map[t[i]] = s[i]; return True","Checks if two strings are isomorphic.

This function returns True if the input strings s and t are isomorphic, meaning each character in s can be mapped to a unique character in t, and False otherwise. It uses two hash maps to track the mappings.","def test_isomorphic_strings(): assert isomorphic_strings(""egg"", ""add"") assert not isomorphic_strings(""foo"", ""bar"")"
"def find_all_anagrams(s, p): from collections import Counter; p_count = Counter(p); s_count = Counter(s[:len(p)-1]); result = []; for i in range(len(p)-1, len(s)): s_count[s[i]] += 1; if s_count == p_count: result.append(i-len(p)+1); s_count[s[i-len(p)+1]] -= 1; if s_count[s[i-len(p)+1]] == 0: del s_count[s[i-len(p)+1]]; return result","Finds all start indices of p's anagrams in s.

This function returns a list of starting indices where the input string p's anagrams appear in the input string s. It uses a sliding window and Counter to track character frequencies.","def test_find_all_anagrams(): assert find_all_anagrams(""cbaebabacd"", ""abc"") == [0, 6] assert find_all_anagrams(""abab"", ""ab"") == [0, 1, 2]"
"def kth_largest_element_in_array(nums, k): import heapq; return heapq.nlargest(k, nums)[-1]","Finds the k-th largest element in an array.

This function returns the k-th largest element in the input list nums. It uses Python? heapq.nlargest() function to find the k-th largest element efficiently.","def test_kth_largest_element_in_array(): assert kth_largest_element_in_array([3, 2, 1, 5, 6, 4], 2) == 5 assert kth_largest_element_in_array([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4"
"def is_palindrome_linked_list(head): slow, fast = head, head; prev = None; while fast and fast.next: fast = fast.next.next; prev, slow.next, slow = slow, prev, slow.next; tail = slow; while prev: if prev.val != tail.val: return False; prev, tail = prev.next, tail.next; return True","Checks if a linked list is a palindrome.

This function returns True if the input singly linked list head is a palindrome, and False otherwise. It uses two pointers to reverse the first half of the list and compares it to the second half.","def test_is_palindrome_linked_list(): head = ListNode(1, ListNode(2, ListNode(2, ListNode(1)))); assert is_palindrome_linked_list(head) head2 = ListNode(1, ListNode(2)); assert not is_palindrome_linked_list(head2)"
"def longest_palindromic_substring(s): def expand_from_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1; right += 1; return s[left + 1:right]; result = """"; for i in range(len(s)): odd_pal = expand_from_center(i, i); even_pal = expand_from_center(i, i + 1); result = max(result, odd_pal, even_pal, key=len); return result","Finds the longest palindromic substring in a string.

This function returns the longest palindromic substring in the input string s. It uses the expand-around-center technique to check for palindromes centered at each character or pair of characters.","def test_longest_palindromic_substring(): assert longest_palindromic_substring(""babad"") in [""bab"", ""aba""] assert longest_palindromic_substring(""cbbd"") == ""bb"""
"def find_duplicate_in_array(nums): slow, fast = nums[0], nums[nums[0]]; while slow != fast: slow = nums[slow]; fast = nums[nums[fast]]; slow = 0; while slow != fast: slow = nums[slow]; fast = nums[fast]; return slow","Finds the duplicate number in an array.

This function returns the duplicate number in the input array nums where each integer is between 1 and n. It uses Floyd's Tortoise and Hare algorithm to detect a cycle and find the duplicate.","def test_find_duplicate_in_array(): assert find_duplicate_in_array([1, 3, 4, 2, 2]) == 2 assert find_duplicate_in_array([3, 1, 3, 4, 2]) == 3"
"def decode_ways(s): if not s: return 0; dp = [0] * (len(s) + 1); dp[0] = dp[1] = 1 if s[0] != '0' else 0; for i in range(2, len(s) + 1): if 1 <= int(s[i - 1:i]) <= 9: dp[i] += dp[i - 1]; if 10 <= int(s[i - 2:i]) <= 26: dp[i] += dp[i - 2]; return dp[-1]","Decodes a string representing a number into possible letter combinations.

This function returns the number of ways the input string s, representing a number, can be decoded into letters where 'A' = 1, 'B' = 2, ..., 'Z' = 26. It uses dynamic programming to find the solution.",def test_decode_ways(): assert decode_ways("12") == 2 assert decode_ways("226") == 3 assert decode_ways("06") == 0
"def all_permutations(nums): res = []; def backtrack(start): if start == len(nums): res.append(nums[:]); for i in range(start, len(nums)): nums[start], nums[i] = nums[i], nums[start]; backtrack(start + 1); nums[start], nums[i] = nums[i], nums[start]; backtrack(0); return res","Generates all permutations of a list.

This function returns all permutations of the input list nums. It uses backtracking to recursively generate each permutation by swapping elements.","def test_all_permutations(): assert all_permutations([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"
"def max_sum_increasing_subsequence(nums): dp = nums[:]; for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + nums[i]); return max(dp)","Finds the maximum sum of an increasing subsequence.

This function returns the maximum sum of an increasing subsequence in the input list nums, where each element in the subsequence is greater than the one before it. It uses dynamic programming to compute the solution.","def test_max_sum_increasing_subsequence(): assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5]) == 106 assert max_sum_increasing_subsequence([3, 4, 5, 10]) == 22"
"def find_peak_in_bitonic_array(arr): left, right = 0, len(arr) - 1; while left < right: mid = (left + right) // 2; if arr[mid] > arr[mid + 1]: right = mid; else: left = mid + 1; return left","Finds the peak in a bitonic array.

This function returns the index of the peak element in the input bitonic array arr, where elements first increase and then decrease. It uses binary search to find the peak efficiently.","def test_find_peak_in_bitonic_array(): assert find_peak_in_bitonic_array([1, 3, 8, 12, 4, 2]) == 3 assert find_peak_in_bitonic_array([3, 9, 8, 6, 4, 2]) == 1"
"def remove_k_digits(num, k): stack = []; for digit in num: while k and stack and stack[-1] > digit: stack.pop(); k -= 1; stack.append(digit); while k: stack.pop(); k -= 1; return ''.join(stack).lstrip('0') or '0'","Removes k digits from a number to make it smallest.

This function removes k digits from the input string num, which represents a non-negative integer, to make the resulting number as small as possible. It uses a greedy approach and a stack to build the smallest number.","def test_remove_k_digits(): assert remove_k_digits(""1432219"", 3) == ""1219"" assert remove_k_digits(""10200"", 1) == ""200"""
def simplify_path(path): stack = []; for part in path.split('/'): if part == '' or part == '.': continue; elif part == '..': if stack: stack.pop(); else: stack.append(part); return '/' + '/'.join(stack),"Simplifies a Unix file path.

This function returns the simplified version of the input Unix-style file path path. It uses a stack to process directories and handles special components like ""."" and "".."".",def test_simplify_path(): assert simplify_path("/home//foo/") == "/home/foo" assert simplify_path("/../") == "/"
"def find_words_by_prefix(words, prefix): return [word for word in words if word.startswith(prefix)]","Finds all words starting with a given prefix.

This function returns a list of all words from the input list words that start with the given prefix. It uses Python's startswith() method to check for matching prefixes.","def test_find_words_by_prefix(): words = [""apple"", ""app"", ""banana"", ""application""]; assert find_words_by_prefix(words, ""app"") == [""apple"", ""app"", ""application""]"
"def has_duplicate_subtree(root): def serialize(node): if not node: return '#'; serial = f'{node.val},{serialize(node.left)},{serialize(node.right)}'; count[serial] += 1; if count[serial] == 2: result.append(node); return serial; from collections import defaultdict; count = defaultdict(int); result = []; serialize(root); return bool(result)","Checks if a binary tree has a duplicate subtree.

This function returns True if the binary tree rooted at root contains a duplicate subtree of size 2 or more, and False otherwise. It serializes the subtrees to check for duplicates.","def test_has_duplicate_subtree(): root = TreeNode(1, TreeNode(2, TreeNode(4)), TreeNode(3, TreeNode(2, TreeNode(4)), TreeNode(4))); assert has_duplicate_subtree(root)"
"def max_profit_with_fee(prices, fee): cash, hold = 0, -prices[0]; for price in prices[1:]: cash = max(cash, hold + price - fee); hold = max(hold, cash - price); return cash","Finds the maximum profit from buying and selling stocks with a transaction fee.

This function returns the maximum profit that can be obtained by buying and selling stocks given a list prices, where each element represents the stock price on a given day, and fee represents a fixed transaction cost.","def test_max_profit_with_fee(): assert max_profit_with_fee([1, 3, 2, 8, 4, 9], 2) == 8"
def string_compression(chars): index = 0; i = 0; while i < len(chars): char = chars[i]; count = 0; while i < len(chars) and chars[i] == char: i += 1; count += 1; chars[index] = char; index += 1; if count > 1: for digit in str(count): chars[index] = digit; index += 1; return index,"Compresses a list of characters in place.

This function compresses the input list chars by replacing repeated sequences of characters with the character followed by the number of occurrences. It modifies the list in place and returns the new length.","def test_string_compression(): chars = [""a"", ""a"", ""b"", ""b"", ""c"", ""c"", ""c""]; assert string_compression(chars) == 6 assert chars[:6] == [""a"", ""2"", ""b"", ""2"", ""c"", ""3""]"
def longest_common_prefix(strs): if not strs: return ""; prefix = strs[0]; for s in strs[1:]: while not s.startswith(prefix): prefix = prefix[:-1]; if not prefix: break; return prefix,"Finds the longest common prefix among strings.

This function returns the longest common prefix among the input list of strings strs. If there is no common prefix, it returns an empty string. It iteratively shortens the prefix until it matches all strings.","def test_longest_common_prefix(): assert longest_common_prefix([""flower"", ""flow"", ""flight""]) == ""fl"" assert longest_common_prefix([""dog"", ""racecar"", ""car""]) == """""
"def next_greater_element(nums1, nums2): stack, mapping = [], {}; for num in nums2: while stack and stack[-1] < num: mapping[stack.pop()] = num; stack.append(num); return [mapping.get(num, -1) for num in nums1]","Finds the next greater element for elements in nums1.

This function returns a list of the next greater elements for each element in nums1, where the next greater element for x in nums1 is the first element greater than x to the right in nums2. It uses a stack to process nums2.","def test_next_greater_element(): assert next_greater_element([4, 1, 2], [1, 3, 4, 2]) == [-1, 3, -1]"
"def min_cost_climbing_stairs(cost): n = len(cost); dp = [0] * (n + 1); for i in range(2, n + 1): dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]); return dp[-1]","Finds the minimum cost to climb stairs.

This function returns the minimum cost required to reach the top of the stairs, where each element in the input list cost represents the cost of stepping on that stair. You can climb either one or two stairs at a time.","def test_min_cost_climbing_stairs(): assert min_cost_climbing_stairs([10, 15, 20]) == 15 assert min_cost_climbing_stairs([1, 100, 1, 1, 1, 100, 1, 1, 100, 1]) == 6"
def valid_mountain(arr): n = len(arr); i = 0; while i + 1 < n and arr[i] < arr[i + 1]: i += 1; if i == 0 or i == n - 1: return False; while i + 1 < n and arr[i] > arr[i + 1]: i += 1; return i == n - 1,"Determines if an array is a valid mountain.

This function returns True if the input list arr is a valid mountain, where there is a peak element with strictly increasing elements before it and strictly decreasing elements after it.","def test_valid_mountain(): assert valid_mountain([0, 3, 2, 1]) assert not valid_mountain([2, 1])"
"def binary_search_recursive(nums, target, left=0, right=None): if right is None: right = len(nums) - 1; if left > right: return -1; mid = (left + right) // 2; if nums[mid] == target: return mid; elif nums[mid] < target: return binary_search_recursive(nums, target, mid + 1, right); else: return binary_search_recursive(nums, target, left, mid - 1)","Performs recursive binary search.

This function returns the index of the target element in the input list nums using binary search. If the target is not found, it returns -1. It uses recursion to divide the search space.","def test_binary_search_recursive(): assert binary_search_recursive([1, 2, 3, 4, 5], 3) == 2 assert binary_search_recursive([1, 2, 3, 4, 5], 6) == -1"
"def generate_pascal_triangle(num_rows): triangle = [[1]]; for i in range(1, num_rows): row = [1]; for j in range(1, i): row.append(triangle[i - 1][j - 1] + triangle[i - 1][j]); row.append(1); triangle.append(row); return triangle","Generates Pascal's Triangle.

This function returns Pascal's Triangle with num_rows rows, where each row contains binomial coefficients. The triangle is generated by summing adjacent elements from the previous row.","def test_generate_pascal_triangle(): assert generate_pascal_triangle(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"
"def is_palindrome_number(x): if x < 0: return False; original, reversed_num = x, 0; while x > 0: reversed_num = reversed_num * 10 + x % 10; x //= 10; return original == reversed_num","Checks if a number is a palindrome.

This function returns True if the input integer x is a palindrome, and False otherwise. A number is a palindrome if it reads the same forwards and backwards. It constructs the reverse of the number and compares it to the original.",def test_is_palindrome_number(): assert is_palindrome_number(121) assert not is_palindrome_number(-121) assert not is_palindrome_number(10)
"def maximum_product_subarray(nums): max_prod = min_prod = result = nums[0]; for num in nums[1:]: temp_max = max(num, max_prod * num, min_prod * num); min_prod = min(num, max_prod * num, min_prod * num); max_prod = temp_max; result = max(result, max_prod); return result","Finds the maximum product of a subarray.

This function returns the maximum product of any contiguous subarray in the input list nums. It uses dynamic programming to keep track of the current maximum and minimum product at each step.","def test_maximum_product_subarray(): assert maximum_product_subarray([2, 3, -2, 4]) == 6 assert maximum_product_subarray([-2, 0, -1]) == 0"
"def rotate_matrix_anticlockwise(matrix): n = len(matrix); for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j]; matrix[i][j] = matrix[j][n - 1 - i]; matrix[j][n - 1 - i] = matrix[n - 1 - i][n - 1 - j]; matrix[n - 1 - i][n - 1 - j] = matrix[n - 1 - j][i]; matrix[n - 1 - j][i] = temp","Rotates a matrix 90 degrees anticlockwise.

This function rotates the input square matrix 90 degrees anticlockwise in place. It uses nested loops to swap the elements layer by layer starting from the outermost layer.","def test_rotate_matrix_anticlockwise(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; rotate_matrix_anticlockwise(matrix); assert matrix == [[3, 6, 9], [2, 5, 8], [1, 4, 7]]"
def find_unique_characters_in_order(s): unique_chars = set(); result = []; for char in s: if char not in unique_chars: unique_chars.add(char); result.append(char); return ''.join(result),"Finds unique characters in a string while preserving order.

This function returns a string containing the unique characters of the input string s, preserving their original order. It uses a set to track the characters that have already been added.",def test_find_unique_characters_in_order(): assert find_unique_characters_in_order("swiss") == "swi" assert find_unique_characters_in_order("abca") == "abc"
"def is_happy(n): def next_num(n): return sum(int(digit) ** 2 for digit in str(n)); slow, fast = n, next_num(n); while fast != 1 and slow != fast: slow = next_num(slow); fast = next_num(next_num(fast)); return fast == 1","Determines if a number is a happy number.

This function returns True if the input integer n is a happy number, and False otherwise. A happy number is one where repeatedly replacing the number with the sum of the squares of its digits eventually equals 1.",def test_is_happy(): assert is_happy(19) assert not is_happy(2)
"def longest_word_in_dict(words): words.sort(key=lambda x: (-len(x), x)); word_set = set(words); for word in words: if all(word[:i] in word_set for i in range(1, len(word))): return word; return """"","Finds the longest word in a dictionary.

This function returns the longest word in the input list words that can be built one character at a time by other words in the list. If there are multiple possible results, it returns the lexicographically smallest one.","def test_longest_word_in_dict(): assert longest_word_in_dict([""w"", ""wo"", ""wor"", ""worl"", ""world""]) == ""world"" assert longest_word_in_dict([""a"", ""banana"", ""app"", ""appl"", ""ap"", ""apply"", ""apple""]) == ""apple"""
"def find_first_unique_character(s): from collections import Counter; count = Counter(s); for i, char in enumerate(s): if count[char] == 1: return i; return -1","Finds the first unique character in a string.

This function returns the index of the first non-repeating character in the input string s, or -1 if all characters repeat. It uses a Counter to count the occurrences of each character.",def test_find_first_unique_character(): assert find_first_unique_character("leetcode") == 0 assert find_first_unique_character("loveleetcode") == 2 assert find_first_unique_character("aabb") == -1
"def flatten_dictionary(d): def flatten(curr_dict, parent_key=""""): items = []; for k, v in curr_dict.items(): new_key = f""{parent_key}.{k}"" if parent_key else k; if isinstance(v, dict): items.extend(flatten(v, new_key).items()); else: items.append((new_key, v)); return dict(items); return flatten(d)","Flattens a nested dictionary.

This function flattens a nested dictionary d by concatenating keys with a period ('.'). It recursively traverses the dictionary and combines nested keys into single keys.","def test_flatten_dictionary(): d = {""a"": 1, ""b"": {""c"": 2, ""d"": {""e"": 3}}}; assert flatten_dictionary(d) == {""a"": 1, ""b.c"": 2, ""b.d.e"": 3}"
def reverse_words_in_string(s): return ' '.join(s.split()[::-1]),"Reverses the order of words in a string.

This function takes a string s as input and returns a string where the order of words has been reversed. It splits the string by spaces, reverses the word list, and joins it back into a string.",def test_reverse_words_in_string(): assert reverse_words_in_string("hello world") == "world hello" assert reverse_words_in_string(" good morning ") == "morning good"
"def merge_overlapping_intervals(intervals): intervals.sort(key=lambda x: x[0]); merged = []; for interval in intervals: if not merged or merged[-1][1] < interval[0]: merged.append(interval); else: merged[-1][1] = max(merged[-1][1], interval[1]); return merged","Merges overlapping intervals.

This function merges overlapping intervals from the input list intervals. It first sorts the intervals by their starting point, then iterates through the intervals to merge them if they overlap.","def test_merge_overlapping_intervals(): assert merge_overlapping_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]) == [[1, 6], [8, 10], [15, 18]]"
"def largest_rectangle_histogram(heights): stack, max_area = [], 0; for i, h in enumerate(heights + [0]): while stack and heights[stack[-1]] > h: height = heights[stack.pop()]; width = i if not stack else i - stack[-1] - 1; max_area = max(max_area, height * width); stack.append(i); return max_area","Finds the largest rectangle in a histogram.

This function returns the area of the largest rectangle that can be formed from the heights of bars in a histogram represented by the input list heights. It uses a stack to calculate the area efficiently.","def test_largest_rectangle_histogram(): assert largest_rectangle_histogram([2, 1, 5, 6, 2, 3]) == 10 assert largest_rectangle_histogram([2, 4]) == 4"
"def min_distance_between_words(words, word1, word2): idx1 = idx2 = -1; min_dist = float('inf'); for i, word in enumerate(words): if word == word1: idx1 = i; if word == word2: idx2 = i; if idx1 != -1 and idx2 != -1: min_dist = min(min_dist, abs(idx1 - idx2)); return min_dist if min_dist != float('inf') else -1","Finds the minimum distance between two words in a list.

This function returns the minimum distance between two words word1 and word2 in the input list words. It keeps track of the indices of the two words and updates the minimum distance as it traverses the list.","def test_min_distance_between_words(): words = [""practice"", ""makes"", ""perfect"", ""coding"", ""makes""]; assert min_distance_between_words(words, ""coding"", ""practice"") == 3"
"def has_cycle_in_linked_list(head): slow, fast = head, head; while fast and fast.next: slow = slow.next; fast = fast.next.next; if slow == fast: return True; return False","Detects if a linked list has a cycle.

This function returns True if the input linked list has a cycle, and False otherwise. It uses two pointers, slow and fast, where the fast pointer moves twice as fast as the slow pointer. If they meet, there is a cycle.","def test_has_cycle_in_linked_list(): head = ListNode(3, ListNode(2, ListNode(0, ListNode(-4)))); head.next.next.next.next = head.next; assert has_cycle_in_linked_list(head)"
"def min_max_game(nums): while len(nums) > 1: new_nums = []; for i in range(len(nums) // 2): if i % 2 == 0: new_nums.append(min(nums[2 * i], nums[2 * i + 1])); else: new_nums.append(max(nums[2 * i], nums[2 * i + 1])); nums = new_nums; return nums[0]","Applies a min-max game to reduce the array.

This function applies a min-max game to reduce the input list nums until only one number remains. In each round, it replaces each pair with either the minimum or the maximum value, alternating between the two.","def test_min_max_game(): assert min_max_game([1, 3, 5, 2, 4, 8, 2, 2]) == 1 assert min_max_game([7, 9, 2, 3]) == 2"
"def shortest_path_bfs(graph, start, end): from collections import deque; queue = deque([(start, [start])]); visited = set(); while queue: node, path = queue.popleft(); if node == end: return path; if node not in visited: visited.add(node); for neighbor in graph[node]: queue.append((neighbor, path + [neighbor])); return None","Finds the shortest path between two nodes in a graph using BFS.

This function returns the shortest path between two nodes start and end in the input graph using Breadth-First Search (BFS). It explores the graph level by level to find the shortest path.","def test_shortest_path_bfs(): graph = {""A"": [""B"", ""C""], ""B"": [""D"", ""E""], ""C"": [""F""], ""D"": [], ""E"": [""F""], ""F"": []}; assert shortest_path_bfs(graph, ""A"", ""F"") == [""A"", ""C"", ""F""]"
def rearrange_bars_to_make_palindrome(s): from collections import Counter; counts = Counter(s); odd_count = sum(1 for count in counts.values() if count % 2 != 0); return odd_count <= 1,"Determines if a string can be rearranged into a palindrome.

This function returns True if the input string s can be rearranged into a palindrome, and False otherwise. A string can form a palindrome if it has at most one character with an odd frequency.",def test_rearrange_bars_to_make_palindrome(): assert rearrange_bars_to_make_palindrome("civic") assert rearrange_bars_to_make_palindrome("ivicc") assert not rearrange_bars_to_make_palindrome("hello")
def delete_node_in_linked_list(node): node.val = node.next.val; node.next = node.next.next,"Deletes a node from a linked list given only that node.

This function deletes the input node from a singly linked list given only that node. It replaces the value of the current node with the value of the next node and removes the next node.","def test_delete_node_in_linked_list(): head = ListNode(4, ListNode(5, ListNode(1, ListNode(9)))); delete_node_in_linked_list(head.next); assert head.val == 4 and head.next.val == 1"
def most_frequent_element(nums): from collections import Counter; return Counter(nums).most_common(1)[0][0],"Finds the most frequent element in a list.

This function returns the most frequent element in the input list nums. It uses Python's collections.Counter to count the frequency of each element and returns the most common one.","def test_most_frequent_element(): assert most_frequent_element([1, 3, 3, 2, 2, 3]) == 3 assert most_frequent_element([1, 1, 2, 2, 3]) == 1"
"def valid_parentheses(s): stack = []; mapping = {"")"": ""("", ""}"": ""{"", ""]"": ""[""}; for char in s: if char in mapping: top = stack.pop() if stack else ""#""; if mapping[char] != top: return False; else: stack.append(char); return not stack","Checks if parentheses in a string are valid.

This function returns True if the parentheses in the input string s are valid, and False otherwise. It uses a stack to check for balanced and correctly nested parentheses.",def test_valid_parentheses(): assert valid_parentheses("()") assert valid_parentheses("()[]{}") assert not valid_parentheses("(]")
"def transpose_square_matrix(matrix): n = len(matrix); for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]; return matrix","Transposes a square matrix in place.

This function transposes the input square matrix matrix in place. It swaps elements across the diagonal, effectively transposing the matrix.","def test_transpose_square_matrix(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; assert transpose_square_matrix(matrix) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]"
"def nearest_smaller_element(arr): stack, result = [], []; for num in arr: while stack and stack[-1] >= num: stack.pop(); result.append(stack[-1] if stack else -1); stack.append(num); return result","Finds the nearest smaller element for each element.

This function returns a list of the nearest smaller elements for each element in the input list arr. It uses a stack to track the previous smaller elements as it traverses the list.","def test_nearest_smaller_element(): assert nearest_smaller_element([4, 5, 2, 10, 8]) == [-1, 4, -1, 2, 2] assert nearest_smaller_element([3, 7, 8, 4]) == [-1, 3, 7, 3]"
"def integer_to_roman(num): val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]; syms = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]; roman = """"; for i in range(len(val)): while num >= val[i]: roman += syms[i]; num -= val[i]; return roman","Converts an integer to a Roman numeral.

This function converts the input integer num to its corresponding Roman numeral. It iterates through the Roman numeral values and appends symbols to the result string.",def test_integer_to_roman(): assert integer_to_roman(58) == "LVIII" assert integer_to_roman(1994) == "MCMXCIV"
"def plus_one(digits): for i in range(len(digits) - 1, -1, -1): if digits[i] < 9: digits[i] += 1; return digits; digits[i] = 0; return [1] + digits","Adds one to a number represented as a list of digits.

This function adds one to the input number represented as a list of digits. It increments the least significant digit, handling carry-over as necessary. If all digits are 9, a new digit is added at the beginning.","def test_plus_one(): assert plus_one([1, 2, 3]) == [1, 2, 4] assert plus_one([9, 9, 9]) == [1, 0, 0, 0]"
"def reverse_linked_list(head): prev, curr = None, head; while curr: next_node = curr.next; curr.next = prev; prev = curr; curr = next_node; return prev","Reverses a linked list.

This function reverses the input singly linked list and returns the new head. It uses an iterative approach, reversing the direction of each node's next pointer as it traverses the list.","def test_reverse_linked_list(): head = ListNode(1, ListNode(2, ListNode(3, ListNode(4)))); new_head = reverse_linked_list(head); assert new_head.val == 4 and new_head.next.val == 3"
def count_ones_in_binary(n): count = 0; while n: count += n & 1; n >>= 1; return count,"Counts the number of 1s in the binary representation of a number.

This function returns the number of 1s (set bits) in the binary representation of the input integer n. It iteratively shifts the bits to the right and checks the least significant bit.",def test_count_ones_in_binary(): assert count_ones_in_binary(5) == 2 assert count_ones_in_binary(15) == 4
def find_all_duplicates(nums): res = []; for num in nums: index = abs(num) - 1; if nums[index] < 0: res.append(abs(num)); else: nums[index] = -nums[index]; return res,"Finds all duplicate elements in an array.

This function returns a list of all elements that appear more than once in the input list nums. It modifies the list in place by marking visited elements as negative.","def test_find_all_duplicates(): assert find_all_duplicates([4, 3, 2, 7, 8, 2, 3, 1]) == [2, 3] assert find_all_duplicates([1, 1, 2]) == [1]"
"def rob_houses(nums): if not nums: return 0; if len(nums) == 1: return nums[0]; dp = [0] * len(nums); dp[0], dp[1] = nums[0], max(nums[0], nums[1]); for i in range(2, len(nums)): dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]); return dp[-1]","Finds the maximum amount of money that can be robbed from non-adjacent houses.

This function returns the maximum amount of money that can be robbed from a row of houses represented by the input list nums. No two adjacent houses can be robbed. It uses dynamic programming to compute the maximum amount.","def test_rob_houses(): assert rob_houses([1, 2, 3, 1]) == 4 assert rob_houses([2, 7, 9, 3, 1]) == 12"
def sort_array_by_parity(nums): return [x for x in nums if x % 2 == 0] + [x for x in nums if x % 2 != 0],"Sorts the array by parity.

This function sorts the input array nums such that all even numbers appear before odd numbers, while maintaining the relative order of even and odd numbers. It uses list comprehensions to achieve this.","def test_sort_array_by_parity(): assert sort_array_by_parity([3, 1, 2, 4]) == [2, 4, 3, 1]"
"def unique_morse_representations(words): morse_map = { 'a': "".-"", 'b': ""-..."", 'c': ""-.-."", 'd': ""-.."", 'e': ""."", 'f': ""..-."", 'g': ""--."", 'h': ""...."", 'i': "".."", 'j': "".---"", 'k': ""-.-"", 'l': "".-.."", 'm': ""--"", 'n': ""-."", 'o': ""---"", 'p': "".--."", 'q': ""--.-"", 'r': "".-."", 's': ""..."", 't': ""-"", 'u': ""..-"", 'v': ""...-"", 'w': "".--"", 'x': ""-..-"", 'y': ""-.--"", 'z': ""--..""}; transformations = {''.join(morse_map[c] for c in word) for word in words}; return len(transformations)","Counts unique Morse code representations.

This function returns the number of unique Morse code representations that can be made from the input list of words. It uses a dictionary to map letters to Morse code and computes unique transformations.","def test_unique_morse_representations(): assert unique_morse_representations([""gin"", ""zen"", ""gig"", ""msg""]) == 2"
"def find_pairs_with_given_sum(nums, target): num_set = set(); pairs = set(); for num in nums: diff = target - num; if diff in num_set: pairs.add((min(num, diff), max(num, diff))); num_set.add(num); return list(pairs)","Finds pairs of numbers that sum to a target.

This function returns a list of unique pairs of numbers from the input list nums that sum to the given target. It uses a set to efficiently check for the complement of each number.","def test_find_pairs_with_given_sum(): assert find_pairs_with_given_sum([2, 4, 3, 5, 7, 8], 9) == [(4, 5), (2, 7)]"
"def rotate_array_left(arr, k): n = len(arr); k %= n; return arr[k:] + arr[:k]","Rotates an array to the left by k positions.

This function rotates the input array arr to the left by k positions. It handles cases where k is larger than the length of the array using modulo arithmetic.","def test_rotate_array_left(): assert rotate_array_left([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2] assert rotate_array_left([0, 1, 2], 4) == [1, 2, 0]"
def reverse_linked_list_recursive(head): if not head or not head.next: return head; new_head = reverse_linked_list_recursive(head.next); head.next.next = head; head.next = None; return new_head,"Recursively reverses a linked list.

This function reverses the input singly linked list recursively and returns the new head. It uses recursion to reverse the next pointers of the nodes.","def test_reverse_linked_list_recursive(): head = ListNode(1, ListNode(2, ListNode(3, ListNode(4)))); new_head = reverse_linked_list_recursive(head); assert new_head.val == 4 and new_head.next.val == 3"
"def number_of_islands(grid): def dfs(i, j): if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != '1': return; grid[i][j] = '0'; dfs(i + 1, j); dfs(i - 1, j); dfs(i, j + 1); dfs(i, j - 1); if not grid: return 0; count = 0; for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == '1': dfs(i, j); count += 1; return count","Counts the number of islands in a grid.

This function returns the number of islands in the input 2D grid grid. An island is a group of connected 1s (land) surrounded by water (0). It uses depth-first search (DFS) to traverse and mark visited land cells.","def test_number_of_islands(): grid = [[""1"",""1"",""0"",""0""],[""1"",""1"",""0"",""0""],[""0"",""0"",""1"",""0""],[""0"",""0"",""0"",""1""]]; assert number_of_islands(grid) == 3"
"def knapsack(weights, values, capacity): n = len(weights); dp = [[0] * (capacity + 1) for _ in range(n + 1)]; for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]); else: dp[i][w] = dp[i - 1][w]; return dp[n][capacity]","Solves the 0/1 Knapsack problem.

This function returns the maximum value that can be obtained from the input list of weights and values given a capacity of the knapsack. It uses dynamic programming to solve the problem.","def test_knapsack(): assert knapsack([1, 3, 4, 5], [1, 4, 5, 7], 7) == 9"
"def gcd_of_strings(str1, str2): if str1 + str2 != str2 + str1: return """"; from math import gcd; return str1[:gcd(len(str1), len(str2))]","Finds the greatest common divisor (GCD) of two strings.

This function returns the greatest common divisor (GCD) of two strings str1 and str2, defined as the largest string that can divide both str1 and str2. It uses the properties of the GCD and checks for the validity of the solution.","def test_gcd_of_strings(): assert gcd_of_strings(""ABCABC"", ""ABC"") == ""ABC"" assert gcd_of_strings(""LEET"", ""CODE"") == """""
"def is_subsequence(s, t): it = iter(t); return all(char in it for char in s)","Checks if one string is a subsequence of another.

This function returns True if the input string s is a subsequence of t, and False otherwise. A subsequence is a sequence that can be derived from another string by deleting some characters without changing the order of the remaining characters.","def test_is_subsequence(): assert is_subsequence(""abc"", ""ahbgdc"") assert not is_subsequence(""axc"", ""ahbgdc"")"
"def maximal_square(matrix): if not matrix: return 0; max_side = 0; dp = [[0] * len(matrix[0]) for _ in range(len(matrix))]; for i in range(len(matrix)): for j in range(len(matrix[0])): if matrix[i][j] == '1': if i == 0 or j == 0: dp[i][j] = 1; else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1; max_side = max(max_side, dp[i][j]); return max_side ** 2","Finds the largest square of 1s in a binary matrix.

This function returns the area of the largest square that contains only 1s in the input binary matrix matrix. It uses dynamic programming to track the size of the largest square that ends at each cell.","def test_maximal_square(): matrix = [[""1"", ""0"", ""1"", ""0"", ""0""], [""1"", ""0"", ""1"", ""1"", ""1""], [""1"", ""1"", ""1"", ""1"", ""1""], [""1"", ""0"", ""0"", ""1"", ""0""]]; assert maximal_square(matrix) == 4"
"def min_sub_array_len(target, nums): left = 0; curr_sum = 0; min_len = float('inf'); for right in range(len(nums)): curr_sum += nums[right]; while curr_sum >= target: min_len = min(min_len, right - left + 1); curr_sum -= nums[left]; left += 1; return min_len if min_len != float('inf') else 0","Finds the minimal length of a subarray with sum at least target.

This function returns the length of the smallest contiguous subarray in nums whose sum is at least target. It uses a sliding window approach to efficiently compute the subarray.","def test_min_sub_array_len(): assert min_sub_array_len(7, [2, 3, 1, 2, 4, 3]) == 2 assert min_sub_array_len(4, [1, 4, 4]) == 1"
"def next_greater_element_circular(nums): stack, res = [], [-1] * len(nums); n = len(nums); for i in range(2 * n): while stack and nums[stack[-1]] < nums[i % n]: res[stack.pop()] = nums[i % n]; if i < n: stack.append(i); return res","Finds the next greater element in a circular array.

This function returns an array where each element represents the next greater element in the input circular array nums. If there is no next greater element, the corresponding value is -1. It uses a stack to track indices and processes the array twice to handle the circular nature.","def test_next_greater_element_circular(): assert next_greater_element_circular([1, 2, 1]) == [2, -1, 2] assert next_greater_element_circular([3, 8, 4]) == [8, -1, 8]"
"def find_longest_consecutive_subsequence(nums): if not nums: return 0; num_set = set(nums); longest_streak = 0; for num in num_set: if num - 1 not in num_set: current_num = num; current_streak = 1; while current_num + 1 in num_set: current_num += 1; current_streak += 1; longest_streak = max(longest_streak, current_streak); return longest_streak","Finds the longest consecutive subsequence in an array.

This function returns the length of the longest consecutive subsequence in the input array nums. It uses a set to store the numbers and checks for consecutive sequences by finding the starting points of each sequence.","def test_find_longest_consecutive_subsequence(): assert find_longest_consecutive_subsequence([100, 4, 200, 1, 3, 2]) == 4"
"def check_palindrome_permutation(s): from collections import Counter; count = Counter(s.replace("" "", """").lower()); odd_count = sum(1 for x in count.values() if x % 2 != 0); return odd_count <= 1","Checks if a string can be permuted to form a palindrome.

This function returns True if the input string s can be permuted to form a palindrome, and False otherwise. It counts the frequency of each character and checks if at most one character has an odd frequency.",def test_check_palindrome_permutation(): assert check_palindrome_permutation("Tact Coa") assert not check_palindrome_permutation("Hello")
"def sort_colors(nums): low, mid, high = 0, 0, len(nums) - 1; while mid <= high: if nums[mid] == 0: nums[low], nums[mid] = nums[mid], nums[low]; low += 1; mid += 1; elif nums[mid] == 1: mid += 1; else: nums[high], nums[mid] = nums[mid], nums[high]; high -= 1","Sorts an array of 0s, 1s, and 2s in place.

This function sorts the input array nums consisting of 0s, 1s, and 2s. It uses the Dutch National Flag algorithm to sort the elements in a single pass.","def test_sort_colors(): nums = [2, 0, 2, 1, 1, 0]; sort_colors(nums); assert nums == [0, 0, 1, 1, 2, 2]"
"def letter_combinations_of_phone_number(digits): if not digits: return []; digit_to_letters = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}; res = [""""]; for digit in digits: res = [prefix + letter for prefix in res for letter in digit_to_letters[digit]]; return res","Finds all letter combinations from a phone number.

This function returns all possible letter combinations that the input digits string digits can represent using a phone number keypad. It uses a recursive approach to generate all combinations.","def test_letter_combinations_of_phone_number(): assert letter_combinations_of_phone_number(""23"") == [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""]"
"def reconstruct_queue(people): people.sort(key=lambda x: (-x[0], x[1])); res = []; for p in people: res.insert(p[1], p); return res","Reconstructs a queue based on people's height and order.

This function reconstructs a queue based on the input list people, where each person is represented as [height, k], and k is the number of people in front of them who have a height greater than or equal to their height. It uses a greedy approach to solve the problem.","def test_reconstruct_queue(): assert reconstruct_queue([[7, 0], [4, 4], [7, 1], [5, 0], [6, 1], [5, 2]]) == [[5, 0], [7, 0], [5, 2], [6, 1], [4, 4], [7, 1]]"
def increasing_triplet_subsequence(nums): first = second = float('inf'); for num in nums: if num <= first: first = num; elif num <= second: second = num; else: return True; return False,"Checks if the array contains an increasing triplet subsequence.

This function returns True if the input array nums contains an increasing triplet subsequence, and False otherwise. It keeps track of the smallest and second smallest values and checks if there is a third value greater than both.","def test_increasing_triplet_subsequence(): assert increasing_triplet_subsequence([1, 2, 3, 4, 5]) assert not increasing_triplet_subsequence([5, 4, 3, 2, 1])"
"def merge_two_bst(t1, t2): if not t1: return t2; if not t2: return t1; t1.val += t2.val; t1.left = merge_two_bst(t1.left, t2.left); t1.right = merge_two_bst(t1.right, t2.right); return t1","Merges two binary search trees.

This function returns a new binary search tree by merging two input trees t1 and t2. For each node that exists in both trees, their values are summed, and the merging continues recursively for left and right children.","def test_merge_two_bst(): t1 = TreeNode(1, TreeNode(3, TreeNode(5)), TreeNode(2)); t2 = TreeNode(2, TreeNode(1, None, TreeNode(4)), TreeNode(3, None, TreeNode(7))); merged = merge_two_bst(t1, t2); assert merged.val == 3 and merged.left.val == 4 and merged.right.val == 5"
"def ransom_note_can_construct(ransom_note, magazine): from collections import Counter; return not Counter(ransom_note) - Counter(magazine)","Checks if a ransom note can be constructed from a magazine.

This function returns True if the ransom_note can be constructed using the letters from the magazine, and False otherwise. It uses the Counter class to count character occurrences and checks if all required characters are present in the magazine.","def test_ransom_note_can_construct(): assert ransom_note_can_construct(""a"", ""ab"") assert not ransom_note_can_construct(""aa"", ""ab"")"
"def valid_anagram(s, t): return sorted(s) == sorted(t)","Checks if two strings are anagrams.

This function returns True if the input strings s and t are anagrams, meaning they contain the same characters with the same frequencies, and False otherwise. It sorts both strings and compares them.","def test_valid_anagram(): assert valid_anagram(""anagram"", ""nagaram"") assert not valid_anagram(""rat"", ""car"")"
"def search_2d_matrix(matrix, target): if not matrix or not matrix[0]: return False; rows, cols = len(matrix), len(matrix[0]); low, high = 0, rows * cols - 1; while low <= high: mid = (low + high) // 2; r, c = divmod(mid, cols); if matrix[r][c] == target: return True; elif matrix[r][c] < target: low = mid + 1; else: high = mid - 1; return False","Searches for a target in a 2D matrix.

This function returns True if the target is found in the input 2D matrix, where each row is sorted and the first integer of each row is greater than the last integer of the previous row. It uses binary search to search efficiently.","def test_search_2d_matrix(): matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]]; assert search_2d_matrix(matrix, 3) assert not search_2d_matrix(matrix, 13)"
"def move_zeroes(nums): non_zero_pos = 0; for i in range(len(nums)): if nums[i] != 0: nums[non_zero_pos], nums[i] = nums[i], nums[non_zero_pos]; non_zero_pos += 1","Moves all zeros to the end of the list.

This function modifies the input list nums in place by moving all the zeros to the end while maintaining the relative order of the non-zero elements. It uses two pointers to swap zero and non-zero elements.","def test_move_zeroes(): nums = [0, 1, 0, 3, 12]; move_zeroes(nums); assert nums == [1, 3, 12, 0, 0]"
"def min_number_of_coins(coins, amount): dp = [float('inf')] * (amount + 1); dp[0] = 0; for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1); return dp[amount] if dp[amount] != float('inf') else -1","Finds the minimum number of coins to make up a certain amount.

This function returns the minimum number of coins needed to make up the input amount from the list coins. It uses dynamic programming to find the minimum number of coins required.","def test_min_number_of_coins(): assert min_number_of_coins([1, 2, 5], 11) == 3 assert min_number_of_coins([2], 3) == -1"
"def license_key_formatting(s, k): s = s.replace('-', '').upper(); size = len(s); first_group = size % k or k; parts = [s[:first_group]] + [s[i:i + k] for i in range(first_group, size, k)]; return '-'.join(parts)","Formats a license key string.

This function returns the formatted version of the input string s representing a license key, where groups of characters are separated by hyphens and each group contains k characters, except the first group, which may be shorter. The letters are converted to uppercase.","def test_license_key_formatting(): assert license_key_formatting(""5F3Z-2e-9-w"", 4) == ""5F3Z-2E9W"" assert license_key_formatting(""2-5g-3-J"", 2) == ""2-5G-3J"""
def rotate_matrix_90_clockwise(matrix): return [list(reversed(col)) for col in zip(*matrix)],"Rotates a matrix 90 degrees clockwise.

This function returns a new matrix that is the input matrix rotated 90 degrees clockwise. It uses the zip function to transpose the matrix and then reverses each row to achieve the rotation.","def test_rotate_matrix_90_clockwise(): matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; assert rotate_matrix_90_clockwise(matrix) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"
"def check_valid_parentheses(s): stack = []; mapping = {"")"": ""("", ""}"": ""{"", ""]"": ""[""}; for char in s: if char in mapping: top_element = stack.pop() if stack else '#'; if mapping[char] != top_element: return False; else: stack.append(char); return not stack","Checks if a string of parentheses is valid.

This function returns True if the input string s contains valid parentheses, and False otherwise. It uses a stack to match opening and closing parentheses, ensuring that they are correctly nested.",def test_check_valid_parentheses(): assert check_valid_parentheses("()[]{}") assert not check_valid_parentheses("(]")
"def reverse_vowels_of_string(s): vowels = set(""aeiouAEIOU""); s = list(s); left, right = 0, len(s) - 1; while left < right: if s[left] not in vowels: left += 1; elif s[right] not in vowels: right -= 1; else: s[left], s[right] = s[right], s[left]; left += 1; right -= 1; return ''.join(s)","Reverses the vowels in a string.

This function returns the input string s with its vowels reversed. It uses two pointers to find vowels from both ends of the string and swaps them until all vowels are reversed.",def test_reverse_vowels_of_string(): assert reverse_vowels_of_string("hello") == "holle" assert reverse_vowels_of_string("leetcode") == "leotcede"
def check_if_palindrome(s): s = ''.join(c.lower() for c in s if c.isalnum()); return s == s[::-1],"Checks if a string is a palindrome, ignoring non-alphanumeric characters.

This function returns True if the input string s is a palindrome, ignoring non-alphanumeric characters and case, and False otherwise. It first filters out non-alphanumeric characters, then checks if the filtered string reads the same forwards and backwards.","def test_check_if_palindrome(): assert check_if_palindrome(""A man, a plan, a canal: Panama"") assert not check_if_palindrome(""race a car"")"
"def flatten_nested_list(nested_list): result = []; def flatten(lst): for item in lst: if isinstance(item, list): flatten(item); else: result.append(item); flatten(nested_list); return result","Flattens a nested list.

This function returns a flat list from the input nested list nested_list. It recursively traverses sublists and appends non-list elements to the result.","def test_flatten_nested_list(): nested_list = [1, [2, [3, 4], 5], 6]; assert flatten_nested_list(nested_list) == [1, 2, 3, 4, 5, 6]"
"def three_sum(nums): nums.sort(); res = []; for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue; left, right = i + 1, len(nums) - 1; while left < right: total = nums[i] + nums[left] + nums[right]; if total == 0: res.append([nums[i], nums[left], nums[right]]); while left < right and nums[left] == nums[left + 1]: left += 1; while left < right and nums[right] == nums[right - 1]: right -= 1; left += 1; right -= 1; elif total < 0: left += 1; else: right -= 1; return res","Finds all unique triplets in an array that sum to zero.

This function returns a list of unique triplets from the input list nums where the sum of the triplet is zero. It uses sorting and two pointers to find the triplets efficiently.","def test_three_sum(): assert three_sum([-1, 0, 1, 2, -1, -4]) == [[-1, -1, 2], [-1, 0, 1]]"
"def valid_palindrome_ii(s): def is_palindrome_range(i, j): return all(s[k] == s[j - k + i] for k in range(i, j)); for i in range(len(s) // 2): if s[i] != s[~i]: j = len(s) - 1 - i; return is_palindrome_range(i + 1, j) or is_palindrome_range(i, j - 1); return True","Checks if a string can be a palindrome by removing at most one character.

This function returns True if the input string s can be a palindrome by removing at most one character, and False otherwise. It checks for mismatches and then validates whether the rest of the string can be a palindrome.",def test_valid_palindrome_ii(): assert valid_palindrome_ii("abca") assert not valid_palindrome_ii("abc")
"def max_depth_of_binary_tree(root): if not root: return 0; left_depth = max_depth_of_binary_tree(root.left); right_depth = max_depth_of_binary_tree(root.right); return max(left_depth, right_depth) + 1","Finds the maximum depth of a binary tree.

This function returns the maximum depth of the binary tree rooted at root. It recursively calculates the depth of the left and right subtrees and returns the larger depth plus one.","def test_max_depth_of_binary_tree(): root = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))); assert max_depth_of_binary_tree(root) == 3"
def check_power_of_two(n): return n > 0 and (n & (n - 1)) == 0,"Checks if a number is a power of two.

This function returns True if the input integer n is a power of two, and False otherwise. It uses bitwise operations to determine whether n has exactly one bit set.",def test_check_power_of_two(): assert check_power_of_two(16) assert not check_power_of_two(18)
"def find_max_consecutive_ones(nums): max_count, current_count = 0, 0; for num in nums: if num == 1: current_count += 1; else: max_count = max(max_count, current_count); current_count = 0; return max(max_count, current_count)","Finds the maximum number of consecutive 1s in a binary array.

This function returns the maximum number of consecutive 1s in the input binary array nums. It iterates through the list, counting consecutive 1s and updating the maximum count.","def test_find_max_consecutive_ones(): assert find_max_consecutive_ones([1, 1, 0, 1, 1, 1]) == 3 assert find_max_consecutive_ones([1, 0, 1, 1, 0, 1]) == 2"
"def min_jumps_to_end(arr): if len(arr) == 1: return 0; max_reach, step, jumps = arr[0], arr[0], 1; for i in range(1, len(arr)): if i == len(arr) - 1: return jumps; max_reach = max(max_reach, i + arr[i]); step -= 1; if step == 0: jumps += 1; if i >= max_reach: return -1; step = max_reach - i","Finds the minimum number of jumps to reach the end of an array.

This function returns the minimum number of jumps needed to reach the last index in the input list arr, where each element represents the maximum jump length at that position. It uses a greedy approach to calculate jumps.","def test_min_jumps_to_end(): assert min_jumps_to_end([2, 3, 1, 1, 4]) == 2 assert min_jumps_to_end([1, 1, 1, 1, 1]) == 4"
"def min_cost_to_paint_houses(costs): if not costs: return 0; for i in range(1, len(costs)): costs[i][0] += min(costs[i - 1][1], costs[i - 1][2]); costs[i][1] += min(costs[i - 1][0], costs[i - 1][2]); costs[i][2] += min(costs[i - 1][0], costs[i - 1][1]); return min(costs[-1])","Finds the minimum cost to paint houses with constraints.

This function returns the minimum cost to paint all the houses such that no two adjacent houses have the same color, given a list costs where each sublist represents the cost of painting a house in three different colors. It uses dynamic programming to compute the minimum cost.","def test_min_cost_to_paint_houses(): assert min_cost_to_paint_houses([[17, 2, 17], [16, 16, 5], [14, 3, 19]]) == 10"
"def count_square_submatrices_with_ones(matrix): m, n = len(matrix), len(matrix[0]); dp = [[0] * n for _ in range(m)]; total_squares = 0; for i in range(m): for j in range(n): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1; else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1; total_squares += dp[i][j]; return total_squares","Counts square submatrices filled with ones.

This function returns the total number of square submatrices in the input 2D matrix matrix that are completely filled with ones. It uses dynamic programming to compute the size of the largest square ending at each cell.","def test_count_square_submatrices_with_ones(): matrix = [[1, 0, 1], [1, 1, 0], [1, 1, 0]]; assert count_square_submatrices_with_ones(matrix) == 5"
"def max_product_subarray(nums): max_prod, min_prod, result = nums[0], nums[0], nums[0]; for i in range(1, len(nums)): if nums[i] < 0: max_prod, min_prod = min_prod, max_prod; max_prod = max(nums[i], max_prod * nums[i]); min_prod = min(nums[i], min_prod * nums[i]); result = max(result, max_prod); return result","Finds the maximum product subarray.

This function returns the largest product of any contiguous subarray in the input list nums. It tracks both the maximum and minimum products at each index because multiplying by a negative number flips the signs.","def test_max_product_subarray(): assert max_product_subarray([2, 3, -2, 4]) == 6 assert max_product_subarray([-2, 0, -1]) == 0"
"def split_array_largest_sum(nums, m): left, right = max(nums), sum(nums); def can_split(mid): total, count = 0, 1; for num in nums: total += num; if total > mid: total = num; count += 1; return count <= m; while left < right: mid = (left + right) // 2; if can_split(mid): right = mid; else: left = mid + 1; return left","Splits an array into m subarrays with the smallest largest sum.

This function returns the smallest largest sum of m subarrays that the input list nums can be split into. It uses binary search to find the minimum possible largest sum.","def test_split_array_largest_sum(): assert split_array_largest_sum([7, 2, 5, 10, 8], 2) == 18 assert split_array_largest_sum([1, 2, 3, 4, 5], 2) == 9"
def valid_mountain_array(arr): n = len(arr); if n < 3: return False; i = 1; while i < n and arr[i] > arr[i - 1]: i += 1; if i == 1 or i == n: return False; while i < n and arr[i] < arr[i - 1]: i += 1; return i == n,"Checks if an array is a valid mountain array.

This function returns True if the input array arr is a valid mountain array, and False otherwise. A valid mountain array has strictly increasing elements followed by strictly decreasing elements, with no plateaus.","def test_valid_mountain_array(): assert valid_mountain_array([0, 3, 2, 1]) assert not valid_mountain_array([3, 5, 5])"
"def max_points_on_line(points): from collections import defaultdict; def gcd(a, b): while b: a, b = b, a % b; return a; max_points = 0; for i in range(len(points)): slope_count = defaultdict(int); duplicates = 1; for j in range(i + 1, len(points)): dx, dy = points[j][0] - points[i][0], points[j][1] - points[i][1]; if dx == 0 and dy == 0: duplicates += 1; else: g = gcd(dx, dy); slope = (dy // g, dx // g); slope_count[slope] += 1; max_points = max(max_points, max(slope_count.values(), default=0) + duplicates); return max_points","Finds the maximum number of points that lie on the same straight line.

This function returns the maximum number of points from the input list points that lie on the same straight line. It uses a hash map to count slopes between points and finds the greatest number of collinear points.","def test_max_points_on_line(): assert max_points_on_line([[1, 1], [2, 2], [3, 3]]) == 3 assert max_points_on_line([[1, 1], [3, 2], [5, 3], [4, 1], [2, 3], [1, 4]]) == 4"
"def min_deletions_to_make_frequencies_unique(s): from collections import Counter; freq = list(Counter(s).values()); freq.sort(reverse=True); deletions = 0; for i in range(1, len(freq)): if freq[i] >= freq[i - 1]: deletions += freq[i] - max(0, freq[i - 1] - 1); freq[i] = max(0, freq[i - 1] - 1); return deletions","Finds the minimum number of deletions to make character frequencies unique.

This function returns the minimum number of deletions required to make the frequencies of characters in the input string s unique. It sorts the frequencies and adjusts them to ensure uniqueness.",def test_min_deletions_to_make_frequencies_unique(): assert min_deletions_to_make_frequencies_unique("aab") == 0 assert min_deletions_to_make_frequencies_unique("aaabbbcc") == 2
"def max_profit_with_transactions(prices, k): n = len(prices); if n == 0: return 0; dp = [[0] * n for _ in range(k + 1)]; for t in range(1, k + 1): max_diff = -prices[0]; for d in range(1, n): dp[t][d] = max(dp[t][d - 1], prices[d] + max_diff); max_diff = max(max_diff, dp[t - 1][d] - prices[d]); return dp[k][-1]","Finds the maximum profit with at most k transactions.

This function returns the maximum profit that can be obtained by making at most k stock transactions, where each transaction involves buying and selling on different days. It uses dynamic programming to track the maximum profit.","def test_max_profit_with_transactions(): assert max_profit_with_transactions([2, 4, 1], 2) == 2 assert max_profit_with_transactions([3, 2, 6, 5, 0, 3], 2) == 7"
"def bitwise_and_of_range(m, n): shift = 0; while m != n: m >>= 1; n >>= 1; shift += 1; return m << shift","Computes the bitwise AND of all numbers in a range.

This function returns the bitwise AND of all numbers between m and n (inclusive). It shifts both numbers right until they are equal, then shifts the result back left by the same number of shifts.","def test_bitwise_and_of_range(): assert bitwise_and_of_range(5, 7) == 4 assert bitwise_and_of_range(0, 1) == 0"
"def is_strobogrammatic(num): mapping = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}; left, right = 0, len(num) - 1; while left <= right: if num[left] not in mapping or mapping[num[left]] != num[right]: return False; left += 1; right -= 1; return True","Checks if a number is strobogrammatic.

This function returns True if the input string num is strobogrammatic, meaning it looks the same when rotated 180 degrees, and False otherwise. It checks digit pairs from the left and right ends of the string.",def test_is_strobogrammatic(): assert is_strobogrammatic("69") assert not is_strobogrammatic("88")
"def house_robber_circular(nums): if len(nums) == 1: return nums[0]; def rob(nums): prev, curr = 0, 0; for num in nums: prev, curr = curr, max(curr, prev + num); return curr; return max(rob(nums[:-1]), rob(nums[1:]))","Solves the house robber problem on a circular street.

This function returns the maximum amount of money that can be robbed from houses arranged in a circular street, where no two adjacent houses can be robbed, and the first and last houses are adjacent. It uses dynamic programming to calculate the maximum sum.","def test_house_robber_circular(): assert house_robber_circular([2, 3, 2]) == 3 assert house_robber_circular([1, 2, 3, 1]) == 4"
"def coin_change_fewest_coins(coins, amount): dp = [float('inf')] * (amount + 1); dp[0] = 0; for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1); return dp[amount] if dp[amount] != float('inf') else -1","Finds the fewest number of coins needed to make a given amount.

This function returns the fewest number of coins needed to make the input amount using the available denominations in coins. It uses dynamic programming to compute the minimum number of coins for each amount up to the target amount.","def test_coin_change_fewest_coins(): assert coin_change_fewest_coins([1, 2, 5], 11) == 3 assert coin_change_fewest_coins([2], 3) == -1"
"def max_sliding_window(nums, k): from collections import deque; deq, result = deque(), []; for i in range(len(nums)): while deq and nums[deq[-1]] <= nums[i]: deq.pop(); deq.append(i); if deq[0] == i - k: deq.popleft(); if i >= k - 1: result.append(nums[deq[0]]); return result","Finds the maximum in each sliding window of size k.

This function returns a list of the maximum elements for each sliding window of size k in the input list nums. It uses a deque to efficiently keep track of the indices of the maximum elements within the window.","def test_max_sliding_window(): assert max_sliding_window([1, 3, -1, -3, 5, 3, 6, 7], 3) == [3, 3, 5, 5, 6, 7]"
def find_duplicate(nums): slow = fast = nums[0]; while True: slow = nums[slow]; fast = nums[nums[fast]]; if slow == fast: break; slow = nums[0]; while slow != fast: slow = nums[slow]; fast = nums[fast]; return slow,"Finds the duplicate number in an array.

This function returns the duplicate number in the input list nums, where each integer is between 1 and n and appears once except for one duplicate. It uses Floyd's Tortoise and Hare algorithm to detect the cycle caused by the duplicate number.","def test_find_duplicate(): assert find_duplicate([1, 3, 4, 2, 2]) == 2 assert find_duplicate([3, 1, 3, 4, 2]) == 3"
"def printValues():
	l = list()
	for i in range(1,31):
		l.append(i**2)
	print(l)
	","""""""
Brief Description:
------------------
printValues function performs a specific operation as described below.

Extended Description:
---------------------
This function, `printValues`, takes 0 parameters: none. It is designed to perform a certain task using these parameters.

Parameters:
-----------

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> printValues()
Expected output
""""""","import unittest

class TestPrintvalues(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = printValues()
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = printValues()
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def extract_string(str_list1, l):    result = list(filter(lambda e: len(e) == l, str_list1))    return resultstr_list1 = ['Python', 'list', 'exercises', 'practice', 'solution'] print(""Original list:"")print(str_list1)l = 8print(""\nlength of the string to extract:"")print(l)print(""\nAfter extracting strings of specified length from the said list:"")","""""""
Brief Description:
------------------
extract_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `extract_string`, takes 2 parameters: str_list1,  l. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str_list1 : type
    Description of str_list1.
l : type
    Description of l.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> extract_string(value, value)
Expected output
""""""","import unittest

class TestExtract_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = extract_string(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = extract_string(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def inset_element_list(lst, x, n):    i = n    while i < len(lst):        lst.insert(i, x)        i+= n+1    return lstnums = [1, 3, 5, 7, 9, 11,0, 2, 4, 6, 8, 10,8,9,0,4,3,0]print(""Original list:"")print(nums)x = 20n = 4print(""\nInsert"",x,""in said list after every"",n,""th element:"")print(inset_element_list(nums, x, n))chars = ['s','d','f','j','s','a','j','d','f','d']print(""\nOriginal list:"")print(chars)x = 'Z'n = 3print(""\nInsert"",x,""in said list after every"",n,""th element:"")","""""""
Brief Description:
------------------
inset_element_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `inset_element_list`, takes 3 parameters: lst,  x,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
x : type
    Description of x.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> inset_element_list(value, value, value)
Expected output
""""""","import unittest

class TestInset_element_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = inset_element_list(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = inset_element_list(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def get_max_occuring_char(str1):  ASCII_SIZE = 256  ctr = [0] * ASCII_SIZE  max = -1  ch = ''  for i in str1:    ctr[ord(i)]+=1;   for i in str1:    if max < ctr[ord(i)]:      max = ctr[ord(i)]      ch = i  return chprint(get_max_occuring_char("Python: Get file creation and modification date/times")),"""""""
Brief Description:
------------------
get_max_occuring_char function performs a specific operation as described below.

Extended Description:
---------------------
This function, `get_max_occuring_char`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> get_max_occuring_char(value)
Expected output
""""""","import unittest

class TestGet_max_occuring_char(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = get_max_occuring_char(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = get_max_occuring_char(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def word_count(str):    counts = dict()    words = str.split()    for word in words:        if word in counts:            counts[word] += 1        else:            counts[word] = 1    return countsprint( ,"""""""
Brief Description:
------------------
word_count function performs a specific operation as described below.

Extended Description:
---------------------
This function, `word_count`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> word_count(value)
Expected output
""""""","import unittest

class TestWord_count(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = word_count(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = word_count(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_last_n(nums, N):    result = nums[:len(nums)-N]    return result    nums = [2,3,9,8,2,0,39,84,2,2,34,2,34,5,3,5]print(""Original lists:"")print(nums)N = 3print(""\nRemove the last"",N,""elements from the said list:"")print(remove_last_n(nums, N))N = 5print(""\nRemove the last"",N,""elements from the said list:"")print(remove_last_n(nums, N))N = 1print(""\nRemove the last"",N,""element from the said list:"")print(remove_last_n(nums, N))","""""""
Brief Description:
------------------
remove_last_n function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_last_n`, takes 2 parameters: nums,  N. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
N : type
    Description of N.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_last_n(value, value)
Expected output
""""""","import unittest

class TestRemove_last_n(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_last_n(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_last_n(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def position_max_min(nums):    max_result = max(enumerate(nums), key=(lambda x: x[1]))    min_result = min(enumerate(nums), key=(lambda x: x[1]))    return max_result,min_resultnums = [12,33,23,10.11,67,89,45,66.7,23,12,11,10.25,54]print(""Original list:"")print(nums)result = position_max_min(nums)print(""\nIndex position and value of the maximum value of the said list:"")print(result[0])print(""\nIndex position and value of the minimum value of the said list:"")print(result[1])","""""""
Brief Description:
------------------
position_max_min function performs a specific operation as described below.

Extended Description:
---------------------
This function, `position_max_min`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> position_max_min(value)
Expected output
""""""","import unittest

class TestPosition_max_min(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = position_max_min(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = position_max_min(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def same_order(l1, l2):    common_elements = set(l1) & set(l2)    l1 = [e for e in l1 if e in common_elements]    l2 = [e for e in l2 if e in common_elements]    return l1 == l2color1 = [""red"",""green"",""black"",""orange""]color2 = [""red"",""pink"",""green"",""white"",""black""]color3 = [""white"",""orange"",""pink"",""black""]print(""Original lists:"")print(color1)print(color2)print(color3)print(""\nTest common elements between color1 and color2 are in same order?"")print(same_order(color1, color2))print(""\nTest common elements between color1 and color3 are in same order?"")print(same_order(color1, color3))print(""\nTest common elements between color2 and color3 are in same order?"")print(same_order(color2, color3))","""""""
Brief Description:
------------------
same_order function performs a specific operation as described below.

Extended Description:
---------------------
This function, `same_order`, takes 2 parameters: l1,  l2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> same_order(value, value)
Expected output
""""""","import unittest

class TestSame_order(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = same_order(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = same_order(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def last(n): return n[-1]def sort_list_last(tuples):  return sorted(tuples, key=last)print(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))","""""""
Brief Description:
------------------
last function performs a specific operation as described below.

Extended Description:
---------------------
This function, `last`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> last(value)
Expected output
""""""","import unittest

class TestLast(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = last(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = last(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def first_index(l1):    return sum(1 for i in l1 if (i> 45 and i % 2 == 0))nums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]print(""Original list:"")print(nums)n = 45print(""\nNumber of Items of the said list which are even and greater than"",n)print(first_index(nums))","""""""
Brief Description:
------------------
first_index function performs a specific operation as described below.

Extended Description:
---------------------
This function, `first_index`, takes 1 parameters: l1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> first_index(value)
Expected output
""""""","import unittest

class TestFirst_index(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = first_index(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = first_index(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def file_read(fname):        with open (fname, ""r"") as myfile:                data=myfile.readlines()                print(data)file_read('test.txt')","""""""
Brief Description:
------------------
file_read function performs a specific operation as described below.

Extended Description:
---------------------
This function, `file_read`, takes 1 parameters: fname. It is designed to perform a certain task using these parameters.

Parameters:
-----------
fname : type
    Description of fname.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> file_read(value)
Expected output
""""""","import unittest

class TestFile_read(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = file_read(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = file_read(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def swap_case_string(str1):   result_str = ""      for item in str1:       if item.isupper():           result_str += item.lower()       else:           result_str += item.upper()              return result_strprint(swap_case_string("Python Exercises"))print(swap_case_string("Java"))print(swap_case_string("NumPy")),"""""""
Brief Description:
------------------
swap_case_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `swap_case_string`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> swap_case_string(value)
Expected output
""""""","import unittest

class TestSwap_case_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = swap_case_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = swap_case_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def two_dimensional_list(nums):  return list(zip(*nums))print(two_dimensional_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))print(two_dimensional_list([[1, 2], [4, 5]]))","""""""
Brief Description:
------------------
two_dimensional_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `two_dimensional_list`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> two_dimensional_list(value)
Expected output
""""""","import unittest

class TestTwo_dimensional_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = two_dimensional_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = two_dimensional_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def first_repeated_char_smallest_distance(str1):  temp = {}  for ch in str1:    if ch in temp:      return ch, str1.index(ch);    else:      temp[ch] = 0  return 'None'print(first_repeated_char_smallest_distance(""abcabc""))print(first_repeated_char_smallest_distance(""abcb""))print(first_repeated_char_smallest_distance(""abcc""))print(first_repeated_char_smallest_distance(""abcxxy""))print(first_repeated_char_smallest_distance(""abc""))))","""""""
Brief Description:
------------------
first_repeated_char_smallest_distance function performs a specific operation as described below.

Extended Description:
---------------------
This function, `first_repeated_char_smallest_distance`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> first_repeated_char_smallest_distance(value)
Expected output
""""""","import unittest

class TestFirst_repeated_char_smallest_distance(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = first_repeated_char_smallest_distance(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = first_repeated_char_smallest_distance(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def some(lst, fn = lambda x: x):  return any(map(fn, lst))print(some([0, 1, 2, 0], lambda x: x >= 2 ))print(some([5, 10, 20, 10], lambda x: x < 2 ))","""""""
Brief Description:
------------------
some function performs a specific operation as described below.

Extended Description:
---------------------
This function, `some`, takes 2 parameters: lst,  fn = lambda x: x. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn = lambda x: x : type
    Description of fn = lambda x: x.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> some(value, value)
Expected output
""""""","import unittest

class TestSome(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = some(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = some(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def extract_string(str_list1, l):    result = [e for e in str_list1 if len(e) == l]     return resultstr_list1 = ['Python', 'list', 'exercises', 'practice', 'solution'] print(""Original list:"")print(str_list1)l = 8print(""\nlength of the string to extract:"")print(l)print(""\nAfter extracting strings of specified length from the said list:"") print(extract_string(str_list1 , l))","""""""
Brief Description:
------------------
extract_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `extract_string`, takes 2 parameters: str_list1,  l. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str_list1 : type
    Description of str_list1.
l : type
    Description of l.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> extract_string(value, value)
Expected output
""""""","import unittest

class TestExtract_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = extract_string(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = extract_string(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def diff_consecutive_nums(nums):    result = [b-a for a, b in zip(nums[:-1], nums[1:])]    return resultnums1 = [1, 1, 3, 4, 4, 5, 6, 7]print(""Original list:"")print(nums1)print(""Difference between consecutive numbers of the said list:"") print(diff_consecutive_nums(nums1))nums2 = [4, 5, 8, 9, 6, 10]print(""\nOriginal list:"")print(nums2)print(""Difference between consecutive numbers of the said list:"") print(diff_consecutive_nums(nums2))","""""""
Brief Description:
------------------
diff_consecutive_nums function performs a specific operation as described below.

Extended Description:
---------------------
This function, `diff_consecutive_nums`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> diff_consecutive_nums(value)
Expected output
""""""","import unittest

class TestDiff_consecutive_nums(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = diff_consecutive_nums(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = diff_consecutive_nums(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sieve_of_Eratosthenes(num):    limitn = num+1    not_prime_num = set()    prime_nums = []    for i in range(2, limitn):        if i in not_prime_num:            continue        for f in range(i*2, limitn, i):            not_prime_num.add(f)        prime_nums.append(i)    return prime_numsprint(sieve_of_Eratosthenes(100));","""""""
Brief Description:
------------------
sieve_of_Eratosthenes function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sieve_of_Eratosthenes`, takes 1 parameters: num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sieve_of_Eratosthenes(value)
Expected output
""""""","import unittest

class TestSieve_of_eratosthenes(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sieve_of_Eratosthenes(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sieve_of_Eratosthenes(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def mergeSort(nlist):    print(""Splitting "",nlist)    if len(nlist)>1:        mid = len(nlist)//2        lefthalf = nlist[:mid]        righthalf = nlist[mid:]        mergeSort(lefthalf)        mergeSort(righthalf)        i=j=k=0               while i < len(lefthalf) and j < len(righthalf):            if lefthalf[i] < righthalf[j]:                nlist[k]=lefthalf[i]                i=i+1            else:                nlist[k]=righthalf[j]                j=j+1            k=k+1        while i < len(lefthalf):            nlist[k]=lefthalf[i]            i=i+1            k=k+1        while j < len(righthalf):            nlist[k]=righthalf[j]            j=j+1            k=k+1    print(""Merging "",nlist)nlist = [14,46,43,27,57,41,45,21,70]mergeSort(nlist)print(nlist)","""""""
Brief Description:
------------------
mergeSort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `mergeSort`, takes 1 parameters: nlist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nlist : type
    Description of nlist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> mergeSort(value)
Expected output
""""""","import unittest

class TestMergesort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = mergeSort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = mergeSort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find(lst, fn):  return next(x for x in lst if fn(x)) print(find([1, 2, 3, 4], lambda n: n % 2 == 1))print(find([1, 2, 3, 4], lambda n: n % 2 == 0))","""""""
Brief Description:
------------------
find function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find`, takes 2 parameters: lst,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find(value, value)
Expected output
""""""","import unittest

class TestFind(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def value_check(students, n):    result = all(x == n for x in students.values())     return result  students = {'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}print(""Original Dictionary:"")print(students)n = 12print(""\nCheck all are "",n,""in the dictionary."")print(value_check(students, n))n = 10print(""\nCheck all are "",n,""in the dictionary."")print(value_check(students, n))","""""""
Brief Description:
------------------
value_check function performs a specific operation as described below.

Extended Description:
---------------------
This function, `value_check`, takes 2 parameters: students,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
students : type
    Description of students.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> value_check(value, value)
Expected output
""""""","import unittest

class TestValue_check(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = value_check(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = value_check(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def matched_index(l1, l2):    l2 = set(l2)    return [i for i, el in enumerate(l1) if el in l2]nums1 = [1, 2, 3, 4, 5 ,6]nums2 = [7, 8, 5, 2, 10, 12]print(""Original lists:"")print(nums1)print(nums2)print(""Compare said two lists and get the indices of the values present in both lists:"")print(matched_index(nums1, nums2))nums1 = [1, 2, 3, 4, 5 ,6]nums2 = [7, 8, 5, 7, 10, 12]print(""\nOriginal lists:"")print(nums1)print(nums2)print(""Compare said two lists and get the indices of the values present in both lists:"")print(matched_index(nums1, nums2))nums1 = [1, 2, 3, 4, 15 ,6]nums2 = [7, 8, 5, 7, 10, 12]print(""\nOriginal lists:"")print(nums1)print(nums2)print(""Compare said two lists and get the indices of the values present in both lists:"")print(matched_index(nums1, nums2))","""""""
Brief Description:
------------------
matched_index function performs a specific operation as described below.

Extended Description:
---------------------
This function, `matched_index`, takes 2 parameters: l1,  l2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> matched_index(value, value)
Expected output
""""""","import unittest

class TestMatched_index(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = matched_index(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = matched_index(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_k_dist(str1, k): 	str_len = len(str1) 		result = 0	ctr = [0] * 27	for i in range(0, str_len): 		dist_ctr = 0		ctr = [0] * 27		for j in range(i, str_len): 						if(ctr[ord(str1[j]) - 97] == 0): 				dist_ctr += 1			ctr[ord(str1[j]) - 97] += 1			if(dist_ctr == k): 				result += 1			if(dist_ctr > k): 				break	return result str1 = input(""Input a string (lowercase alphabets):"")k = int(input(""Input k: ""))print(""Number of substrings with exactly"", k, ""distinct characters : "", end = """") print(count_k_dist(str1, k))","""""""
Brief Description:
------------------
count_k_dist function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_k_dist`, takes 2 parameters: str1,  k. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.
k : type
    Description of k.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_k_dist(value, value)
Expected output
""""""","import unittest

class TestCount_k_dist(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_k_dist(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_k_dist(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def rearrange_bigger(n):    #Break the number into digits and store in a list    nums = list(str(n))    for i in range(len(nums)-2,-1,-1):        if nums[i] < nums[i+1]:            z = nums[i:]            y = min(filter(lambda x: x > z[0], z))            z.remove(y)            z.sort()            nums[i:] = [y] + z            return int("""".join(nums))    return Falsen = 12print(""Original number:"",n)print(""Next bigger number:"",rearrange_bigger(n))n = 10print(""\nOriginal number:"",n)print(""Next bigger number:"",rearrange_bigger(n))      n = 201print(""\nOriginal number:"",n)print(""Next bigger number:"",rearrange_bigger(n))n = 102print(""\nOriginal number:"",n)print(""Next bigger number:"",rearrange_bigger(n))n = 445print(""\nOriginal number:"",n)print(""Next bigger number:"",rearrange_bigger(n))","""""""
Brief Description:
------------------
rearrange_bigger function performs a specific operation as described below.

Extended Description:
---------------------
This function, `rearrange_bigger`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> rearrange_bigger(value)
Expected output
""""""","import unittest

class TestRearrange_bigger(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = rearrange_bigger(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = rearrange_bigger(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def sum_digits_string(str1):    sum_digit = 0    for x in str1:        if x.isdigit() == True:            z = int(x)            sum_digit = sum_digit + z    return sum_digit     print(sum_digits_string("123abcd45"))print(sum_digits_string("abcd1234")),"""""""
Brief Description:
------------------
sum_digits_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_digits_string`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_digits_string(value)
Expected output
""""""","import unittest

class TestSum_digits_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_digits_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_digits_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def last_occurrence(l1, ch):    return ''.join(l1).rindex(ch)chars = ['s','d','f','s','d','f','s','f','k','o','p','i','w','e','k','c']print(""Original list:"")print(chars)ch = 'f'print(""Last occurrence of"",ch,""in the said list:"")print(last_occurrence(chars, ch))ch = 'c'print(""Last occurrence of"",ch,""in the said list:"")print(last_occurrence(chars, ch))ch = 'k'print(""Last occurrence of"",ch,""in the said list:"")print(last_occurrence(chars, ch))ch = 'w'print(""Last occurrence of"",ch,""in the said list:"")print(last_occurrence(chars, ch)) ","""""""
Brief Description:
------------------
last_occurrence function performs a specific operation as described below.

Extended Description:
---------------------
This function, `last_occurrence`, takes 2 parameters: l1,  ch. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
ch : type
    Description of ch.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> last_occurrence(value, value)
Expected output
""""""","import unittest

class TestLast_occurrence(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = last_occurrence(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = last_occurrence(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def first_three(str):	return str[:3] if len(str) > 3 else strprint(first_three('ipy'))print(first_three('python'))print(first_three('py'))","""""""
Brief Description:
------------------
first_three function performs a specific operation as described below.

Extended Description:
---------------------
This function, `first_three`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> first_three(value)
Expected output
""""""","import unittest

class TestFirst_three(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = first_three(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = first_three(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_min(data):  l = data[0]  s = data[0]  for num in data:    if num> l:      l = num    elif num< s:        s = num  return l, sprint(max_min([0, 10, 15, 40, -5, 42, 17, 28, 75]))","""""""
Brief Description:
------------------
max_min function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_min`, takes 1 parameters: data. It is designed to perform a certain task using these parameters.

Parameters:
-----------
data : type
    Description of data.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_min(value)
Expected output
""""""","import unittest

class TestMax_min(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_min(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_min(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_of_cubes(n): n -= 1 total = 0 while n > 0:   total += n * n * n   n -= 1 return totalprint(""Sum of cubes smaller than the specified number: "",sum_of_cubes(3))","""""""
Brief Description:
------------------
sum_of_cubes function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_of_cubes`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_of_cubes(value)
Expected output
""""""","import unittest

class TestSum_of_cubes(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_of_cubes(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_of_cubes(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def list_difference(l1,l2):    result = list(l1)    for el in l2:        result.remove(el)    return resultl1 = [1,1,2,3,3,4,4,5,6,7]l2 = [1,1,2,4,5,6]print(""Original lists:"")print(l1)print(l2)print(""\nDifference between two said list including duplicate elements):"")print(list_difference(l1,l2))","""""""
Brief Description:
------------------
list_difference function performs a specific operation as described below.

Extended Description:
---------------------
This function, `list_difference`, takes 2 parameters: l1, l2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> list_difference(value, value)
Expected output
""""""","import unittest

class TestList_difference(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = list_difference(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = list_difference(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def digitize(n):  return list(map(int, str(n)))print(digitize(123))print(digitize(1347823)) ","""""""
Brief Description:
------------------
digitize function performs a specific operation as described below.

Extended Description:
---------------------
This function, `digitize`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> digitize(value)
Expected output
""""""","import unittest

class TestDigitize(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = digitize(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = digitize(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_Product(arr):     arr_len = len(arr)     if (arr_len < 2):         print(""No pairs exists"")         return          # Initialize max product pair     x = arr[0]; y = arr[1]     # Traverse through every possible pair         for i in range(0, arr_len):         for j in range(i + 1, arr_len):             if (arr[i] * arr[j] > x * y):                 x = arr[i]; y = arr[j]     return x,y    nums = [1, 2, 3, 4, 7, 0, 8, 4] print(""Original array:"", nums)print(""Maximum product pair is:"", max_Product(nums))nums = [0, -1, -2, -4, 5, 0, -6] print(""\nOriginal array:"", nums)print(""Maximum product pair is:"", max_Product(nums))","""""""
Brief Description:
------------------
max_Product function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_Product`, takes 1 parameters: arr. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_Product(value)
Expected output
""""""","import unittest

class TestMax_product(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_Product(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_Product(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def extract_nth_element(test_list, n):    result = list(map (lambda x:(x[n]), test_list))    return resultstudents = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] print (""Original list:"")print(students)n = 0print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")print(extract_nth_element(students, n))n = 2print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")print(extract_nth_element(students, n))","""""""
Brief Description:
------------------
extract_nth_element function performs a specific operation as described below.

Extended Description:
---------------------
This function, `extract_nth_element`, takes 2 parameters: test_list,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
test_list : type
    Description of test_list.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> extract_nth_element(value, value)
Expected output
""""""","import unittest

class TestExtract_nth_element(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = extract_nth_element(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = extract_nth_element(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_duplicate_dictionary(list_color):    result = [dict(e) for e in {tuple(d.items()) for d in list_color}]    return resultlist_color = [{'Green': '#008000'}, {'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]print (""Original list with duplicate dictionary:"")print(list_color)print(""\nAfter removing duplicate dictionary of the said list:"")print(remove_duplicate_dictionary(list_color))","""""""
Brief Description:
------------------
remove_duplicate_dictionary function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_duplicate_dictionary`, takes 1 parameters: list_color. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list_color : type
    Description of list_color.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_duplicate_dictionary(value)
Expected output
""""""","import unittest

class TestRemove_duplicate_dictionary(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_duplicate_dictionary(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_duplicate_dictionary(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def condition_match(x):    return ((x % 2) == 0)def remove_items_con(data, N):    ctr = 1    result = []    for x in data:        if ctr > N or not condition_match(x):            result.append(x)        else:            ctr = ctr + 1    return resultnums = [3,10,4,7,5,7,8,3,3,4,5,9,3,4,9,8,5]N = 4print(""Original list:"")print(nums)print(""\nRemove first 4 even numbers from the said list:"")print(remove_items_con(nums, N))","""""""
Brief Description:
------------------
condition_match function performs a specific operation as described below.

Extended Description:
---------------------
This function, `condition_match`, takes 1 parameters: x. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> condition_match(value)
Expected output
""""""","import unittest

class TestCondition_match(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = condition_match(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = condition_match(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_last(lst, fn):  return next(x for x in lst[::-1] if fn(x))print(find_last([1, 2, 3, 4], lambda n: n % 2 == 1))print(find_last([1, 2, 3, 4], lambda n: n % 2 == 0))","""""""
Brief Description:
------------------
find_last function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_last`, takes 2 parameters: lst,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_last(value, value)
Expected output
""""""","import unittest

class TestFind_last(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_last(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_last(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_chars(str1, unwanted_chars):    for i in unwanted_chars:        str1 = str1.replace(i, '')    return str1str1 = ""Pyth*^on Exercis^es""str2 = ""A%^!B#*CD""unwanted_chars = [""#"", ""*"", ""!"", ""^"", ""%""]print (""Original String : "" + str1)print(""After removing unwanted characters:"")print(remove_chars(str1, unwanted_chars))print (""\nOriginal String : "" + str2)print(""After removing unwanted characters:"")print(remove_chars(str2, unwanted_chars))","""""""
Brief Description:
------------------
remove_chars function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_chars`, takes 2 parameters: str1,  unwanted_chars. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.
unwanted_chars : type
    Description of unwanted_chars.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_chars(value, value)
Expected output
""""""","import unittest

class TestRemove_chars(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_chars(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_chars(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def merge_some_chars(lst,merge_from,merge_to):    result = lst    result[merge_from:merge_to] = [''.join(result[merge_from:merge_to])]        return result    chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g']print(""Original lists:"")print(chars)merge_from = 2merge_to = 4print(""\nMerge items from"",merge_from,""to"",merge_to,""in the said List:"")print(merge_some_chars(chars,merge_from,merge_to))chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g']merge_from = 3merge_to = 7print(""\nMerge items from"",merge_from,""to"",merge_to,""in the said List:"")print(merge_some_chars(chars,merge_from,merge_to))","""""""
Brief Description:
------------------
merge_some_chars function performs a specific operation as described below.

Extended Description:
---------------------
This function, `merge_some_chars`, takes 3 parameters: lst, merge_from, merge_to. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
merge_from : type
    Description of merge_from.
merge_to : type
    Description of merge_to.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> merge_some_chars(value, value, value)
Expected output
""""""","import unittest

class TestMerge_some_chars(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = merge_some_chars(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = merge_some_chars(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def perfect_number(n):    sum = 0    for x in range(1, n):        if n % x == 0:            sum += x    return sum == nprint(perfect_number(6))","""""""
Brief Description:
------------------
perfect_number function performs a specific operation as described below.

Extended Description:
---------------------
This function, `perfect_number`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> perfect_number(value)
Expected output
""""""","import unittest

class TestPerfect_number(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = perfect_number(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = perfect_number(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def unique_sublists(input_list):    result ={}    for l in input_list:         result.setdefault(tuple(l), list()).append(1)     for a, b in result.items():         result[a] = sum(b)    return resultlist1 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] print(""Original list:"")print(list1)  print(""Number of unique lists of the said list:"")print(unique_sublists(list1)) color1 = [[""green"", ""orange""], [""black""], [""green"", ""orange""], [""white""]]print(""\nOriginal list:"")print(color1)  print(""Number of unique lists of the said list:"")print(unique_sublists(color1))","""""""
Brief Description:
------------------
unique_sublists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `unique_sublists`, takes 1 parameters: input_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input_list : type
    Description of input_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> unique_sublists(value)
Expected output
""""""","import unittest

class TestUnique_sublists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = unique_sublists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = unique_sublists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def concatenate_lists(l1,l2,l3):    return [i + j + k for i, j, k in zip(l1, l2, l3)]    l1 = ['0','1','2','3','4'] l2 = ['red','green','black','blue','white']l3 = ['100','200','300','400','500'] print(""Original lists:"")print(l1)print(l2)print(l3)print(""\nConcatenate element-wise three said lists:"")print(concatenate_lists(l1,l2,l3))","""""""
Brief Description:
------------------
concatenate_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `concatenate_lists`, takes 3 parameters: l1, l2, l3. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.
l3 : type
    Description of l3.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> concatenate_lists(value, value, value)
Expected output
""""""","import unittest

class TestConcatenate_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = concatenate_lists(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = concatenate_lists(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_length_list(input_list):    max_length = max(len(x) for x in input_list )       max_list = max(input_list, key = lambda i: len(i))        return(max_length, max_list)    def min_length_list(input_list):    min_length = min(len(x) for x in input_list )      min_list = min(input_list, key = lambda i: len(i))    return(min_length, min_list)      list1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]print(""Original list:"")print(list1)print(""\nList with maximum length of lists:"")print(max_length_list(list1))print(""\nList with minimum length of lists:"")print(min_length_list(list1))","""""""
Brief Description:
------------------
max_length_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_length_list`, takes 1 parameters: input_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input_list : type
    Description of input_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_length_list(value)
Expected output
""""""","import unittest

class TestMax_length_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_length_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_length_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def merge_lists(*args, fill_value = None):  max_length = max([len(lst) for lst in args])  result = []  for i in range(max_length):    result.append([      args[k][i] if i < len(args[k]) else fill_value for k in range(len(args))    ])  return resultprint(""After merging lists into a list of lists:"")print(merge_lists(['a', 'b'], [1, 2], [True, False]))  print(merge_lists(['a'], [1, 2], [True, False]))  print(merge_lists(['a'], [1, 2], [True, False], fill_value = '_'))","""""""
Brief Description:
------------------
merge_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `merge_lists`, takes 2 parameters: *args,  fill_value = None. It is designed to perform a certain task using these parameters.

Parameters:
-----------
*args : type
    Description of *args.
fill_value = None : type
    Description of fill_value = None.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> merge_lists(value, value)
Expected output
""""""","import unittest

class TestMerge_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = merge_lists(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = merge_lists(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def first_repeated_word(str1):  temp = set()  for word in str1.split():    if word in temp:      return word;    else:      temp.add(word)  return 'None'print(first_repeated_word("ab ca bc ab"))print(first_repeated_word("ab ca bc ab ca ab bc"))print(first_repeated_word("ab ca bc ca ab bc"))print(first_repeated_word("ab ca bc")),"""""""
Brief Description:
------------------
first_repeated_word function performs a specific operation as described below.

Extended Description:
---------------------
This function, `first_repeated_word`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> first_repeated_word(value)
Expected output
""""""","import unittest

class TestFirst_repeated_word(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = first_repeated_word(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = first_repeated_word(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def cast_list(val):  return list(val) if isinstance(val, (tuple, list, set, dict)) else [val]d1 = [1]print(type(d1))print(cast_list(d1)) d2 = ('Red', 'Green')print(type(d2))print(cast_list(d2)) d3 = {'Red', 'Green'}print(type(d3))print(cast_list(d3))d4 = {1: 'Red', 2: 'Green', 3: 'Black'}print(type(d4))print(cast_list(d4))","""""""
Brief Description:
------------------
cast_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `cast_list`, takes 1 parameters: val. It is designed to perform a certain task using these parameters.

Parameters:
-----------
val : type
    Description of val.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> cast_list(value)
Expected output
""""""","import unittest

class TestCast_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = cast_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = cast_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def factorial(n):  if n <= 1:    return 1  else:    return n * (factorial(n - 1))    print(factorial(5)),"""""""
Brief Description:
------------------
factorial function performs a specific operation as described below.

Extended Description:
---------------------
This function, `factorial`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> factorial(value)
Expected output
""""""","import unittest

class TestFactorial(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = factorial(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = factorial(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def multiple(m, n):	return True if m % n == 0 else Falseprint(multiple(20, 5))print(multiple(7, 2))","""""""
Brief Description:
------------------
multiple function performs a specific operation as described below.

Extended Description:
---------------------
This function, `multiple`, takes 2 parameters: m,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
m : type
    Description of m.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> multiple(value, value)
Expected output
""""""","import unittest

class TestMultiple(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = multiple(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = multiple(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def string_reverse(str1):    rstr1 = ''    index = len(str1)    while index > 0:        rstr1 += str1[ index - 1 ]        index = index - 1    return rstr1print(string_reverse('1234abcd')),"""""""
Brief Description:
------------------
string_reverse function performs a specific operation as described below.

Extended Description:
---------------------
This function, `string_reverse`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> string_reverse(value)
Expected output
""""""","import unittest

class TestString_reverse(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = string_reverse(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = string_reverse(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def pair_consecutive_elements(lst):    result = [[lst[i], lst[i + 1]] for i in range(len(lst) - 1)]    return resultnums =  [1,2,3,4,5,6]print(""Original lists:"")print(nums)print(""Pair up the consecutive elements of the said list:"")print(pair_consecutive_elements(nums))nums =  [1,2,3,4,5]print(""\nOriginal lists:"")print(nums)print(""Pair up the consecutive elements of the said list:"")print(pair_consecutive_elements(nums))","""""""
Brief Description:
------------------
pair_consecutive_elements function performs a specific operation as described below.

Extended Description:
---------------------
This function, `pair_consecutive_elements`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> pair_consecutive_elements(value)
Expected output
""""""","import unittest

class TestPair_consecutive_elements(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = pair_consecutive_elements(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = pair_consecutive_elements(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def tuple_max_val(nums):    result_max = max([abs(x * y) for x, y in nums] )    result_min = min([abs(x * y) for x, y in nums] )    return result_max,result_minnums = [(2, 7), (2, 6), (1, 8), (4, 9)]   print(""The original list, tuple : "") print(nums)print(""\nMaximum and minimum product from the pairs of the said tuple of list:"")print(tuple_max_val(nums)) ","""""""
Brief Description:
------------------
tuple_max_val function performs a specific operation as described below.

Extended Description:
---------------------
This function, `tuple_max_val`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> tuple_max_val(value)
Expected output
""""""","import unittest

class TestTuple_max_val(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = tuple_max_val(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = tuple_max_val(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def reverse_strings_list(string_list):    result = list(map(lambda x: """".join(reversed(x)), string_list))    return resultcolors_list = [""Red"", ""Green"", ""Blue"", ""White"", ""Black""]print(""\nOriginal lists:"")print(colors_list)print(""\nReverse strings of the said given list:"")print(reverse_strings_list(colors_list))","""""""
Brief Description:
------------------
reverse_strings_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse_strings_list`, takes 1 parameters: string_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
string_list : type
    Description of string_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse_strings_list(value)
Expected output
""""""","import unittest

class TestReverse_strings_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse_strings_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse_strings_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sectorarea():    pi=22/7    radius = float(input('Radius of Circle: '))    angle = float(input('angle measure: '))    if angle >= 360:        print(""Angle is not possible"")        return    sur_area = (pi*radius**2) * (angle/360)    print(""Sector Area: "", sur_area)sectorarea()","""""""
Brief Description:
------------------
sectorarea function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sectorarea`, takes 0 parameters: none. It is designed to perform a certain task using these parameters.

Parameters:
-----------

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sectorarea()
Expected output
""""""","import unittest

class TestSectorarea(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sectorarea()
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sectorarea()
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def smallest_largest_words(str1):    word = """";    all_words = [];    str1 = str1 + "" "";    for i in range(0, len(str1)):        if(str1[i] != ' '):            word = word + str1[i];          else:            all_words.append(word);              word = """";                small = large = all_words[0];     #Find smallest and largest word in the str1      for k in range(0, len(all_words)):        if(len(small) > len(all_words[k])):            small = all_words[k];        if(len(large) < len(all_words[k])):            large = all_words[k];    return small,large;str1 = ""Write a Java program to sort an array of given integers using Quick sort Algorithm."";  print(""Original Strings:\n"",str1)small, large = smallest_largest_words(str1)  print(""Smallest word: "" + small);  print(""Largest word: "" + large); ","""""""
Brief Description:
------------------
smallest_largest_words function performs a specific operation as described below.

Extended Description:
---------------------
This function, `smallest_largest_words`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> smallest_largest_words(value)
Expected output
""""""","import unittest

class TestSmallest_largest_words(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = smallest_largest_words(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = smallest_largest_words(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_same_pair(nums1, nums2, nums3):    result = sum(m == n == o for m, n, o in zip(nums1, nums2, nums3))    return resultnums1 = [1,2,3,4,5,6,7,8]nums2 = [2,2,3,1,2,6,7,9]nums3 = [2,1,3,1,2,6,7,9]print(""Original lists:"")print(nums1)print(nums2)print(nums3)print(""\nNumber of same pair of the said three given lists:"")print(count_same_pair(nums1, nums2, nums3))","""""""
Brief Description:
------------------
count_same_pair function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_same_pair`, takes 3 parameters: nums1,  nums2,  nums3. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums1 : type
    Description of nums1.
nums2 : type
    Description of nums2.
nums3 : type
    Description of nums3.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_same_pair(value, value, value)
Expected output
""""""","import unittest

class TestCount_same_pair(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_same_pair(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_same_pair(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_sublists(input_list):    result = [sorted(x, key = lambda x:x[0]) for x in input_list]     return resultcolor1 = [[""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]]print(""\nOriginal list:"")print(color1)  print(""\nAfter sorting each sublist of the said list of lists:"")print(sort_sublists(color1))","""""""
Brief Description:
------------------
sort_sublists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_sublists`, takes 1 parameters: input_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input_list : type
    Description of input_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_sublists(value)
Expected output
""""""","import unittest

class TestSort_sublists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_sublists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_sublists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def combination(n, n_list):    if n<=0:        yield []        return    for i in range(len(n_list)):        c_num = n_list[i:i+1]        for a_num in combination(n-1, n_list[i+1:]):            yield c_num + a_numn_list = [1,2,3,4,5,6,7,8,9]print(""Original list:"") print(n_list)n = 2result = combination(n, n_list)print(""\nCombinations of"",n,""distinct objects:"")for e in result:     print(e)","""""""
Brief Description:
------------------
combination function performs a specific operation as described below.

Extended Description:
---------------------
This function, `combination`, takes 2 parameters: n,  n_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.
n_list : type
    Description of n_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> combination(value, value)
Expected output
""""""","import unittest

class TestCombination(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = combination(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = combination(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def position_max_min(nums):    max_val = max(nums)    min_val = min(nums)    max_result = [i for i, j in enumerate(nums) if j == max_val]    min_result = [i for i, j in enumerate(nums) if j == min_val]    return max_result,min_resultnums = [12,33,23,10,67,89,45,667,23,12,11,10,54]print(""Original list:"")print(nums)result = position_max_min(nums)print(""\nIndex positions of the maximum value of the said list:"")print(result[0])print(""\nIndex positions of the minimum value of the said list:"")print(result[1])","""""""
Brief Description:
------------------
position_max_min function performs a specific operation as described below.

Extended Description:
---------------------
This function, `position_max_min`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> position_max_min(value)
Expected output
""""""","import unittest

class TestPosition_max_min(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = position_max_min(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = position_max_min(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def divisible_by_digits(start_num, end_num):    return [n for n in range(start_num, end_num+1) \                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]print(divisible_by_digits(1,22))","""""""
Brief Description:
------------------
divisible_by_digits function performs a specific operation as described below.

Extended Description:
---------------------
This function, `divisible_by_digits`, takes 2 parameters: start_num,  end_num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
start_num : type
    Description of start_num.
end_num : type
    Description of end_num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> divisible_by_digits(value, value)
Expected output
""""""","import unittest

class TestDivisible_by_digits(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = divisible_by_digits(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = divisible_by_digits(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_sublists(input_list):    result = sorted(input_list, key=lambda l: (len(l), l))    return resultlist1 = [[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]print(""Original list:"")print(list1)print(""\nSort the list of lists by length and value:"")print(sort_sublists(list1))","""""""
Brief Description:
------------------
sort_sublists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_sublists`, takes 1 parameters: input_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input_list : type
    Description of input_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_sublists(value)
Expected output
""""""","import unittest

class TestSort_sublists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_sublists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_sublists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def drop_left_right(a, n = 1):  return a[n:], a[:-n] nums = [1, 2, 3]print(""Original list elements:"")print(nums)result = drop_left_right(nums)print(""Remove 1 element from left of the said list:"")print(result[0])print(""Remove 1 element from right of the said list:"")print(result[1])nums = [1, 2, 3, 4]print(""\nOriginal list elements:"")print(nums)result = drop_left_right(nums,2)print(""Remove 2 elements from left of the said list:"")print(result[0])print(""Remove 2 elements from right of the said list:"")print(result[1])nums = [1, 2, 3, 4, 5, 6]print(""\nOriginal list elements:"")print(nums)result = drop_left_right(nums)print(""Remove 7 elements from left of the said list:"")print(result[0])print(""Remove 7 elements from right of the said list:"")print(result[1])","""""""
Brief Description:
------------------
drop_left_right function performs a specific operation as described below.

Extended Description:
---------------------
This function, `drop_left_right`, takes 2 parameters: a,  n = 1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
n = 1 : type
    Description of n = 1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> drop_left_right(value, value)
Expected output
""""""","import unittest

class TestDrop_left_right(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = drop_left_right(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = drop_left_right(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def bifurcate(colors, filter):  return [    [x for x, flag in zip(colors, filter) if flag],    [x for x, flag in zip(colors, filter) if not flag]  ]print(bifurcate(['red', 'green', 'blue', 'pink'], [True, True, False, True]))","""""""
Brief Description:
------------------
bifurcate function performs a specific operation as described below.

Extended Description:
---------------------
This function, `bifurcate`, takes 2 parameters: colors,  filter. It is designed to perform a certain task using these parameters.

Parameters:
-----------
colors : type
    Description of colors.
filter : type
    Description of filter.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> bifurcate(value, value)
Expected output
""""""","import unittest

class TestBifurcate(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = bifurcate(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = bifurcate(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def add_numbers(a, b):   if not (isinstance(a, int) and isinstance(b, int)):       return ""Inputs must be integers!""   return a + bprint(add_numbers(10, 20))print(add_numbers(10, 20.23))print(add_numbers('5', 6))print(add_numbers('5', '6'))","""""""
Brief Description:
------------------
add_numbers function performs a specific operation as described below.

Extended Description:
---------------------
This function, `add_numbers`, takes 2 parameters: a,  b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> add_numbers(value, value)
Expected output
""""""","import unittest

class TestAdd_numbers(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = add_numbers(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = add_numbers(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_substring(str1, sub_str):    result = list(filter(lambda x: sub_str in x, str1))    return resultcolors = [""red"", ""black"", ""white"", ""green"", ""orange""]print(""Original list:"")print(colors)sub_str = ""ack""print(""\nSubstring to search:"")print(sub_str)print(""Elements of the said list that contain specific substring:"")print(find_substring(colors, sub_str))sub_str = ""abc""print(""\nSubstring to search:"")print(sub_str)print(""Elements of the said list that contain specific substring:"")print(find_substring(colors, sub_str))","""""""
Brief Description:
------------------
find_substring function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_substring`, takes 2 parameters: str1,  sub_str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.
sub_str : type
    Description of sub_str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_substring(value, value)
Expected output
""""""","import unittest

class TestFind_substring(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_substring(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_substring(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def fibonacci(n):  if n == 1 or n == 2:    return 1  else:    return (fibonacci(n - 1) + (fibonacci(n - 2)))print(fibonacci(7)),"""""""
Brief Description:
------------------
fibonacci function performs a specific operation as described below.

Extended Description:
---------------------
This function, `fibonacci`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> fibonacci(value)
Expected output
""""""","import unittest

class TestFibonacci(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = fibonacci(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = fibonacci(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def sumDigits(n):  if n == 0:    return 0  else:    return n % 10 + sumDigits(int(n / 10))print(sumDigits(345))print(sumDigits(45)),"""""""
Brief Description:
------------------
sumDigits function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sumDigits`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sumDigits(value)
Expected output
""""""","import unittest

class TestSumdigits(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sumDigits(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sumDigits(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_sort_list(nums):    result = all(nums[i] <= nums[i+1] for i in range(len(nums)-1))    return resultnums1 = [1,2,4,6,8,10,12,14,16,17]print (""Original list:"")print(nums1)print(""\nIs the said list is sorted!"")print(is_sort_list(nums1)) nums2 = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]print (""\nOriginal list:"")print(nums1)print(""\nIs the said list is sorted!"")print(is_sort_list(nums2))","""""""
Brief Description:
------------------
is_sort_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `is_sort_list`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> is_sort_list(value)
Expected output
""""""","import unittest

class TestIs_sort_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = is_sort_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = is_sort_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def extract_index_ele(l1, l2, l3):    result = []    for m, n, o in zip(l1, l2, l3):        if (m == n == o):            result.append(m)    return resultnums1 = [1, 1, 3, 4, 5, 6, 7]nums2 = [0, 1, 2, 3, 4, 5, 7]nums3 = [0, 1, 2, 3, 4, 5, 7]print(""Original lists:"")print(nums1)print(nums2)print(nums3)print(""\nCommon index elements of the said lists:"") print(extract_index_ele(nums1, nums2, nums3))","""""""
Brief Description:
------------------
extract_index_ele function performs a specific operation as described below.

Extended Description:
---------------------
This function, `extract_index_ele`, takes 3 parameters: l1,  l2,  l3. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.
l3 : type
    Description of l3.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> extract_index_ele(value, value, value)
Expected output
""""""","import unittest

class TestExtract_index_ele(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = extract_index_ele(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = extract_index_ele(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def add_val_to_list(lst, add_val):    result = lst    result = [x+add_val for x in result]       return result    nums = [3,8,9,4,5,0,5,0,3]print(""Original lists:"")print(nums)add_val = 3print(""\nAdd"",add_val,""to each element in the said list:"")print(add_val_to_list(nums, add_val))nums = [3.2,8,9.9,4.2,5,0.1,5,3.11,0]print(""\nOriginal lists:"")print(nums)add_val = .51print(""\nAdd"",add_val,""to each element in the said list:"")print(add_val_to_list(nums, add_val))","""""""
Brief Description:
------------------
add_val_to_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `add_val_to_list`, takes 2 parameters: lst,  add_val. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
add_val : type
    Description of add_val.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> add_val_to_list(value, value)
Expected output
""""""","import unittest

class TestAdd_val_to_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = add_val_to_list(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = add_val_to_list(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def substring_copy(str, n):  flen = 2  if flen > len(str):    flen = len(str)  substr = str[:flen]    result = """"  for i in range(n):    result = result + substr  return resultprint(substring_copy('abcdef', 2))print(substring_copy('p', 3));","""""""
Brief Description:
------------------
substring_copy function performs a specific operation as described below.

Extended Description:
---------------------
This function, `substring_copy`, takes 2 parameters: str,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> substring_copy(value, value)
Expected output
""""""","import unittest

class TestSubstring_copy(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = substring_copy(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = substring_copy(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_sort_list(nums, key=lambda x: x):    for i, e in enumerate(nums[1:]):        if key(e) < key(nums[i]):             return False    return Truenums1 = [1,2,4,6,8,10,12,14,16,17]print (""Original list:"")print(nums1)print(""\nIs the said list is sorted!"")print(is_sort_list(nums1)) nums2 = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]print (""\nOriginal list:"")print(nums1)print(""\nIs the said list is sorted!"")print(is_sort_list(nums2))","""""""
Brief Description:
------------------
is_sort_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `is_sort_list`, takes 2 parameters: nums,  key=lambda x: x. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
key=lambda x: x : type
    Description of key=lambda x: x.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> is_sort_list(value, value)
Expected output
""""""","import unittest

class TestIs_sort_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = is_sort_list(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = is_sort_list(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def cyclically_iteration(lst,spec_index):    result = []    length = len(lst)    for i in range(length):        element_index = spec_index % length        result.append(lst[element_index])        spec_index += 1    return resultchars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']print(""Original list:"")print(chars)spec_index = 3print(""\nIterate the said  list cyclically on specific index position"",spec_index,"":"")print(cyclically_iteration(chars,spec_index))spec_index = 5print(""\nIterate the said  list cyclically on specific index position"",spec_index,"":"")print(cyclically_iteration(chars,spec_index))","""""""
Brief Description:
------------------
cyclically_iteration function performs a specific operation as described below.

Extended Description:
---------------------
This function, `cyclically_iteration`, takes 2 parameters: lst, spec_index. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
spec_index : type
    Description of spec_index.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> cyclically_iteration(value, value)
Expected output
""""""","import unittest

class TestCyclically_iteration(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = cyclically_iteration(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = cyclically_iteration(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def test_dsc(n):    return int(''.join(sorted(str(n), reverse = True)))def test_asc(n):    return int(''.join(sorted(list(str(n))))[::1])n = 134543print(""Original Number: "",n);print(""Descending order of the said number: "", test_dsc(n));print(""Ascending order of the said number: "", test_asc(n));n = 43750973print(""\nOriginal Number: "",n);print(""Descending order of the said number: "", test_dsc(n));print(""Ascending order of the said number: "", test_asc(n));","""""""
Brief Description:
------------------
test_dsc function performs a specific operation as described below.

Extended Description:
---------------------
This function, `test_dsc`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> test_dsc(value)
Expected output
""""""","import unittest

class TestTest_dsc(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = test_dsc(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = test_dsc(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def selectionSort(nlist):   for fillslot in range(len(nlist)-1,0,-1):       maxpos=0       for location in range(1,fillslot+1):           if nlist[location]>nlist[maxpos]:               maxpos = location       temp = nlist[fillslot]       nlist[fillslot] = nlist[maxpos]       nlist[maxpos] = tempnlist = [14,46,43,27,57,41,45,21,70]selectionSort(nlist)print(nlist)","""""""
Brief Description:
------------------
selectionSort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `selectionSort`, takes 1 parameters: nlist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nlist : type
    Description of nlist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> selectionSort(value)
Expected output
""""""","import unittest

class TestSelectionsort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = selectionSort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = selectionSort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def interleave_multiple_lists(list1,list2,list3):    result = [el for pair in zip(list1, list2, list3) for el in pair]    return result     list1 = [1,2,3,4,5,6,7]list2 = [10,20,30,40,50,60,70]list3 = [100,200,300,400,500,600,700]print(""Original list:"")print(""list1:"",list1)print(""list2:"",list2)print(""list3:"",list3)print(""\nInterleave multiple lists:"")print(interleave_multiple_lists(list1,list2,list3))","""""""
Brief Description:
------------------
interleave_multiple_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `interleave_multiple_lists`, takes 3 parameters: list1, list2, list3. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.
list2 : type
    Description of list2.
list3 : type
    Description of list3.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> interleave_multiple_lists(value, value, value)
Expected output
""""""","import unittest

class TestInterleave_multiple_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = interleave_multiple_lists(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = interleave_multiple_lists(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def cocktail_shaker_sort(nums):    for i in range(len(nums)-1, 0, -1):        is_swapped = False                for j in range(i, 0, -1):            if nums[j] < nums[j-1]:                nums[j], nums[j-1] = nums[j-1], nums[j]                is_swapped = True        for j in range(i):            if nums[j] > nums[j+1]:                nums[j], nums[j+1] = nums[j+1], nums[j]                is_swapped = True                if not is_swapped:            return nums num1 = input('Input comma separated numbers:\n').strip()nums = [int(item) for item in num1.split(',')]print(cocktail_shaker_sort(nums))","""""""
Brief Description:
------------------
cocktail_shaker_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `cocktail_shaker_sort`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> cocktail_shaker_sort(value)
Expected output
""""""","import unittest

class TestCocktail_shaker_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = cocktail_shaker_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = cocktail_shaker_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def check_string(s):    messg = []    if not any(x.isupper() for x in s):        messg.append('String must have 1 upper case character.')    if not any(x.islower() for x in s):        messg.append('String must have 1 lower case character.')    if not any(x.isdigit() for x in s):        messg.append('String must have 1 number.')    if len(s) < 8:        messg.append('String length should be atleast 8.')        if not messg:        messg.append('Valid string.')    return messg    s = input("Input the string: ")print(check_string(s)),"""""""
Brief Description:
------------------
check_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `check_string`, takes 1 parameters: s. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s : type
    Description of s.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> check_string(value)
Expected output
""""""","import unittest

class TestCheck_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = check_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = check_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_min_list_tuples(nums):    zip(*nums)    result1 = map(max, zip(*nums))    result2 = map(min, zip(*nums))    return list(result1), list(result2)nums = [(2,3),(2,4),(0,6),(7,1)]print(""Original list:"")print(nums)result = max_min_list_tuples(nums)print(""\nMaximum value  for each tuple position in the said list of tuples:"")print(result[0])print(""\nMinimum value  for each tuple position in the said list of tuples:"")print(result[1])","""""""
Brief Description:
------------------
max_min_list_tuples function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_min_list_tuples`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_min_list_tuples(value)
Expected output
""""""","import unittest

class TestMax_min_list_tuples(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_min_list_tuples(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_min_list_tuples(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def strings_to_listOflists(colors):    result = [list(word) for word in colors]    return resultcolors = [""Red"", ""Maroon"", ""Yellow"", ""Olive""]print('Original list of strings:')print(colors)print(""\nConvert the said list of strings into list of lists:"")print(strings_to_listOflists(colors))","""""""
Brief Description:
------------------
strings_to_listOflists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `strings_to_listOflists`, takes 1 parameters: colors. It is designed to perform a certain task using these parameters.

Parameters:
-----------
colors : type
    Description of colors.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> strings_to_listOflists(value)
Expected output
""""""","import unittest

class TestStrings_to_listoflists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = strings_to_listOflists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = strings_to_listOflists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def filter_data(students):    result = {k: s for k, s in students.items() if s[0] >=6.0 and s[1] >=70}    return result     students = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}print(""Original Dictionary:"")print(students)print(""\nHeight > 6ft and Weight> 70kg:"")print(filter_data(students))","""""""
Brief Description:
------------------
filter_data function performs a specific operation as described below.

Extended Description:
---------------------
This function, `filter_data`, takes 1 parameters: students. It is designed to perform a certain task using these parameters.

Parameters:
-----------
students : type
    Description of students.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> filter_data(value)
Expected output
""""""","import unittest

class TestFilter_data(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = filter_data(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = filter_data(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def permute(nums):  result_perms = [[]]  for n in nums:    new_perms = []    for perm in result_perms:      for i in range(len(perm)+1):        new_perms.append(perm[:i] + [n] + perm[i:])        result_perms = new_perms  return result_permsmy_nums = [1,2,3]print(""Original Cofllection: "",my_nums)print(""Collection of distinct numbers:\n"",permute(my_nums))","""""""
Brief Description:
------------------
permute function performs a specific operation as described below.

Extended Description:
---------------------
This function, `permute`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> permute(value)
Expected output
""""""","import unittest

class TestPermute(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = permute(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = permute(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_min_list_tuples(class_students):    return_max = max(class_students,key=lambda item:item[1])[1]    return_min = min(class_students,key=lambda item:item[1])[1]    return return_max, return_min    class_students = [('V', 62), ('VI', 68), ('VII', 72), ('VIII', 70), ('IX', 74), ('X', 65)]print(""Original list with tuples:"")print(class_students)print(""\nMaximum and minimum values of the said list of tuples:"")print(max_min_list_tuples(class_students))","""""""
Brief Description:
------------------
max_min_list_tuples function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_min_list_tuples`, takes 1 parameters: class_students. It is designed to perform a certain task using these parameters.

Parameters:
-----------
class_students : type
    Description of class_students.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_min_list_tuples(value)
Expected output
""""""","import unittest

class TestMax_min_list_tuples(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_min_list_tuples(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_min_list_tuples(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_longest_word(words_list):    word_len = []    for n in words_list:        word_len.append((len(n), n))    word_len.sort()    return word_len[-1][0], word_len[-1][1]result = find_longest_word([""PHP"", ""Exercises"", ""Backend""])print(""\nLongest word: "",result[1])print(""Length of the longest word: "",result[0])","""""""
Brief Description:
------------------
find_longest_word function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_longest_word`, takes 1 parameters: words_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
words_list : type
    Description of words_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_longest_word(value)
Expected output
""""""","import unittest

class TestFind_longest_word(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_longest_word(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_longest_word(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def string_test(s):    d={""UPPER_CASE"":0, ""LOWER_CASE"":0}    for c in s:        if c.isupper():           d[""UPPER_CASE""]+=1        elif c.islower():           d[""LOWER_CASE""]+=1        else:           pass    print (""Original String : "", s)    print (""No. of Upper case characters : "", d[""UPPER_CASE""])    print (""No. of Lower case Characters : "", d[""LOWER_CASE""])string_test('The quick Brown Fox')","""""""
Brief Description:
------------------
string_test function performs a specific operation as described below.

Extended Description:
---------------------
This function, `string_test`, takes 1 parameters: s. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s : type
    Description of s.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> string_test(value)
Expected output
""""""","import unittest

class TestString_test(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = string_test(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = string_test(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum(x, y, z):    if x == y or y == z or x==z:        sum = 0    else:        sum = x + y + z    return sumprint(sum(2, 1, 2))print(sum(3, 2, 2))print(sum(2, 2, 2))print(sum(1, 2, 3))","""""""
Brief Description:
------------------
sum function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum`, takes 3 parameters: x,  y,  z. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.
z : type
    Description of z.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum(value, value, value)
Expected output
""""""","import unittest

class TestSum(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_on_specific_item(lst, n):    result = sorted((lst), key=lambda x: x[n])    return result   items = [('item2', 10, 10.12), ('item3', 15, 25.10), ('item1', 11, 24.50),('item4', 12, 22.50)]print(""Original list of tuples:"")print(items)print(""\nSort on 1st element of the tuple of the said list:"")n = 0print(sort_on_specific_item(items, n))print(""\nSort on 2nd element of the tuple of the said list:"")n = 1print(sort_on_specific_item(items, n))print(""\nSort on 3rd element of the tuple of the said list:"")n = 2print(sort_on_specific_item(items, n))","""""""
Brief Description:
------------------
sort_on_specific_item function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_on_specific_item`, takes 2 parameters: lst,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_on_specific_item(value, value)
Expected output
""""""","import unittest

class TestSort_on_specific_item(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_on_specific_item(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_on_specific_item(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def most_frequent(nums):  return max(set(nums), key = nums.count) print(most_frequent([1, 2, 1, 2, 3, 2, 1, 4, 2]))nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]print (""Original list:"")print(nums)print(""Item with maximum frequency of the said list:"")print(most_frequent(nums))nums = [1, 2, 3, 1, 2, 3, 2, 1, 4, 3, 3]print (""\nOriginal list:"")print(nums)print(""Item with maximum frequency of the said list:"")print(most_frequent(nums))","""""""
Brief Description:
------------------
most_frequent function performs a specific operation as described below.

Extended Description:
---------------------
This function, `most_frequent`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> most_frequent(value)
Expected output
""""""","import unittest

class TestMost_frequent(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = most_frequent(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = most_frequent(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def smallest_multiple(n):    if (n<=2):      return n    i = n * 2    factors = [number  for number in range(n, 1, -1) if number * 2 > n]    print(factors)    while True:        for a in factors:            if i % a != 0:                i += n                break            if (a == factors[-1] and i % a == 0):                return i                print(smallest_multiple(13))print(smallest_multiple(11))print(smallest_multiple(2))print(smallest_multiple(1))","""""""
Brief Description:
------------------
smallest_multiple function performs a specific operation as described below.

Extended Description:
---------------------
This function, `smallest_multiple`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> smallest_multiple(value)
Expected output
""""""","import unittest

class TestSmallest_multiple(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = smallest_multiple(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = smallest_multiple(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def relative_order(lst):    result = [i for i in range(len(lst)) if lst[i] == None]    return resultnums = [1, None, 5, 4,None, 0, None, None]print(""Original list:"")print(nums)print(""\nIndexes of all None items of the list:"")print(relative_order(nums))","""""""
Brief Description:
------------------
relative_order function performs a specific operation as described below.

Extended Description:
---------------------
This function, `relative_order`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> relative_order(value)
Expected output
""""""","import unittest

class TestRelative_order(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = relative_order(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = relative_order(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def split_lines(s):  return s.split('\n')print("Original string:")print("This\nis a\nmultiline\nstring.\n")print("Split the said multiline string into a list of lines:")print(split_lines('This\nis a\nmultiline\nstring.\n')),"""""""
Brief Description:
------------------
split_lines function performs a specific operation as described below.

Extended Description:
---------------------
This function, `split_lines`, takes 1 parameters: s. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s : type
    Description of s.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> split_lines(value)
Expected output
""""""","import unittest

class TestSplit_lines(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = split_lines(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = split_lines(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def check_string(str1):    messg = [    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]    result = [x for x in [i(str1) for i in messg] if x != True]    if not result:        result.append('Valid string.')    return result    s = input(""Input the string: "")print(check_string(s))","""""""
Brief Description:
------------------
check_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `check_string`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> check_string(value)
Expected output
""""""","import unittest

class TestCheck_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = check_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = check_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_dups(nums):    element = []    freque = []    if not nums:        return element    running_count = 1    for i in range(len(nums)-1):        if nums[i] == nums[i+1]:            running_count += 1        else:            freque.append(running_count)            element.append(nums[i])            running_count = 1    freque.append(running_count)    element.append(nums[i+1])    return element,frequenums = [1,2,2,2,4,4,4,5,5,5,5]print(""Original lists:"")print(nums)print(""\nConsecutive duplicate elements and their frequency:"")print(count_dups(nums))","""""""
Brief Description:
------------------
count_dups function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_dups`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_dups(value)
Expected output
""""""","import unittest

class TestCount_dups(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_dups(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_dups(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def is_vowel(char):    all_vowels = 'aeiou'    return char in all_vowelsprint(is_vowel('c'))print(is_vowel('e')),"""""""
Brief Description:
------------------
is_vowel function performs a specific operation as described below.

Extended Description:
---------------------
This function, `is_vowel`, takes 1 parameters: char. It is designed to perform a certain task using these parameters.

Parameters:
-----------
char : type
    Description of char.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> is_vowel(value)
Expected output
""""""","import unittest

class TestIs_vowel(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = is_vowel(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = is_vowel(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def fibonacci_nums(n):  if n <= 0:    return [0]  sequence = [0, 1]  while len(sequence) <= n:    next_value = sequence[len(sequence) - 1] + sequence[len(sequence) - 2]    sequence.append(next_value)  return sequenceprint(""First 7 Fibonacci numbers:"")print(fibonacci_nums(7))print(""\nFirst 15 Fibonacci numbers:"")print(fibonacci_nums(15))print(""\nFirst 50 Fibonacci numbers:"")print(fibonacci_nums(50))","""""""
Brief Description:
------------------
fibonacci_nums function performs a specific operation as described below.

Extended Description:
---------------------
This function, `fibonacci_nums`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> fibonacci_nums(value)
Expected output
""""""","import unittest

class TestFibonacci_nums(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = fibonacci_nums(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = fibonacci_nums(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Previous_Palindrome(num):    for x in range(num-1,0,-1):        if str(x) == str(x)[::-1]:            return xprint(Previous_Palindrome(99));print(Previous_Palindrome(1221));","""""""
Brief Description:
------------------
Previous_Palindrome function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Previous_Palindrome`, takes 1 parameters: num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Previous_Palindrome(value)
Expected output
""""""","import unittest

class TestPrevious_palindrome(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Previous_Palindrome(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Previous_Palindrome(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_words(list1, remove_words):    result = list(filter(lambda word: word not in remove_words, list1))    return result        colors = ['orange', 'red', 'green', 'blue', 'white', 'black']remove_colors = ['orange','black']print(""Original list:"")print(colors)print(""\nRemove words:"")print(remove_colors)print(""\nAfter removing the specified words from the said list:"")print(remove_words(colors, remove_colors))","""""""
Brief Description:
------------------
remove_words function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_words`, takes 2 parameters: list1,  remove_words. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.
remove_words : type
    Description of remove_words.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_words(value, value)
Expected output
""""""","import unittest

class TestRemove_words(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_words(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_words(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def amicable_numbers_sum(limit):    if not isinstance(limit, int):        return ""Input is not an integer!""    if limit < 1:        return ""Input must be bigger than 0!""    amicables = set()    for num in range(2, limit+1):        if num in amicables:            continue        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])        if num == sum_fact2 and num != sum_fact:            amicables.add(num)            amicables.add(sum_fact2)    return sum(amicables)print(amicable_numbers_sum(9999))print(amicable_numbers_sum(999))print(amicable_numbers_sum(99))","""""""
Brief Description:
------------------
amicable_numbers_sum function performs a specific operation as described below.

Extended Description:
---------------------
This function, `amicable_numbers_sum`, takes 1 parameters: limit. It is designed to perform a certain task using these parameters.

Parameters:
-----------
limit : type
    Description of limit.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> amicable_numbers_sum(value)
Expected output
""""""","import unittest

class TestAmicable_numbers_sum(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = amicable_numbers_sum(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = amicable_numbers_sum(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def remove_newlines(fname):    flist = open(fname).readlines()    return [s.rstrip('\n') for s in flist]print(remove_newlines("test.txt")),"""""""
Brief Description:
------------------
remove_newlines function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_newlines`, takes 1 parameters: fname. It is designed to perform a certain task using these parameters.

Parameters:
-----------
fname : type
    Description of fname.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_newlines(value)
Expected output
""""""","import unittest

class TestRemove_newlines(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_newlines(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_newlines(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def intersection_nested_lists(l1, l2):    result = [list(filter(lambda x: x in l1, sublist)) for sublist in l2]    return resultnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]nums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]print(""\nOriginal lists:"")print(nums1)print(nums2)print(""\nIntersection of said nested lists:"")print(intersection_nested_lists(nums1, nums2))","""""""
Brief Description:
------------------
intersection_nested_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `intersection_nested_lists`, takes 2 parameters: l1,  l2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> intersection_nested_lists(value, value)
Expected output
""""""","import unittest

class TestIntersection_nested_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = intersection_nested_lists(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = intersection_nested_lists(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_samePatterns(colors, patterns):        if len(colors) != len(patterns):        return False        sdict = {}    pset = set()    sset = set()        for i in range(len(patterns)):        pset.add(patterns[i])        sset.add(colors[i])        if patterns[i] not in sdict.keys():            sdict[patterns[i]] = []        keys = sdict[patterns[i]]        keys.append(colors[i])        sdict[patterns[i]] = keys    if len(pset) != len(sset):        return False       for values in sdict.values():        for i in range(len(values) - 1):            if values[i] != values[i+1]:                return False    return Trueprint(is_samePatterns([""red"",  ""green"",  ""green""], [""a"",  ""b"",  ""b""])) print(is_samePatterns([""red"",  ""green"",  ""greenn""], [""a"",  ""b"",  ""b""])) ","""""""
Brief Description:
------------------
is_samePatterns function performs a specific operation as described below.

Extended Description:
---------------------
This function, `is_samePatterns`, takes 2 parameters: colors,  patterns. It is designed to perform a certain task using these parameters.

Parameters:
-----------
colors : type
    Description of colors.
patterns : type
    Description of patterns.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> is_samePatterns(value, value)
Expected output
""""""","import unittest

class TestIs_samepatterns(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = is_samePatterns(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = is_samePatterns(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def number_of_substrings(str): 	str_len = len(str); 	return int(str_len * (str_len + 1) / 2); str1 = input(""Input a string: "")print(""Number of substrings:"") print(number_of_substrings(str1))","""""""
Brief Description:
------------------
number_of_substrings function performs a specific operation as described below.

Extended Description:
---------------------
This function, `number_of_substrings`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> number_of_substrings(value)
Expected output
""""""","import unittest

class TestNumber_of_substrings(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = number_of_substrings(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = number_of_substrings(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_none(nums):    result = [x for x in nums if x is not None]    return resultnums = [12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]print(""Original list:"")print(nums)print(""\nRemove None value from the said list:"")print(remove_none(nums))","""""""
Brief Description:
------------------
remove_none function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_none`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_none(value)
Expected output
""""""","import unittest

class TestRemove_none(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_none(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_none(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def unique_list(l):  x = []  for a in l:    if a not in x:      x.append(a)  return xprint(unique_list([1,2,3,3,3,3,4,5])) ","""""""
Brief Description:
------------------
unique_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `unique_list`, takes 1 parameters: l. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l : type
    Description of l.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> unique_list(value)
Expected output
""""""","import unittest

class TestUnique_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = unique_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = unique_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def printValues():	l = list()	for i in range(1,21):		l.append(i**2)	print(l[:5])	print(l[-5:])printValues()","""""""
Brief Description:
------------------
printValues function performs a specific operation as described below.

Extended Description:
---------------------
This function, `printValues`, takes 0 parameters: none. It is designed to perform a certain task using these parameters.

Parameters:
-----------

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> printValues()
Expected output
""""""","import unittest

class TestPrintvalues(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = printValues()
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = printValues()
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def square_num(n):  return n * nnums = [4, 5, 2, 9]print(""Original List: "",nums)result = map(square_num, nums)print(""Square the elements of the said list using map():"")print(list(result))","""""""
Brief Description:
------------------
square_num function performs a specific operation as described below.

Extended Description:
---------------------
This function, `square_num`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> square_num(value)
Expected output
""""""","import unittest

class TestSquare_num(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = square_num(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = square_num(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def file_read(fname):        with open(fname) as f:                #Content_list is the list that contains the read lines.                     content_list = f.readlines()                print(content_list)file_read(\'test.txt\'),"""""""
Brief Description:
------------------
file_read function performs a specific operation as described below.

Extended Description:
---------------------
This function, `file_read`, takes 1 parameters: fname. It is designed to perform a certain task using these parameters.

Parameters:
-----------
fname : type
    Description of fname.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> file_read(value)
Expected output
""""""","import unittest

class TestFile_read(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = file_read(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = file_read(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def file_read(fname):        content_array = []        with open(fname) as f:                #Content_list is the list that contains the read lines.                     for line in f:                        content_array.append(line)                print(content_array)file_read('test.txt'),"""""""
Brief Description:
------------------
file_read function performs a specific operation as described below.

Extended Description:
---------------------
This function, `file_read`, takes 1 parameters: fname. It is designed to perform a certain task using these parameters.

Parameters:
-----------
fname : type
    Description of fname.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> file_read(value)
Expected output
""""""","import unittest

class TestFile_read(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = file_read(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = file_read(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_words(filepath):   with open(filepath) as f:       data = f.read()       data.replace("","", "" "")       return len(data.split("" ""))print(count_words(""words.txt""))","""""""
Brief Description:
------------------
count_words function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_words`, takes 1 parameters: filepath. It is designed to perform a certain task using these parameters.

Parameters:
-----------
filepath : type
    Description of filepath.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_words(value)
Expected output
""""""","import unittest

class TestCount_words(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_words(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_words(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def catalan_number(num):    if num <=1:         return 1       res_num = 0    for i in range(num):        res_num += catalan_number(i) * catalan_number(num-i-1)    return res_num for n in range(10):    print(catalan_number(n))	","""""""
Brief Description:
------------------
catalan_number function performs a specific operation as described below.

Extended Description:
---------------------
This function, `catalan_number`, takes 1 parameters: num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> catalan_number(value)
Expected output
""""""","import unittest

class TestCatalan_number(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = catalan_number(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = catalan_number(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_last_index(lst, fn):  return len(lst) - 1 - next(i for i, x in enumerate(lst[::-1]) if fn(x))print(find_last_index([1, 2, 3, 4], lambda n: n % 2 == 1))","""""""
Brief Description:
------------------
find_last_index function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_last_index`, takes 2 parameters: lst,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_last_index(value, value)
Expected output
""""""","import unittest

class TestFind_last_index(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_last_index(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_last_index(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def pairwise(l1):    temp = []    for i in range(len(l1) - 1):        current_element, next_element = l1[i], l1[i + 1]        x = (current_element, next_element)        temp.append(x)    return templ1 = [1,1,2,3,3,4,4,5]print(""Original lists:"")print(l1)print(""\nIterate over all pairs of consecutive items of the said list:"")print(pairwise(l1))","""""""
Brief Description:
------------------
pairwise function performs a specific operation as described below.

Extended Description:
---------------------
This function, `pairwise`, takes 1 parameters: l1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> pairwise(value)
Expected output
""""""","import unittest

class TestPairwise(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = pairwise(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = pairwise(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def second_smallest(numbers):  if (len(numbers)<2):    return  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):    return  dup_items = set()  uniq_items = []  for x in numbers:    if x not in dup_items:      uniq_items.append(x)      dup_items.add(x)  uniq_items.sort()      return  uniq_items[1]   print(second_smallest([1, 2, -8, -2, 0, -2]))print(second_smallest([1, 1, 0, 0, 2, -2, -2]))print(second_smallest([1, 1, 1, 0, 0, 0, 2, -2, -2]))print(second_smallest([2,2]))print(second_smallest([2]))","""""""
Brief Description:
------------------
second_smallest function performs a specific operation as described below.

Extended Description:
---------------------
This function, `second_smallest`, takes 1 parameters: numbers. It is designed to perform a certain task using these parameters.

Parameters:
-----------
numbers : type
    Description of numbers.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> second_smallest(value)
Expected output
""""""","import unittest

class TestSecond_smallest(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = second_smallest(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = second_smallest(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_integer(list1):    ert = list(map(lambda i: isinstance(i, float), list1))     result = len([e for e in ert if e])             return resultlist1 = [1, 'abcd', 3.12, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]print(""Original list:"")print(list1)print(""\nNumber of floats in the said mixed list:"")print(count_integer(list1))","""""""
Brief Description:
------------------
count_integer function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_integer`, takes 1 parameters: list1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_integer(value)
Expected output
""""""","import unittest

class TestCount_integer(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_integer(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_integer(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def unique_values_in_list_of_lists(lst):    result = set(x for l in lst for x in l)    return list(result)nums = [[1,2,3,5], [2,3,5,4], [0,5,4,1], [3,7,2,1], [1,2,1,2]]print(""Original list:"")print(nums)print(""Unique values of the said list of lists:"")print(unique_values_in_list_of_lists(nums))chars = [['h','g','l','k'], ['a','b','d','e','c'], ['j','i','y'], ['n','b','v','c'], ['x','z']]print(""\nOriginal list:"")print(chars)print(""Unique values of the said list of lists:"")print(unique_values_in_list_of_lists(chars))","""""""
Brief Description:
------------------
unique_values_in_list_of_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `unique_values_in_list_of_lists`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> unique_values_in_list_of_lists(value)
Expected output
""""""","import unittest

class TestUnique_values_in_list_of_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = unique_values_in_list_of_lists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = unique_values_in_list_of_lists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_occurrences(nums):    result = dict(map(lambda el  : (el, list(nums).count(el)), nums))    return resultnums = [3,4,5,8,0,3,8,5,0,3,1,5,2,3,4,2]print(""Original list:"")print(nums)print(""\nCount the occurrences of the items in the said list:"")print(count_occurrences(nums))","""""""
Brief Description:
------------------
count_occurrences function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_occurrences`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_occurrences(value)
Expected output
""""""","import unittest

class TestCount_occurrences(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_occurrences(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_occurrences(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def sum_series(n):  if n < 1:    return 0  else:    return n + sum_series(n - 2)print(sum_series(6))print(sum_series(10)),"""""""
Brief Description:
------------------
sum_series function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_series`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_series(value)
Expected output
""""""","import unittest

class TestSum_series(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_series(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_series(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def add_without_plus_operator(a, b):    while b != 0:        data = a & b        a = a ^ b        b = data << 1    return aprint(add_without_plus_operator(2, 10))print(add_without_plus_operator(-20, 10))print(add_without_plus_operator(-10, -20))","""""""
Brief Description:
------------------
add_without_plus_operator function performs a specific operation as described below.

Extended Description:
---------------------
This function, `add_without_plus_operator`, takes 2 parameters: a,  b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> add_without_plus_operator(value, value)
Expected output
""""""","import unittest

class TestAdd_without_plus_operator(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = add_without_plus_operator(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = add_without_plus_operator(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def comb_sort(nums):    shrink_fact = 1.3    gaps = len(nums)    swapped = True    i = 0    while gaps > 1 or swapped:        gaps = int(float(gaps) / shrink_fact)        swapped = False        i = 0        while gaps + i < len(nums):            if nums[i] > nums[i+gaps]:                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]                swapped = True            i += 1    return numsnum1 = input('Input comma separated numbers:\n').strip()nums = [int(item) for item in num1.split(',')]print(comb_sort(nums))","""""""
Brief Description:
------------------
comb_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `comb_sort`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> comb_sort(value)
Expected output
""""""","import unittest

class TestComb_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = comb_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = comb_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def move_end(nums, offset):  return nums[offset:] + nums[:offset] print(move_end([1, 2, 3, 4, 5, 6, 7, 8], 3))print(move_end([1, 2, 3, 4, 5, 6, 7, 8], -3))print(move_end([1, 2, 3, 4, 5, 6, 7, 8], 8))print(move_end([1, 2, 3, 4, 5, 6, 7, 8], -8))print(move_end([1, 2, 3, 4, 5, 6, 7, 8], 7))print(move_end([1, 2, 3, 4, 5, 6, 7, 8], -7))","""""""
Brief Description:
------------------
move_end function performs a specific operation as described below.

Extended Description:
---------------------
This function, `move_end`, takes 2 parameters: nums,  offset. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
offset : type
    Description of offset.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> move_end(value, value)
Expected output
""""""","import unittest

class TestMove_end(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = move_end(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = move_end(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def specified_element(nums, N):    result = [i[N] for i in nums]    return result    nums = [        [1,2,3,2],        [4,5,6,2],        [7,1,9,5],       ]    print(""Original list of lists:"")print(nums)N = 0print(""\nExtract every first element from the said given two dimensional list:"")print(specified_element(nums, N))N = 2print(""\nExtract every third element from the said given two dimensional list:"")print(specified_element(nums, N))","""""""
Brief Description:
------------------
specified_element function performs a specific operation as described below.

Extended Description:
---------------------
This function, `specified_element`, takes 2 parameters: nums,  N. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
N : type
    Description of N.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> specified_element(value, value)
Expected output
""""""","import unittest

class TestSpecified_element(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = specified_element(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = specified_element(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def long_words(n, str):    word_len = []    txt = str.split("" "")    for x in txt:        if len(x) > n:            word_len.append(x)    return word_len	print(long_words(3, ""The quick brown fox jumps over the lazy dog""))","""""""
Brief Description:
------------------
long_words function performs a specific operation as described below.

Extended Description:
---------------------
This function, `long_words`, takes 2 parameters: n,  str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> long_words(value, value)
Expected output
""""""","import unittest

class TestLong_words(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = long_words(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = long_words(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def insert_elemnt_nth(lst, ele, n):    result = []    for st_idx in range(0, len(lst), n):        result.extend(lst[st_idx:st_idx+n])        result.append(ele)    result.pop()        return resultnums = [1,2,3,4,5,6,7,8,9,0]print(""Original list:"")print(nums)i_ele = 'a'i_ele_pos = 2print(""\nInsert"",i_ele,""in the said list after"",i_ele_pos,""nd element:"")print(insert_elemnt_nth(nums, i_ele, i_ele_pos))i_ele = 'b'i_ele_pos = 4print(""\nInsert"",i_ele,""in the said list after"",i_ele_pos,""th element:"")print(insert_elemnt_nth(nums, i_ele, i_ele_pos))","""""""
Brief Description:
------------------
insert_elemnt_nth function performs a specific operation as described below.

Extended Description:
---------------------
This function, `insert_elemnt_nth`, takes 3 parameters: lst,  ele,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
ele : type
    Description of ele.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> insert_elemnt_nth(value, value, value)
Expected output
""""""","import unittest

class TestInsert_elemnt_nth(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = insert_elemnt_nth(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = insert_elemnt_nth(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def symmetric_difference(x, y):  (_x, _y) = (set(x), set(y))  return [item for item in x if item not in _y] + [item for item in y          if item not in _x]print(symmetric_difference([10, 20, 30], [10, 20, 40]))","""""""
Brief Description:
------------------
symmetric_difference function performs a specific operation as described below.

Extended Description:
---------------------
This function, `symmetric_difference`, takes 2 parameters: x,  y. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> symmetric_difference(value, value)
Expected output
""""""","import unittest

class TestSymmetric_difference(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = symmetric_difference(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = symmetric_difference(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def odd_even_transposition(arr_nums: list) -> list:    arr_size = len(arr_nums)    for _ in range(arr_size):        for i in range(_ % 2, arr_size - 1, 2):            if arr_nums[i + 1] < arr_nums[i]:                arr_nums[i], arr_nums[i + 1] = arr_nums[i + 1], arr_nums[i]    return arr_nums            nums = [4, 3, 5, 1, 2]print(""\nOriginal list:"")print(nums)odd_even_transposition(nums)print(""Sorted order is:"", nums)nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]print(""\nOriginal list:"")print(nums)odd_even_transposition(nums)print(""Sorted order is:"", nums)","""""""
Brief Description:
------------------
odd_even_transposition function performs a specific operation as described below.

Extended Description:
---------------------
This function, `odd_even_transposition`, takes 1 parameters: arr_nums: list) -> list:    arr_size = len(arr_nums)    for _ in range(arr_size. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr_nums: list) -> list:    arr_size = len(arr_nums)    for _ in range(arr_size : type
    Description of arr_nums: list) -> list:    arr_size = len(arr_nums)    for _ in range(arr_size.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> odd_even_transposition(value)
Expected output
""""""","import unittest

class TestOdd_even_transposition(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = odd_even_transposition(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = odd_even_transposition(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def hex_to_rgb(hex):  return tuple(int(hex[i:i+2], 16) for i in (0, 2, 4)) print(hex_to_rgb('FFA501'))print(hex_to_rgb('FFFFFF'))print(hex_to_rgb('000000'))print(hex_to_rgb('FF0000'))print(hex_to_rgb('000080'))print(hex_to_rgb('C0C0C0'))","""""""
Brief Description:
------------------
hex_to_rgb function performs a specific operation as described below.

Extended Description:
---------------------
This function, `hex_to_rgb`, takes 1 parameters: hex. It is designed to perform a certain task using these parameters.

Parameters:
-----------
hex : type
    Description of hex.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> hex_to_rgb(value)
Expected output
""""""","import unittest

class TestHex_to_rgb(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = hex_to_rgb(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = hex_to_rgb(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def tuples_to_list_string(lst):    result = list(map(' '.join, lst))    return result   colors = [('red', 'pink'), ('white', 'black'), ('orange', 'green')]print(""Original list of tuples:"")print(colors)print(""\nConvert the said list of tuples to a list of strings:"")print(tuples_to_list_string(colors))names = [('Sheridan','Gentry'), ('Laila','Mckee'), ('Ahsan','Rivas'), ('Conna','Gonzalez')]print(""\nOriginal list of tuples:"")print(names)print(""\nConvert the said list of tuples to a list of strings:"")print(tuples_to_list_string(names))","""""""
Brief Description:
------------------
tuples_to_list_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `tuples_to_list_string`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> tuples_to_list_string(value)
Expected output
""""""","import unittest

class TestTuples_to_list_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = tuples_to_list_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = tuples_to_list_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_contained_in(l1, l2):  for x in set(l1):    if l1.count(x) > l2.count(x):      return False  return Trueprint(is_contained_in([1, 2], [2, 4, 1]))print(is_contained_in([1], [2, 4, 1]))print(is_contained_in([1, 1], [4, 2, 1]))print(is_contained_in([1, 1], [3, 2, 4, 1, 5, 1]))","""""""
Brief Description:
------------------
is_contained_in function performs a specific operation as described below.

Extended Description:
---------------------
This function, `is_contained_in`, takes 2 parameters: l1,  l2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> is_contained_in(value, value)
Expected output
""""""","import unittest

class TestIs_contained_in(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = is_contained_in(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = is_contained_in(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def histogram( items ):    for n in items:        output = ''        times = n        while( times > 0 ):          output += '*'          times = times - 1        print(output)histogram([2, 3, 6, 5])","""""""
Brief Description:
------------------
histogram function performs a specific operation as described below.

Extended Description:
---------------------
This function, `histogram`, takes 1 parameters:  items . It is designed to perform a certain task using these parameters.

Parameters:
-----------
items : type
    Description of items.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> histogram(value)
Expected output
""""""","import unittest

class TestHistogram(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = histogram(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = histogram(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_index(nums, fn):  return next(i for i, x in enumerate(nums) if fn(x))print(find_index([1, 2, 3, 4], lambda n: n % 2 == 1))","""""""
Brief Description:
------------------
find_index function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_index`, takes 2 parameters: nums,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_index(value, value)
Expected output
""""""","import unittest

class TestFind_index(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_index(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_index(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def initialize_list_with_values(n, val = 0):  return [val for x in range(n)] print(initialize_list_with_values(7))print(initialize_list_with_values(8,3))print(initialize_list_with_values(5,-2))print(initialize_list_with_values(5, 3.2))","""""""
Brief Description:
------------------
initialize_list_with_values function performs a specific operation as described below.

Extended Description:
---------------------
This function, `initialize_list_with_values`, takes 2 parameters: n,  val = 0. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.
val = 0 : type
    Description of val = 0.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> initialize_list_with_values(value, value)
Expected output
""""""","import unittest

class TestInitialize_list_with_values(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = initialize_list_with_values(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = initialize_list_with_values(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def create_largest_number(lst):    if all(val == 0 for val in lst):        return '0'    result = ''.join(sorted((str(val) for val in lst), reverse=False,                      key=lambda i: i*( len(str(min(lst))) * 2 // len(i))))    return resultnums = [3, 40, 41, 43, 74, 9]print(""Original list:"")print(nums)print(""Smallest possible number using the elements of the said list of positive integers:"")print(create_largest_number(nums))nums = [10, 40, 20, 30, 50, 60]print(""\nOriginal list:"")print(nums)print(""Smallest possible number using the elements of the said list of positive integers:"")print(create_largest_number(nums))nums = [8, 4, 2, 9, 5, 6, 1, 0]print(""\nOriginal list:"")print(nums)print(""Smallest possible number using the elements of the said list of positive integers:"")print(create_largest_number(nums))","""""""
Brief Description:
------------------
create_largest_number function performs a specific operation as described below.

Extended Description:
---------------------
This function, `create_largest_number`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> create_largest_number(value)
Expected output
""""""","import unittest

class TestCreate_largest_number(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = create_largest_number(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = create_largest_number(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def letter_combinations(digits):    if digits == """":        return []    string_maps = {        ""1"": ""abc"",        ""2"": ""def"",        ""3"": ""ghi"",        ""4"": ""jkl"",        ""5"": ""mno"",        ""6"": ""pqrs"",        ""7"": ""tuv"",        ""8"": ""wxy"",        ""9"": ""z""    }    result = [""""]    for num in digits:        temp = []        for an in result:            for char in string_maps[num]:                temp.append(an + char)        result = temp    return resultdigit_string = ""47""print(letter_combinations(digit_string))digit_string = ""29""print(letter_combinations(digit_string))","""""""
Brief Description:
------------------
letter_combinations function performs a specific operation as described below.

Extended Description:
---------------------
This function, `letter_combinations`, takes 1 parameters: digits. It is designed to perform a certain task using these parameters.

Parameters:
-----------
digits : type
    Description of digits.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> letter_combinations(value)
Expected output
""""""","import unittest

class TestLetter_combinations(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = letter_combinations(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = letter_combinations(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def to_uppercase(str1):    num_upper = 0    for letter in str1[:4]:         if letter.upper() == letter:            num_upper += 1    if num_upper >= 2:        return str1.upper()    return str1print(to_uppercase('Python'))print(to_uppercase('PyThon')),"""""""
Brief Description:
------------------
to_uppercase function performs a specific operation as described below.

Extended Description:
---------------------
This function, `to_uppercase`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> to_uppercase(value)
Expected output
""""""","import unittest

class TestTo_uppercase(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = to_uppercase(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = to_uppercase(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def power_base_sum(base, power):    return sum([int(i) for i in str(pow(base, power))])print(power_base_sum(2, 100))print(power_base_sum(8, 10))","""""""
Brief Description:
------------------
power_base_sum function performs a specific operation as described below.

Extended Description:
---------------------
This function, `power_base_sum`, takes 2 parameters: base,  power. It is designed to perform a certain task using these parameters.

Parameters:
-----------
base : type
    Description of base.
power : type
    Description of power.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> power_base_sum(value, value)
Expected output
""""""","import unittest

class TestPower_base_sum(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = power_base_sum(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = power_base_sum(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def unfold(fn, seed):  def fn_generator(val):    while True:       val = fn(val[1])      if val == False: break      yield val[0]  return [i for i in fn_generator([None, seed])]f = lambda n: False if n > 40 else [-n, n + 10]print(unfold(f, 10))","""""""
Brief Description:
------------------
unfold function performs a specific operation as described below.

Extended Description:
---------------------
This function, `unfold`, takes 2 parameters: fn,  seed. It is designed to perform a certain task using these parameters.

Parameters:
-----------
fn : type
    Description of fn.
seed : type
    Description of seed.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> unfold(value, value)
Expected output
""""""","import unittest

class TestUnfold(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = unfold(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = unfold(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_kth_element(n_list, L):    return  n_list[:L-1] + n_list[L:]n_list = [1,1,2,3,4,4,5,1]print(""Original list:"") print(n_list)kth_position = 3result = remove_kth_element(n_list, kth_position)print(""\nAfter removing an element at the kth position of the said list:"")print(result)","""""""
Brief Description:
------------------
remove_kth_element function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_kth_element`, takes 2 parameters: n_list,  L. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n_list : type
    Description of n_list.
L : type
    Description of L.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_kth_element(value, value)
Expected output
""""""","import unittest

class TestRemove_kth_element(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_kth_element(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_kth_element(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def interleave_diff_len_lists(list1, list2, list3, list4):    result = []    l1 = len(list1)    l2 = len(list2)    l3 = len(list3)    l4 = len(list4)        for i in range(max(l1, l2, l3, l4)):        if i < l1:            result.append(list1[i])        if i < l2:            result.append(list2[i])        if i < l3:            result.append(list3[i])        if i < l4:            result.append(list4[i])    return resultnums1 = [2, 4, 7, 0, 5, 8]nums2 = [2, 5, 8]nums3 = [0, 1]nums4 = [3, 3, -1, 7]print(""\nOriginal lists:"")print(nums1)print(nums2)print(nums3)print(nums4)print(""\nInterleave said lists of different lengths:"")print(interleave_diff_len_lists(nums1, nums2, nums3, nums4))","""""""
Brief Description:
------------------
interleave_diff_len_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `interleave_diff_len_lists`, takes 4 parameters: list1,  list2,  list3,  list4. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.
list2 : type
    Description of list2.
list3 : type
    Description of list3.
list4 : type
    Description of list4.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> interleave_diff_len_lists(value, value, value, value)
Expected output
""""""","import unittest

class TestInterleave_diff_len_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = interleave_diff_len_lists(value, value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = interleave_diff_len_lists(None, None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_range_in_list(li, min, max):	ctr = 0	for x in li:		if min <= x <= max:			ctr += 1	return ctrlist1 = [10,20,30,40,40,40,70,80,99]print(count_range_in_list(list1, 40, 100))list2 = ['a','b','c','d','e','f']print(count_range_in_list(list2, 'a', 'e'))","""""""
Brief Description:
------------------
count_range_in_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_range_in_list`, takes 3 parameters: li,  min,  max. It is designed to perform a certain task using these parameters.

Parameters:
-----------
li : type
    Description of li.
min : type
    Description of min.
max : type
    Description of max.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_range_in_list(value, value, value)
Expected output
""""""","import unittest

class TestCount_range_in_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_range_in_list(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_range_in_list(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def access_elements(nums, list_index):    result = [nums[i] for i in list_index]    return resultnums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]print (""Original list:"")print(nums)list_index = [0,3,5,7,10]print(""Index list:"")print(list_index)print(""\nItems with specified index of the said list:"")print(access_elements(nums, list_index))","""""""
Brief Description:
------------------
access_elements function performs a specific operation as described below.

Extended Description:
---------------------
This function, `access_elements`, takes 2 parameters: nums,  list_index. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
list_index : type
    Description of list_index.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> access_elements(value, value)
Expected output
""""""","import unittest

class TestAccess_elements(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = access_elements(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = access_elements(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def difference(x, y):  _y = set(y)  return [item for item in x if item not in _y]print(difference([1, 2, 3], [1, 2, 4]))","""""""
Brief Description:
------------------
difference function performs a specific operation as described below.

Extended Description:
---------------------
This function, `difference`, takes 2 parameters: x,  y. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> difference(value, value)
Expected output
""""""","import unittest

class TestDifference(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = difference(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = difference(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def abc():    x = 1    y = 2    str1= "w3resource"    print("Python Exercises")print(abc.__code__.co_nlocals),"""""""
Brief Description:
------------------
abc function performs a specific operation as described below.

Extended Description:
---------------------
This function, `abc`, takes 0 parameters: none. It is designed to perform a certain task using these parameters.

Parameters:
-----------

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> abc()
Expected output
""""""","import unittest

class TestAbc(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = abc()
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = abc()
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def longest_item(*args):  return max(args, key = len)print(longest_item('this', 'is', 'a', 'Green'))  print(longest_item([1, 2, 3], [1, 2], [1, 2, 3, 4, 5])) print(longest_item([1, 2, 3, 4], 'Red'))","""""""
Brief Description:
------------------
longest_item function performs a specific operation as described below.

Extended Description:
---------------------
This function, `longest_item`, takes 1 parameters: *args. It is designed to perform a certain task using these parameters.

Parameters:
-----------
*args : type
    Description of *args.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> longest_item(value)
Expected output
""""""","import unittest

class TestLongest_item(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = longest_item(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = longest_item(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def map_dictionary(itr, fn):  return dict(zip(itr, map(fn, itr)))print(map_dictionary([1, 2, 3], lambda x: x * x))","""""""
Brief Description:
------------------
map_dictionary function performs a specific operation as described below.

Extended Description:
---------------------
This function, `map_dictionary`, takes 2 parameters: itr,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
itr : type
    Description of itr.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> map_dictionary(value, value)
Expected output
""""""","import unittest

class TestMap_dictionary(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = map_dictionary(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = map_dictionary(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def has_duplicates(lst):  return len(lst) != len(set(lst))nums = [1, 2, 3, 4, 5, 6, 7]print(""Original list:"")print(nums)print(""Check if there are duplicate values in the said given flat list:"")print(has_duplicates(nums)) nums = [1, 2, 3, 3, 4, 5, 5, 6, 7]print(""\nOriginal list:"")print(nums)print(""Check if there are duplicate values in the said given flat list:"")print(has_duplicates(nums)) ","""""""
Brief Description:
------------------
has_duplicates function performs a specific operation as described below.

Extended Description:
---------------------
This function, `has_duplicates`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> has_duplicates(value)
Expected output
""""""","import unittest

class TestHas_duplicates(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = has_duplicates(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = has_duplicates(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def selection_sort(nums):    for i, n in enumerate(nums):        mn = min(range(i,len(nums)), key=nums.__getitem__)        nums[i], nums[mn] = nums[mn], n    return numsuser_input = input(""Input numbers separated by a comma:\n"").strip()nums = [int(item) for item in user_input.split(',')]print(selection_sort(nums))","""""""
Brief Description:
------------------
selection_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `selection_sort`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> selection_sort(value)
Expected output
""""""","import unittest

class TestSelection_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = selection_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = selection_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def isPalindrome(string):	left_pos = 0	right_pos = len(string) - 1		while right_pos >= left_pos:		if not string[left_pos] == string[right_pos]:			return False		left_pos += 1		right_pos -= 1	return Trueprint(isPalindrome('aza')) ","""""""
Brief Description:
------------------
isPalindrome function performs a specific operation as described below.

Extended Description:
---------------------
This function, `isPalindrome`, takes 1 parameters: string. It is designed to perform a certain task using these parameters.

Parameters:
-----------
string : type
    Description of string.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> isPalindrome(value)
Expected output
""""""","import unittest

class TestIspalindrome(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = isPalindrome(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = isPalindrome(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_integer(list1):    ctr = 0    for i in list1:        if isinstance(i, int):            ctr = ctr + 1    return ctrlist1 = [1, 'abcd', 3, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]print(""Original list:"")print(list1)print(""\nNumber of integers in the said mixed list:"")print(count_integer(list1))","""""""
Brief Description:
------------------
count_integer function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_integer`, takes 1 parameters: list1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_integer(value)
Expected output
""""""","import unittest

class TestCount_integer(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_integer(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_integer(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def delete_all_occurrences(str1, ch):     result = str1.replace(ch, """")     return(result)str_text = ""Delete all occurrences of a specified character in a given string""print(""Original string:"")print(str_text)print(""\nModified string:"")ch='a'print(delete_all_occurrences(str_text, ch))","""""""
Brief Description:
------------------
delete_all_occurrences function performs a specific operation as described below.

Extended Description:
---------------------
This function, `delete_all_occurrences`, takes 2 parameters: str1,  ch. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.
ch : type
    Description of ch.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> delete_all_occurrences(value, value)
Expected output
""""""","import unittest

class TestDelete_all_occurrences(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = delete_all_occurrences(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = delete_all_occurrences(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def dividing_two_lists(l1,l2):    result = [x/y for x, y in zip(l1,l2)]    return result nums1 = [7,2,3,4,9,2,3]nums2 = [9,8,2,3,3,1,2]print(""Original list:"")print(nums1)print(nums1)print(dividing_two_lists(nums1, nums2))","""""""
Brief Description:
------------------
dividing_two_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `dividing_two_lists`, takes 2 parameters: l1, l2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> dividing_two_lists(value, value)
Expected output
""""""","import unittest

class TestDividing_two_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = dividing_two_lists(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = dividing_two_lists(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def move_Spaces_front(str1):  noSpaces_char = [ch for ch in str1 if ch!=' ']  spaces_char = len(str1) - len(noSpaces_char)  result = ' '*spaces_char  result = '"'+result + ''.join(noSpaces_char)+'"'  return(result)print(move_Spaces_front("w3resource .  com  "))print(move_Spaces_front("   w3resource.com  ")),"""""""
Brief Description:
------------------
move_Spaces_front function performs a specific operation as described below.

Extended Description:
---------------------
This function, `move_Spaces_front`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> move_Spaces_front(value)
Expected output
""""""","import unittest

class TestMove_spaces_front(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = move_Spaces_front(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = move_Spaces_front(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def list_of_dicts(marks):    keys = marks.keys()    vals = zip(*[marks[k] for k in keys])    result = [dict(zip(keys, v)) for v in vals]    return resultmarks = {'Science': [88, 89, 62, 95], 'Language': [77, 78, 84, 80]}print(""Original dictionary of lists:"")print(marks)print(""\nSplit said dictionary of lists into list of dictionaries:"")print(list_of_dicts(marks))","""""""
Brief Description:
------------------
list_of_dicts function performs a specific operation as described below.

Extended Description:
---------------------
This function, `list_of_dicts`, takes 1 parameters: marks. It is designed to perform a certain task using these parameters.

Parameters:
-----------
marks : type
    Description of marks.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> list_of_dicts(value)
Expected output
""""""","import unittest

class TestList_of_dicts(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = list_of_dicts(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = list_of_dicts(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_column(nums, C):    result = sum(row[C] for row in nums)    return resultnums = [        [1,2,3,2],        [4,5,6,2],        [7,8,9,5],        ]print(""Original list of lists:"")print(nums)column = 0print(""\nSum: 1st column of the said list of lists:"")print(sum_column(nums, column))column = 1print(""\nSum: 2nd column of the said list of lists:"")print(sum_column(nums, column))column = 3print(""\nSum: 4th column of the said list of lists:"")print(sum_column(nums, column))","""""""
Brief Description:
------------------
sum_column function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_column`, takes 2 parameters: nums,  C. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
C : type
    Description of C.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_column(value, value)
Expected output
""""""","import unittest

class TestSum_column(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_column(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_column(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def addition_subtrction(x, y):    return x + y, x - y nums1 = [6, 5, 3, 9]nums2 = [0, 1, 7, 7]print(""Original lists:"")print(nums1)print(nums2)result = map(addition_subtrction, nums1, nums2)print(""\nResult:"")print(list(result))","""""""
Brief Description:
------------------
addition_subtrction function performs a specific operation as described below.

Extended Description:
---------------------
This function, `addition_subtrction`, takes 2 parameters: x,  y. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> addition_subtrction(value, value)
Expected output
""""""","import unittest

class TestAddition_subtrction(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = addition_subtrction(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = addition_subtrction(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def wiggle_sort(arra_nums):    for i, _ in enumerate(arra_nums):        if (i % 2 == 1) == (arra_nums[i - 1] > arra_nums[i]):            arra_nums[i - 1], arra_nums[i] = arra_nums[i], arra_nums[i - 1]    return arra_numsprint(""Input the array elements: "")arra_nums = list(map(int, input().split()))print(""Original unsorted array:"")print(arra_nums)print(""The said array after applying Wiggle sort:"")print(wiggle_sort(arra_nums))","""""""
Brief Description:
------------------
wiggle_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `wiggle_sort`, takes 1 parameters: arra_nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arra_nums : type
    Description of arra_nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> wiggle_sort(value)
Expected output
""""""","import unittest

class TestWiggle_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = wiggle_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = wiggle_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def reverse_list_of_lists(nums,lr,hr):    temp = []    for idx, el in enumerate(nums):        if idx >= lr and idx < hr:            temp.append(el)    result_max = max(temp)     result_min = min(temp)     return result_max, result_minnums = [4,3,0,5,3,0,2,3,4,2,4,3,5]print(""Original list:"")print(nums)print(""\nIndex range:"")lr = 3hr = 8print(lr,""to"",hr)print(""\nMaximum and minimum values of the said given list within index range:"")print(reverse_list_of_lists(nums,lr,hr))","""""""
Brief Description:
------------------
reverse_list_of_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse_list_of_lists`, takes 3 parameters: nums, lr, hr. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
lr : type
    Description of lr.
hr : type
    Description of hr.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse_list_of_lists(value, value, value)
Expected output
""""""","import unittest

class TestReverse_list_of_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse_list_of_lists(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse_list_of_lists(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def average_two_lists(nums1, nums2):    result = sum(nums1 + nums2) / len(nums1 + nums2)     return resultnums1 = [1, 1, 3, 4, 4, 5, 6, 7]nums2 = [0, 1, 2, 3, 4, 4, 5, 7, 8]print(""Original list:"")print(nums1)print(nums2)print(""\nAverage of two lists:"")print(average_two_lists(nums1, nums2))","""""""
Brief Description:
------------------
average_two_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `average_two_lists`, takes 2 parameters: nums1,  nums2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums1 : type
    Description of nums1.
nums2 : type
    Description of nums2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> average_two_lists(value, value)
Expected output
""""""","import unittest

class TestAverage_two_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = average_two_lists(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = average_two_lists(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def unique_product(list_data):    temp = list(set(list_data))    p = 1    for i in temp:        p *= i    return pnums = [10, 20, 30, 40, 20, 50, 60, 40]print(""Original List : "",nums)print(""Product of the unique numbers of the said list: "",unique_product(nums))","""""""
Brief Description:
------------------
unique_product function performs a specific operation as described below.

Extended Description:
---------------------
This function, `unique_product`, takes 1 parameters: list_data. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list_data : type
    Description of list_data.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> unique_product(value)
Expected output
""""""","import unittest

class TestUnique_product(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = unique_product(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = unique_product(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_min_val(list_val):     max_val = max(i for i in list_val if isinstance(i, int))      min_val = min(i for i in list_val if isinstance(i, int))     return(max_val, min_val)list_val = ['Python', 3, 2, 4, 5, 'version'] print(""Original list:"")print(list_val)print(""\nMaximum and Minimum values in the said list:"")print(max_min_val(list_val))","""""""
Brief Description:
------------------
max_min_val function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_min_val`, takes 1 parameters: list_val. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list_val : type
    Description of list_val.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_min_val(value)
Expected output
""""""","import unittest

class TestMax_min_val(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_min_val(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_min_val(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def common_list_of_lists(lst):    temp = set(lst[0]).intersection(*lst)    return list(temp) nums = [[7,2,3,4,7],[9,2,3,2,5],[8,2,3,4,4]]print(""Original list:"")print(nums)print(""\nCommon elements of the said list of lists:"")print(common_list_of_lists(nums))chars = [['a','b','c'],['b','c','d'],['c','d','e']]print(""\nOriginal list:"")print(chars)print(""\nCommon elements of the said list of lists:"")print(common_list_of_lists(chars))","""""""
Brief Description:
------------------
common_list_of_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `common_list_of_lists`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> common_list_of_lists(value)
Expected output
""""""","import unittest

class TestCommon_list_of_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = common_list_of_lists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = common_list_of_lists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_Sublist(l, s):	sub_set = False	if s == []:		sub_set = True	elif s == l:		sub_set = True	elif len(s) > len(l):		sub_set = False	else:		for i in range(len(l)):			if l[i] == s[0]:				n = 1				while (n < len(s)) and (l[i+n] == s[n]):					n += 1								if n == len(s):					sub_set = True	return sub_seta = [2,4,3,5,7]b = [4,3]c = [3,7]print(is_Sublist(a, b))print(is_Sublist(a, c))","""""""
Brief Description:
------------------
is_Sublist function performs a specific operation as described below.

Extended Description:
---------------------
This function, `is_Sublist`, takes 2 parameters: l,  s. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l : type
    Description of l.
s : type
    Description of s.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> is_Sublist(value, value)
Expected output
""""""","import unittest

class TestIs_sublist(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = is_Sublist(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = is_Sublist(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_none(nums):    result = filter(lambda v: v is not None, nums)    return list(result)nums = [12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]print(""Original list:"")print(nums)print(""\nRemove None value from the said list:"")print(remove_none(nums))","""""""
Brief Description:
------------------
remove_none function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_none`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_none(value)
Expected output
""""""","import unittest

class TestRemove_none(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_none(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_none(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def discriminant():    x_value = float(input('The x value: '))    y_value = float(input('The y value: '))    z_value = float(input('The z value: '))    discriminant = (y_value**2) - (4*x_value*z_value)    if discriminant > 0:        print('Two Solutions. Discriminant value is:', discriminant)    elif discriminant == 0:        print('One Solution. Discriminant value is:', discriminant)    elif discriminant < 0:        print('No Real Solutions. Discriminant value is:', discriminant)discriminant()","""""""
Brief Description:
------------------
discriminant function performs a specific operation as described below.

Extended Description:
---------------------
This function, `discriminant`, takes 0 parameters: none. It is designed to perform a certain task using these parameters.

Parameters:
-----------

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> discriminant()
Expected output
""""""","import unittest

class TestDiscriminant(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = discriminant()
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = discriminant()
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def test_duplicate(array_nums):    nums_set = set(array_nums)        return len(array_nums) != len(nums_set)     print(test_duplicate([1,2,3,4,5]))print(test_duplicate([1,2,3,4, 4]))print(test_duplicate([1,1,2,2,3,3,4,4,5]))","""""""
Brief Description:
------------------
test_duplicate function performs a specific operation as described below.

Extended Description:
---------------------
This function, `test_duplicate`, takes 1 parameters: array_nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
array_nums : type
    Description of array_nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> test_duplicate(value)
Expected output
""""""","import unittest

class TestTest_duplicate(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = test_duplicate(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = test_duplicate(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def split_two_parts(n_list, L):    return n_list[:L], n_list[L:]n_list = [1,1,2,3,4,4,5, 1]print(""Original list:"") print(n_list)first_list_length = 3print(""\nLength of the first part of the list:"",first_list_length)print(""\nSplited the said list into two parts:"")print(split_two_parts(n_list, first_list_length))","""""""
Brief Description:
------------------
split_two_parts function performs a specific operation as described below.

Extended Description:
---------------------
This function, `split_two_parts`, takes 2 parameters: n_list,  L. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n_list : type
    Description of n_list.
L : type
    Description of L.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> split_two_parts(value, value)
Expected output
""""""","import unittest

class TestSplit_two_parts(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = split_two_parts(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = split_two_parts(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_of_digits(nums):    return sum(int(el) for n in nums for el in str(n) if el.isdigit())nums = [10,2,56]print(""Original tuple: "") print(nums)print(""Sum of digits of each number of the said list of integers:"")print(sum_of_digits(nums))nums = [10,20,4,5,'b',70,'a']print(""\nOriginal tuple: "") print(nums)print(""Sum of digits of each number of the said list of integers:"")print(sum_of_digits(nums))nums = [10,20,-4,5,-70]print(""\nOriginal tuple: "") print(nums)print(""Sum of digits of each number of the said list of integers:"")print(sum_of_digits(nums))","""""""
Brief Description:
------------------
sum_of_digits function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_of_digits`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_of_digits(value)
Expected output
""""""","import unittest

class TestSum_of_digits(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_of_digits(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_of_digits(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def quickSort(data_list):   quickSortHlp(data_list,0,len(data_list)-1)def quickSortHlp(data_list,first,last):   if first < last:       splitpoint = partition(data_list,first,last)       quickSortHlp(data_list,first,splitpoint-1)       quickSortHlp(data_list,splitpoint+1,last)def partition(data_list,first,last):   pivotvalue = data_list[first]   leftmark = first+1   rightmark = last   done = False   while not done:       while leftmark <= rightmark and data_list[leftmark] <= pivotvalue:           leftmark = leftmark + 1       while data_list[rightmark] >= pivotvalue and rightmark >= leftmark:           rightmark = rightmark -1       if rightmark < leftmark:           done = True       else:           temp = data_list[leftmark]           data_list[leftmark] = data_list[rightmark]           data_list[rightmark] = temp   temp = data_list[first]   data_list[first] = data_list[rightmark]   data_list[rightmark] = temp   return rightmarkdata_list = [54,26,93,17,77,31,44,55,20]quickSort(data_list)print(data_list)","""""""
Brief Description:
------------------
quickSort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `quickSort`, takes 1 parameters: data_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
data_list : type
    Description of data_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> quickSort(value)
Expected output
""""""","import unittest

class TestQuicksort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = quickSort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = quickSort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def not_poor(str1):  snot = str1.find('not')  spoor = str1.find('poor')    if spoor > snot and snot>0 and spoor>0:    str1 = str1.replace(str1[snot:(spoor+4)], 'good')    return str1  else:    return str1print(not_poor('The lyrics is not that poor!'))print(not_poor('The lyrics is poor!'))","""""""
Brief Description:
------------------
not_poor function performs a specific operation as described below.

Extended Description:
---------------------
This function, `not_poor`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> not_poor(value)
Expected output
""""""","import unittest

class TestNot_poor(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = not_poor(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = not_poor(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_first_duplicate(nums):    num_set = set()    no_duplicate = -1    for i in range(len(nums)):        if nums[i] in num_set:            return nums[i]        else:            num_set.add(nums[i])    return no_duplicateprint(find_first_duplicate([1, 2, 3, 4, 4, 5]))print(find_first_duplicate([1, 2, 3, 4]))print(find_first_duplicate([1, 1, 2, 3, 3, 2, 2]))","""""""
Brief Description:
------------------
find_first_duplicate function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_first_duplicate`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_first_duplicate(value)
Expected output
""""""","import unittest

class TestFind_first_duplicate(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_first_duplicate(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_first_duplicate(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def unique_list(text_str):    l = text_str.split()    temp = []    for x in l:        if x not in temp:            temp.append(x)    return ' '.join(temp)text_str = "Python Exercises Practice Solution Exercises"print("Original String:")print(text_str)print("\nAfter removing duplicate words from the said string:")print(unique_list(text_str)),"""""""
Brief Description:
------------------
unique_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `unique_list`, takes 1 parameters: text_str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
text_str : type
    Description of text_str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> unique_list(value)
Expected output
""""""","import unittest

class TestUnique_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = unique_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = unique_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def pancake_sort(nums):    arr_len = len(nums)    while arr_len > 1:        mi = nums.index(max(nums[0:arr_len]))        nums = nums[mi::-1] + nums[mi+1:len(nums)]        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]        arr_len -= 1    return numsuser_input = input(""Input numbers separated by a comma:\n"").strip()nums = [int(item) for item in user_input.split(',')]print(pancake_sort(nums))","""""""
Brief Description:
------------------
pancake_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `pancake_sort`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> pancake_sort(value)
Expected output
""""""","import unittest

class TestPancake_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = pancake_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = pancake_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def shift_first_last(lst):    x = lst.pop(0)    y = lst.pop()    lst.insert(0, y)    lst.insert(len(lst), x)    return lstnums = [1,2,3,4,5,6,7]print(""Original list:"")print(nums)print(""Shift last element to first position and first element to last position of the said list:"")print(shift_first_last(nums))chars = ['s','d','f','d','s','s','d','f']print(""\nOriginal list:"")print(chars)print(""Shift last element to first position and first element to last position of the said list:"")print(shift_first_last(chars))","""""""
Brief Description:
------------------
shift_first_last function performs a specific operation as described below.

Extended Description:
---------------------
This function, `shift_first_last`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> shift_first_last(value)
Expected output
""""""","import unittest

class TestShift_first_last(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = shift_first_last(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = shift_first_last(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def l_strs_to_l_chars(lst):    result = [i for element in lst for i in element]    return resultcolors = [""red"", ""white"", ""a"", ""b"", ""black"", ""f""]print(""Original list:"")print(colors)print(""\nConvert the said list of strings and characters to a single list of characters:"")print(l_strs_to_l_chars(colors))","""""""
Brief Description:
------------------
l_strs_to_l_chars function performs a specific operation as described below.

Extended Description:
---------------------
This function, `l_strs_to_l_chars`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> l_strs_to_l_chars(value)
Expected output
""""""","import unittest

class TestL_strs_to_l_chars(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = l_strs_to_l_chars(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = l_strs_to_l_chars(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_dictionary(colors, r_id):    colors[:] = [d for d in colors if d.get('id') != r_id]    return colorscolors = [{""id"" : ""#FF0000"", ""color"" : ""Red""},           {""id"" : ""#800000"", ""color"" : ""Maroon""},           {""id"" : ""#FFFF00"", ""color"" : ""Yellow""},           {""id"" : ""#808000"", ""color"" : ""Olive""}] print('Original list of dictionary:')print(colors)r_id = ""#FF0000""print(""\nRemove id"",r_id,""from the said list of dictionary:"")print(remove_dictionary(colors, r_id))","""""""
Brief Description:
------------------
remove_dictionary function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_dictionary`, takes 2 parameters: colors,  r_id. It is designed to perform a certain task using these parameters.

Parameters:
-----------
colors : type
    Description of colors.
r_id : type
    Description of r_id.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_dictionary(value, value)
Expected output
""""""","import unittest

class TestRemove_dictionary(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_dictionary(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_dictionary(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def rgb_to_hex(r, g, b):  return ('{:02X}' * 3).format(r, g, b) print(rgb_to_hex(255, 165, 1))print(rgb_to_hex(255, 255, 255))print(rgb_to_hex(0, 0, 0))print(rgb_to_hex(0, 0, 128))print(rgb_to_hex(192, 192, 192))","""""""
Brief Description:
------------------
rgb_to_hex function performs a specific operation as described below.

Extended Description:
---------------------
This function, `rgb_to_hex`, takes 3 parameters: r,  g,  b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
r : type
    Description of r.
g : type
    Description of g.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> rgb_to_hex(value, value, value)
Expected output
""""""","import unittest

class TestRgb_to_hex(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = rgb_to_hex(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = rgb_to_hex(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_val(list_val):     max_val = max(list_val, key = lambda i: (isinstance(i, int), i))       return(max_val)list_val = ['Python', 3, 2, 4, 5, 'version'] print(""Original list:"")print(list_val)print(""\nMaximum values in the said list using lambda:"")print(max_val(list_val))","""""""
Brief Description:
------------------
max_val function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_val`, takes 1 parameters: list_val. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list_val : type
    Description of list_val.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_val(value)
Expected output
""""""","import unittest

class TestMax_val(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_val(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_val(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_n_nums(nums, n = 1):  return sorted(nums, reverse = True)[:n]nums = [1, 2, 3]print(""Original list elements:"")print(nums)print(""Maximum values of the said list:"", max_n_nums(nums))nums = [1, 2, 3]print(""\nOriginal list elements:"")print(nums)print(""Two maximum values of the said list:"", max_n_nums(nums,2))nums = [-2, -3, -1, -2, -4, 0, -5]print(""\nOriginal list elements:"")print(nums)print(""Threee maximum values of the said list:"", max_n_nums(nums,3))nums = [2.2, 2, 3.2, 4.5, 4.6, 5.2, 2.9]print(""\nOriginal list elements:"")print(nums)print(""Two maximum values of the said list:"", max_n_nums(nums, 2))","""""""
Brief Description:
------------------
max_n_nums function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_n_nums`, takes 2 parameters: nums,  n = 1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
n = 1 : type
    Description of n = 1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_n_nums(value, value)
Expected output
""""""","import unittest

class TestMax_n_nums(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_n_nums(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_n_nums(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def difference(n):    if n <= 17:        return 17 - n    else:        return (n - 17) * 2 print(difference(22))print(difference(14)),"""""""
Brief Description:
------------------
difference function performs a specific operation as described below.

Extended Description:
---------------------
This function, `difference`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> difference(value)
Expected output
""""""","import unittest

class TestDifference(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = difference(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = difference(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def arclength():    pi=22/7    diameter = float(input('Diameter of circle: '))    angle = float(input('angle measure: '))    if angle >= 360:        print(""Angle is not possible"")        return    arc_length = (pi*diameter) * (angle/360)    print(""Arc Length is: "", arc_length)arclength()","""""""
Brief Description:
------------------
arclength function performs a specific operation as described below.

Extended Description:
---------------------
This function, `arclength`, takes 0 parameters: none. It is designed to perform a certain task using these parameters.

Parameters:
-----------

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> arclength()
Expected output
""""""","import unittest

class TestArclength(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = arclength()
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = arclength()
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def odd_even_transposition(arr: list) -> list:    arr_size = len(arr)    for _ in range(arr_size):        for i in range(_ % 2, arr_size - 1, 2):            if arr[i + 1] < arr[i]:                arr[i], arr[i + 1] = arr[i + 1], arr[i]    return arr            nums = [4, 3, 5, 1, 2]print(""\nOriginal list:"")print(nums)odd_even_transposition(nums)print(""Sorted order is:"", nums)nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]print(""\nOriginal list:"")print(nums)odd_even_transposition(nums)print(""Sorted order is:"", nums)","""""""
Brief Description:
------------------
odd_even_transposition function performs a specific operation as described below.

Extended Description:
---------------------
This function, `odd_even_transposition`, takes 1 parameters: arr: list) -> list:    arr_size = len(arr)    for _ in range(arr_size. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr: list) -> list:    arr_size = len(arr)    for _ in range(arr_size : type
    Description of arr: list) -> list:    arr_size = len(arr)    for _ in range(arr_size.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> odd_even_transposition(value)
Expected output
""""""","import unittest

class TestOdd_even_transposition(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = odd_even_transposition(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = odd_even_transposition(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_spaces(str1):  str1 = str1.replace(' ','')  return str1    print(remove_spaces(""w 3 res ou r ce""))print(remove_spaces(""a b c""))","""""""
Brief Description:
------------------
remove_spaces function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_spaces`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_spaces(value)
Expected output
""""""","import unittest

class TestRemove_spaces(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_spaces(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_spaces(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def permute_string(str):    if len(str) == 0:        return ['']    prev_list = permute_string(str[1:len(str)])    next_list = []    for i in range(0,len(prev_list)):        for j in range(0,len(str)):            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]            if new_str not in next_list:                next_list.append(new_str)    return next_listprint(permute_string('ABCD'));","""""""
Brief Description:
------------------
permute_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `permute_string`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> permute_string(value)
Expected output
""""""","import unittest

class TestPermute_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = permute_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = permute_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_char(str, n):      first_part = str[:n]       last_part = str[n+1:]      return first_part + last_partprint(remove_char('Python', 0))print(remove_char('Python', 3))print(remove_char('Python', 5))","""""""
Brief Description:
------------------
remove_char function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_char`, takes 2 parameters: str,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_char(value, value)
Expected output
""""""","import unittest

class TestRemove_char(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_char(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_char(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_abundant(n):    fctr_sum = sum([fctr for fctr in range(1, n) if n % fctr == 0])    return fctr_sum > nprint(is_abundant(12))print(is_abundant(13))","""""""
Brief Description:
------------------
is_abundant function performs a specific operation as described below.

Extended Description:
---------------------
This function, `is_abundant`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> is_abundant(value)
Expected output
""""""","import unittest

class TestIs_abundant(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = is_abundant(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = is_abundant(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def first_repeated_char(str1):  for index,c in enumerate(str1):    if str1[:index+1].count(c) > 1:      return c   return ""None""print(first_repeated_char(""abcdabcd""))print(first_repeated_char(""abcd""))","""""""
Brief Description:
------------------
first_repeated_char function performs a specific operation as described below.

Extended Description:
---------------------
This function, `first_repeated_char`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> first_repeated_char(value)
Expected output
""""""","import unittest

class TestFirst_repeated_char(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = first_repeated_char(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = first_repeated_char(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def longest_word(filename):    with open(filename, 'r') as infile:              words = infile.read().split()    max_len = len(max(words, key=len))    return [word for word in words if len(word) == max_len]print(longest_word('test.txt'))","""""""
Brief Description:
------------------
longest_word function performs a specific operation as described below.

Extended Description:
---------------------
This function, `longest_word`, takes 1 parameters: filename. It is designed to perform a certain task using these parameters.

Parameters:
-----------
filename : type
    Description of filename.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> longest_word(value)
Expected output
""""""","import unittest

class TestLongest_word(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = longest_word(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = longest_word(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def personal_details():    name, age = ""Simon"", 19    address = ""Bangalore, Karnataka, India""    print(""Name: {}\nAge: {}\nAddress: {}"".format(name, age, address))personal_details()","""""""
Brief Description:
------------------
personal_details function performs a specific operation as described below.

Extended Description:
---------------------
This function, `personal_details`, takes 0 parameters: none. It is designed to perform a certain task using these parameters.

Parameters:
-----------

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> personal_details()
Expected output
""""""","import unittest

class TestPersonal_details(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = personal_details()
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = personal_details()
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def first_non_repeating_character(str1):  char_order = []  ctr = {}  for c in str1:    if c in ctr:      ctr[c] += 1    else:      ctr[c] = 1       char_order.append(c)  for c in char_order:    if ctr[c] == 1:      return c  return Noneprint(first_non_repeating_character('abcdef'))print(first_non_repeating_character('abcabcdef'))print(first_non_repeating_character('aabbcc')),"""""""
Brief Description:
------------------
first_non_repeating_character function performs a specific operation as described below.

Extended Description:
---------------------
This function, `first_non_repeating_character`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> first_non_repeating_character(value)
Expected output
""""""","import unittest

class TestFirst_non_repeating_character(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = first_non_repeating_character(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = first_non_repeating_character(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_matrix(M):    result = sorted(M, key=sum)    return resultmatrix1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]matrix2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]print(""Original Matrix:"")print(matrix1)print(""\nSort the said matrix in ascending order according to the sum of its rows"") print(sort_matrix(matrix1))print(""\nOriginal Matrix:"")print(matrix2) print(""\nSort the said matrix in ascending order according to the sum of its rows"") print(sort_matrix(matrix2))","""""""
Brief Description:
------------------
sort_matrix function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_matrix`, takes 1 parameters: M. It is designed to perform a certain task using these parameters.

Parameters:
-----------
M : type
    Description of M.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_matrix(value)
Expected output
""""""","import unittest

class TestSort_matrix(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_matrix(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_matrix(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def decapitalize_first_letter(s, upper_rest = False):  return ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])]) print(decapitalize_first_letter('Java Script'))print(decapitalize_first_letter('Python'))","""""""
Brief Description:
------------------
decapitalize_first_letter function performs a specific operation as described below.

Extended Description:
---------------------
This function, `decapitalize_first_letter`, takes 2 parameters: s,  upper_rest = False. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s : type
    Description of s.
upper_rest = False : type
    Description of upper_rest = False.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> decapitalize_first_letter(value, value)
Expected output
""""""","import unittest

class TestDecapitalize_first_letter(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = decapitalize_first_letter(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = decapitalize_first_letter(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def move_start(nums, offset):  return nums[-offset:] + nums[:-offset] print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 3))print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -3))print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 8))print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -8))print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 7))print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -7))","""""""
Brief Description:
------------------
move_start function performs a specific operation as described below.

Extended Description:
---------------------
This function, `move_start`, takes 2 parameters: nums,  offset. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
offset : type
    Description of offset.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> move_start(value, value)
Expected output
""""""","import unittest

class TestMove_start(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = move_start(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = move_start(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def make_bold(fn):    def wrapped():        return "<b>" + fn() + "</b>"    return wrappeddef make_italic(fn):    def wrapped():        return "<i>" + fn() + "</i>"    return wrappeddef make_underline(fn):    def wrapped():        return "<u>" + fn() + "</u>"    return wrapped@make_bold@make_italic@make_underlinedef hello():    return "hello world"print(hello()) ## returns "<b><i><u>hello world</u></i></b>","""""""
Brief Description:
------------------
make_bold function performs a specific operation as described below.

Extended Description:
---------------------
This function, `make_bold`, takes 1 parameters: fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> make_bold(value)
Expected output
""""""","import unittest

class TestMake_bold(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = make_bold(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = make_bold(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_Range_list(nums, m, n):                                                                                                                                                                                                    sum_range = 0                                                                                                                                                                                                             for i in range(m, n+1, 1):                                                                                                                                                                                                sum_range += nums[i]                                                                                                                                                                                                      return sum_range   nums = [2,1,5,6,8,3,4,9,10,11,8,12]print(""Original list:"")print(nums)m = 8n = 10print(""Range:"",m,"","",n) print(""\nSum of the specified range:"")print(sum_Range_list(nums, m, n))","""""""
Brief Description:
------------------
sum_Range_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_Range_list`, takes 3 parameters: nums,  m,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
m : type
    Description of m.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_Range_list(value, value, value)
Expected output
""""""","import unittest

class TestSum_range_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_Range_list(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_Range_list(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def min_n_nums(nums, n = 1):  return sorted(nums, reverse = False)[:n]nums = [1, 2, 3]print(""Original list elements:"")print(nums)print(""Minimum values of the said list:"", min_n_nums(nums))nums = [1, 2, 3]print(""\nOriginal list elements:"")print(nums)print(""Two minimum values of the said list:"", min_n_nums(nums,2))nums = [-2, -3, -1, -2, -4, 0, -5]print(""\nOriginal list elements:"")print(nums)print(""Threee minimum values of the said list:"", min_n_nums(nums,3))nums = [2.2, 2, 3.2, 4.5, 4.6, 5.2, 2.9]print(""\nOriginal list elements:"")print(nums)print(""Two minimum values of the said list:"", min_n_nums(nums, 2))","""""""
Brief Description:
------------------
min_n_nums function performs a specific operation as described below.

Extended Description:
---------------------
This function, `min_n_nums`, takes 2 parameters: nums,  n = 1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
n = 1 : type
    Description of n = 1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> min_n_nums(value, value)
Expected output
""""""","import unittest

class TestMin_n_nums(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = min_n_nums(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = min_n_nums(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def reverse_strings_list(string_list):    result = [x[::-1] for x in string_list]    return resultcolors_list = [""Red"", ""Green"", ""Blue"", ""White"", ""Black""]print(""\nOriginal lists:"")print(colors_list)print(""\nReverse strings of the said given list:"")print(reverse_strings_list(colors_list))","""""""
Brief Description:
------------------
reverse_strings_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse_strings_list`, takes 1 parameters: string_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
string_list : type
    Description of string_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse_strings_list(value)
Expected output
""""""","import unittest

class TestReverse_strings_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse_strings_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse_strings_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def nested_dictionary(l1, l2, l3):     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]     return resultstudent_id = [""S001"", ""S002"", ""S003"", ""S004""] student_name = [""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] student_grade = [85, 98, 89, 92]print(""Original strings:"")print(student_id)print(student_name)print(student_grade)print(""\nNested dictionary:"")ch='a'print(nested_dictionary(student_id, student_name, student_grade))","""""""
Brief Description:
------------------
nested_dictionary function performs a specific operation as described below.

Extended Description:
---------------------
This function, `nested_dictionary`, takes 3 parameters: l1,  l2,  l3. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.
l3 : type
    Description of l3.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> nested_dictionary(value, value, value)
Expected output
""""""","import unittest

class TestNested_dictionary(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = nested_dictionary(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = nested_dictionary(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def first_even_odd(nums):    first_even = next((el for el in nums if el%2==0),-1)    first_odd = next((el for el in nums if el%2!=0),-1)    return first_even,first_oddnums= [1,3,5,7,4,1,6,8]print(""Original list:"")print(nums)print(""\nFirst even and odd number of the said list of numbers:"")print(first_even_odd(nums))","""""""
Brief Description:
------------------
first_even_odd function performs a specific operation as described below.

Extended Description:
---------------------
This function, `first_even_odd`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> first_even_odd(value)
Expected output
""""""","import unittest

class TestFirst_even_odd(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = first_even_odd(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = first_even_odd(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def arithmetic_progression(n, x):  return list(range(n, x + 1, n))print(arithmetic_progression(1, 15))print(arithmetic_progression(3, 37))print(arithmetic_progression(5, 25))","""""""
Brief Description:
------------------
arithmetic_progression function performs a specific operation as described below.

Extended Description:
---------------------
This function, `arithmetic_progression`, takes 2 parameters: n,  x. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.
x : type
    Description of x.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> arithmetic_progression(value, value)
Expected output
""""""","import unittest

class TestArithmetic_progression(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = arithmetic_progression(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = arithmetic_progression(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def common_in_nested_lists(nested_list):    result = list(set.intersection(*map(set, nested_list)))    return resultnested_list = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]print(""\nOriginal lists:"")print(nested_list)print(""\nCommon element(s) in nested lists:"")print(common_in_nested_lists(nested_list))","""""""
Brief Description:
------------------
common_in_nested_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `common_in_nested_lists`, takes 1 parameters: nested_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nested_list : type
    Description of nested_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> common_in_nested_lists(value)
Expected output
""""""","import unittest

class TestCommon_in_nested_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = common_in_nested_lists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = common_in_nested_lists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def insertionSort(nlist):   for index in range(1,len(nlist)):     currentvalue = nlist[index]     position = index     while position>0 and nlist[position-1]>currentvalue:         nlist[position]=nlist[position-1]         position = position-1     nlist[position]=currentvaluenlist = [14,46,43,27,57,41,45,21,70]insertionSort(nlist)print(nlist)","""""""
Brief Description:
------------------
insertionSort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `insertionSort`, takes 1 parameters: nlist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nlist : type
    Description of nlist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> insertionSort(value)
Expected output
""""""","import unittest

class TestInsertionsort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = insertionSort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = insertionSort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def elements_difference(nums):    result = [j-i for i, j in zip(nums[:-1], nums[1:])]    return resultnums1 = [1,2,3,4,5,6,7,8,9,10]nums2 = [2,4,6,8]print(""Original list:"")print(nums1)print(""\nDfference between elements (n+1th ??nth) of the said list :"")print(elements_difference(nums1))print(""\nOriginal list:"")print(nums2)print(""\nDfference between elements (n+1th ??nth) of the said list :"")print(elements_difference(nums2))","""""""
Brief Description:
------------------
elements_difference function performs a specific operation as described below.

Extended Description:
---------------------
This function, `elements_difference`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> elements_difference(value)
Expected output
""""""","import unittest

class TestElements_difference(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = elements_difference(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = elements_difference(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def weighted_average(nums, weights):  return sum(x * y for x, y in zip(nums, weights)) / sum(weights)nums1 = [10, 50, 40]nums2 = [2, 5, 3]print(""Original list elements:"")print(nums1) print(nums2)print(""\nWeighted average of the said two list of numbers:"")print(weighted_average(nums1, nums2))nums1 = [82, 90, 76, 83]nums2 = [.2, .35, .45, 32]print(""\nOriginal list elements:"")print(nums1) print(nums2)print(""\nWeighted average of the said two list of numbers:"")print(weighted_average(nums1, nums2))","""""""
Brief Description:
------------------
weighted_average function performs a specific operation as described below.

Extended Description:
---------------------
This function, `weighted_average`, takes 2 parameters: nums,  weights. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
weights : type
    Description of weights.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> weighted_average(value, value)
Expected output
""""""","import unittest

class TestWeighted_average(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = weighted_average(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = weighted_average(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def bigram_sequence(text_lst):    result = [a for ls in text_lst for a in zip(ls.split("" "")[:-1], ls.split("" "")[1:])]    return resulttext = [""Sum all the items in a list"", ""Find the second smallest number in a list""]print(""Original list:"")print(text)print(""\nBigram sequence of the said list:"")print(bigram_sequence(text))","""""""
Brief Description:
------------------
bigram_sequence function performs a specific operation as described below.

Extended Description:
---------------------
This function, `bigram_sequence`, takes 1 parameters: text_lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
text_lst : type
    Description of text_lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> bigram_sequence(value)
Expected output
""""""","import unittest

class TestBigram_sequence(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = bigram_sequence(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = bigram_sequence(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def duplicate_letters(text):	word_list = text.split()	for word in word_list:		if len(word) > len(set(word)):			return False	return Truetext = ""Filter out the factorials of the said list.""print(""Original text:"")print(text)print(""Check whether any word in the said sting contains duplicate characrters or not!"")print(duplicate_letters(text))text = ""Python Exercise.""print(""\nOriginal text:"")print(text)print(""Check whether any word in the said sting contains duplicate characrters or not!"")print(duplicate_letters(text))text = ""The wait is over.""print(""\nOriginal text:"")print(text)print(""Check whether any word in the said sting contains duplicate characrters or not!"")print(duplicate_letters(text))","""""""
Brief Description:
------------------
duplicate_letters function performs a specific operation as described below.

Extended Description:
---------------------
This function, `duplicate_letters`, takes 1 parameters: text. It is designed to perform a certain task using these parameters.

Parameters:
-----------
text : type
    Description of text.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> duplicate_letters(value)
Expected output
""""""","import unittest

class TestDuplicate_letters(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = duplicate_letters(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = duplicate_letters(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_length_list(input_list):    max_length = max(len(x) for x in input_list )    max_list = max(input_list, key = len)    return(max_length, max_list)def min_length_list(input_list):    min_length = min(len(x) for x in input_list )    min_list = min(input_list, key = len)    return(min_length, min_list)list1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]print(""Original list:"")print(list1)print(""\nList with maximum length of lists:"")print(max_length_list(list1))print(""\nList with minimum length of lists:"")print(min_length_list(list1))list1 =  [[0], [1, 3], [5, 7], [9, 11], [3, 5, 7]]print(""Original list:"")print(list1)print(""\nList with maximum length of lists:"")print(max_length_list(list1))print(""\nList with minimum length of lists:"")print(min_length_list(list1))list1 =  [[12], [1, 3], [1, 34, 5, 7], [9, 11], [3, 5, 7]]print(""Original list:"")print(list1)print(""\nList with maximum length of lists:"")print(max_length_list(list1))print(""\nList with minimum length of lists:"")print(min_length_list(list1))","""""""
Brief Description:
------------------
max_length_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_length_list`, takes 1 parameters: input_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input_list : type
    Description of input_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_length_list(value)
Expected output
""""""","import unittest

class TestMax_length_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_length_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_length_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def file_copy(src, dest):    with open(src) as f, open(dest, 'w') as d:        d.write(f.read())        file_copy(""untitled0.py"", ""z.py"")        with open('z.py', 'r') as filehandle:            for line in filehandle:                print(line, end = '')","""""""
Brief Description:
------------------
file_copy function performs a specific operation as described below.

Extended Description:
---------------------
This function, `file_copy`, takes 2 parameters: src,  dest. It is designed to perform a certain task using these parameters.

Parameters:
-----------
src : type
    Description of src.
dest : type
    Description of dest.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> file_copy(value, value)
Expected output
""""""","import unittest

class TestFile_copy(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = file_copy(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = file_copy(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_index_of_all(lst, fn):  return [i for i, x in enumerate(lst) if fn(x)]print(find_index_of_all([1, 2, 3, 4], lambda n: n % 2 == 1))","""""""
Brief Description:
------------------
find_index_of_all function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_index_of_all`, takes 2 parameters: lst,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_index_of_all(value, value)
Expected output
""""""","import unittest

class TestFind_index_of_all(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_index_of_all(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_index_of_all(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def uncommon_chars_concat(s1, s2):             set1 = set(s1)      set2 = set(s2)        common_chars = list(set1 & set2)      result = [ch for ch in s1 if ch not in common_chars] + [ch for ch in s2 if ch not in common_chars]      return(''.join(result))s1 = 'abcdpqr's2 = 'xyzabcd'print(""Original Substrings:\n"",s1+""\n"",s2)print(""\nAfter concatenating uncommon characters:"")print(uncommon_chars_concat(s1, s2))","""""""
Brief Description:
------------------
uncommon_chars_concat function performs a specific operation as described below.

Extended Description:
---------------------
This function, `uncommon_chars_concat`, takes 2 parameters: s1,  s2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s1 : type
    Description of s1.
s2 : type
    Description of s2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> uncommon_chars_concat(value, value)
Expected output
""""""","import unittest

class TestUncommon_chars_concat(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = uncommon_chars_concat(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = uncommon_chars_concat(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def remove_zeros_from_ip(ip_add):  new_ip_add = ".".join([str(int(i)) for i in ip_add.split(".")])    return new_ip_add ;print(remove_zeros_from_ip("255.024.01.01"))print(remove_zeros_from_ip("127.0.0.01 ")),"""""""
Brief Description:
------------------
remove_zeros_from_ip function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_zeros_from_ip`, takes 1 parameters: ip_add. It is designed to perform a certain task using these parameters.

Parameters:
-----------
ip_add : type
    Description of ip_add.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_zeros_from_ip(value)
Expected output
""""""","import unittest

class TestRemove_zeros_from_ip(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_zeros_from_ip(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_zeros_from_ip(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def insert_end(str):	sub_str = str[-2:]	return sub_str * 4print(insert_end('Python'))print(insert_end('Exercises'))","""""""
Brief Description:
------------------
insert_end function performs a specific operation as described below.

Extended Description:
---------------------
This function, `insert_end`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> insert_end(value)
Expected output
""""""","import unittest

class TestInsert_end(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = insert_end(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = insert_end(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def all_unique(test_list):    if len(test_list) > len(set(test_list)):        return False    return Truenums1 = [1,2,4,6,8,2,1,4,10,12,14,12,16,17]print (""Original list:"")print(nums1)print(""\nIs the said list contains all unique elements!"")print(all_unique(nums1)) nums2 = [2,4,6,8,10,12,14]print (""\nOriginal list:"")print(nums2)print(""\nIs the said list contains all unique elements!"")print(all_unique(nums2))","""""""
Brief Description:
------------------
all_unique function performs a specific operation as described below.

Extended Description:
---------------------
This function, `all_unique`, takes 1 parameters: test_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
test_list : type
    Description of test_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> all_unique(value)
Expected output
""""""","import unittest

class TestAll_unique(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = all_unique(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = all_unique(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def checkSubset(input_list1, input_list2):     return all(map(input_list1.__contains__, input_list2))       list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] list2 = [[1, 3],[13,15,17]]   print(""Original list:"")print(list1)print(list2)print(""\nIf the one of the said list is a subset of another.:"")print(checkSubset(list1, list2)) list1 = [           [             [1,2],[2,3]           ],           [             [3,4],[5,6]           ]         ]list2 = [           [             [3,4], [5, 6]           ]         ]print(""Original list:"")print(list1)print(list2)print(""\nIf the one of the said list is a subset of another.:"")print(checkSubset(list1, list2)) list1 = [           [             [1,2],[2,3]           ],           [             [3,4],[5,7]           ]         ]list2 = [           [             [3,4], [5, 6]           ]         ]print(""Original list:"")print(list1)print(list2)print(""\nIf the one of the said list is a subset of another.:"")print(checkSubset(list1, list2))","""""""
Brief Description:
------------------
checkSubset function performs a specific operation as described below.

Extended Description:
---------------------
This function, `checkSubset`, takes 2 parameters: input_list1,  input_list2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input_list1 : type
    Description of input_list1.
input_list2 : type
    Description of input_list2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> checkSubset(value, value)
Expected output
""""""","import unittest

class TestChecksubset(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = checkSubset(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = checkSubset(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def min_by(lst, fn):  return min(map(fn, lst)) print(min_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n'])) ","""""""
Brief Description:
------------------
min_by function performs a specific operation as described below.

Extended Description:
---------------------
This function, `min_by`, takes 2 parameters: lst,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> min_by(value, value)
Expected output
""""""","import unittest

class TestMin_by(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = min_by(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = min_by(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def list_count_4(nums):  count = 0    for num in nums:    if num == 4:      count = count + 1  return countprint(list_count_4([1, 4, 6, 7, 4]))print(list_count_4([1, 4, 6, 4, 7, 4]))","""""""
Brief Description:
------------------
list_count_4 function performs a specific operation as described below.

Extended Description:
---------------------
This function, `list_count_4`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> list_count_4(value)
Expected output
""""""","import unittest

class TestList_count_4(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = list_count_4(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = list_count_4(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_matrix(M):    result = sorted(M, key=lambda matrix_row: sum(matrix_row))     return resultmatrix1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]matrix2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]print(""Original Matrix:"")print(matrix1)print(""\nSort the said matrix in ascending order according to the sum of its rows"") print(sort_matrix(matrix1))print(""\nOriginal Matrix:"")print(matrix2) print(""\nSort the said matrix in ascending order according to the sum of its rows"") print(sort_matrix(matrix2))","""""""
Brief Description:
------------------
sort_matrix function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_matrix`, takes 1 parameters: M. It is designed to perform a certain task using these parameters.

Parameters:
-----------
M : type
    Description of M.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_matrix(value)
Expected output
""""""","import unittest

class TestSort_matrix(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_matrix(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_matrix(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def change_char(str1):  char = str1[0]  str1 = str1.replace(char, '$')  str1 = char + str1[1:]  return str1print(change_char('restart'))","""""""
Brief Description:
------------------
change_char function performs a specific operation as described below.

Extended Description:
---------------------
This function, `change_char`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> change_char(value)
Expected output
""""""","import unittest

class TestChange_char(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = change_char(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = change_char(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_by(lst, fn):  return sum(map(fn, lst))print(sum_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n']))","""""""
Brief Description:
------------------
sum_by function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_by`, takes 2 parameters: lst,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_by(value, value)
Expected output
""""""","import unittest

class TestSum_by(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_by(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_by(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_column(nums, n):   for i in nums:     del i[n]    return numslist1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]n = 0print(""Original Nested list:"")print(list1)print(""After removing 1st column:"")print(remove_column(list1, n))list2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]n = 2print(""\nOriginal Nested list:"")print(list2)print(""After removing 3rd column:"")print(remove_column(list2, n))","""""""
Brief Description:
------------------
remove_column function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_column`, takes 2 parameters: nums,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_column(value, value)
Expected output
""""""","import unittest

class TestRemove_column(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_column(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_column(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def capitalize_first_last_letters(str1):     str1 = result = str1.title()     result =  ""     for word in str1.split():        result += word[:-1] + word[-1].upper() + " "     return result[:-1]       print(capitalize_first_last_letters("python exercises practice solution"))print(capitalize_first_last_letters("w3resource")),"""""""
Brief Description:
------------------
capitalize_first_last_letters function performs a specific operation as described below.

Extended Description:
---------------------
This function, `capitalize_first_last_letters`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> capitalize_first_last_letters(value)
Expected output
""""""","import unittest

class TestCapitalize_first_last_letters(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = capitalize_first_last_letters(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = capitalize_first_last_letters(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def reverse_string(str1):    if len(str1) % 4 == 0:       return ''.join(reversed(str1))    return str1print(reverse_string('abcd'))print(reverse_string('python')),"""""""
Brief Description:
------------------
reverse_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse_string`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse_string(value)
Expected output
""""""","import unittest

class TestReverse_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def gcd(x, y):   gcd = 1      if x % y == 0:       return y      for k in range(int(y / 2), 0, -1):       if x % k == 0 and y % k == 0:           gcd = k           break    return gcdprint(""GCD of 12 & 17 ="",gcd(12, 17))print(""GCD of 4 & 6 ="",gcd(4, 6))print(""GCD of 336 & 360 ="",gcd(336, 360))","""""""
Brief Description:
------------------
gcd function performs a specific operation as described below.

Extended Description:
---------------------
This function, `gcd`, takes 2 parameters: x,  y. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> gcd(value, value)
Expected output
""""""","import unittest

class TestGcd(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = gcd(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = gcd(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_sublists(input_list):    input_list.sort()  # sort by sublist contents    input_list.sort(key=len)    return input_listlist1 = [[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]print(""Original list:"")print(list1)print(""\nSort the list of lists by length and value:"")print(sort_sublists(list1))","""""""
Brief Description:
------------------
sort_sublists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_sublists`, takes 1 parameters: input_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input_list : type
    Description of input_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_sublists(value)
Expected output
""""""","import unittest

class TestSort_sublists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_sublists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_sublists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def average_tuple(nums):    result = tuple(map(lambda x: sum(x) / float(len(x)), zip(*nums)))    return resultnums = ((10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3))print (""Original Tuple: "")print(nums)print(""\nAverage value of the numbers of the said tuple of tuples:\n"",average_tuple(nums))nums = ((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))print (""\nOriginal Tuple: "")print(nums)print(""\nAverage value of the numbers of the said tuple of tuples:\n"",average_tuple(nums))","""""""
Brief Description:
------------------
average_tuple function performs a specific operation as described below.

Extended Description:
---------------------
This function, `average_tuple`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> average_tuple(value)
Expected output
""""""","import unittest

class TestAverage_tuple(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = average_tuple(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = average_tuple(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def file_lengthy(fname):        with open(fname) as f:                for i, l in enumerate(f):                        pass        return i + 1print(""Number of lines in the file: "",file_lengthy(""test.txt""))","""""""
Brief Description:
------------------
file_lengthy function performs a specific operation as described below.

Extended Description:
---------------------
This function, `file_lengthy`, takes 1 parameters: fname. It is designed to perform a certain task using these parameters.

Parameters:
-----------
fname : type
    Description of fname.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> file_lengthy(value)
Expected output
""""""","import unittest

class TestFile_lengthy(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = file_lengthy(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = file_lengthy(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_thrice(x, y, z):     sum = x + y + z       if x == y == z:      sum = sum * 3     return sumprint(sum_thrice(1, 2, 3))print(sum_thrice(3, 3, 3))","""""""
Brief Description:
------------------
sum_thrice function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_thrice`, takes 3 parameters: x,  y,  z. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.
z : type
    Description of z.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_thrice(value, value, value)
Expected output
""""""","import unittest

class TestSum_thrice(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_thrice(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_thrice(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def multiply(x, y):    if y < 0:        return -multiply(x, -y)    elif y == 0:        return 0    elif y == 1:        return x    else:        return x + multiply(x, y - 1)print(multiply(3, 5));","""""""
Brief Description:
------------------
multiply function performs a specific operation as described below.

Extended Description:
---------------------
This function, `multiply`, takes 2 parameters: x,  y. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> multiply(value, value)
Expected output
""""""","import unittest

class TestMultiply(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = multiply(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = multiply(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def check_element_in_list(lst, x, n):    t = 0    try:        for _ in range(n):            t = lst.index(x, t) + 1        return True    except ValueError:        return Falsenums = [0,1,3,5,0,3,4,5,0,8,0,3,6,0,3,1,1,0]print(""Original list:"")print(nums)x = 3n = 4print(""\nCheck if"",x,""occurs at least"",n,""times in a list:"")print(check_element_in_list(nums,x,n))x = 0n = 5print(""\nCheck if"",x,""occurs at least"",n,""times in a list:"")print(check_element_in_list(nums,x,n))x = 8n = 3print(""\nCheck if"",x,""occurs at least"",n,""times in a list:"")print(check_element_in_list(nums,x,n))","""""""
Brief Description:
------------------
check_element_in_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `check_element_in_list`, takes 3 parameters: lst,  x,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
x : type
    Description of x.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> check_element_in_list(value, value, value)
Expected output
""""""","import unittest

class TestCheck_element_in_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = check_element_in_list(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = check_element_in_list(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_consecutive_0(input_str):      return  max(map(len,input_str.split('1')))str1 = '111000010000110'print(""Original string:"" + str1)print(""Maximum length of consecutive 0??:"")print(max_consecutive_0(str1))str1 = '111000111'print(""Original string:"" + str1)print(""Maximum length of consecutive 0??:"")print(max_consecutive_0(str1))","""""""
Brief Description:
------------------
max_consecutive_0 function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_consecutive_0`, takes 1 parameters: input_str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input_str : type
    Description of input_str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_consecutive_0(value)
Expected output
""""""","import unittest

class TestMax_consecutive_0(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_consecutive_0(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_consecutive_0(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_element_in_list(input_list, x):     ctr = 0    for i in range(len(input_list)):         if x in input_list[i]:             ctr+= 1              return ctr      list1 = [[1, 3], [5, 7], [1, 11], [1, 15, 7]] print(""Original list:"")print(list1)print(""\nCount 1 in the said list:"")print(count_element_in_list(list1, 1)) print(""\nCount 7 in the said list:"")print(count_element_in_list(list1, 7)) list1 = [['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']] print(""\nOriginal list:"")print(list1)print(""\nCount 'A' in the said list:"")print(count_element_in_list(list1, 'A')) print(""\nCount 'E' in the said list:"")print(count_element_in_list(list1, 'E'))","""""""
Brief Description:
------------------
count_element_in_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_element_in_list`, takes 2 parameters: input_list,  x. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input_list : type
    Description of input_list.
x : type
    Description of x.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_element_in_list(value, value)
Expected output
""""""","import unittest

class TestCount_element_in_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_element_in_list(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_element_in_list(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def difference_by(a, b, fn):  _b = set(map(fn, b))  return [item for item in a if fn(item) not in _b]from math import floorprint(difference_by([2.1, 1.2], [2.3, 3.4], floor)) print(difference_by([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], lambda v : v['x']))","""""""
Brief Description:
------------------
difference_by function performs a specific operation as described below.

Extended Description:
---------------------
This function, `difference_by`, takes 3 parameters: a,  b,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> difference_by(value, value, value)
Expected output
""""""","import unittest

class TestDifference_by(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = difference_by(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = difference_by(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def new_string(str):  if len(str) >= 2 and str[:2] == "Is":    return str  return "Is" + strprint(new_string("Array"))print(new_string("IsEmpty")),"""""""
Brief Description:
------------------
new_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `new_string`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> new_string(value)
Expected output
""""""","import unittest

class TestNew_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = new_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = new_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def index_on_inner_list(list1, list2):    result = [x for x in list1 if x not in list2]    return resultlist1 = [1,2,3,4,5,6,7,8,9,10]list2 = [2,4,6,8]print(""Original lists:"")print(""list1:"", list1)print(""list2:"", list2)print(""\nRemove all elements from 'list1' present in 'list2:"")print(index_on_inner_list(list1, list2))","""""""
Brief Description:
------------------
index_on_inner_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `index_on_inner_list`, takes 2 parameters: list1,  list2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.
list2 : type
    Description of list2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> index_on_inner_list(value, value)
Expected output
""""""","import unittest

class TestIndex_on_inner_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = index_on_inner_list(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = index_on_inner_list(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def concatenate_list_data(list):    result= ''    for element in list:        result += str(element)    return resultprint(concatenate_list_data([1, 5, 12, 2]))","""""""
Brief Description:
------------------
concatenate_list_data function performs a specific operation as described below.

Extended Description:
---------------------
This function, `concatenate_list_data`, takes 1 parameters: list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list : type
    Description of list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> concatenate_list_data(value)
Expected output
""""""","import unittest

class TestConcatenate_list_data(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = concatenate_list_data(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = concatenate_list_data(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def group_similar_items(seq,el):    seq.append(seq.pop(seq.index(el)))    return seq colors = ['red','green','white','black','orange']print(""Original list:"")print(colors)el = ""white""print(""Move"",el,""at the end of the said list:"")print(group_similar_items(colors, el))colors = ['red','green','white','black','orange']print(""\nOriginal list:"")print(colors)el = ""red""print(""Move"",el,""at the end of the said list:"")print(group_similar_items(colors, el))colors = ['red','green','white','black','orange']print(""\nOriginal list:"")print(colors)el = ""black""print(""Move"",el,""at the end of the said list:"")print(group_similar_items(colors, el))","""""""
Brief Description:
------------------
group_similar_items function performs a specific operation as described below.

Extended Description:
---------------------
This function, `group_similar_items`, takes 2 parameters: seq, el. It is designed to perform a certain task using these parameters.

Parameters:
-----------
seq : type
    Description of seq.
el : type
    Description of el.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> group_similar_items(value, value)
Expected output
""""""","import unittest

class TestGroup_similar_items(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = group_similar_items(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = group_similar_items(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def BabylonianAlgorithm(number):    if(number == 0):        return 0;    g = number/2.0;    g2 = g + 1;    while(g != g2):        n = number/ g;        g2 = g;        g = (g + n)/2;    return g;print('The Square root of 0.3 =', BabylonianAlgorithm(0.3));","""""""
Brief Description:
------------------
BabylonianAlgorithm function performs a specific operation as described below.

Extended Description:
---------------------
This function, `BabylonianAlgorithm`, takes 1 parameters: number. It is designed to perform a certain task using these parameters.

Parameters:
-----------
number : type
    Description of number.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> BabylonianAlgorithm(value)
Expected output
""""""","import unittest

class TestBabylonianalgorithm(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = BabylonianAlgorithm(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = BabylonianAlgorithm(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Recurgcd(a, b):	low = min(a, b)	high = max(a, b)	if low == 0:		return high	elif low == 1:		return 1	else:		return Recurgcd(low, high%low)print(Recurgcd(12,14))","""""""
Brief Description:
------------------
Recurgcd function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Recurgcd`, takes 2 parameters: a,  b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Recurgcd(value, value)
Expected output
""""""","import unittest

class TestRecurgcd(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Recurgcd(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Recurgcd(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def larger_string(str, n):   result = """"   for i in range(n):      result = result + str   return resultprint(larger_string('abc', 2))print(larger_string('.py', 3))","""""""
Brief Description:
------------------
larger_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `larger_string`, takes 2 parameters: str,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> larger_string(value, value)
Expected output
""""""","import unittest

class TestLarger_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = larger_string(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = larger_string(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def shellSort(alist):    sublistcount = len(alist)//2    while sublistcount > 0:      for start_position in range(sublistcount):        gap_InsertionSort(alist, start_position, sublistcount)      print(""After increments of size"",sublistcount, ""The list is"",nlist)      sublistcount = sublistcount // 2def gap_InsertionSort(nlist,start,gap):    for i in range(start+gap,len(nlist),gap):        current_value = nlist[i]        position = i        while position>=gap and nlist[position-gap]>current_value:            nlist[position]=nlist[position-gap]            position = position-gap        nlist[position]=current_valuenlist = [14,46,43,27,57,41,45,21,70]shellSort(nlist)print(nlist)","""""""
Brief Description:
------------------
shellSort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `shellSort`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> shellSort(value)
Expected output
""""""","import unittest

class TestShellsort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = shellSort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = shellSort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def no_of_substring_with_equalEnds(str1): 	result = 0; 	n = len(str1); 	for i in range(n): 		for j in range(i, n): 			if (str1[i] == str1[j]): 				result = result + 1	return result str1 = input(""Input a string: "")print(no_of_substring_with_equalEnds(str1))","""""""
Brief Description:
------------------
no_of_substring_with_equalEnds function performs a specific operation as described below.

Extended Description:
---------------------
This function, `no_of_substring_with_equalEnds`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> no_of_substring_with_equalEnds(value)
Expected output
""""""","import unittest

class TestNo_of_substring_with_equalends(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = no_of_substring_with_equalEnds(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = no_of_substring_with_equalEnds(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def near_thousand(n):      return ((abs(1000 - n) <= 100) or (abs(2000 - n) <= 100))print(near_thousand(1000))print(near_thousand(900))print(near_thousand(800))   print(near_thousand(2200)),"""""""
Brief Description:
------------------
near_thousand function performs a specific operation as described below.

Extended Description:
---------------------
This function, `near_thousand`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> near_thousand(value)
Expected output
""""""","import unittest

class TestNear_thousand(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = near_thousand(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = near_thousand(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def split_list(lst, n):    result = list((lst[i:i+n] for i in range(0, len(lst), n)))    return resultnums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]print(""Original list:"")print(nums)n = 3print(""\nSplit the said list into equal size"",n)print(split_list(nums,n))n = 4print(""\nSplit the said list into equal size"",n)print(split_list(nums,n))n = 5print(""\nSplit the said list into equal size"",n)print(split_list(nums,n))","""""""
Brief Description:
------------------
split_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `split_list`, takes 2 parameters: lst,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> split_list(value, value)
Expected output
""""""","import unittest

class TestSplit_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = split_list(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = split_list(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def strip_chars(str, chars):    return """".join(c for c in str if c not in chars)print(""\nOriginal String: "")print(""The quick brown fox jumps over the lazy dog."")print(""After stripping a,e,i,o,u"")      print(strip_chars(""The quick brown fox jumps over the lazy dog."", ""aeiou""))print()","""""""
Brief Description:
------------------
strip_chars function performs a specific operation as described below.

Extended Description:
---------------------
This function, `strip_chars`, takes 2 parameters: str,  chars. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.
chars : type
    Description of chars.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> strip_chars(value, value)
Expected output
""""""","import unittest

class TestStrip_chars(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = strip_chars(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = strip_chars(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def intersection_nested_lists(l1, l2):    result = [[n for n in lst if n in l1] for lst in l2]    return resultnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]nums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]print(""\nOriginal lists:"")print(nums1)print(nums2)print(""\nIntersection of said nested lists:"")print(intersection_nested_lists(nums1, nums2))","""""""
Brief Description:
------------------
intersection_nested_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `intersection_nested_lists`, takes 2 parameters: l1,  l2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> intersection_nested_lists(value, value)
Expected output
""""""","import unittest

class TestIntersection_nested_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = intersection_nested_lists(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = intersection_nested_lists(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def grouping_dictionary(l):    result = {}    for k, v in l:         result.setdefault(k, []).append(v)    return resultcolors = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]print(""Original list:"")print(colors)print(""\nGrouping a sequence of key-value pairs into a dictionary of lists:"")print(grouping_dictionary(colors))","""""""
Brief Description:
------------------
grouping_dictionary function performs a specific operation as described below.

Extended Description:
---------------------
This function, `grouping_dictionary`, takes 1 parameters: l. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l : type
    Description of l.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> grouping_dictionary(value)
Expected output
""""""","import unittest

class TestGrouping_dictionary(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = grouping_dictionary(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = grouping_dictionary(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def unicode_to_str(lst):    result = [str(x) for x in lst]    return resultstudents =  [u'S001', u'S002', u'S003', u'S004']print(""Original lists:"")print(students)print("" Convert the said unicode list to a list contains strings:"")print(unicode_to_str(students))","""""""
Brief Description:
------------------
unicode_to_str function performs a specific operation as described below.

Extended Description:
---------------------
This function, `unicode_to_str`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> unicode_to_str(value)
Expected output
""""""","import unittest

class TestUnicode_to_str(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = unicode_to_str(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = unicode_to_str(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def power(a,b):	if b==0:		return 1	elif a==0:		return 0	elif b==1:		return a	else:		return a*power(a,b-1)print(power(3,4))","""""""
Brief Description:
------------------
power function performs a specific operation as described below.

Extended Description:
---------------------
This function, `power`, takes 2 parameters: a, b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> power(value, value)
Expected output
""""""","import unittest

class TestPower(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = power(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = power(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def add_string(str1):  length = len(str1)  if length > 2:    if str1[-3:] == 'ing':      str1 += 'ly'    else:      str1 += 'ing'  return str1print(add_string('ab'))print(add_string('abc'))print(add_string('string')),"""""""
Brief Description:
------------------
add_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `add_string`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> add_string(value)
Expected output
""""""","import unittest

class TestAdd_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = add_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = add_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def pascal_triangle(n):   trow = [1]   y = [0]   for x in range(max(n,0)):      print(trow)      trow=[l+r for l,r in zip(trow+y, y+trow)]   return n>=1pascal_triangle(6) ","""""""
Brief Description:
------------------
pascal_triangle function performs a specific operation as described below.

Extended Description:
---------------------
This function, `pascal_triangle`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> pascal_triangle(value)
Expected output
""""""","import unittest

class TestPascal_triangle(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = pascal_triangle(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = pascal_triangle(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def common_data(list1, list2):     result = False     for x in list1:         for y in list2:             if x == y:                 result = True                 return resultprint(common_data([1,2,3,4,5], [5,6,7,8,9]))print(common_data([1,2,3,4,5], [6,7,8,9]))","""""""
Brief Description:
------------------
common_data function performs a specific operation as described below.

Extended Description:
---------------------
This function, `common_data`, takes 2 parameters: list1,  list2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.
list2 : type
    Description of list2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> common_data(value, value)
Expected output
""""""","import unittest

class TestCommon_data(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = common_data(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = common_data(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_by(lst, fn):  return max(map(fn, lst))print(max_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n'])) ","""""""
Brief Description:
------------------
max_by function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_by`, takes 2 parameters: lst,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_by(value, value)
Expected output
""""""","import unittest

class TestMax_by(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_by(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_by(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def union_by_el(x, y, fn):  _x = set(map(fn, x))  return list(set(x + [item for item in y if fn(item) not in _x])) from math import floorprint(union_by_el([4.1], [2.2, 4.3], floor))","""""""
Brief Description:
------------------
union_by_el function performs a specific operation as described below.

Extended Description:
---------------------
This function, `union_by_el`, takes 3 parameters: x,  y,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> union_by_el(value, value, value)
Expected output
""""""","import unittest

class TestUnion_by_el(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = union_by_el(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = union_by_el(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_substring(str1, sub_str):   if any(sub_str in s for s in str1):       return True   return Falsecolors = [""red"", ""black"", ""white"", ""green"", ""orange""]print(""Original list:"")print(colors)sub_str = ""ack""print(""Substring to search:"")print(sub_str)print(""Check if a substring presents in the said list of string values:"")print(find_substring(colors, sub_str))sub_str = ""abc""print(""Substring to search:"")print(sub_str)print(""Check if a substring presents in the said list of string values:"")print(find_substring(colors, sub_str))","""""""
Brief Description:
------------------
find_substring function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_substring`, takes 2 parameters: str1,  sub_str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.
sub_str : type
    Description of sub_str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_substring(value, value)
Expected output
""""""","import unittest

class TestFind_substring(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_substring(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_substring(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def intersection_of_two_string(str1, str2):    result = """"    for ch in str1:        if ch in str2 and not ch in result:            result += ch    return resultstr1 = 'Python3'str2 = 'Python2.7'print(""Original strings:"")print(str1)print(str2)print(""\nIntersection of two said String:"") print(intersection_of_two_string(str1, str2))","""""""
Brief Description:
------------------
intersection_of_two_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `intersection_of_two_string`, takes 2 parameters: str1,  str2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.
str2 : type
    Description of str2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> intersection_of_two_string(value, value)
Expected output
""""""","import unittest

class TestIntersection_of_two_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = intersection_of_two_string(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = intersection_of_two_string(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def extract_nth_element(test_list, n):    result = [x[n] for x in test_list]    return resultstudents = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] print (""Original list:"")print(students)n = 0print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")print(extract_nth_element(students, n))n = 2print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")print(extract_nth_element(students, n))","""""""
Brief Description:
------------------
extract_nth_element function performs a specific operation as described below.

Extended Description:
---------------------
This function, `extract_nth_element`, takes 2 parameters: test_list,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
test_list : type
    Description of test_list.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> extract_nth_element(value, value)
Expected output
""""""","import unittest

class TestExtract_nth_element(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = extract_nth_element(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = extract_nth_element(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def factorial(n):    if n == 0:        return 1    else:        return n * factorial(n-1)n=int(input("Input a number to compute the factiorial : "))print(factorial(n)),"""""""
Brief Description:
------------------
factorial function performs a specific operation as described below.

Extended Description:
---------------------
This function, `factorial`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> factorial(value)
Expected output
""""""","import unittest

class TestFactorial(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = factorial(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = factorial(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def tuple_int_str(tuple_str):    result = tuple(map(lambda x: (int(x[0]), int(x[2])), tuple_str))    return result     tuple_str =  (('233', 'ABCD', '33'), ('1416', 'EFGH', '55'), ('2345', 'WERT', '34'))print(""Original tuple values:"")print(tuple_str)print(""\nNew tuple values:"")print(tuple_int_str(tuple_str))","""""""
Brief Description:
------------------
tuple_int_str function performs a specific operation as described below.

Extended Description:
---------------------
This function, `tuple_int_str`, takes 1 parameters: tuple_str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
tuple_str : type
    Description of tuple_str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> tuple_int_str(value)
Expected output
""""""","import unittest

class TestTuple_int_str(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = tuple_int_str(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = tuple_int_str(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def radix_sort(nums):    RADIX = 10    placement = 1    max_digit = max(nums)    while placement < max_digit:      buckets = [list() for _ in range( RADIX )]      for i in nums:        tmp = int((i / placement) % RADIX)        buckets[tmp].append(i)      a = 0      for b in range( RADIX ):        buck = buckets[b]        for i in buck:          nums[a] = i          a += 1      placement *= RADIX    return numsuser_input = input(""Input numbers separated by a comma:\n"").strip()nums = [int(item) for item in user_input.split(',')]print(radix_sort(nums))","""""""
Brief Description:
------------------
radix_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `radix_sort`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> radix_sort(value)
Expected output
""""""","import unittest

class TestRadix_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = radix_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = radix_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def filter_data(students):    result = dict(filter(lambda x: (x[1][0], x[1][1]) > (6.0, 70), students.items()))    return result  students = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}print(""Original Dictionary:"")print(students)print(""\nHeight> 6ft and Weight> 70kg:"")print(filter_data(students))","""""""
Brief Description:
------------------
filter_data function performs a specific operation as described below.

Extended Description:
---------------------
This function, `filter_data`, takes 1 parameters: students. It is designed to perform a certain task using these parameters.

Parameters:
-----------
students : type
    Description of students.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> filter_data(value)
Expected output
""""""","import unittest

class TestFilter_data(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = filter_data(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = filter_data(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def file_size(fname):        import os        statinfo = os.stat(fname)        return statinfo.st_sizeprint(""File size in bytes of a plain file: "",file_size(""test.txt""))","""""""
Brief Description:
------------------
file_size function performs a specific operation as described below.

Extended Description:
---------------------
This function, `file_size`, takes 1 parameters: fname. It is designed to perform a certain task using these parameters.

Parameters:
-----------
fname : type
    Description of fname.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> file_size(value)
Expected output
""""""","import unittest

class TestFile_size(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = file_size(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = file_size(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def reverse_list_of_lists(list1):    return list1[::-1]colors = [['orange', 'red'], ['green', 'blue'], ['white', 'black', 'pink']]print(""Original list:"")print(colors)print(""\nReverse said list of lists:"")print(reverse_list_of_lists(colors))nums = [[1,2,3,4], [0,2,4,5], [2,3,4,2,4]]print(""\nOriginal list:"")print(nums)print(""\nReverse said list of lists:"")print(reverse_list_of_lists(nums))","""""""
Brief Description:
------------------
reverse_list_of_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse_list_of_lists`, takes 1 parameters: list1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse_list_of_lists(value)
Expected output
""""""","import unittest

class TestReverse_list_of_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse_list_of_lists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse_list_of_lists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def list_of_dicts(marks):    result = map(dict, zip(*[[(key, val) for val in value] for key, value in marks.items()]))    return list(result)marks = {'Science': [88, 89, 62, 95], 'Language': [77, 78, 84, 80]}print(""Original dictionary of lists:"")print(marks)print(""\nSplit said dictionary of lists into list of dictionaries:"")print(list_of_dicts(marks))","""""""
Brief Description:
------------------
list_of_dicts function performs a specific operation as described below.

Extended Description:
---------------------
This function, `list_of_dicts`, takes 1 parameters: marks. It is designed to perform a certain task using these parameters.

Parameters:
-----------
marks : type
    Description of marks.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> list_of_dicts(value)
Expected output
""""""","import unittest

class TestList_of_dicts(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = list_of_dicts(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = list_of_dicts(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def second_largest(numbers):  if (len(numbers)<2):    return  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):    return  dup_items = set()  uniq_items = []  for x in numbers:    if x not in dup_items:      uniq_items.append(x)      dup_items.add(x)  uniq_items.sort()      return  uniq_items[-2]   print(second_largest([1,2,3,4,4]))print(second_largest([1, 1, 1, 0, 0, 0, 2, -2, -2]))print(second_largest([2,2]))print(second_largest([1]))","""""""
Brief Description:
------------------
second_largest function performs a specific operation as described below.

Extended Description:
---------------------
This function, `second_largest`, takes 1 parameters: numbers. It is designed to perform a certain task using these parameters.

Parameters:
-----------
numbers : type
    Description of numbers.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> second_largest(value)
Expected output
""""""","import unittest

class TestSecond_largest(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = second_largest(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = second_largest(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def index_on_inner_list(list_data, index_no):    result = sorted(list_data, key=lambda x: x[index_no])    return resultstudents = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] print (""Original list:"")print(students)index_no = 0print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")print(index_on_inner_list(students, index_no))index_no = 2print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")print(index_on_inner_list(students, index_no))","""""""
Brief Description:
------------------
index_on_inner_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `index_on_inner_list`, takes 2 parameters: list_data,  index_no. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list_data : type
    Description of list_data.
index_no : type
    Description of index_no.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> index_on_inner_list(value, value)
Expected output
""""""","import unittest

class TestIndex_on_inner_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = index_on_inner_list(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = index_on_inner_list(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_lists_diff_length(test_list):    result =  [sum(x) for x in zip(*map(lambda x:x+[0]*max(map(len, test_list)) if len(x)<max(map(len, test_list)) else x, test_list))]    return resultnums = [[1,2,4],[2,4,4],[1,2]]print(""\nOriginal list:"")print(nums)print(""Sum said lists with different lengths:"")print(sum_lists_diff_length(nums))nums = [[1],[2,4,4],[1,2],[4]]print(""\nOriginal list:"")print(nums)print(""Sum said lists with different lengths:"")print(sum_lists_diff_length(nums))","""""""
Brief Description:
------------------
sum_lists_diff_length function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_lists_diff_length`, takes 1 parameters: test_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
test_list : type
    Description of test_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_lists_diff_length(value)
Expected output
""""""","import unittest

class TestSum_lists_diff_length(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_lists_diff_length(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_lists_diff_length(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def pythagoras(opposite_side,adjacent_side,hypotenuse):        if opposite_side == str(""x""):            return (""Opposite = "" + str(((hypotenuse**2) - (adjacent_side**2))**0.5))        elif adjacent_side == str(""x""):            return (""Adjacent = "" + str(((hypotenuse**2) - (opposite_side**2))**0.5))        elif hypotenuse == str(""x""):            return (""Hypotenuse = "" + str(((opposite_side**2) + (adjacent_side**2))**0.5))        else:            return ""You know the answer!""    print(pythagoras(3,4,'x'))print(pythagoras(3,'x',5))print(pythagoras('x',4,5))print(pythagoras(3,4,5))","""""""
Brief Description:
------------------
pythagoras function performs a specific operation as described below.

Extended Description:
---------------------
This function, `pythagoras`, takes 3 parameters: opposite_side, adjacent_side, hypotenuse. It is designed to perform a certain task using these parameters.

Parameters:
-----------
opposite_side : type
    Description of opposite_side.
adjacent_side : type
    Description of adjacent_side.
hypotenuse : type
    Description of hypotenuse.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> pythagoras(value, value, value)
Expected output
""""""","import unittest

class TestPythagoras(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = pythagoras(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = pythagoras(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def add_tags(tag, word):	return ""<%s>%s</%s>"" % (tag, word, tag)print(add_tags('i', 'Python'))print(add_tags('b', 'Python Tutorial'))","""""""
Brief Description:
------------------
add_tags function performs a specific operation as described below.

Extended Description:
---------------------
This function, `add_tags`, takes 2 parameters: tag,  word. It is designed to perform a certain task using these parameters.

Parameters:
-----------
tag : type
    Description of tag.
word : type
    Description of word.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> add_tags(value, value)
Expected output
""""""","import unittest

class TestAdd_tags(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = add_tags(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = add_tags(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def lcm(x, y):  if x > y:      z = x  else:      z = y  while(True):      if((z % x == 0) and (z % y == 0)):          lcm = z          break      z += 1  return lcmprint(lcm(4, 6))print(lcm(15, 17))","""""""
Brief Description:
------------------
lcm function performs a specific operation as described below.

Extended Description:
---------------------
This function, `lcm`, takes 2 parameters: x,  y. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> lcm(value, value)
Expected output
""""""","import unittest

class TestLcm(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = lcm(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = lcm(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_chars(str):     upper_ctr, lower_ctr, number_ctr, special_ctr = 0, 0, 0, 0     for i in range(len(str)):          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1          elif str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1          elif str[i] >= '0' and str[i] <= '9': number_ctr += 1          else: special_ctr += 1     return upper_ctr, lower_ctr, number_ctr, special_ctr           str = ""@W3Resource.Com""print(""Original Substrings:"",str)u, l, n, s = count_chars(str)print('\nUpper case characters: ',u)print('Lower case characters: ',l)print('Number case: ',n)print('Special case characters: ',s)","""""""
Brief Description:
------------------
count_chars function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_chars`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_chars(value)
Expected output
""""""","import unittest

class TestCount_chars(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_chars(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_chars(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def elementswise_join(l1, l2):    result = [x + y for x, y in zip(l1, l2)]    return resultnums1 = [[10,20], [30,40], [50,60], [30,20,80]]nums2 = [[61], [12,14,15], [12,13,19,20], [12]]print(""Original lists:"")print(nums1)print(nums2)print(""\nJoin the said two lists element wise:"")print(elementswise_join(nums1, nums2))list1 = [['a','b'], ['b','c','d'], ['e', 'f']]list2 = [['p','q'], ['p','s','t'], ['u','v','w']]print(""\nOriginal lists:"")print(list1)print(list2)print(""\nJoin the said two lists element wise:"")print(elementswise_join(list1, list2))","""""""
Brief Description:
------------------
elementswise_join function performs a specific operation as described below.

Extended Description:
---------------------
This function, `elementswise_join`, takes 2 parameters: l1,  l2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> elementswise_join(value, value)
Expected output
""""""","import unittest

class TestElementswise_join(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = elementswise_join(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = elementswise_join(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def heap_data(nums, index, heap_size):    largest_num = index    left_index = 2 * index + 1    right_index = 2 * index + 2    if left_index < heap_size and nums[left_index] > nums[largest_num]:        largest_num = left_index    if right_index < heap_size and nums[right_index] > nums[largest_num]:        largest_num = right_index    if largest_num != index:        nums[largest_num], nums[index] = nums[index], nums[largest_num]        heap_data(nums, largest_num, heap_size)def heap_sort(nums):    n = len(nums)    for i in range(n // 2 - 1, -1, -1):        heap_data(nums, i, n)    for i in range(n - 1, 0, -1):        nums[0], nums[i] = nums[i], nums[0]        heap_data(nums, 0, i)    return numsuser_input = input(""Input numbers separated by a comma:\n"").strip()nums = [int(item) for item in user_input.split(',')]heap_sort(nums)print(nums)","""""""
Brief Description:
------------------
heap_data function performs a specific operation as described below.

Extended Description:
---------------------
This function, `heap_data`, takes 3 parameters: nums,  index,  heap_size. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
index : type
    Description of index.
heap_size : type
    Description of heap_size.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> heap_data(value, value, value)
Expected output
""""""","import unittest

class TestHeap_data(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = heap_data(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = heap_data(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def create_largest_number(lst):    if all(val == 0 for val in lst):        return '0'    result = ''.join(sorted((str(val) for val in lst), reverse=True,                      key=lambda i: i*( len(str(max(lst))) * 2 // len(i))))    return resultnums = [3, 40, 41, 43, 74, 9]print(""Original list:"")print(nums)print(""Largest possible number using the elements of the said list of positive integers:"")print(create_largest_number(nums))nums = [10, 40, 20, 30, 50, 60]print(""\nOriginal list:"")print(nums)print(""Largest possible number using the elements of the said list of positive integers:"")print(create_largest_number(nums))nums = [8, 4, 2, 9, 5, 6, 1, 0]print(""\nOriginal list:"")print(nums)print(""Largest possible number using the elements of the said list of positive integers:"")print(create_largest_number(nums))","""""""
Brief Description:
------------------
create_largest_number function performs a specific operation as described below.

Extended Description:
---------------------
This function, `create_largest_number`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> create_largest_number(value)
Expected output
""""""","import unittest

class TestCreate_largest_number(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = create_largest_number(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = create_largest_number(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_difference(n=2):    sum_of_squares = 0    square_of_sum = 0    for num in range(1, n+1):        sum_of_squares += num * num        square_of_sum += num    square_of_sum = square_of_sum ** 2    return square_of_sum - sum_of_squaresprint(sum_difference(12))","""""""
Brief Description:
------------------
sum_difference function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_difference`, takes 1 parameters: n=2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n=2 : type
    Description of n=2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_difference(value)
Expected output
""""""","import unittest

class TestSum_difference(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_difference(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_difference(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def bubbleSort(nlist):    for passnum in range(len(nlist)-1,0,-1):        for i in range(passnum):            if nlist[i]>nlist[i+1]:                temp = nlist[i]                nlist[i] = nlist[i+1]                nlist[i+1] = tempnlist = [14,46,43,27,57,41,45,21,70]bubbleSort(nlist)print(nlist)","""""""
Brief Description:
------------------
bubbleSort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `bubbleSort`, takes 1 parameters: nlist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nlist : type
    Description of nlist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> bubbleSort(value)
Expected output
""""""","import unittest

class TestBubblesort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = bubbleSort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = bubbleSort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def odd_values_string(str):  result = ""   for i in range(len(str)):    if i % 2 == 0:      result = result + str[i]  return resultprint(odd_values_string('abcdef'))print(odd_values_string('python')),"""""""
Brief Description:
------------------
odd_values_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `odd_values_string`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> odd_values_string(value)
Expected output
""""""","import unittest

class TestOdd_values_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = odd_values_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = odd_values_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def reverse_string_words(text):    for line in text.split('\n'):        return(' '.join(line.split()[::-1]))print(reverse_string_words("The quick brown fox jumps over the lazy dog."))print(reverse_string_words("Python Exercises.")),"""""""
Brief Description:
------------------
reverse_string_words function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse_string_words`, takes 1 parameters: text. It is designed to perform a certain task using these parameters.

Parameters:
-----------
text : type
    Description of text.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse_string_words(value)
Expected output
""""""","import unittest

class TestReverse_string_words(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse_string_words(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse_string_words(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_characters(str1,c):    return ''.join([el for el in str1 if el == c])text = ""Python Exercises""print(""Original string"")print(text)except_char = ""P""print(""Remove all characters except"",except_char,""in the said string:"")print(remove_characters(text,except_char))text = ""google""print(""\nOriginal string"")print(text)except_char = ""g""print(""Remove all characters except"",except_char,""in the said string:"")print(remove_characters(text,except_char))text = ""exercises""print(""\nOriginal string"")print(text)except_char = ""e""print(""Remove all characters except"",except_char,""in the said string:"")print(remove_characters(text,except_char))","""""""
Brief Description:
------------------
remove_characters function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_characters`, takes 2 parameters: str1, c. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.
c : type
    Description of c.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_characters(value, value)
Expected output
""""""","import unittest

class TestRemove_characters(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_characters(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_characters(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def change_cases(s):  return str(s).upper(), str(s).lower() chrars = {'a', 'b', 'E', 'f', 'a', 'i', 'o', 'U', 'a'}print(""Original Characters:\n"",chrars) result = map(change_cases, chrars)print(""\nAfter converting above characters in upper and lower cases\nand eliminating duplicate letters:"")print(set(result))","""""""
Brief Description:
------------------
change_cases function performs a specific operation as described below.

Extended Description:
---------------------
This function, `change_cases`, takes 1 parameters: s. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s : type
    Description of s.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> change_cases(value)
Expected output
""""""","import unittest

class TestChange_cases(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = change_cases(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = change_cases(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def count_char_position(str1):     count_chars = 0    for i in range(len(str1)):        if ((i == ord(str1[i]) - ord('A')) or             (i == ord(str1[i]) - ord('a'))):             count_chars += 1    return count_chars   str1 = input("Input a string: ")print("Number of characters of the said string at same position as in English alphabet:")print(count_char_position(str1)),"""""""
Brief Description:
------------------
count_char_position function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_char_position`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_char_position(value)
Expected output
""""""","import unittest

class TestCount_char_position(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_char_position(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_char_position(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def word_count(str):    counts = dict()    words = str.split()    for word in words:        if word in counts:            counts[word] += 1        else:            counts[word] = 1    counts_x = sorted(counts.items(), key=lambda kv: kv[1])    #print(counts_x)    return counts_x[-2] print(word_count(""Both of these issues are fixed by postponing the evaluation of annotations. Instead of compiling code which executes expressions in annotations at their definition time, the compiler stores the annotation in a string form equivalent to the AST of the expression in question. If needed, annotations can be resolved at runtime using typing.get_type_hints(). In the common case where this is not required, the annotations are cheaper to store (since short strings are interned by the interpreter) and make startup time faster.""))","""""""
Brief Description:
------------------
word_count function performs a specific operation as described below.

Extended Description:
---------------------
This function, `word_count`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> word_count(value)
Expected output
""""""","import unittest

class TestWord_count(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = word_count(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = word_count(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def top_product(nums1, nums2, N):    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]    return resultnums1 = [1, 2, 3, 4, 5, 6]nums2 = [3, 6, 8, 9, 10, 6]print(""Original lists:"")print(nums1)print(nums2,""\n"")N = 3print(N,""Number of largest products from the said two lists:"")print(top_product(nums1, nums2, N))N = 4print(N,""Number of largest products from the said two lists:"")print(top_product(nums1, nums2, N))","""""""
Brief Description:
------------------
top_product function performs a specific operation as described below.

Extended Description:
---------------------
This function, `top_product`, takes 3 parameters: nums1,  nums2,  N. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums1 : type
    Description of nums1.
nums2 : type
    Description of nums2.
N : type
    Description of N.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> top_product(value, value, value)
Expected output
""""""","import unittest

class TestTop_product(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = top_product(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = top_product(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def elementswise_left_join(l1, l2):    f_len = len(l1)-(len(l2) - 1)    for i in range(0, len(l2), 1):        if f_len - i >= len(l1):            break        else:            l1[i] = l1[i] + l2[i]    return l1nums1 = [2, 4, 7, 0, 5, 8]nums2 = [3, 3, -1, 7]print(""\nOriginal lists:"")print(nums1)print(nums2)print(""\nAdd said two lists from left:"")print(elementswise_left_join(nums1,nums2))nums3 = [1, 2, 3, 4, 5, 6]nums4 = [2, 4, -3]print(""\nOriginal lists:"")print(nums3)print(nums4)print(""\nAdd said two lists from left:"")print(elementswise_left_join(nums3,nums4))","""""""
Brief Description:
------------------
elementswise_left_join function performs a specific operation as described below.

Extended Description:
---------------------
This function, `elementswise_left_join`, takes 2 parameters: l1,  l2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> elementswise_left_join(value, value)
Expected output
""""""","import unittest

class TestElementswise_left_join(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = elementswise_left_join(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = elementswise_left_join(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def matrix_dimensions(test_list):    row = len(test_list)    column = len(test_list[0])    return row,columnlst = [[1,2],[2,4]]print(""\nOriginal list:"")print(lst)print(""Dimension of the said matrix:"")print(matrix_dimensions(lst))lst = [[0,1,2],[2,4,5]]print(""\nOriginal list:"")print(lst)print(""Dimension of the said matrix:"")print(matrix_dimensions(lst))lst = [[0,1,2],[2,4,5],[2,3,4]]print(""\nOriginal list:"")print(lst)print(""Dimension of the said matrix:"")print(matrix_dimensions(lst)) ","""""""
Brief Description:
------------------
matrix_dimensions function performs a specific operation as described below.

Extended Description:
---------------------
This function, `matrix_dimensions`, takes 1 parameters: test_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
test_list : type
    Description of test_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> matrix_dimensions(value)
Expected output
""""""","import unittest

class TestMatrix_dimensions(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = matrix_dimensions(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = matrix_dimensions(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def check_same_contents(nums1, nums2):  for x in set(nums1 + nums2):    if nums1.count(x) != nums2.count(x):      return False  return Truenums1 = [1, 2, 4]nums2 = [2, 4, 1]print(""Original list elements:"")print(nums1)print(nums2)print(""\nCheck two said lists contain the same elements regardless of order!"")print(check_same_contents(nums1, nums2))nums1 = [1, 2, 3]nums2 = [1, 2, 3]print(""\nOriginal list elements:"")print(nums1)print(nums2)print(""\nCheck two said lists contain the same elements regardless of order!"")print(check_same_contents(nums1, nums2))nums1 = [1, 2, 3]nums2 = [1, 2, 4]print(""\nOriginal list elements:"")print(nums1)print(nums2)print(""\nCheck two said lists contain the same elements regardless of order!"")print(check_same_contents(nums1, nums2))","""""""
Brief Description:
------------------
check_same_contents function performs a specific operation as described below.

Extended Description:
---------------------
This function, `check_same_contents`, takes 2 parameters: nums1,  nums2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums1 : type
    Description of nums1.
nums2 : type
    Description of nums2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> check_same_contents(value, value)
Expected output
""""""","import unittest

class TestCheck_same_contents(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = check_same_contents(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = check_same_contents(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def heterogeneous_list_to_str(lst):    result = ','.join(str(x) for x in lst)    return resulth_data = [""Red"", 100, -50, ""green"", ""w,3,r"", 12.12, False]print(""Original list:"")print(h_data)print(""\nConvert the heterogeneous list of scalars into a string:"")print(heterogeneous_list_to_str(h_data))","""""""
Brief Description:
------------------
heterogeneous_list_to_str function performs a specific operation as described below.

Extended Description:
---------------------
This function, `heterogeneous_list_to_str`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> heterogeneous_list_to_str(value)
Expected output
""""""","import unittest

class TestHeterogeneous_list_to_str(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = heterogeneous_list_to_str(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = heterogeneous_list_to_str(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def combinations_list(colors):    if len(colors) == 0:        return [[]]    result = []    for el in combinations_list(colors[1:]):        result += [el, el+[colors[0]]]    return resultcolors = ['orange', 'red', 'green', 'blue']print(""Original list:"")print(colors)print(""\nAll possible combinations of the said list?? elements:"")print(combinations_list(colors))","""""""
Brief Description:
------------------
combinations_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `combinations_list`, takes 1 parameters: colors. It is designed to perform a certain task using these parameters.

Parameters:
-----------
colors : type
    Description of colors.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> combinations_list(value)
Expected output
""""""","import unittest

class TestCombinations_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = combinations_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = combinations_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def prime_eratosthenes(n):    prime_list = []    for i in range(2, n+1):        if i not in prime_list:            print (i)            for j in range(i*i, n+1, i):                prime_list.append(j)print(prime_eratosthenes(100));","""""""
Brief Description:
------------------
prime_eratosthenes function performs a specific operation as described below.

Extended Description:
---------------------
This function, `prime_eratosthenes`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> prime_eratosthenes(value)
Expected output
""""""","import unittest

class TestPrime_eratosthenes(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = prime_eratosthenes(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = prime_eratosthenes(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_div(number):    divisors = [1]    for i in range(2, number):        if (number % i)==0:            divisors.append(i)    return sum(divisors)print(sum_div(8))print(sum_div(12))","""""""
Brief Description:
------------------
sum_div function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_div`, takes 1 parameters: number. It is designed to perform a certain task using these parameters.

Parameters:
-----------
number : type
    Description of number.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_div(value)
Expected output
""""""","import unittest

class TestSum_div(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_div(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_div(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def test_number5(x, y):   if x == y or abs(x-y) == 5 or (x+y) == 5:       return True   else:       return Falseprint(test_number5(7, 2))print(test_number5(3, 2))print(test_number5(2, 2))print(test_number5(7, 3))print(test_number5(27, 53))","""""""
Brief Description:
------------------
test_number5 function performs a specific operation as described below.

Extended Description:
---------------------
This function, `test_number5`, takes 2 parameters: x,  y. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> test_number5(value, value)
Expected output
""""""","import unittest

class TestTest_number5(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = test_number5(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = test_number5(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def change_sring(str1):      return str1[-1:] + str1[1:-1] + str1[:1]	  print(change_sring('abcd'))print(change_sring('12345'))","""""""
Brief Description:
------------------
change_sring function performs a specific operation as described below.

Extended Description:
---------------------
This function, `change_sring`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> change_sring(value)
Expected output
""""""","import unittest

class TestChange_sring(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = change_sring(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = change_sring(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def pluck(lst, key):  return [x.get(key) for x in lst] simpsons = [  { 'name': 'Areeba', 'age': 8 },  { 'name': 'Zachariah', 'age': 36 },  { 'name': 'Caspar', 'age': 34 },  { 'name': 'Presley', 'age': 10 }]print(pluck(simpsons, 'age'))","""""""
Brief Description:
------------------
pluck function performs a specific operation as described below.

Extended Description:
---------------------
This function, `pluck`, takes 2 parameters: lst,  key. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
key : type
    Description of key.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> pluck(value, value)
Expected output
""""""","import unittest

class TestPluck(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = pluck(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = pluck(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_words(in_list, char_list):    new_list = []    for line in in_list:        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in char_list])])        new_list.append(new_words)    return new_list     str_list = ['Red color', 'Orange#', 'Green', 'Orange @', ""White""]print(""Original list:"")print(""list1:"",str_list)char_list = ['#', 'color', '@']print(""\nCharacter list:"")print(char_list)print(""\nNew list:"")print(remove_words(str_list, char_list))","""""""
Brief Description:
------------------
remove_words function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_words`, takes 2 parameters: in_list,  char_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
in_list : type
    Description of in_list.
char_list : type
    Description of char_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_words(value, value)
Expected output
""""""","import unittest

class TestRemove_words(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_words(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_words(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def magic_square_test(my_matrix):    iSize = len(my_matrix[0])    sum_list = []        #Horizontal Part:    sum_list.extend([sum (lines) for lines in my_matrix])       #Vertical Part:    for col in range(iSize):        sum_list.append(sum(row[col] for row in my_matrix))        #Diagonals Part    result1 = 0    for i in range(0,iSize):        result1 +=my_matrix[i][i]    sum_list.append(result1)          result2 = 0    for i in range(iSize-1,-1,-1):        result2 +=my_matrix[i][i]    sum_list.append(result2)    if len(set(sum_list))>1:        return False    return Truem=[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]] print(magic_square_test(m));m=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]print(magic_square_test(m));m=[[2, 7, 6], [9, 5, 1], [4, 3, 7]]print(magic_square_test(m));","""""""
Brief Description:
------------------
magic_square_test function performs a specific operation as described below.

Extended Description:
---------------------
This function, `magic_square_test`, takes 1 parameters: my_matrix. It is designed to perform a certain task using these parameters.

Parameters:
-----------
my_matrix : type
    Description of my_matrix.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> magic_square_test(value)
Expected output
""""""","import unittest

class TestMagic_square_test(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = magic_square_test(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = magic_square_test(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def flatten_list(n_list):    result_list = []    if not n_list: return result_list    stack = [list(n_list)]    while stack:        c_num = stack.pop()        next = c_num.pop()        if c_num: stack.append(c_num)        if isinstance(next, list):            if next: stack.append(list(next))        else: result_list.append(next)    result_list.reverse()    return result_list n_list = [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]print(""Original list:"") print(n_list)print(""\nFlatten list:"")print(flatten_list(n_list))","""""""
Brief Description:
------------------
flatten_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `flatten_list`, takes 1 parameters: n_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n_list : type
    Description of n_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> flatten_list(value)
Expected output
""""""","import unittest

class TestFlatten_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = flatten_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = flatten_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def first_index(l1, n):    return next(a[0] for a in enumerate(l1) if a[1] > n) nums = [12,45,23,67,78,90,100,76,38,62,73,29,83]print(""Original list:"")print(nums)n = 73print(""\nIndex of the first element which is greater than"",n,""in the said list:"")print(first_index(nums,n))n = 21print(""\nIndex of the first element which is greater than"",n,""in the said list:"")print(first_index(nums,n))n = 80print(""\nIndex of the first element which is greater than"",n,""in the said list:"")print(first_index(nums,n))n = 55print(""\nIndex of the first element which is greater than"",n,""in the said list:"")print(first_index(nums,n))","""""""
Brief Description:
------------------
first_index function performs a specific operation as described below.

Extended Description:
---------------------
This function, `first_index`, takes 2 parameters: l1,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> first_index(value, value)
Expected output
""""""","import unittest

class TestFirst_index(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = first_index(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = first_index(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_numeric_strings(nums_str):    result = [int(x) for x in nums_str]    result.sort()    return resultnums_str = ['4','12','45','7','0','100','200','-12','-500']print(""Original list:"")print(nums_str)print(""\nSort the said list of strings(numbers) numerically:"")print(sort_numeric_strings(nums_str))","""""""
Brief Description:
------------------
sort_numeric_strings function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_numeric_strings`, takes 1 parameters: nums_str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums_str : type
    Description of nums_str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_numeric_strings(value)
Expected output
""""""","import unittest

class TestSort_numeric_strings(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_numeric_strings(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_numeric_strings(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def bifurcate_by(lst, fn):  return [    [x for x in lst if fn(x)],    [x for x in lst if not fn(x)]  ]print(bifurcate_by(['red', 'green', 'black', 'white'], lambda x: x[0] == 'w'))","""""""
Brief Description:
------------------
bifurcate_by function performs a specific operation as described below.

Extended Description:
---------------------
This function, `bifurcate_by`, takes 2 parameters: lst,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> bifurcate_by(value, value)
Expected output
""""""","import unittest

class TestBifurcate_by(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = bifurcate_by(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = bifurcate_by(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_column(nums, n):   result = [i.pop(n) for i in nums]   return result list1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]n = 0print(""Original Nested list:"")print(list1)print(""Extract 1st column:"")print(remove_column(list1, n))list2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]n = 2print(""\nOriginal Nested list:"")print(list2)print(""Extract 3rd column:"")print(remove_column(list2, n))","""""""
Brief Description:
------------------
remove_column function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_column`, takes 2 parameters: nums,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_column(value, value)
Expected output
""""""","import unittest

class TestRemove_column(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_column(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_column(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def strings_to_listOflists(str):    result = map(list, str)    return list(result)colors = [""Red"", ""Green"", ""Black"", ""Orange""]print('Original list of strings:')print(colors)print(""\nConvert the said list of strings into list of lists:"")print(strings_to_listOflists(colors))","""""""
Brief Description:
------------------
strings_to_listOflists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `strings_to_listOflists`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> strings_to_listOflists(value)
Expected output
""""""","import unittest

class TestStrings_to_listoflists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = strings_to_listOflists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = strings_to_listOflists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def chars_mix_up(a, b):  new_a = b[:2] + a[2:]  new_b = a[:2] + b[2:]  return new_a + ' ' + new_bprint(chars_mix_up('abc', 'xyz'))","""""""
Brief Description:
------------------
chars_mix_up function performs a specific operation as described below.

Extended Description:
---------------------
This function, `chars_mix_up`, takes 2 parameters: a,  b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> chars_mix_up(value, value)
Expected output
""""""","import unittest

class TestChars_mix_up(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = chars_mix_up(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = chars_mix_up(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_Index(str1, pos):    if len(pos) > len(str1):        return 'Not found'    for i in range(len(str1)):        for j in range(len(pos)):            if str1[i + j] == pos[j] and j == len(pos) - 1:                return i                            elif str1[i + j] != pos[j]:                break    return 'Not found'print(find_Index(""Python Exercises"", ""Ex""))print(find_Index(""Python Exercises"", ""yt""))print(find_Index(""Python Exercises"", ""PY""))","""""""
Brief Description:
------------------
find_Index function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_Index`, takes 2 parameters: str1,  pos. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.
pos : type
    Description of pos.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_Index(value, value)
Expected output
""""""","import unittest

class TestFind_index(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_Index(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_Index(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def match_words(words):  ctr = 0  for word in words:    if len(word) > 1 and word[0] == word[-1]:      ctr += 1  return ctrprint(match_words(['abc', 'xyz', 'aba', '1221']))","""""""
Brief Description:
------------------
match_words function performs a specific operation as described below.

Extended Description:
---------------------
This function, `match_words`, takes 1 parameters: words. It is designed to perform a certain task using these parameters.

Parameters:
-----------
words : type
    Description of words.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> match_words(value)
Expected output
""""""","import unittest

class TestMatch_words(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = match_words(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = match_words(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def three_sum(nums):  result = []  nums.sort()  for i in range(len(nums)-2):    if i> 0 and nums[i] == nums[i-1]:      continue    l, r = i+1, len(nums)-1    while l < r:      s = nums[i] + nums[l] + nums[r]      if s > 0:        r -= 1      elif s < 0:          l += 1      else:        # found three sum        result.append((nums[i], nums[l], nums[r]))        # remove duplicates        while l < r and nums[l] == nums[l+1]:          l+=1          while l < r and nums[r] == nums[r-1]:            r -= 1            l += 1            r -= 1          return resultx = [1, -6, 4, 2, -1, 2, 0, -2, 0 ]print(three_sum(x))","""""""
Brief Description:
------------------
three_sum function performs a specific operation as described below.

Extended Description:
---------------------
This function, `three_sum`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> three_sum(value)
Expected output
""""""","import unittest

class TestThree_sum(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = three_sum(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = three_sum(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def moveSpaces(str1):     no_spaces = [char for char in str1 if char!=' ']       space= len(str1) - len(no_spaces)    # Create string with spaces    result = ' '*space        return result + ''.join(no_spaces)  s1 = ""Python Exercises""print(""Original String:\n"",s1)print(""\nAfter moving all spaces to the front:"")print(moveSpaces(s1))","""""""
Brief Description:
------------------
moveSpaces function performs a specific operation as described below.

Extended Description:
---------------------
This function, `moveSpaces`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> moveSpaces(value)
Expected output
""""""","import unittest

class TestMovespaces(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = moveSpaces(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = moveSpaces(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def test_includes_all(nums, lsts):  for x in lsts:    if x not in nums:      return False  return Trueprint(test_includes_all([10, 20, 30, 40, 50, 60], [20, 40]))print(test_includes_all([10, 20, 30, 40, 50, 60], [20, 80]))","""""""
Brief Description:
------------------
test_includes_all function performs a specific operation as described below.

Extended Description:
---------------------
This function, `test_includes_all`, takes 2 parameters: nums,  lsts. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
lsts : type
    Description of lsts.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> test_includes_all(value, value)
Expected output
""""""","import unittest

class TestTest_includes_all(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = test_includes_all(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = test_includes_all(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_math_v_vi_average(list_of_dicts):    for d in list_of_dicts:        n1 = d.pop('V')        n2 = d.pop('VI')        d['V+VI'] = (n1 + n2)/2    return list_of_dicts student_details= [  {'id' : 1, 'subject' : 'math', 'V' : 70, 'VI' : 82},  {'id' : 2, 'subject' : 'math', 'V' : 73, 'VI' : 74},  {'id' : 3, 'subject' : 'math', 'V' : 75, 'VI' : 86}]print(sum_math_v_vi_average(student_details))","""""""
Brief Description:
------------------
sum_math_v_vi_average function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_math_v_vi_average`, takes 1 parameters: list_of_dicts. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list_of_dicts : type
    Description of list_of_dicts.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_math_v_vi_average(value)
Expected output
""""""","import unittest

class TestSum_math_v_vi_average(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_math_v_vi_average(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_math_v_vi_average(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def convert_to_int(lst):    result = [dict([a, int(x)] for a, x in b.items()) for b in lst]    return resultdef convert_to_float(lst):    result = [dict([a, float(x)] for a, x in b.items()) for b in lst]    return resultnums =[{ 'x':'10' , 'y':'20' , 'z':'30' }, { 'p':'40', 'q':'50', 'r':'60'}]print(""Original list:"")print(nums)print(""\nString values of a given dictionary, into integer types:"")print(convert_to_int(nums))nums =[{ 'x':'10.12', 'y':'20.23', 'z':'30'}, { 'p':'40.00', 'q':'50.19', 'r':'60.99'}]print(""\nOriginal list:"")print(nums)print(""\nString values of a given dictionary, into float types:"")print(convert_to_float(nums))","""""""
Brief Description:
------------------
convert_to_int function performs a specific operation as described below.

Extended Description:
---------------------
This function, `convert_to_int`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> convert_to_int(value)
Expected output
""""""","import unittest

class TestConvert_to_int(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = convert_to_int(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = convert_to_int(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove_words(list1, remove_words):    for word in list(list1):        if word in remove_words:            list1.remove(word)    return list1        colors = ['red', 'green', 'blue', 'white', 'black', 'orange']remove_colors = ['white', 'orange']print(""Original list:"")print(colors)print(""\nRemove words:"")print(remove_colors)print(""\nAfter removing the specified words from the said list:"")print(remove_words(colors, remove_colors))","""""""
Brief Description:
------------------
remove_words function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove_words`, takes 2 parameters: list1,  remove_words. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.
remove_words : type
    Description of remove_words.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove_words(value, value)
Expected output
""""""","import unittest

class TestRemove_words(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove_words(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove_words(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def reverse_list_lists(nums):    for l in nums:        l.sort(reverse = True)    return nums    nums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]print(""Original list of lists:"")print(nums)print(""\nReverse each list in the said list of lists:"")print(reverse_list_lists(nums))","""""""
Brief Description:
------------------
reverse_list_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse_list_lists`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse_list_lists(value)
Expected output
""""""","import unittest

class TestReverse_list_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse_list_lists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse_list_lists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def every_nth(nums, nth):  return nums[nth - 1::nth]print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))","""""""
Brief Description:
------------------
every_nth function performs a specific operation as described below.

Extended Description:
---------------------
This function, `every_nth`, takes 2 parameters: nums,  nth. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.
nth : type
    Description of nth.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> every_nth(value, value)
Expected output
""""""","import unittest

class TestEvery_nth(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = every_nth(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = every_nth(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_mixed_list(mixed_list):    int_part = sorted([i for i in mixed_list if type(i) is int])    str_part = sorted([i for i in mixed_list if type(i) is str])    return int_part + str_partmixed_list = [19,'red',12,'green','blue', 10,'white','green',1]print(""Original list:"")print(mixed_list)print(""\nSort the said  mixed list of integers and strings:"")print(sort_mixed_list(mixed_list))","""""""
Brief Description:
------------------
sort_mixed_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_mixed_list`, takes 1 parameters: mixed_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
mixed_list : type
    Description of mixed_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_mixed_list(value)
Expected output
""""""","import unittest

class TestSort_mixed_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_mixed_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_mixed_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def reverse_string(str1):    return ''.join(reversed(str1))print()print(reverse_string("abcdef"))print(reverse_string("Python Exercises."))print(),"""""""
Brief Description:
------------------
reverse_string function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse_string`, takes 1 parameters: str1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse_string(value)
Expected output
""""""","import unittest

class TestReverse_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse_string(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse_string(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def bytearray_to_hexadecimal(list_val):     result = ''.join('{:02x}'.format(x) for x in list_val)       return(result)list_val = [111, 12, 45, 67, 109] print(""Original Bytearray :"")print(list_val)print(""\nHexadecimal string:"")print(bytearray_to_hexadecimal(list_val))","""""""
Brief Description:
------------------
bytearray_to_hexadecimal function performs a specific operation as described below.

Extended Description:
---------------------
This function, `bytearray_to_hexadecimal`, takes 1 parameters: list_val. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list_val : type
    Description of list_val.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> bytearray_to_hexadecimal(value)
Expected output
""""""","import unittest

class TestBytearray_to_hexadecimal(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = bytearray_to_hexadecimal(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = bytearray_to_hexadecimal(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_min_sublist(lst):    max_result = (max(lst, key=sum))    min_result = (min(lst, key=sum))    return max_result,min_resultnums = [[1,2,3,5], [2,3,5,4], [0,5,4,1], [3,7,2,1], [1,2,1,2]]print(""Original list:"")print(nums)result = max_min_sublist(nums)print(""\nMaximum sum of sub list of the said list of lists:"")print(result[0])print(""\nMinimum sum of sub list of the said list of lists:"")print(result[1])","""""""
Brief Description:
------------------
max_min_sublist function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_min_sublist`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_min_sublist(value)
Expected output
""""""","import unittest

class TestMax_min_sublist(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_min_sublist(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_min_sublist(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum(x, y):    sum = x + y    if sum in range(15, 20):        return 20    else:        return sumprint(sum(10, 6))print(sum(10, 2))print(sum(10, 12))","""""""
Brief Description:
------------------
sum function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum`, takes 2 parameters: x,  y. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
y : type
    Description of y.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum(value, value)
Expected output
""""""","import unittest

class TestSum(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def decimal_to_binary_list(n):    result = [int(x) for x in list('{0:0b}'.format(n))]    return resultn = 8print(""Original Number:"",n)print(""Decimal number ("",n,"") to binary list:"")print(decimal_to_binary_list(n))n = 45print(""\nOriginal Number:"",n)print(""Decimal number ("",n,"") to binary list:"")print(decimal_to_binary_list(n))n = 100print(""\nOriginal Number:"",n)print(""Decimal number ("",n,"") to binary list:"")print(decimal_to_binary_list(n))","""""""
Brief Description:
------------------
decimal_to_binary_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `decimal_to_binary_list`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> decimal_to_binary_list(value)
Expected output
""""""","import unittest

class TestDecimal_to_binary_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = decimal_to_binary_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = decimal_to_binary_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_even_num(l):    enum = []    for n in l:        if n % 2 == 0:            enum.append(n)    return enumprint(is_even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))","""""""
Brief Description:
------------------
is_even_num function performs a specific operation as described below.

Extended Description:
---------------------
This function, `is_even_num`, takes 1 parameters: l. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l : type
    Description of l.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> is_even_num(value)
Expected output
""""""","import unittest

class TestIs_even_num(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = is_even_num(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = is_even_num(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_by_indexes(lst, indexes, reverse=False):  return [val for (_, val) in sorted(zip(indexes, lst), key=lambda x: \          x[0], reverse=reverse)]l1 = ['eggs', 'bread', 'oranges', 'jam', 'apples', 'milk']l2 = [3, 2, 6, 4, 1, 5]print(sort_by_indexes(l1, l2))  print(sort_by_indexes(l1, l2, True))","""""""
Brief Description:
------------------
sort_by_indexes function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_by_indexes`, takes 3 parameters: lst,  indexes,  reverse=False. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
indexes : type
    Description of indexes.
reverse=False : type
    Description of reverse=False.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_by_indexes(value, value, value)
Expected output
""""""","import unittest

class TestSort_by_indexes(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_by_indexes(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_by_indexes(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def printValues():	l = list()	for i in range(1,31):		l.append(i**2)	print(l[5:])printValues()","""""""
Brief Description:
------------------
printValues function performs a specific operation as described below.

Extended Description:
---------------------
This function, `printValues`, takes 0 parameters: none. It is designed to perform a certain task using these parameters.

Parameters:
-----------

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> printValues()
Expected output
""""""","import unittest

class TestPrintvalues(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = printValues()
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = printValues()
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def smallest_num_in_list( list ):    min = list[ 0 ]    for a in list:        if a < min:            min = a    return minprint(smallest_num_in_list([1, 2, -8, 0]))","""""""
Brief Description:
------------------
smallest_num_in_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `smallest_num_in_list`, takes 1 parameters:  list . It is designed to perform a certain task using these parameters.

Parameters:
-----------
list : type
    Description of list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> smallest_num_in_list(value)
Expected output
""""""","import unittest

class TestSmallest_num_in_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = smallest_num_in_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = smallest_num_in_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def index_on_inner_list(list1, list2):    result = list(filter(lambda x: x not in list2, list1))    return resultlist1 = [1,2,3,4,5,6,7,8,9,10]list2 = [2,4,6,8]print(""Original lists:"")print(""list1:"", list1)print(""list2:"", list2)print(""\nRemove all elements from 'list1' present in 'list2:"")print(index_on_inner_list(list1, list2))","""""""
Brief Description:
------------------
index_on_inner_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `index_on_inner_list`, takes 2 parameters: list1,  list2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list1 : type
    Description of list1.
list2 : type
    Description of list2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> index_on_inner_list(value, value)
Expected output
""""""","import unittest

class TestIndex_on_inner_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = index_on_inner_list(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = index_on_inner_list(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def insert_sting_middle(str, word):	return str[:2] + word + str[2:]print(insert_sting_middle('[[]]', 'Python'))print(insert_sting_middle('{{}}', 'PHP'))print(insert_sting_middle('<<>>', 'HTML'))","""""""
Brief Description:
------------------
insert_sting_middle function performs a specific operation as described below.

Extended Description:
---------------------
This function, `insert_sting_middle`, takes 2 parameters: str,  word. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.
word : type
    Description of word.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> insert_sting_middle(value, value)
Expected output
""""""","import unittest

class TestInsert_sting_middle(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = insert_sting_middle(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = insert_sting_middle(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def average_by(lst, fn = lambda x: x):  return sum(map(fn, lst), 0.0) / len(lst)print(average_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda x: x['n']))print(average_by([{ 'n': 10 }, { 'n': 20 }, { 'n': -30 }, { 'n': 60 }], lambda x: x['n']))","""""""
Brief Description:
------------------
average_by function performs a specific operation as described below.

Extended Description:
---------------------
This function, `average_by`, takes 2 parameters: lst,  fn = lambda x: x. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn = lambda x: x : type
    Description of fn = lambda x: x.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> average_by(value, value)
Expected output
""""""","import unittest

class TestAverage_by(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = average_by(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = average_by(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def test_prime(n):    if (n==1):        return False    elif (n==2):        return True;    else:        for x in range(2,n):            if(n % x==0):                return False        return True             print(test_prime(9))","""""""
Brief Description:
------------------
test_prime function performs a specific operation as described below.

Extended Description:
---------------------
This function, `test_prime`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> test_prime(value)
Expected output
""""""","import unittest

class TestTest_prime(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = test_prime(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = test_prime(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def alternate_elements(list_data):    result=[]    for item in list_data[::2]:        result.append(item)    return result colors = [""red"", ""black"", ""white"", ""green"", ""orange""]print(""Original list:"")print(colors)print(""List with alternate elements from the said list:"")print(alternate_elements(colors))nums = [2,0,3,4,0,2,8,3,4,2]print(""\nOriginal list:"")print(nums)print(""List with alternate elements from the said list:"")print(alternate_elements(nums))","""""""
Brief Description:
------------------
alternate_elements function performs a specific operation as described below.

Extended Description:
---------------------
This function, `alternate_elements`, takes 1 parameters: list_data. It is designed to perform a certain task using these parameters.

Parameters:
-----------
list_data : type
    Description of list_data.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> alternate_elements(value)
Expected output
""""""","import unittest

class TestAlternate_elements(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = alternate_elements(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = alternate_elements(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def tuples_to_list_str(lst):    result = [(""%s ""*len(el)%el).strip() for el in lst]    return result   colors = [('red', 'green'), ('black', 'white'), ('orange', 'pink')]print(""Original list of tuples:"")print(colors)print(""\nConvert the said list of tuples to a list of strings:"")print(tuples_to_list_str(colors))names = [('Laiba','Delacruz'), ('Mali','Stacey','Drummond'), ('Raja','Welch'), ('Saarah','Stone')]print(""\nOriginal list of tuples:"")print(names)print(""\nConvert the said list of tuples to a list of strings:"")print(tuples_to_list_str(names))","""""""
Brief Description:
------------------
tuples_to_list_str function performs a specific operation as described below.

Extended Description:
---------------------
This function, `tuples_to_list_str`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> tuples_to_list_str(value)
Expected output
""""""","import unittest

class TestTuples_to_list_str(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = tuples_to_list_str(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = tuples_to_list_str(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def make_map(s):    temp_map = {}    for char in s:        if char not in temp_map:            temp_map[char] = 1        else:            temp_map[char] +=1     return temp_map        def make_anagram(str1, str2):    str1_map1 = make_map(str1)    str2_map2 = make_map(str2)     ctr = 0    for key in str2_map2.keys():        if key not in str1_map1:            ctr += str2_map2[key]        else:            ctr += max(0, str2_map2[key]-str1_map1[key])     for key in str1_map1.keys():        if key not in str2_map2:            ctr += str1_map1[key]        else:            ctr += max(0, str1_map1[key]-str2_map2[key])     return ctr str1 = input(""Input string1: "")str2 = input(""Input string2: "")print(make_anagram(str1, str2))","""""""
Brief Description:
------------------
make_map function performs a specific operation as described below.

Extended Description:
---------------------
This function, `make_map`, takes 1 parameters: s. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s : type
    Description of s.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> make_map(value)
Expected output
""""""","import unittest

class TestMake_map(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = make_map(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = make_map(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def counting_sort(array1, max_val):    m = max_val + 1    count = [0] * m                        for a in array1:    # count occurences        count[a] += 1                 i = 0    for a in range(m):                    for c in range(count[a]):              array1[i] = a            i += 1    return array1print(counting_sort( [1, 2, 7, 3, 2, 1, 4, 2, 3, 2, 1], 7 ))","""""""
Brief Description:
------------------
counting_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `counting_sort`, takes 2 parameters: array1,  max_val. It is designed to perform a certain task using these parameters.

Parameters:
-----------
array1 : type
    Description of array1.
max_val : type
    Description of max_val.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> counting_sort(value, value)
Expected output
""""""","import unittest

class TestCounting_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = counting_sort(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = counting_sort(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def harmonic_sum(n):  if n < 2:    return 1  else:    return 1 / n + (harmonic_sum(n - 1))    print(harmonic_sum(7))print(harmonic_sum(4)),"""""""
Brief Description:
------------------
harmonic_sum function performs a specific operation as described below.

Extended Description:
---------------------
This function, `harmonic_sum`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> harmonic_sum(value)
Expected output
""""""","import unittest

class TestHarmonic_sum(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = harmonic_sum(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = harmonic_sum(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def keys_only(students):  return list(students.keys()) students = {  'Laura': 10,  'Spencer': 11,  'Bridget': 9,  'Howard ': 10,}print(""Original directory elements:"")print(students)print(""\nFlat list of all the keys of the said dictionary:"")print(keys_only(students))","""""""
Brief Description:
------------------
keys_only function performs a specific operation as described below.

Extended Description:
---------------------
This function, `keys_only`, takes 1 parameters: students. It is designed to perform a certain task using these parameters.

Parameters:
-----------
students : type
    Description of students.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> keys_only(value)
Expected output
""""""","import unittest

class TestKeys_only(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = keys_only(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = keys_only(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_elements_lists(nums):    nums = [item for sublist in nums for item in sublist]    dic_data = {}    for num in nums:        if num in dic_data.keys():            dic_data[num] += 1        else:            key = num            value = 1            dic_data[key] = value    return dic_datanums = [        [1,2,3,2],        [4,5,6,2],        [7,8,9,5],       ]    print(""Original list of lists:"")print(nums)print(""\nFrequency of the elements in the said list of lists:"")print(count_elements_lists(nums))","""""""
Brief Description:
------------------
count_elements_lists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_elements_lists`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_elements_lists(value)
Expected output
""""""","import unittest

class TestCount_elements_lists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_elements_lists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_elements_lists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def vowel(text):    vowels = "aeiuoAEIOU"    print(len([letter for letter in text if letter in vowels]))    print([letter for letter in text if letter in vowels])vowel('w3resource');,"""""""
Brief Description:
------------------
vowel function performs a specific operation as described below.

Extended Description:
---------------------
This function, `vowel`, takes 1 parameters: text. It is designed to perform a certain task using these parameters.

Parameters:
-----------
text : type
    Description of text.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> vowel(value)
Expected output
""""""","import unittest

class TestVowel(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = vowel(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = vowel(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def  gnome_sort(nums):    if len(nums) <= 1:        return nums            i = 1        while i < len(nums):        if nums[i-1] <= nums[i]:            i += 1        else:            nums[i-1], nums[i] = nums[i], nums[i-1]            i -= 1            if (i == 0):                i = 1           user_input = input(""Input numbers separated by a comma:\n"").strip()nums = [int(item) for item in user_input.split(',')]gnome_sort(nums)print(nums)","""""""
Brief Description:
------------------
gnome_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `gnome_sort`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> gnome_sort(value)
Expected output
""""""","import unittest

class TestGnome_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = gnome_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = gnome_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def insert_spec_position(x, n_list, pos):    return n_list[:pos-1]+[x]+n_list[pos-1:]n_list = [1,1,2,3,4,4,5,1]print(""Original list:"") print(n_list)kth_position = 3x = 12result = insert_spec_position(x, n_list, kth_position)print(""\nAfter inserting an element at kth position in the said list:"")print(result)","""""""
Brief Description:
------------------
insert_spec_position function performs a specific operation as described below.

Extended Description:
---------------------
This function, `insert_spec_position`, takes 3 parameters: x,  n_list,  pos. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.
n_list : type
    Description of n_list.
pos : type
    Description of pos.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> insert_spec_position(value, value, value)
Expected output
""""""","import unittest

class TestInsert_spec_position(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = insert_spec_position(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = insert_spec_position(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def every(lst, fn = lambda x: x):  return all(map(fn, lst))print(every([4, 2, 3], lambda x: x > 1))print(every([4, 2, 3], lambda x: x < 1))print(every([4, 2, 3], lambda x: x == 1))","""""""
Brief Description:
------------------
every function performs a specific operation as described below.

Extended Description:
---------------------
This function, `every`, takes 2 parameters: lst,  fn = lambda x: x. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.
fn = lambda x: x : type
    Description of fn = lambda x: x.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> every(value, value)
Expected output
""""""","import unittest

class TestEvery(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = every(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = every(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_numeric_strings(nums_str):    result = sorted(nums_str, key=lambda el: int(el))    return resultnums_str = ['4','12','45','7','0','100','200','-12','-500']print(""Original list:"")print(nums_str)print(""\nSort the said list of strings(numbers) numerically:"")print(sort_numeric_strings(nums_str))","""""""
Brief Description:
------------------
sort_numeric_strings function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_numeric_strings`, takes 1 parameters: nums_str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums_str : type
    Description of nums_str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_numeric_strings(value)
Expected output
""""""","import unittest

class TestSort_numeric_strings(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_numeric_strings(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_numeric_strings(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_list(input_list):     return len(input_list)       list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] list2 = [[2, 4], [[6,8], [4,5,8]], [10, 12, 14]]   print(""Original list:"")print(list1)print(""\nNumber of lists in said list of lists:"")print(count_list(list1))print(""\nOriginal list:"")print(list2)print(""\nNumber of lists in said list of lists:"")print(count_list(list2))","""""""
Brief Description:
------------------
count_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_list`, takes 1 parameters: input_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input_list : type
    Description of input_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_list(value)
Expected output
""""""","import unittest

class TestCount_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_sublists(input_list):    result = list(map(sorted, input_list))     return resultcolor1 = [[""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]]print(""\nOriginal list:"")print(color1)  print(""\nAfter sorting each sublist of the said list of lists:"")print(sort_sublists(color1))","""""""
Brief Description:
------------------
sort_sublists function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_sublists`, takes 1 parameters: input_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input_list : type
    Description of input_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_sublists(value)
Expected output
""""""","import unittest

class TestSort_sublists(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_sublists(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_sublists(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sort_mixed_list(mixed_list):    mixed_list.sort(key=lambda e: (isinstance(e, str), e))    return mixed_listmixed_list = [19,'red',12,'green','blue', 10,'white','green',1]print(""Original list:"")print(mixed_list)print(""\nSort the said  mixed list of integers and strings:"")print(sort_mixed_list(mixed_list))","""""""
Brief Description:
------------------
sort_mixed_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sort_mixed_list`, takes 1 parameters: mixed_list. It is designed to perform a certain task using these parameters.

Parameters:
-----------
mixed_list : type
    Description of mixed_list.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sort_mixed_list(value)
Expected output
""""""","import unittest

class TestSort_mixed_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sort_mixed_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sort_mixed_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def decode(alist):    def aux(g):        if isinstance(g, list):            return [(g[1], range(g[0]))]        else:            return [(g, [0])]    return [x for g in alist for x, R in aux(g) for i in R]n_list = [[2, 1], 2, 3, [2, 4], 5, 1]print(""Original encoded list:"") print(n_list)print(""\nDecode a run-length encoded said list:"")print(decode(n_list))","""""""
Brief Description:
------------------
decode function performs a specific operation as described below.

Extended Description:
---------------------
This function, `decode`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> decode(value)
Expected output
""""""","import unittest

class TestDecode(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = decode(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = decode(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def intersection_by(a, b, fn):  _b = set(map(fn, b))  return [item for item in a if fn(item) in _b]from math import floorprint(intersection_by([2.1, 1.2], [2.3, 3.4], floor))","""""""
Brief Description:
------------------
intersection_by function performs a specific operation as described below.

Extended Description:
---------------------
This function, `intersection_by`, takes 3 parameters: a,  b,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> intersection_by(value, value, value)
Expected output
""""""","import unittest

class TestIntersection_by(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = intersection_by(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = intersection_by(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def max_occurrences(nums):    max_val = 0    result = nums[0]     for i in nums:        occu = nums.count(i)        if occu > max_val:            max_val = occu            result = i     return resultnums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]print (""Original list:"")print(nums)print(""\nItem with maximum occurrences of the said list:"")print(max_occurrences(nums)) ","""""""
Brief Description:
------------------
max_occurrences function performs a specific operation as described below.

Extended Description:
---------------------
This function, `max_occurrences`, takes 1 parameters: nums. It is designed to perform a certain task using these parameters.

Parameters:
-----------
nums : type
    Description of nums.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> max_occurrences(value)
Expected output
""""""","import unittest

class TestMax_occurrences(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = max_occurrences(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = max_occurrences(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def elementswise_right_join(l1, l2):    f_len = len(l1)-(len(l2) - 1)    for i in range(len(l1), 0, -1):        if i-f_len < 0:            break        else:            l1[i-1] = l1[i-1] + l2[i-f_len]    return l1nums1 = [2, 4, 7, 0, 5, 8]nums2 = [3, 3, -1, 7]print(""\nOriginal lists:"")print(nums1)print(nums2)print(""\nAdd said two lists from left:"")print(elementswise_right_join(nums1, nums2))nums3 = [1, 2, 3, 4, 5, 6]nums4 = [2, 4, -3]print(""\nOriginal lists:"")print(nums3)print(nums4)print(""\nAdd said two lists from left:"")print(elementswise_right_join(nums3, nums4))","""""""
Brief Description:
------------------
elementswise_right_join function performs a specific operation as described below.

Extended Description:
---------------------
This function, `elementswise_right_join`, takes 2 parameters: l1,  l2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l1 : type
    Description of l1.
l2 : type
    Description of l2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> elementswise_right_join(value, value)
Expected output
""""""","import unittest

class TestElementswise_right_join(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = elementswise_right_join(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = elementswise_right_join(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def symmetric_difference_by(a, b, fn):  (_a, _b) = (set(map(fn, a)), set(map(fn, b)))  return [item for item in a if fn(item) not in _b] + [item          for item in b if fn(item) not in _a]from math import floorprint(symmetric_difference_by([2.1, 1.2], [2.3, 3.4], floor))","""""""
Brief Description:
------------------
symmetric_difference_by function performs a specific operation as described below.

Extended Description:
---------------------
This function, `symmetric_difference_by`, takes 3 parameters: a,  b,  fn. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.
fn : type
    Description of fn.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> symmetric_difference_by(value, value, value)
Expected output
""""""","import unittest

class TestSymmetric_difference_by(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = symmetric_difference_by(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = symmetric_difference_by(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def unique_list(l):    temp = []    for x in l:        if x not in temp:            temp.append(x)    return temptext_str = [""Python"", ""Exercises"", ""Practice"", ""Solution"", ""Exercises""]print(""Original String:"")print(text_str)print(""\nAfter removing duplicate words from the said list of strings:"")print(unique_list(text_str))","""""""
Brief Description:
------------------
unique_list function performs a specific operation as described below.

Extended Description:
---------------------
This function, `unique_list`, takes 1 parameters: l. It is designed to perform a certain task using these parameters.

Parameters:
-----------
l : type
    Description of l.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> unique_list(value)
Expected output
""""""","import unittest

class TestUnique_list(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = unique_list(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = unique_list(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def findRotations(str1, str2):

# To count left rotations
# of string
x = 0

# To count right rotations
# of string
y = 0
m = str1

while True:

# left rotating the string
m = m[len(m)-1] + m[:len(m)-1]

# checking if rotated and
# actual string are equal.
if(m == str2):
x += 1
break

else:
x += 1
if x > len(str2) :
break

while True:

# right rotating the string
str1 = str1[1:len(str1)]+str1[0]

# checking if rotated and actual
# string are equal.
if(str1 == str2):
y += 1
break

else:
y += 1
if y > len(str2):
break

if x < len(str2):

# printing the minimum
# number of rotations.
print(min(x,y))

else:
print(""given strings are not of same kind"")

# Driver code
findRotations('sgeek', 'geeks')","""""""
Brief Description:
------------------
findRotations function performs a specific operation as described below.

Extended Description:
---------------------
This function, `findRotations`, takes 2 parameters: str1,  str2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str1 : type
    Description of str1.
str2 : type
    Description of str2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> findRotations(value, value)
Expected output
""""""","import unittest

class TestFindrotations(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = findRotations(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = findRotations(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def checkEmpty(input, pattern):

# If both are empty
if len(input)== 0 and len(pattern)== 0:
return 'true'

# If only pattern is empty
if len(pattern)== 0:
return 'true'

while (len(input) != 0):

# find sub-string in main string
index = input.find(pattern)

# check if sub-string founded or not
if (index ==(-1)):
return 'false'

# slice input string in two parts and concatenate
input = input[0:index] + input[index + len(pattern):]

return 'true'

# Driver program
if __name__ == ""__main__"":
input ='GEEGEEKSKS'
pattern ='GEEKS'
print (checkEmpty(input, pattern))","""""""
Brief Description:
------------------
checkEmpty function performs a specific operation as described below.

Extended Description:
---------------------
This function, `checkEmpty`, takes 2 parameters: input,  pattern. It is designed to perform a certain task using these parameters.

Parameters:
-----------
input : type
    Description of input.
pattern : type
    Description of pattern.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> checkEmpty(value, value)
Expected output
""""""","import unittest

class TestCheckempty(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = checkEmpty(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = checkEmpty(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def power(N, P):

# if power is 0 then return 1
if P == 0:
return 1

# if power is 1 then number is
# returned
elif P == 1:
return N

else:
return (N*power(N, P-1))

# Driver program
N = 5
P = 2

print(power(N, P))","""""""
Brief Description:
------------------
power function performs a specific operation as described below.

Extended Description:
---------------------
This function, `power`, takes 2 parameters: N,  P. It is designed to perform a certain task using these parameters.

Parameters:
-----------
N : type
    Description of N.
P : type
    Description of P.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> power(value, value)
Expected output
""""""","import unittest

class TestPower(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = power(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = power(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def a():
print(""GFG"")

# assigning function to a variable
var=a


# calling the variable
var()","""""""
Brief Description:
------------------
a function performs a specific operation as described below.

Extended Description:
---------------------
This function, `a`, takes 0 parameters: none. It is designed to perform a certain task using these parameters.

Parameters:
-----------

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> a()
Expected output
""""""","import unittest

class TestA(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = a()
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = a()
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def print_pattern(n):
for i in range(1, n+1, 1):
for j in range(1, n+1, 1):
# check that if index i is
# equal to j
if i == j:


print(j, end="" "")
# if index i is less than j
if i <= j:


for k in range(j+1, n+1, 1):
print(k, end="" "")


for p in range(1, j, 1):
print(p, end="" "")


# print new line
print()




# Driver's code
print_pattern(3)","""""""
Brief Description:
------------------
print_pattern function performs a specific operation as described below.

Extended Description:
---------------------
This function, `print_pattern`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> print_pattern(value)
Expected output
""""""","import unittest

class TestPrint_pattern(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = print_pattern(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = print_pattern(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def print_diamond(size):

# print the first triangle
# (the upper half)
for i in range (size):

# print from first row till
# middle row
rownum = i + 1
num_alphabet = 2 * rownum - 1
space_in_between_alphabets = num_alphabet - 1

total_spots = (2 * size - 1) * 2 - 1
total_space = total_spots - num_alphabet

space_leading_trailing = total_space - space_in_between_alphabets
lead_space = int(space_leading_trailing / 2)
trail_space = int(space_leading_trailing / 2)

# print the leading spaces
for j in range(lead_space):
print('-', end ='')

# determine the middle character
mid_char = (1 + size - 1) - int(num_alphabet / 2)

# start with the last character
k = 1 + size - 1
is_alphabet_printed = False
mid_char_reached = False

# print the numbers alternated by '-'
for j in range(num_alphabet + space_in_between_alphabets):

if not is_alphabet_printed:
print(str(k), end ='')
is_alphabet_printed = True

if k == mid_char:
mid_char_reached = True

if mid_char_reached == True:
k += 1

else:
k -= 1

else:
print('-', end ='')
is_alphabet_printed = False

# print the trailing spaces
for j in range(trail_space):
print('-', end ='')

# go to the next line
print('')

# print the rows after middle row
# till last row (the second triangle
# which is inverted, i.e., the lower half)
for i in range(size + 1, 2 * size):

rownum = i
num_alphabet = 2 * (2 * size - rownum) - 1
space_in_between_alphabets = num_alphabet - 1

total_spots = (2 * size - 1) * 2 - 1
total_space = total_spots - num_alphabet

space_leading_trailing = total_space - space_in_between_alphabets
lead_space = int(space_leading_trailing / 2)
trail_space = int(space_leading_trailing / 2)

# print the leading spaces
for j in range(lead_space):
print('-', end ='')

mid_char = (1 + size - 1) - int(num_alphabet / 2)

# start with the last char
k = 1 + size - 1
is_alphabet_printed = False
mid_char_reached = False

# print the numbers alternated by '-'
for j in range(num_alphabet + space_in_between_alphabets):

if not is_alphabet_printed:
print(str(k), end ='')
is_alphabet_printed = True

if k == mid_char:
mid_char_reached = True

if mid_char_reached == True:
k += 1

else:
k -= 1

else:
print('-', end ='')
is_alphabet_printed = False

# print the trailing spaces
for j in range(trail_space):
print('-', end ='')

# go to the next line
print('')

# Driver Code
if __name__ == '__main__':

n = 5
print_diamond(n)","""""""
Brief Description:
------------------
print_diamond function performs a specific operation as described below.

Extended Description:
---------------------
This function, `print_diamond`, takes 1 parameters: size. It is designed to perform a certain task using these parameters.

Parameters:
-----------
size : type
    Description of size.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> print_diamond(value)
Expected output
""""""","import unittest

class TestPrint_diamond(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = print_diamond(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = print_diamond(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def GFG(name, num):
print(""Hello from "", name + ', ' + num)


GFG(""geeks for geeks"", ""25"")","""""""
Brief Description:
------------------
GFG function performs a specific operation as described below.

Extended Description:
---------------------
This function, `GFG`, takes 2 parameters: name,  num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
name : type
    Description of name.
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> GFG(value, value)
Expected output
""""""","import unittest

class TestGfg(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = GFG(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = GFG(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def func():

# defining local variable
a_variable = 0

# using locals() function
# for checking existence in symbol table
is_local_var = ""a_variable"" in locals()

# printing result
print(is_local_var)

# driver code
func()","""""""
Brief Description:
------------------
func function performs a specific operation as described below.

Extended Description:
---------------------
This function, `func`, takes 0 parameters: none. It is designed to perform a certain task using these parameters.

Parameters:
-----------

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> func()
Expected output
""""""","import unittest

class TestFunc(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = func()
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = func()
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def no_of_argu(*args):

# using len() method in args to count
return(len(args))




a = 1
b = 3


# arguments passed
n = no_of_argu(1, 2, 4, a)


# result printed
print("" The number of arguments are: "", n)","""""""
Brief Description:
------------------
no_of_argu function performs a specific operation as described below.

Extended Description:
---------------------
This function, `no_of_argu`, takes 1 parameters: *args. It is designed to perform a certain task using these parameters.

Parameters:
-----------
*args : type
    Description of *args.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> no_of_argu(value)
Expected output
""""""","import unittest

class TestNo_of_argu(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = no_of_argu(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = no_of_argu(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def checkString(str):

# intializing flag variable
flag_l = False
flag_n = False

# checking for letter and numbers in
# given string
for i in str:

# if string has letter
if i.isalpha():
flag_l = True

# if string has number
if i.isdigit():
flag_n = True

# returning and of flag
# for checking required condition
return flag_l and flag_n


# driver code
print(checkString('thishasboth29'))
print(checkString('geeksforgeeks'))","""""""
Brief Description:
------------------
checkString function performs a specific operation as described below.

Extended Description:
---------------------
This function, `checkString`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> checkString(value)
Expected output
""""""","import unittest

class TestCheckstring(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = checkString(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = checkString(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def square_matrix(square):
"""""" This function will calculate the value x
(i.e. blurred pixel value) for each 3 * 3 blur image.
""""""
tot_sum = 0

# Calculate sum of all the pixels in 3 * 3 matrix
for i in range(3):
for j in range(3):
tot_sum += square[i][j]

return tot_sum // 9 # return the average of the sum of pixels

def boxBlur(image):
""""""
This function will calculate the blurred
image for given n * n image.
""""""
square = [] # This will store the 3 * 3 matrix
# which will be used to find its blurred pixel

square_row = [] # This will store one row of a 3 * 3 matrix and
# will be appended in square

blur_row = [] # Here we will store the resulting blurred
# pixels possible in one row
# and will append this in the blur_img

blur_img = [] # This is the resulting blurred image

# number of rows in the given image
n_rows = len(image)

# number of columns in the given image
n_col = len(image[0])

# rp is row pointer and cp is column pointer
rp, cp = 0, 0

# This while loop will be used to
# calculate all the blurred pixel in the first row
while rp <= n_rows - 3:
while cp <= n_col-3:

for i in range(rp, rp + 3):

for j in range(cp, cp + 3):

# append all the pixels in a row of 3 * 3 matrix
square_row.append(image[i][j])

# append the row in the square i.e. 3 * 3 matrix
square.append(square_row)
square_row = []

# calculate the blurred pixel for given 3 * 3 matrix
# i.e. square and append it in blur_row
blur_row.append(square_matrix(square))
square = []

# increase the column pointer
cp = cp + 1

# append the blur_row in blur_image
blur_img.append(blur_row)
blur_row = []
rp = rp + 1 # increase row pointer
cp = 0 # start column pointer from 0 again

# Return the resulting pixel matrix
return blur_img

# Driver code
image = [[7, 4, 0, 1],
[5, 6, 2, 2],
[6, 10, 7, 8],
[1, 4, 2, 0]]

print(boxBlur(image))","""""""
Brief Description:
------------------
square_matrix function performs a specific operation as described below.

Extended Description:
---------------------
This function, `square_matrix`, takes 1 parameters: square. It is designed to perform a certain task using these parameters.

Parameters:
-----------
square : type
    Description of square.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> square_matrix(value)
Expected output
""""""","import unittest

class TestSquare_matrix(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = square_matrix(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = square_matrix(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def NthFibonacciNumber(n):  if n==0:    return 0  elif(n==1):    return 1  else:    return NthFibonacciNumber(n-1)+NthFibonacciNumber(n-2)n=int(input(""Enter the N value:""))print(""Nth Fibonacci Number is:"",NthFibonacciNumber(n))","""""""
Brief Description:
------------------
NthFibonacciNumber function performs a specific operation as described below.

Extended Description:
---------------------
This function, `NthFibonacciNumber`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> NthFibonacciNumber(value)
Expected output
""""""","import unittest

class TestNthfibonaccinumber(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = NthFibonacciNumber(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = NthFibonacciNumber(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Power(num1,num2):  if num2==0:    return 1  return num1*Power(num1, num2-1)num1=int(input(""Enter the base value:""))num2=int(input(""Enter the power value:""))print(""Power of Number Using Recursion is:"",Power(num1,num2))","""""""
Brief Description:
------------------
Power function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Power`, takes 2 parameters: num1, num2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num1 : type
    Description of num1.
num2 : type
    Description of num2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Power(value, value)
Expected output
""""""","import unittest

class TestPower(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Power(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Power(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def get_gray_codes(n):
    """"""Return n-bit Gray code in a list.""""""
    if n == 0:
        return ['']
    first_half = get_gray_codes(n - 1)
    second_half = first_half.copy()

    first_half = ['0' + code for code in first_half]
    second_half = ['1' + code for code in reversed(second_half)]

    return first_half + second_half


n = int(input('Enter the number of bits: '))
codes = get_gray_codes(n)
print('All {}-bit Gray Codes:'.format(n))
print(codes)","""""""
Brief Description:
------------------
get_gray_codes function performs a specific operation as described below.

Extended Description:
---------------------
This function, `get_gray_codes`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> get_gray_codes(value)
Expected output
""""""","import unittest

class TestGet_gray_codes(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = get_gray_codes(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = get_gray_codes(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def modify(string):  
  final = """"   
  for i in range(len(string)):  
    if i % 2 == 0:  
      final = final + string[i]  
  return final
string=raw_input(""Enter string:"")
print(""Modified string is:"")
print(modify(string))","""""""
Brief Description:
------------------
modify function performs a specific operation as described below.

Extended Description:
---------------------
This function, `modify`, takes 1 parameters: string. It is designed to perform a certain task using these parameters.

Parameters:
-----------
string : type
    Description of string.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> modify(value)
Expected output
""""""","import unittest

class TestModify(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = modify(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = modify(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def reverse(string):
    if len(string) == 0:
        return string
    else:
        return reverse(string[1:]) + string[0]
a = str(input(""Enter the string to be reversed: ""))
print(reverse(a))","""""""
Brief Description:
------------------
reverse function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse`, takes 1 parameters: string. It is designed to perform a certain task using these parameters.

Parameters:
-----------
string : type
    Description of string.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse(value)
Expected output
""""""","import unittest

class TestReverse(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def comb_sort(alist):
    def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]

    gap = len(alist)
    shrink = 1.3

    no_swap = False
    while not no_swap:
        gap = int(gap/shrink)

        if gap < 1:
            gap = 1
            no_swap = True
        else:
            no_swap = False

        i = 0
        while i + gap < len(alist):
            if alist[i] > alist[i + gap]:
                swap(i, i + gap)
                no_swap = False
            i = i + 1


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
comb_sort(alist)
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
comb_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `comb_sort`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> comb_sort(value)
Expected output
""""""","import unittest

class TestComb_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = comb_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = comb_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def cut_rod(p, n):
    """"""Take a list p of prices and the rod length n and return lists r and s.
    r[i] is the maximum revenue that you can get and s[i] is the length of the
    first piece to cut from a rod of length i.""""""
    # r[i] is the maximum revenue for rod length i
    # r[i] = -1 means that r[i] has not been calculated yet
    r = [-1]*(n + 1)

    # s[i] is the length of the initial cut needed for rod length i
    # s[0] is not needed
    s = [-1]*(n + 1)

    cut_rod_helper(p, n, r, s)

    return r, s


def cut_rod_helper(p, n, r, s):
    """"""Take a list p of prices, the rod length n, a list r of maximum revenues
    and a list s of initial cuts and return the maximum revenue that you can get
    from a rod of length n.

    Also, populate r and s based on which subproblems need to be solved.
    """"""
    if r[n] >= 0:
        return r[n]

    if n == 0:
        q = 0
    else:
        q = -1
        for i in range(1, n + 1):
            temp = p[i] + cut_rod_helper(p, n - i, r, s)
            if q < temp:
                q = temp
                s[n] = i
    r[n] = q

    return q


n = int(input('Enter the length of the rod in inches: '))

# p[i] is the price of a rod of length i
# p[0] is not needed, so it is set to None
p = [None]
for i in range(1, n + 1):
    price = input('Enter the price of a rod of length {} in: '.format(i))
    p.append(int(price))

r, s = cut_rod(p, n)
print('The maximum revenue that can be obtained:', r[n])
print('The rod needs to be cut into length(s) of ', end='')
while n > 0:
    print(s[n], end=' ')
    n -= s[n]","""""""
Brief Description:
------------------
cut_rod function performs a specific operation as described below.

Extended Description:
---------------------
This function, `cut_rod`, takes 2 parameters: p,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
p : type
    Description of p.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> cut_rod(value, value)
Expected output
""""""","import unittest

class TestCut_rod(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = cut_rod(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = cut_rod(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def FibonacciSeries(n):  if n==0:    return 0  elif(n==1):    return 1  else:    return FibonacciSeries(n-1)+FibonacciSeries(n-2)n=int(input(""Enter the Limit:""))print(""All Fibonacci Numbers in the given Range are:"")for i in range(0,n):  print(FibonacciSeries(i),end="" "")","""""""
Brief Description:
------------------
FibonacciSeries function performs a specific operation as described below.

Extended Description:
---------------------
This function, `FibonacciSeries`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> FibonacciSeries(value)
Expected output
""""""","import unittest

class TestFibonacciseries(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = FibonacciSeries(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = FibonacciSeries(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def length(lst):
    if not lst:
        return 0
    return 1 + length(lst[1::2]) + length(lst[2::2])
a=[1,2,3]
print(""Length of the string is: "")
print(a)","""""""
Brief Description:
------------------
length function performs a specific operation as described below.

Extended Description:
---------------------
This function, `length`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> length(value)
Expected output
""""""","import unittest

class TestLength(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = length(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = length(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def heapsort(alist):
    build_max_heap(alist)
    for i in range(len(alist) - 1, 0, -1):
        alist[0], alist[i] = alist[i], alist[0]
        max_heapify(alist, index=0, size=i)

def parent(i):
    return (i - 1)//2

def left(i):
    return 2*i + 1

def right(i):
    return 2*i + 2

def build_max_heap(alist):
    length = len(alist)
    start = parent(length - 1)
    while start >= 0:
        max_heapify(alist, index=start, size=length)
        start = start - 1

def max_heapify(alist, index, size):
    l = left(index)
    r = right(index)
    if (l < size and alist[l] > alist[index]):
        largest = l
    else:
        largest = index
    if (r < size and alist[r] > alist[largest]):
        largest = r
    if (largest != index):
        alist[largest], alist[index] = alist[index], alist[largest]
        max_heapify(alist, largest, size)


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
heapsort(alist)
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
heapsort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `heapsort`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> heapsort(value)
Expected output
""""""","import unittest

class TestHeapsort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = heapsort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = heapsort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_paths(m, n, holes):
    """"""Return number of paths from (0, 0) to (m, n) in an m x n grid.

    holes is a list of tuples (x, y) where each tuple is a coordinate which is
    blocked for a path.
    """"""
    paths = [[-1]*(m + 1) for _ in range(n + 1)]
    return count_paths_helper(m, n, holes, paths, n, m)


def count_paths_helper(m, n, holes, paths, x, y):
    """"""Return number of paths from (0, 0) to (x, y) in an m x n grid.

    holes is a list of tuples (x, y) where each tuple is a coordinate which is
    blocked for a path.

    The function uses the table paths (implemented as a list of lists) where
    paths[a][b] will store the number of paths from (0, 0) to (a, b).
    """"""
    if paths[x][y] >= 0:
        return paths[x][y]

    if (x, y) in holes:
        q = 0
    elif x == 0 and y == 0:
        q = 1
    elif x == 0:
        q = count_paths_helper(m, n, holes, paths, x, y - 1)
    elif y == 0:
        q = count_paths_helper(m, n, holes, paths, x - 1, y)
    else:
        q = count_paths_helper(m, n, holes, paths, x - 1, y) \
            + count_paths_helper(m, n, holes, paths, x, y - 1)

    paths[x][y] = q
    return q


m, n = input('Enter m, n for the size of the m x n grid (m rows and n columns): ').split(',')
m = int(m)
n = int(n)
print('Enter the coordinates of holes on each line (empty line to stop): ')
holes = []
while True:
    hole = input('')
    if not hole.strip():
        break
    hole = hole.split(',')
    hole = (int(hole[0]), int(hole[1]))
    holes.append(hole)

count = count_paths(m, n, holes)
print('Number of paths from (0, 0) to ({}, {}): {}.'.format(n, m, count))","""""""
Brief Description:
------------------
count_paths function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_paths`, takes 3 parameters: m,  n,  holes. It is designed to perform a certain task using these parameters.

Parameters:
-----------
m : type
    Description of m.
n : type
    Description of n.
holes : type
    Description of holes.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_paths(value, value, value)
Expected output
""""""","import unittest

class TestCount_paths(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_paths(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_paths(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def reverse(s): str = """" for i in s:  str = i + str return strstr=input(""Enter Your String:"")sub_str=str.split("" "")sub_str1=[]p=0flag=0maxInd=0max=0str_rev=""""print(""Palindrome Substring are:"")for inn in range(len(sub_str)):  str_rev= sub_str[inn]  if reverse(str_rev).__eq__(sub_str[inn]):    sub_str1.append(sub_str[inn])    print(sub_str1[p])    p +=1    flag = 1len2 = pif flag==1:  max = len(sub_str1[0])  for inn in range(0,len2):    len1 = len(sub_str1[inn])    if len1 > max:      max=len1      maxInd=inn  print(""Longest palindrome Substring is "",sub_str1[maxInd])else:  print(""No palindrome Found"")","""""""
Brief Description:
------------------
reverse function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse`, takes 1 parameters: s. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s : type
    Description of s.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse(value)
Expected output
""""""","import unittest

class TestReverse(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def BinaryToDecimal(n):  if n==0:    return 0  else:    return (n% 10 + 2* BinaryToDecimal(n // 10))n=int(input(""Enter the Binary Value:""))print(""Decimal Value of Binary number is:"",BinaryToDecimal(n))","""""""
Brief Description:
------------------
BinaryToDecimal function performs a specific operation as described below.

Extended Description:
---------------------
This function, `BinaryToDecimal`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> BinaryToDecimal(value)
Expected output
""""""","import unittest

class TestBinarytodecimal(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = BinaryToDecimal(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = BinaryToDecimal(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum1(lst):
    total = 0
    for element in lst:
        if (type(element) == type([])):
            total = total + sum1(element)
        else:
            total = total + element
    return total
print( ""Sum is:"",sum1([[1,2],[3,4]]))","""""""
Brief Description:
------------------
sum1 function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum1`, takes 1 parameters: lst. It is designed to perform a certain task using these parameters.

Parameters:
-----------
lst : type
    Description of lst.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum1(value)
Expected output
""""""","import unittest

class TestSum1(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum1(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum1(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def lcs(u, v):
    """"""Return c where c[i][j] contains length of LCS of u[i:] and v[j:].""""""
    c = [[-1]*(len(v) + 1) for _ in range(len(u) + 1)]

    for i in range(len(u) + 1):
        c[i][len(v)] = 0
    for j in range(len(v)):
        c[len(u)][j] = 0

    for i in range(len(u) - 1, -1, -1):
        for j in range(len(v) - 1, -1, -1):
            if u[i] == v[j]:
                c[i][j] = 1 + c[i + 1][j + 1]
            else:
                c[i][j] = max(c[i + 1][j], c[i][j + 1])

    return c


def print_lcs(u, v, c):
    """"""Print one LCS of u and v using table c.""""""
    i = j = 0
    while not (i == len(u) or j == len(v)):
        if u[i] == v[j]:
            print(u[i], end='')
            i += 1
            j += 1
        elif c[i][j + 1] > c[i + 1][j]:
            j += 1
        else:
            i += 1


u = input('Enter first string: ')
v = input('Enter second string: ')
c = lcs(u, v)
print('Longest Common Subsequence: ', end='')
print_lcs(u, v, c)","""""""
Brief Description:
------------------
lcs function performs a specific operation as described below.

Extended Description:
---------------------
This function, `lcs`, takes 2 parameters: u,  v. It is designed to perform a certain task using these parameters.

Parameters:
-----------
u : type
    Description of u.
v : type
    Description of v.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> lcs(value, value)
Expected output
""""""","import unittest

class TestLcs(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = lcs(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = lcs(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def check(string,ch):
      if not string:
        return 0
      elif string[0]==ch:
            return 1+check(string[1:],ch)
      else:
            return check(string[1:],ch)
string=raw_input(""Enter string:"")
ch=raw_input(""Enter character to check:"")
print(""Count is:"")
print(check(string,ch))","""""""
Brief Description:
------------------
check function performs a specific operation as described below.

Extended Description:
---------------------
This function, `check`, takes 2 parameters: string, ch. It is designed to perform a certain task using these parameters.

Parameters:
-----------
string : type
    Description of string.
ch : type
    Description of ch.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> check(value, value)
Expected output
""""""","import unittest

class TestCheck(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = check(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = check(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def fractional_knapsack(value, weight, capacity):
    """"""Return maximum value of items and their fractional amounts.

    (max_value, fractions) is returned where max_value is the maximum value of
    items with total weight not more than capacity.
    fractions is a list where fractions[i] is the fraction that should be taken
    of item i, where 0 <= i < total number of items.

    value[i] is the value of item i and weight[i] is the weight of item i
    for 0 <= i < n where n is the number of items.

    capacity is the maximum weight.
    """"""
    # index = [0, 1, 2, ..., n - 1] for n items
    index = list(range(len(value)))
    # contains ratios of values to weight
    ratio = [v/w for v, w in zip(value, weight)]
    # index is sorted according to value-to-weight ratio in decreasing order
    index.sort(key=lambda i: ratio[i], reverse=True)

    max_value = 0
    fractions = [0]*len(value)
    for i in index:
        if weight[i] <= capacity:
            fractions[i] = 1
            max_value += value[i]
            capacity -= weight[i]
        else:
            fractions[i] = capacity/weight[i]
            max_value += value[i]*capacity/weight[i]
            break

    return max_value, fractions


n = int(input('Enter number of items: '))
value = input('Enter the values of the {} item(s) in order: '
              .format(n)).split()
value = [int(v) for v in value]
weight = input('Enter the positive weights of the {} item(s) in order: '
               .format(n)).split()
weight = [int(w) for w in weight]
capacity = int(input('Enter maximum weight: '))

max_value, fractions = fractional_knapsack(value, weight, capacity)
print('The maximum value of items that can be carried:', max_value)
print('The fractions in which the items should be taken:', fractions)","""""""
Brief Description:
------------------
fractional_knapsack function performs a specific operation as described below.

Extended Description:
---------------------
This function, `fractional_knapsack`, takes 3 parameters: value,  weight,  capacity. It is designed to perform a certain task using these parameters.

Parameters:
-----------
value : type
    Description of value.
weight : type
    Description of weight.
capacity : type
    Description of capacity.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> fractional_knapsack(value, value, value)
Expected output
""""""","import unittest

class TestFractional_knapsack(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = fractional_knapsack(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = fractional_knapsack(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def reverse(s): str = """" for i in s:  str = i + str return strstr=input(""Enter Your String:"")sub_str=str.split("" "")sub_str1=[]p=0flag=0minInd=0min=0str_rev=""""print(""Palindrome Substrings are:"")for inn in range(len(sub_str)):  str_rev= sub_str[inn]  if reverse(str_rev).__eq__(sub_str[inn]):    sub_str1.append(sub_str[inn])    print(sub_str1[p])    p +=1    flag = 1len2 = pif flag==1:  min = len(sub_str1[0])  for inn in range(0,len2):    len1 = len(sub_str1[inn])    if len1 < min:      min=len1      minInd=inn  print(""Smallest palindrome Substring is "",sub_str1[minInd])else:  print(""No palindrome Found"")","""""""
Brief Description:
------------------
reverse function performs a specific operation as described below.

Extended Description:
---------------------
This function, `reverse`, takes 1 parameters: s. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s : type
    Description of s.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> reverse(value)
Expected output
""""""","import unittest

class TestReverse(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = reverse(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = reverse(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def fibonacci(n):
    """"""Return the nth Fibonacci number.""""""
    # r[i] will contain the ith Fibonacci number
    r = [-1]*(n + 1)
    return fibonacci_helper(n, r)


def fibonacci_helper(n, r):
    """"""Return the nth Fibonacci number and store the ith Fibonacci number in
    r[i] for 0 <= i <= n.""""""
    if r[n] >= 0:
        return r[n]

    if (n == 0 or n == 1):
        q = n
    else:
        q = fibonacci_helper(n - 1, r) + fibonacci_helper(n - 2, r)
    r[n] = q

    return q


n = int(input('Enter n: '))

ans = fibonacci(n)
print('The nth Fibonacci number:', ans)","""""""
Brief Description:
------------------
fibonacci function performs a specific operation as described below.

Extended Description:
---------------------
This function, `fibonacci`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> fibonacci(value)
Expected output
""""""","import unittest

class TestFibonacci(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = fibonacci(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = fibonacci(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def DecimalToBinary(n):  if n==0:    return 0  else:    return (n% 2 + 10 * DecimalToBinary(n // 2))n=int(input(""Enter the Decimal Value:""))print(""Binary Value of Decimal number is:"",DecimalToBinary(n))","""""""
Brief Description:
------------------
DecimalToBinary function performs a specific operation as described below.

Extended Description:
---------------------
This function, `DecimalToBinary`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> DecimalToBinary(value)
Expected output
""""""","import unittest

class TestDecimaltobinary(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = DecimalToBinary(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = DecimalToBinary(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def check_AutomorphicNumber(num):  sqr = num * num  if (num > 0):    if (num % 10 != sqr % 10):      return -1    else:      check_AutomorphicNumber(num // 10)      return 0  return 0num=int(input("Enter a number:"))if (check_AutomorphicNumber(num) == 0):  print("It is an Automorphic Number.")else:  print("It is not an Automorphic Number."),"""""""
Brief Description:
------------------
check_AutomorphicNumber function performs a specific operation as described below.

Extended Description:
---------------------
This function, `check_AutomorphicNumber`, takes 1 parameters: num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> check_AutomorphicNumber(value)
Expected output
""""""","import unittest

class TestCheck_automorphicnumber(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = check_AutomorphicNumber(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = check_AutomorphicNumber(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def BubbleSort(arr,n):  if(n>0):    for i in range(0,n):      if (arr[i]>arr[i+1]):        temp = arr[i]        arr[i] = arr[i + 1]        arr[i + 1] = temp    BubbleSort(arr, n - 1)arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):  num = int(input())  arr.append(num)BubbleSort(arr, n - 1)print(""After Sorting Array Elements are:"")for i in range(0,n):  print(arr[i],end="" "")","""""""
Brief Description:
------------------
BubbleSort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `BubbleSort`, takes 2 parameters: arr, n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> BubbleSort(value, value)
Expected output
""""""","import unittest

class TestBubblesort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = BubbleSort(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = BubbleSort(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def bucket_sort(alist):
    largest = max(alist)
    length = len(alist)
    size = largest/length

    buckets = [[] for _ in range(length)]
    for i in range(length):
        j = int(alist[i]/size)
        if j != length:
            buckets[j].append(alist[i])
        else:
            buckets[length - 1].append(alist[i])

    for i in range(length):
        insertion_sort(buckets[i])

    result = []
    for i in range(length):
        result = result + buckets[i]

    return result

def insertion_sort(alist):
    for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp


alist = input('Enter the list of (nonnegative) numbers: ').split()
alist = [int(x) for x in alist]
sorted_list = bucket_sort(alist)
print('Sorted list: ', end='')
print(sorted_list)","""""""
Brief Description:
------------------
bucket_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `bucket_sort`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> bucket_sort(value)
Expected output
""""""","import unittest

class TestBucket_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = bucket_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = bucket_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def minimize_lateness(ttimes, dtimes):
    """"""Return minimum max lateness and the schedule to obtain it.

    (min_lateness, schedule) is returned.

    Lateness of a request i is L(i) = finish time of i - deadline of if
    request i finishes after its deadline.
    The maximum lateness is the maximum value of L(i) over all i.
    min_lateness is the minimum value of the maximum lateness that can be
    achieved by optimally scheduling the requests.

    schedule is a list that contains the indexes of the requests ordered such
    that minimum maximum lateness is achieved.

    ttime[i] is the time taken to complete request i.
    dtime[i] is the deadline of request i.
    """"""
    # index = [0, 1, 2, ..., n - 1] for n requests
    index = list(range(len(dtimes)))
    # sort according to deadlines
    index.sort(key=lambda i: dtimes[i])

    min_lateness = 0
    start_time = 0
    for i in index:
        min_lateness = max(min_lateness,
                           (ttimes[i] + start_time) - dtimes[i])
        start_time += ttimes[i]

    return min_lateness, index


n = int(input('Enter number of requests: '))
ttimes = input('Enter the time taken to complete the {} request(s) in order: '
              .format(n)).split()
ttimes = [int(tt) for tt in ttimes]
dtimes = input('Enter the deadlines of the {} request(s) in order: '
               .format(n)).split()
dtimes = [int(dt) for dt in dtimes]

min_lateness, schedule = minimize_lateness(ttimes, dtimes)
print('The minimum maximum lateness:', min_lateness)
print('The order in which the requests should be scheduled:', schedule)","""""""
Brief Description:
------------------
minimize_lateness function performs a specific operation as described below.

Extended Description:
---------------------
This function, `minimize_lateness`, takes 2 parameters: ttimes,  dtimes. It is designed to perform a certain task using these parameters.

Parameters:
-----------
ttimes : type
    Description of ttimes.
dtimes : type
    Description of dtimes.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> minimize_lateness(value, value)
Expected output
""""""","import unittest

class TestMinimize_lateness(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = minimize_lateness(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = minimize_lateness(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def gaps(size):
    # uses the gap sequence 2^k - 1: 1, 3, 7, 15, 31, ...
    length = size.bit_length()
    for k in range(length - 1, 0, -1):
        yield 2**k - 1


def shell_sort(alist):
    def insertion_sort_with_gap(gap):
        for i in range(gap, len(alist)):
            temp = alist[i]
            j = i - gap
            while (j >= 0 and temp < alist[j]):
                alist[j + gap] = alist[j]
                j = j - gap
            alist[j + gap] = temp

    for g in gaps(len(alist)):
        insertion_sort_with_gap(g)


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
shell_sort(alist)
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
gaps function performs a specific operation as described below.

Extended Description:
---------------------
This function, `gaps`, takes 1 parameters: size. It is designed to perform a certain task using these parameters.

Parameters:
-----------
size : type
    Description of size.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> gaps(value)
Expected output
""""""","import unittest

class TestGaps(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = gaps(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = gaps(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def lcw(u, v):
    """"""Return length of an LCW of strings u and v and its starting indexes.

    (l, i, j) is returned where l is the length of an LCW of the strings u, v
    where the LCW starts at index i in u and index j in v.
    """"""
    # c[i][j] will contain the length of the LCW at the start of u[i:] and
    # v[j:].
    c = [[-1]*(len(v) + 1) for _ in range(len(u) + 1)]

    for i in range(len(u) + 1):
        c[i][len(v)] = 0
    for j in range(len(v)):
        c[len(u)][j] = 0

    lcw_i = lcw_j = -1
    length_lcw = 0
    for i in range(len(u) - 1, -1, -1):
        for j in range(len(v)):
            if u[i] != v[j]:
                c[i][j] = 0
            else:
                c[i][j] = 1 + c[i + 1][j + 1]
                if length_lcw < c[i][j]:
                    length_lcw = c[i][j]
                    lcw_i = i
                    lcw_j = j

    return length_lcw, lcw_i, lcw_j


u = input('Enter first string: ')
v = input('Enter second string: ')
length_lcw, lcw_i, lcw_j = lcw(u, v)
print('Longest Common Subword: ', end='')
if length_lcw > 0:
    print(u[lcw_i:lcw_i + length_lcw])","""""""
Brief Description:
------------------
lcw function performs a specific operation as described below.

Extended Description:
---------------------
This function, `lcw`, takes 2 parameters: u,  v. It is designed to perform a certain task using these parameters.

Parameters:
-----------
u : type
    Description of u.
v : type
    Description of v.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> lcw(value, value)
Expected output
""""""","import unittest

class TestLcw(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = lcw(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = lcw(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def lcw(u, v):
    """"""Return length of an LCW of strings u and v and its starting indexes.

    (l, i, j) is returned where l is the length of an LCW of the strings u, v
    where the LCW starts at index i in u and index j in v.
    """"""
    c = [[-1]*(len(v) + 1) for _ in range(len(u) + 1)]

    lcw_i = lcw_j = -1
    length_lcw = 0
    for i in range(len(u)):
        for j in range(len(v)):
            temp = lcw_starting_at(u, v, c, i, j)
            if length_lcw < temp:
                length_lcw = temp
                lcw_i = i
                lcw_j = j

    return length_lcw, lcw_i, lcw_j


def lcw_starting_at(u, v, c, i, j):
    """"""Return length of the LCW starting at u[i:] and v[j:] and fill table c.

    c[i][j] contains the length of the LCW at the start of u[i:] and v[j:].
    This function fills in c as smaller subproblems for solving c[i][j] are
    solved.""""""
    if c[i][j] >= 0:
        return c[i][j]

    if i == len(u) or j == len(v):
        q = 0
    elif u[i] != v[j]:
        q = 0
    else:
        q = 1 + lcw_starting_at(u, v, c, i + 1, j + 1)

    c[i][j] = q
    return q


u = input('Enter first string: ')
v = input('Enter second string: ')
length_lcw, lcw_i, lcw_j = lcw(u, v)
print('Longest Common Subword: ', end='')
if length_lcw > 0:
    print(u[lcw_i:lcw_i + length_lcw])","""""""
Brief Description:
------------------
lcw function performs a specific operation as described below.

Extended Description:
---------------------
This function, `lcw`, takes 2 parameters: u,  v. It is designed to perform a certain task using these parameters.

Parameters:
-----------
u : type
    Description of u.
v : type
    Description of v.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> lcw(value, value)
Expected output
""""""","import unittest

class TestLcw(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = lcw(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = lcw(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def even(num1,num2):  if num1>num2:    return  print(num1,end="" "")  return even(num1+2,num2)num1=2print(""Enter your Limit:"")num2=int(input())print(""All Even number given range are:"")even(num1,num2)","""""""
Brief Description:
------------------
even function performs a specific operation as described below.

Extended Description:
---------------------
This function, `even`, takes 2 parameters: num1, num2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num1 : type
    Description of num1.
num2 : type
    Description of num2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> even(value, value)
Expected output
""""""","import unittest

class TestEven(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = even(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = even(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def SumEven(num1,num2):  if num1>num2:    return 0  return num1+SumEven(num1+2,num2)num1=2print(""Enter your Limit:"")num2=int(input())print(""Sum of all Even numbers in the given range is:"",SumEven(num1,num2))","""""""
Brief Description:
------------------
SumEven function performs a specific operation as described below.

Extended Description:
---------------------
This function, `SumEven`, takes 2 parameters: num1, num2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num1 : type
    Description of num1.
num2 : type
    Description of num2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> SumEven(value, value)
Expected output
""""""","import unittest

class TestSumeven(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = SumEven(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = SumEven(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def SumOdd(num1,num2):  if num1>num2:    return 0  return num1+SumOdd(num1+2,num2)num1=1print(""Enter your Limit:"")num2=int(input())print(""Sum of all odd numbers in the given range is:"",SumOdd(num1,num2))","""""""
Brief Description:
------------------
SumOdd function performs a specific operation as described below.

Extended Description:
---------------------
This function, `SumOdd`, takes 2 parameters: num1, num2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num1 : type
    Description of num1.
num2 : type
    Description of num2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> SumOdd(value, value)
Expected output
""""""","import unittest

class TestSumodd(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = SumOdd(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = SumOdd(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def last(n):
    return n[-1]  

def sort(tuples):
    return sorted(tuples, key=last)

a=input(""Enter a list of tuples:"")
print(""Sorted:"")
print(sort(a))","""""""
Brief Description:
------------------
last function performs a specific operation as described below.

Extended Description:
---------------------
This function, `last`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> last(value)
Expected output
""""""","import unittest

class TestLast(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = last(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = last(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def radix_sort(alist, base=10):
    if alist == []:
        return

    def key_factory(digit, base):
        def key(alist, index):
            return ((alist[index]//(base**digit)) % base)
        return key
    largest = max(alist)
    exp = 0
    while base**exp <= largest:
        alist = counting_sort(alist, base - 1, key_factory(exp, base))
        exp = exp + 1
    return alist

def counting_sort(alist, largest, key):
    c = [0]*(largest + 1)
    for i in range(len(alist)):
        c[key(alist, i)] = c[key(alist, i)] + 1

    # Find the last index for each element
    c[0] = c[0] - 1 # to decrement each element for zero-based indexing
    for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]

    result = [None]*len(alist)
    for i in range(len(alist) - 1, -1, -1):
        result[c[key(alist, i)]] = alist[i]
        c[key(alist, i)] = c[key(alist, i)] - 1

    return result

alist = input('Enter the list of (nonnegative) numbers: ').split()
alist = [int(x) for x in alist]
sorted_list = radix_sort(alist)
print('Sorted list: ', end='')
print(sorted_list)","""""""
Brief Description:
------------------
radix_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `radix_sort`, takes 2 parameters: alist,  base=10. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
base=10 : type
    Description of base=10.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> radix_sort(value, value)
Expected output
""""""","import unittest

class TestRadix_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = radix_sort(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = radix_sort(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_set_bits(n):
    count = 0
    while n:
        n &= n - 1
        count += 1
    return count


n = int(input('Enter n: '))
print('Number of set bits:', count_set_bits(n))","""""""
Brief Description:
------------------
count_set_bits function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_set_bits`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_set_bits(value)
Expected output
""""""","import unittest

class TestCount_set_bits(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_set_bits(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_set_bits(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def printno(upper):
    if(upper>0):
        printno(upper-1)
        print(upper)
upper=int(input(""Enter upper limit: ""))
printno(upper)","""""""
Brief Description:
------------------
printno function performs a specific operation as described below.

Extended Description:
---------------------
This function, `printno`, takes 1 parameters: upper. It is designed to perform a certain task using these parameters.

Parameters:
-----------
upper : type
    Description of upper.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> printno(value)
Expected output
""""""","import unittest

class TestPrintno(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = printno(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = printno(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def select(alist, start, end, i):
    """"""Find ith largest element in alist[start... end-1].""""""
    if end - start <= 1:
        return alist[start]
    pivot = partition(alist, start, end)

    # number of elements in alist[pivot... end - 1]
    k = end - pivot

    if i < k:
        return select(alist, pivot + 1, end, i)
    elif i > k:
        return select(alist, start, pivot, i - k)

    return alist[pivot]

def partition(alist, start, end):
    pivot = alist[start]
    i = start + 1
    j = end - 1

    while True:
        while (i <= j and alist[i] <= pivot):
            i = i + 1
        while (i <= j and alist[j] >= pivot):
            j = j - 1

        if i <= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j


alist = input('Enter the list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
i = int(input('The ith smallest element will be found. Enter i: '))

ith_smallest_item = select(alist, 0, len(alist), i)
print('Result: {}.'.format(ith_smallest_item))","""""""
Brief Description:
------------------
select function performs a specific operation as described below.

Extended Description:
---------------------
This function, `select`, takes 4 parameters: alist,  start,  end,  i. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
start : type
    Description of start.
end : type
    Description of end.
i : type
    Description of i.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> select(value, value, value, value)
Expected output
""""""","import unittest

class TestSelect(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = select(value, value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = select(None, None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def knapsack(value, weight, capacity):
    """"""Return the maximum value of items that doesn't exceed capacity.

    value[i] is the value of item i and weight[i] is the weight of item i
    for 1 <= i <= n where n is the number of items.

    capacity is the maximum weight.
    """"""
    n = len(value) - 1

    # m[i][w] will store the maximum value that can be attained with a maximum
    # capacity of w and using only the first i items
    m = [[-1]*(capacity + 1) for _ in range(n + 1)]

    return knapsack_helper(value, weight, m, n, capacity)


def knapsack_helper(value, weight, m, i, w):
    """"""Return maximum value of first i items attainable with weight <= w.

    m[i][w] will store the maximum value that can be attained with a maximum
    capacity of w and using only the first i items
    This function fills m as smaller subproblems needed to compute m[i][w] are
    solved.

    value[i] is the value of item i and weight[i] is the weight of item i
    for 1 <= i <= n where n is the number of items.
    """"""
    if m[i][w] >= 0:
        return m[i][w]

    if i == 0:
        q = 0
    elif weight[i] <= w:
        q = max(knapsack_helper(value, weight,
                                m, i - 1 , w - weight[i])
                + value[i],
                knapsack_helper(value, weight,
                                m, i - 1 , w))
    else:
        q = knapsack_helper(value, weight,
                            m, i - 1 , w)
    m[i][w] = q
    return q


n = int(input('Enter number of items: '))
value = input('Enter the values of the {} item(s) in order: '
              .format(n)).split()
value = [int(v) for v in value]
value.insert(0, None) # so that the value of the ith item is at value[i]
weight = input('Enter the positive weights of the {} item(s) in order: '
               .format(n)).split()
weight = [int(w) for w in weight]
weight.insert(0, None) # so that the weight of the ith item is at weight[i]
capacity = int(input('Enter maximum weight: '))

ans = knapsack(value, weight, capacity)
print('The maximum value of items that can be carried:', ans)","""""""
Brief Description:
------------------
knapsack function performs a specific operation as described below.

Extended Description:
---------------------
This function, `knapsack`, takes 3 parameters: value,  weight,  capacity. It is designed to perform a certain task using these parameters.

Parameters:
-----------
value : type
    Description of value.
weight : type
    Description of weight.
capacity : type
    Description of capacity.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> knapsack(value, value, value)
Expected output
""""""","import unittest

class TestKnapsack(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = knapsack(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = knapsack(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def swap_Element(arr,i,j):  temp = arr[i]  arr[i] = arr[j]  arr[j] = tempdef Decreasing_sort_element(arr,n):  if(n>0):    for i in range(0,n):      if (arr[i] <= arr[n - 1]):        swap_Element(arr, i, n - 1)    Decreasing_sort_element(arr, n - 1)def printArr(arr,n):  for i in range(0, n):    print(arr[i],end="" "")arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):  num = int(input())  arr.append(num)Decreasing_sort_element(arr,n)print(""After Decreasing order sort Array Elements are:"")printArr(arr, n)","""""""
Brief Description:
------------------
swap_Element function performs a specific operation as described below.

Extended Description:
---------------------
This function, `swap_Element`, takes 3 parameters: arr, i, j. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
i : type
    Description of i.
j : type
    Description of j.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> swap_Element(value, value, value)
Expected output
""""""","import unittest

class TestSwap_element(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = swap_Element(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = swap_Element(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def binary_search(alist, key):
    """"""Search key in alist[start... end - 1].""""""
    start = 0
    end = len(alist)
    while start < end:
        mid = (start + end)//2
        if alist[mid] > key:
            end = mid
        elif alist[mid] < key:
            start = mid + 1
        else:
            return mid
    return -1


alist = input('Enter the sorted list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
key = int(input('The number to search for: '))

index = binary_search(alist, key)
if index < 0:
    print('{} was not found.'.format(key))
else:
    print('{} was found at index {}.'.format(key, index))","""""""
Brief Description:
------------------
binary_search function performs a specific operation as described below.

Extended Description:
---------------------
This function, `binary_search`, takes 2 parameters: alist,  key. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
key : type
    Description of key.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> binary_search(value, value)
Expected output
""""""","import unittest

class TestBinary_search(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = binary_search(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = binary_search(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def CheckPrime(i,num):  if num==i:    return 0  else:    if(num%i==0):      return 1    else:      return CheckPrime(i+1,num)n=int(input(""Enter your Number:""))print(""Prime Number Between 1 to n are: "")for i in range(2,n+1):  if(CheckPrime(2,i)==0):    print(i,end="" "")","""""""
Brief Description:
------------------
CheckPrime function performs a specific operation as described below.

Extended Description:
---------------------
This function, `CheckPrime`, takes 2 parameters: i, num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
i : type
    Description of i.
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> CheckPrime(value, value)
Expected output
""""""","import unittest

class TestCheckprime(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = CheckPrime(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = CheckPrime(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def InsertionSort(arr,n):  if(n<=1):    return  InsertionSort(arr, n-1)  temp = arr[n - 1]  i = n - 2  while (i >= 0 and arr[i] > temp):    arr[ i +1] = arr[ i]    i=i-1  arr[i+1] = temparr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):  num = int(input())  arr.append(num)print(""Before Sorting Array Element are: "",arr)InsertionSort(arr, n)print(""After Sorting Array Elements are:"",arr)","""""""
Brief Description:
------------------
InsertionSort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `InsertionSort`, takes 2 parameters: arr, n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> InsertionSort(value, value)
Expected output
""""""","import unittest

class TestInsertionsort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = InsertionSort(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = InsertionSort(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Find_median(arr,arr2,size,size2):  m_size = size + size2  merge_arr = [0]*m_size  i=0  k=0  j=0  while k<m_size:   if i<size:     merge_arr[k] = arr[i]     i+=1     k+=1   if j<size2:     merge_arr[k] = arr2[j]     j+=1     k+=1  if size % 2 == 1:    median = merge_arr[size // 2]    print(""\nMedian= "", median)  else:    median = (merge_arr[m_size // 2] + (merge_arr[(m_size // 2) - 1])) / 2.0    print(""\nMedian= "", median)arr=[]arr2=[]size = int(input(""Enter the size of the 1st array: ""))size2 = int(input(""Enter the size of the 2nd array: ""))print(""Enter the Element of the 1st array:"")for i in range(0,size):  num = int(input())  arr.append(num)print(""Enter the Element of the 2nd array:"")for i in range(0,size2):  num2 = int(input())  arr2.append(num2)Find_median(arr,arr2,size,size2)","""""""
Brief Description:
------------------
Find_median function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Find_median`, takes 4 parameters: arr, arr2, size, size2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
arr2 : type
    Description of arr2.
size : type
    Description of size.
size2 : type
    Description of size2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Find_median(value, value, value, value)
Expected output
""""""","import unittest

class TestFind_median(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Find_median(value, value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Find_median(None, None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def collatz(n):
    while n > 1:
        print(n, end=' ')
        if (n % 2):
            # n is odd
            n = 3*n + 1
        else:
            # n is even
            n = n//2
    print(1, end='')


n = int(input('Enter n: '))
print('Sequence: ', end='')
collatz(n)","""""""
Brief Description:
------------------
collatz function performs a specific operation as described below.

Extended Description:
---------------------
This function, `collatz`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> collatz(value)
Expected output
""""""","import unittest

class TestCollatz(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = collatz(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = collatz(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
def Factorial(num):  if num<=0:    return 1  else:    return num*Factorial(num-1)sum=0def check_StrongNumber(num):  global sum  if (num>0):    fact = 1    rem = num % 10    check_StrongNumber(num // 10)    fact = Factorial(rem)    sum+=fact  return sumnum=int(input("Enter a number:"))if (check_StrongNumber(num) == num):  print("It is a strong Number.")else:  print("It is not a strong Number."),"""""""
Brief Description:
------------------
Factorial function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Factorial`, takes 1 parameters: num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Factorial(value)
Expected output
""""""","import unittest

class TestFactorial(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Factorial(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Factorial(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Copy_String(str, str1,i):  str1[i]=str[i]  if (str[i] == '\0'):    return  Copy_String(str, str1, i + 1)str=input(""Enter your String:"")str+='\0'str1=[0]*(len(str))Copy_String(str, str1,0)print(""Copy Done..."")print(""Copy string is:"","""".join(str1))","""""""
Brief Description:
------------------
Copy_String function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Copy_String`, takes 3 parameters: str,  str1, i. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.
str1 : type
    Description of str1.
i : type
    Description of i.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Copy_String(value, value, value)
Expected output
""""""","import unittest

class TestCopy_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Copy_String(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Copy_String(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def counting_sort(alist, largest):
    c = [0]*(largest + 1)
    for i in range(len(alist)):
        c[alist[i]] = c[alist[i]] + 1

    # Find the last index for each element
    c[0] = c[0] - 1 # to decrement each element for zero-based indexing
    for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]

    result = [None]*len(alist)

    # Though it is not required here,
    # it becomes necessary to reverse the list
    # when this function needs to be a stable sort
    for x in reversed(alist):
        result[c[x]] = x
        c[x] = c[x] - 1

    return result


alist = input('Enter the list of (nonnegative) numbers: ').split()
alist = [int(x) for x in alist]
k = max(alist)
sorted_list = counting_sort(alist, k)
print('Sorted list: ', end='')
print(sorted_list)","""""""
Brief Description:
------------------
counting_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `counting_sort`, takes 2 parameters: alist,  largest. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
largest : type
    Description of largest.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> counting_sort(value, value)
Expected output
""""""","import unittest

class TestCounting_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = counting_sort(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = counting_sort(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def fibonacci(n):
    if(n <= 1):
        return n
    else:
        return(fibonacci(n-1) + fibonacci(n-2))
n = int(input(""Enter number of terms:""))
print(""Fibonacci sequence:"")
for i in range(n):
    print(fibonacci(i))","""""""
Brief Description:
------------------
fibonacci function performs a specific operation as described below.

Extended Description:
---------------------
This function, `fibonacci`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> fibonacci(value)
Expected output
""""""","import unittest

class TestFibonacci(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = fibonacci(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = fibonacci(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_max_subarray(alist, start, end):
    """"""Returns (l, r, m) such that alist[l:r] is the maximum subarray in
    A[start:end] with sum m. Here A[start:end] means all A[x] for start <= x <
    end.""""""
    max_ending_at_i = max_seen_so_far = alist[start]
    max_left_at_i = max_left_so_far = start
    # max_right_at_i is always i + 1
    max_right_so_far = start + 1
    for i in range(start + 1, end):
        if max_ending_at_i > 0:
            max_ending_at_i += alist[i]
        else:
            max_ending_at_i = alist[i]
            max_left_at_i = i
        if max_ending_at_i > max_seen_so_far:
            max_seen_so_far = max_ending_at_i
            max_left_so_far = max_left_at_i
            max_right_so_far = i + 1
    return max_left_so_far, max_right_so_far, max_seen_so_far


alist = input('Enter the list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
start, end, maximum = find_max_subarray(alist, 0, len(alist))
print('The maximum subarray starts at index {}, ends at index {}'
      ' and has sum {}.'.format(start, end - 1, maximum))","""""""
Brief Description:
------------------
find_max_subarray function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_max_subarray`, takes 3 parameters: alist,  start,  end. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
start : type
    Description of start.
end : type
    Description of end.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_max_subarray(value, value, value)
Expected output
""""""","import unittest

class TestFind_max_subarray(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_max_subarray(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_max_subarray(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def check(n):
    if (n < 2):
        return (n % 2 == 0)
    return (check(n - 2))
n=int(input(""Enter number:""))
if(check(n)==True):
      print(""Number is even!"")
else:
      print(""Number is odd!"")","""""""
Brief Description:
------------------
check function performs a specific operation as described below.

Extended Description:
---------------------
This function, `check`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> check(value)
Expected output
""""""","import unittest

class TestCheck(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = check(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = check(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def matrix_product(p):
    """"""Return m and s.

    m[i][j] is the minimum number of scalar multiplications needed to compute the
    product of matrices A(i), A(i + 1), ..., A(j).

    s[i][j] is the index of the matrix after which the product is split in an
    optimal parenthesization of the matrix product.

    p[0... n] is a list such that matrix A(i) has dimensions p[i - 1] x p[i].
    """"""
    length = len(p) # len(p) = number of matrices + 1

    # m[i][j] is the minimum number of multiplications needed to compute the
    # product of matrices A(i), A(i+1), ..., A(j)
    # s[i][j] is the matrix after which the product is split in the minimum
    # number of multiplications needed
    m = [[-1]*length for _ in range(length)]
    s = [[-1]*length for _ in range(length)]

    matrix_product_helper(p, 1, length - 1, m, s)

    return m, s


def matrix_product_helper(p, start, end, m, s):
    """"""Return minimum number of scalar multiplications needed to compute the
    product of matrices A(start), A(start + 1), ..., A(end).

    The minimum number of scalar multiplications needed to compute the
    product of matrices A(i), A(i + 1), ..., A(j) is stored in m[i][j].

    The index of the matrix after which the above product is split in an optimal
    parenthesization is stored in s[i][j].

    p[0... n] is a list such that matrix A(i) has dimensions p[i - 1] x p[i].
    """"""
    if m[start][end] >= 0:
        return m[start][end]

    if start == end:
        q = 0
    else:
        q = float('inf')
        for k in range(start, end):
            temp = matrix_product_helper(p, start, k, m, s) \
                   + matrix_product_helper(p, k + 1, end, m, s) \
                   + p[start - 1]*p[k]*p[end]
            if q > temp:
                q = temp
                s[start][end] = k

    m[start][end] = q
    return q


def print_parenthesization(s, start, end):
    """"""Print the optimal parenthesization of the matrix product A(start) x
    A(start + 1) x ... x A(end).

    s[i][j] is the index of the matrix after which the product is split in an
    optimal parenthesization of the matrix product.
    """"""
    if start == end:
        print('A[{}]'.format(start), end='')
        return

    k = s[start][end]

    print('(', end='')
    print_parenthesization(s, start, k)
    print_parenthesization(s, k + 1, end)
    print(')', end='')


n = int(input('Enter number of matrices: '))
p = []
for i in range(n):
    temp = int(input('Enter number of rows in matrix {}: '.format(i + 1)))
    p.append(temp)
temp = int(input('Enter number of columns in matrix {}: '.format(n)))
p.append(temp)

m, s = matrix_product(p)
print('The number of scalar multiplications needed:', m[1][n])
print('Optimal parenthesization: ', end='')
print_parenthesization(s, 1, n)","""""""
Brief Description:
------------------
matrix_product function performs a specific operation as described below.

Extended Description:
---------------------
This function, `matrix_product`, takes 1 parameters: p. It is designed to perform a certain task using these parameters.

Parameters:
-----------
p : type
    Description of p.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> matrix_product(value)
Expected output
""""""","import unittest

class TestMatrix_product(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = matrix_product(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = matrix_product(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def change(string):
      return string[-1:] + string[1:-1] + string[:1]
string=raw_input(""Enter string:"")
print(""Modified string:"")
print(change(string))","""""""
Brief Description:
------------------
change function performs a specific operation as described below.

Extended Description:
---------------------
This function, `change`, takes 1 parameters: string. It is designed to perform a certain task using these parameters.

Parameters:
-----------
string : type
    Description of string.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> change(value)
Expected output
""""""","import unittest

class TestChange(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = change(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = change(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def SumOfNaturalNumber(n):  if n>0:    return n+SumOfNaturalNumber(n-1)  else:    return nn=int(input(""Enter the N Number:""))print(""Sum of N Natural Number Using Recursion is:"",SumOfNaturalNumber(n))","""""""
Brief Description:
------------------
SumOfNaturalNumber function performs a specific operation as described below.

Extended Description:
---------------------
This function, `SumOfNaturalNumber`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> SumOfNaturalNumber(value)
Expected output
""""""","import unittest

class TestSumofnaturalnumber(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = SumOfNaturalNumber(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = SumOfNaturalNumber(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def gcd(a,b):
    if(b==0):
        return a
    else:
        return gcd(b,a%b)
a=int(input(""Enter first number:""))
b=int(input(""Enter second number:""))
GCD=gcd(a,b)
print(""GCD is: "")
print(GCD)","""""""
Brief Description:
------------------
gcd function performs a specific operation as described below.

Extended Description:
---------------------
This function, `gcd`, takes 2 parameters: a, b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> gcd(value, value)
Expected output
""""""","import unittest

class TestGcd(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = gcd(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = gcd(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum_arr(arr,size):
   if (size == 0):
     return 0
   else:
     return arr[size-1] + sum_arr(arr,size-1)
n=int(input(""Enter the number of elements for list:""))
a=[]
for i in range(0,n):
    element=int(input(""Enter element:""))
    a.append(element)
print(""The list is:"")
print(a)
print(""Sum of items in list:"")
b=sum_arr(a,n)
print(b)","""""""
Brief Description:
------------------
sum_arr function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum_arr`, takes 2 parameters: arr, size. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
size : type
    Description of size.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum_arr(value, value)
Expected output
""""""","import unittest

class TestSum_arr(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum_arr(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum_arr(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def matrix_product(p):
    """"""Return m and s.

    m[i][j] is the minimum number of scalar multiplications needed to compute the
    product of matrices A(i), A(i + 1), ..., A(j).

    s[i][j] is the index of the matrix after which the product is split in an
    optimal parenthesization of the matrix product.

    p[0... n] is a list such that matrix A(i) has dimensions p[i - 1] x p[i].
    """"""
    length = len(p) # len(p) = number of matrices + 1

    # m[i][j] is the minimum number of multiplications needed to compute the
    # product of matrices A(i), A(i+1), ..., A(j)
    # s[i][j] is the matrix after which the product is split in the minimum
    # number of multiplications needed
    m = [[-1]*length for _ in range(length)]
    s = [[-1]*length for _ in range(length)]

    for i in range(1, length):
        m[i][i] = 0

    for chain_length in range(2, length):
        for start in range(1, length - chain_length + 1):
            end = start + chain_length - 1
            q = float('inf')
            for k in range(start, end):
                temp = m[start][k] + m[k + 1][end] + p[start - 1]*p[k]*p[end]
                if temp < q:
                    q = temp
                    s[start][end] = k
            m[start][end] = q

    return m, s


def print_parenthesization(s, start, end):
    """"""Print the optimal parenthesization of the matrix product A(start) x
    A(start + 1) x ... x A(end).

    s[i][j] is the index of the matrix after which the product is split in an
    optimal parenthesization of the matrix product.
    """"""
    if start == end:
        print('A[{}]'.format(start), end='')
        return

    k = s[start][end]

    print('(', end='')
    print_parenthesization(s, start, k)
    print_parenthesization(s, k + 1, end)
    print(')', end='')


n = int(input('Enter number of matrices: '))
p = []
for i in range(n):
    temp = int(input('Enter number of rows in matrix {}: '.format(i + 1)))
    p.append(temp)
temp = int(input('Enter number of columns in matrix {}: '.format(n)))
p.append(temp)

m, s = matrix_product(p)
print('The number of scalar multiplications needed:', m[1][n])
print('Optimal parenthesization: ', end='')
print_parenthesization(s, 1, n)","""""""
Brief Description:
------------------
matrix_product function performs a specific operation as described below.

Extended Description:
---------------------
This function, `matrix_product`, takes 1 parameters: p. It is designed to perform a certain task using these parameters.

Parameters:
-----------
p : type
    Description of p.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> matrix_product(value)
Expected output
""""""","import unittest

class TestMatrix_product(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = matrix_product(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = matrix_product(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def smallest_unit_length_intervals(points):
    """"""Return smallest set with unit-length intervals that includes all points.

    A smallest set containing closed intervals is returned such that each point
    is included in some interval.
    The intervals are in the form of tuples (a, b).

    points is a list of points on the x-axis.
    """"""
    points.sort()

    smallest_set = set()
    end_of_last_interval = float('-inf')
    for p in points:
        if end_of_last_interval <= p:
            interval = (p, p + 1)
            smallest_set.add(interval)
            end_of_last_interval = p + 1

    return smallest_set


points = input('Enter the points: ').split()
points = [float(p) for p in points]

ans = smallest_unit_length_intervals(points)
print('A smallest-size set containing unit-length intervals '
      'that contain all of these points is', ans)","""""""
Brief Description:
------------------
smallest_unit_length_intervals function performs a specific operation as described below.

Extended Description:
---------------------
This function, `smallest_unit_length_intervals`, takes 1 parameters: points. It is designed to perform a certain task using these parameters.

Parameters:
-----------
points : type
    Description of points.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> smallest_unit_length_intervals(value)
Expected output
""""""","import unittest

class TestSmallest_unit_length_intervals(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = smallest_unit_length_intervals(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = smallest_unit_length_intervals(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def knapsack(value, weight, capacity):
    """"""Return the maximum value of items that doesn't exceed capacity.

    value[i] is the value of item i and weight[i] is the weight of item i
    for 1 <= i <= n where n is the number of items.

    capacity is the maximum weight.
    """"""
    n = len(value) - 1

    # m[i][w] will store the maximum value that can be attained with a maximum
    # capacity of w and using only the first i items
    m = [[-1]*(capacity + 1) for _ in range(n + 1)]

    for w in range(capacity + 1):
        m[0][w] = 0

    for i in range(1, n + 1):
        for w in range(capacity + 1):
            if weight[i] > w:
                m[i][w] = m[i - 1][w]
            else:
                m[i][w] = max(m[i - 1][w - weight[i]] + value[i], 
                              m[i - 1][w])

    return m[n][capacity]


n = int(input('Enter number of items: '))
value = input('Enter the values of the {} item(s) in order: '
              .format(n)).split()
value = [int(v) for v in value]
value.insert(0, None) # so that the value of the ith item is at value[i]
weight = input('Enter the positive weights of the {} item(s) in order: '
               .format(n)).split()
weight = [int(w) for w in weight]
weight.insert(0, None) # so that the weight of the ith item is at weight[i]
capacity = int(input('Enter maximum weight: '))

ans = knapsack(value, weight, capacity)
print('The maximum value of items that can be carried:', ans)","""""""
Brief Description:
------------------
knapsack function performs a specific operation as described below.

Extended Description:
---------------------
This function, `knapsack`, takes 3 parameters: value,  weight,  capacity. It is designed to perform a certain task using these parameters.

Parameters:
-----------
value : type
    Description of value.
weight : type
    Description of weight.
capacity : type
    Description of capacity.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> knapsack(value, value, value)
Expected output
""""""","import unittest

class TestKnapsack(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = knapsack(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = knapsack(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def product(a,b):
    if(a<b):
        return product(b,a)
    elif(b!=0):
        return(a+product(a,b-1))
    else:
        return 0
a=int(input(""Enter first number: ""))
b=int(input(""Enter second number: ""))
print(""Product is: "",product(a,b))","""""""
Brief Description:
------------------
product function performs a specific operation as described below.

Extended Description:
---------------------
This function, `product`, takes 2 parameters: a, b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> product(value, value)
Expected output
""""""","import unittest

class TestProduct(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = product(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = product(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def odd(num1,num2):  if num1>num2:    return  print(num1,end="" "")  return odd(num1+2,num2)num1=1print(""Enter your Limit:"")num2=int(input())print(""All odd number given range are:"")odd(num1,num2)","""""""
Brief Description:
------------------
odd function performs a specific operation as described below.

Extended Description:
---------------------
This function, `odd`, takes 2 parameters: num1, num2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num1 : type
    Description of num1.
num2 : type
    Description of num2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> odd(value, value)
Expected output
""""""","import unittest

class TestOdd(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = odd(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = odd(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def cocktail_shaker_sort(alist):
    def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]

    upper = len(alist) - 1
    lower = 0

    no_swap = False
    while (not no_swap and upper - lower > 1):
        no_swap = True
        for j in range(lower, upper):
            if alist[j + 1] < alist[j]:
                swap(j + 1, j)
                no_swap = False
        upper = upper - 1

        for j in range(upper, lower, -1):
            if alist[j - 1] > alist[j]:
                swap(j - 1, j)
                no_swap = False
        lower = lower + 1


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
cocktail_shaker_sort(alist)
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
cocktail_shaker_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `cocktail_shaker_sort`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> cocktail_shaker_sort(value)
Expected output
""""""","import unittest

class TestCocktail_shaker_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = cocktail_shaker_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = cocktail_shaker_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Find_mean(arr,size):  sum=0  for i in range(0, size):    sum+=arr[i]  mean=sum/size  print(""Mean = "",mean)def Find_median(arr,size):  arr.sort()  if size%2==1:    median=arr[size//2]    print(""\nMedian= "",median)  else:    median = (arr[size // 2] + (arr[(size // 2) - 1])) / 2.0    print(""\nMedian= "", median)arr=[]size = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,size):  num = int(input())  arr.append(num)Find_mean(arr,size)Find_median(arr,size)","""""""
Brief Description:
------------------
Find_mean function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Find_mean`, takes 2 parameters: arr, size. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
size : type
    Description of size.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Find_mean(value, value)
Expected output
""""""","import unittest

class TestFind_mean(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Find_mean(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Find_mean(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def binary_search(alist, start, end, key):
    """"""Search key in alist[start... end - 1].""""""
    if not start < end:
        return -1

    mid = (start + end)//2
    if alist[mid] < key:
        return binary_search(alist, mid + 1, end, key)
    elif alist[mid] > key:
        return binary_search(alist, start, mid, key)
    else:
        return mid


alist = input('Enter the sorted list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
key = int(input('The number to search for: '))

index = binary_search(alist, 0, len(alist), key)
if index < 0:
    print('{} was not found.'.format(key))
else:
    print('{} was found at index {}.'.format(key, index))","""""""
Brief Description:
------------------
binary_search function performs a specific operation as described below.

Extended Description:
---------------------
This function, `binary_search`, takes 4 parameters: alist,  start,  end,  key. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
start : type
    Description of start.
end : type
    Description of end.
key : type
    Description of key.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> binary_search(value, value, value, value)
Expected output
""""""","import unittest

class TestBinary_search(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = binary_search(value, value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = binary_search(None, None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def interval_scheduling(stimes, ftimes):
    """"""Return largest set of mutually compatible activities.

    This will return a maximum-set subset of activities (numbered from 0 to n -
    1) that are mutually compatible. Two activities are mutually compatible if
    the start time of one activity is not less then the finish time of the other.

    stimes[i] is the start time of activity i.
    ftimes[i] is the finish time of activity i.
    """"""
    # index = [0, 1, 2, ..., n - 1] for n items
    index = list(range(len(stimes)))
    # sort according to finish times
    index.sort(key=lambda i: ftimes[i])

    maximal_set = set()
    prev_finish_time = 0
    for i in index:
        if stimes[i] >= prev_finish_time:
            maximal_set.add(i)
            prev_finish_time = ftimes[i]

    return maximal_set


n = int(input('Enter number of activities: '))
stimes = input('Enter the start time of the {} activities in order: '
              .format(n)).split()
stimes = [int(st) for st in stimes]
ftimes = input('Enter the finish times of the {} activities in order: '
               .format(n)).split()
ftimes = [int(ft) for ft in ftimes]

ans = interval_scheduling(stimes, ftimes)
print('A maximum-size subset of activities that are mutually compatible is', ans)","""""""
Brief Description:
------------------
interval_scheduling function performs a specific operation as described below.

Extended Description:
---------------------
This function, `interval_scheduling`, takes 2 parameters: stimes,  ftimes. It is designed to perform a certain task using these parameters.

Parameters:
-----------
stimes : type
    Description of stimes.
ftimes : type
    Description of ftimes.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> interval_scheduling(value, value)
Expected output
""""""","import unittest

class TestInterval_scheduling(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = interval_scheduling(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = interval_scheduling(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def quicksort(alist, start, end):
    '''Sorts the list from indexes start to end - 1 inclusive.'''
    if end - start > 1:
        p = partition(alist, start, end)
        quicksort(alist, start, p)
        quicksort(alist, p + 1, end)


def partition(alist, start, end):
    pivot = alist[start]
    i = start + 1
    j = end - 1

    while True:
        while (i <= j and alist[i] <= pivot):
            i = i + 1
        while (i <= j and alist[j] >= pivot):
            j = j - 1

        if i <= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
quicksort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
quicksort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `quicksort`, takes 3 parameters: alist,  start,  end. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
start : type
    Description of start.
end : type
    Description of end.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> quicksort(value, value, value)
Expected output
""""""","import unittest

class TestQuicksort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = quicksort(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = quicksort(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def bubble_sort(alist):
    for i in range(len(alist) - 1, 0, -1):
        no_swap = True
        for j in range(0, i):
            if alist[j + 1] < alist[j]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]
                no_swap = False
        if no_swap:
            return


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
bubble_sort(alist)
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
bubble_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `bubble_sort`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> bubble_sort(value)
Expected output
""""""","import unittest

class TestBubble_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = bubble_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = bubble_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def hanoi(disks, source, auxiliary, target):
    if disks == 1:
        print('Move disk 1 from peg {} to peg {}.'.format(source, target))
        return

    hanoi(disks - 1, source, target, auxiliary)
    print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))
    hanoi(disks - 1, auxiliary, source, target)


disks = int(input('Enter number of disks: '))
hanoi(disks, 'A', 'B', 'C')","""""""
Brief Description:
------------------
hanoi function performs a specific operation as described below.

Extended Description:
---------------------
This function, `hanoi`, takes 4 parameters: disks,  source,  auxiliary,  target. It is designed to perform a certain task using these parameters.

Parameters:
-----------
disks : type
    Description of disks.
source : type
    Description of source.
auxiliary : type
    Description of auxiliary.
target : type
    Description of target.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> hanoi(value, value, value, value)
Expected output
""""""","import unittest

class TestHanoi(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = hanoi(value, value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = hanoi(None, None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def ReverseArray(arr,n):  if(n>0):    i=n-1    print(arr[i], end="" "")    ReverseArray(arr, i)arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):  num = int(input())  arr.append(num)print(""After reversing Array Element Are:"")ReverseArray(arr,n)","""""""
Brief Description:
------------------
ReverseArray function performs a specific operation as described below.

Extended Description:
---------------------
This function, `ReverseArray`, takes 2 parameters: arr, n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> ReverseArray(value, value)
Expected output
""""""","import unittest

class TestReversearray(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = ReverseArray(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = ReverseArray(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def intersection(a, b):
    return list(set(a) & set(b))

def main():
    alist=[]
    blist=[]
    n1=int(input(""Enter number of elements for list1:""))
    n2=int(input(""Enter number of elements for list2:""))
    print(""For list1:"")
    for x in range(0,n1):
        element=int(input(""Enter element"" + str(x+1) + "":""))
        alist.append(element)
    print(""For list2:"")
    for x in range(0,n2):
        element=int(input(""Enter element"" + str(x+1) + "":""))
        blist.append(element)
    print(""The intersection is :"")
    print(intersection(alist, blist))
main()","""""""
Brief Description:
------------------
intersection function performs a specific operation as described below.

Extended Description:
---------------------
This function, `intersection`, takes 2 parameters: a,  b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> intersection(value, value)
Expected output
""""""","import unittest

class TestIntersection(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = intersection(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = intersection(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def binary_insertion_sort(alist):
    for i in range(1, len(alist)):
        temp = alist[i]
        pos = binary_search(alist, temp, 0, i) + 1

        for k in range(i, pos, -1):
            alist[k] = alist[k - 1]

        alist[pos] = temp

def binary_search(alist, key, start, end):
    '''If key is in the list at index p, then return p.
    If there are multiple such keys in the list, then return the index of any one.
    If key is not in the list and a < key < b where a and b are elements in the list, then return the index of a.
    If key is not in the list and key < a where a is the first element in the list, then return -1.
    Only elements with indexes start to end - 1 inclusive are considered.
    '''
    if end - start <= 1:
        if key < alist[start]:
            return start - 1
        else:
            return start

    mid = (start + end)//2
    if alist[mid] < key:
        return binary_search(alist, key, mid, end)
    elif alist[mid] > key:
        return binary_search(alist, key, start, mid)
    else:
        return mid


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
binary_insertion_sort(alist)
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
binary_insertion_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `binary_insertion_sort`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> binary_insertion_sort(value)
Expected output
""""""","import unittest

class TestBinary_insertion_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = binary_insertion_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = binary_insertion_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def PrintArray(arr,i,n):  if(i>=n):    return  print(arr[i],end="" "")  PrintArray(arr,i+1,n)arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):  num = int(input())  arr.append(num)print(""Array Element Are:"")PrintArray(arr,0,n)","""""""
Brief Description:
------------------
PrintArray function performs a specific operation as described below.

Extended Description:
---------------------
This function, `PrintArray`, takes 3 parameters: arr, i, n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
i : type
    Description of i.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> PrintArray(value, value, value)
Expected output
""""""","import unittest

class TestPrintarray(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = PrintArray(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = PrintArray(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_odd_occurring(alist):
    """"""Return the element that occurs odd number of times in alist.

    alist is a list in which all elements except one element occurs an even
    number of times.
    """"""
    ans = 0

    for element in alist:
        ans ^= element

    return ans


alist = input('Enter the list: ').split()
alist = [int(i) for i in alist]
ans = find_odd_occurring(alist)
print('The element that occurs odd number of times:', ans)","""""""
Brief Description:
------------------
find_odd_occurring function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_odd_occurring`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_odd_occurring(value)
Expected output
""""""","import unittest

class TestFind_odd_occurring(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_odd_occurring(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_odd_occurring(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def binary_search(arr, start, end, Search_ele):  if(start>end):    return -1  mid=(int)((start+end)/2)  if(arr[mid]==Search_ele):    return mid  if (Search_ele < arr[mid]):    return (binary_search(arr, start, mid - 1, Search_ele))  else:    return (binary_search(arr, mid + 1, end, Search_ele))arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):  num = int(input())  arr.append(num)Search_ele=int(input(""Enter the search element:""))pos=binary_search(arr, 0, n, Search_ele)if (pos== -1):  print(Search_ele,"" not found in array"")else:  print(Search_ele,"" found at "",""arr["",pos,""]"")","""""""
Brief Description:
------------------
binary_search function performs a specific operation as described below.

Extended Description:
---------------------
This function, `binary_search`, takes 4 parameters: arr,  start,  end,  Search_ele. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
start : type
    Description of start.
end : type
    Description of end.
Search_ele : type
    Description of Search_ele.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> binary_search(value, value, value, value)
Expected output
""""""","import unittest

class TestBinary_search(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = binary_search(value, value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = binary_search(None, None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def flatten(S):
    if S == []:
        return S
    if isinstance(S[0], list):
        return flatten(S[0]) + flatten(S[1:])
    return S[:1] + flatten(S[1:])
s=[[1,2],[3,4]]
print(""Flattened list is: "",flatten(s))","""""""
Brief Description:
------------------
flatten function performs a specific operation as described below.

Extended Description:
---------------------
This function, `flatten`, takes 1 parameters: S. It is designed to perform a certain task using these parameters.

Parameters:
-----------
S : type
    Description of S.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> flatten(value)
Expected output
""""""","import unittest

class TestFlatten(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = flatten(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = flatten(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def gcd(num1,num2):  if num2==0:    return num1  else:    return gcd(num2,num1%num2)print(""Enter the two Number:"")num1=int(input())num2=int(input())print(""Gcd of Given Numbers Using Recursion is:"",gcd(num1,num2))","""""""
Brief Description:
------------------
gcd function performs a specific operation as described below.

Extended Description:
---------------------
This function, `gcd`, takes 2 parameters: num1, num2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num1 : type
    Description of num1.
num2 : type
    Description of num2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> gcd(value, value)
Expected output
""""""","import unittest

class TestGcd(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = gcd(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = gcd(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Find_Factorial(len1):  fact = 1  for i in range(1, len1+1):    fact = fact * i  return factdef Find_Lexicographic_Rank(str,len1):  rank = 1  for inn in range(0, len1):    count=0    for out in range(inn+1, len1+1):      if str[inn] > str[out]:        count+=1    rank+=count*Find_Factorial(len1-inn)  return rankstr=input(""Enter Your String:"")print(""Lexicographic Rank of given String is: "",Find_Lexicographic_Rank(str,len(str)-1))","""""""
Brief Description:
------------------
Find_Factorial function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Find_Factorial`, takes 1 parameters: len1. It is designed to perform a certain task using these parameters.

Parameters:
-----------
len1 : type
    Description of len1.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Find_Factorial(value)
Expected output
""""""","import unittest

class TestFind_factorial(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Find_Factorial(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Find_Factorial(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def gcd(num1,num2):  if num2==0:    return num1  else:    return gcd(num2,num1%num2)def lcm(num1,num2):  return (num1 * num2) // gcd(num1, num2)print(""Enter the two Number:"")num1=int(input())num2=int(input())print(""Lcm of Given Numbers Using Recursion is:"",lcm(num1,num2))","""""""
Brief Description:
------------------
gcd function performs a specific operation as described below.

Extended Description:
---------------------
This function, `gcd`, takes 2 parameters: num1, num2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num1 : type
    Description of num1.
num2 : type
    Description of num2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> gcd(value, value)
Expected output
""""""","import unittest

class TestGcd(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = gcd(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = gcd(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def binary_to_gray(n):
    """"""Convert Binary to Gray codeword and return it.""""""
    n = int(n, 2) # convert to int
    n ^= (n >> 1)

    # bin(n) returns n's binary representation with a '0b' prefixed
    # the slice operation is to remove the prefix
    return bin(n)[2:]


g = input('Enter binary number: ')
b = binary_to_gray(g)
print('Gray codeword:', b)","""""""
Brief Description:
------------------
binary_to_gray function performs a specific operation as described below.

Extended Description:
---------------------
This function, `binary_to_gray`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> binary_to_gray(value)
Expected output
""""""","import unittest

class TestBinary_to_gray(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = binary_to_gray(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = binary_to_gray(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Reverse_String(str):  if not str:    return str  else:    return Reverse_String(str[1:]) + str[0]str=input(""Enter your String:"")print(""After Reversing String is: "",Reverse_String(str))","""""""
Brief Description:
------------------
Reverse_String function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Reverse_String`, takes 1 parameters: str. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Reverse_String(value)
Expected output
""""""","import unittest

class TestReverse_string(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Reverse_String(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Reverse_String(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def fact(x):
    if x == 0:
        return 1
    return x * fact(x - 1)

x=int(raw_input())
print fact(x)
","""""""
Brief Description:
------------------
fact function performs a specific operation as described below.

Extended Description:
---------------------
This function, `fact`, takes 1 parameters: x. It is designed to perform a certain task using these parameters.

Parameters:
-----------
x : type
    Description of x.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> fact(value)
Expected output
""""""","import unittest

class TestFact(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = fact(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = fact(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def power(base,exp):
    if(exp==1):
        return(base)
    if(exp!=1):
        return(base*power(base,exp-1))
base=int(input(""Enter base: ""))
exp=int(input(""Enter exponential value: ""))
print(""Result:"",power(base,exp))","""""""
Brief Description:
------------------
power function performs a specific operation as described below.

Extended Description:
---------------------
This function, `power`, takes 2 parameters: base, exp. It is designed to perform a certain task using these parameters.

Parameters:
-----------
base : type
    Description of base.
exp : type
    Description of exp.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> power(value, value)
Expected output
""""""","import unittest

class TestPower(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = power(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = power(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def gray_to_binary(n):
    """"""Convert Gray codeword to binary and return it.""""""
    n = int(n, 2) # convert to int

    mask = n
    while mask != 0:
        mask >>= 1
        n ^= mask

    # bin(n) returns n's binary representation with a '0b' prefixed
    # the slice operation is to remove the prefix
    return bin(n)[2:]


g = input('Enter Gray codeword: ')
b = gray_to_binary(g)
print('In binary:', b)","""""""
Brief Description:
------------------
gray_to_binary function performs a specific operation as described below.

Extended Description:
---------------------
This function, `gray_to_binary`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> gray_to_binary(value)
Expected output
""""""","import unittest

class TestGray_to_binary(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = gray_to_binary(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = gray_to_binary(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def find_max_subarray(alist, start, end):
    """"""Returns (l, r, m) such that alist[l:r] is the maximum subarray in
    A[start:end] with sum m. Here A[start:end] means all A[x] for start <= x <
    end.""""""
    # base case
    if start == end - 1:
        return start, end, alist[start]
    else:
        mid = (start + end)//2
        left_start, left_end, left_max = find_max_subarray(alist, start, mid)
        right_start, right_end, right_max = find_max_subarray(alist, mid, end)
        cross_start, cross_end, cross_max = find_max_crossing_subarray(alist, start, mid, end)
        if (left_max > right_max and left_max > cross_max):
            return left_start, left_end, left_max
        elif (right_max > left_max and right_max > cross_max):
            return right_start, right_end, right_max
        else:
            return cross_start, cross_end, cross_max

def find_max_crossing_subarray(alist, start, mid, end):
    """"""Returns (l, r, m) such that alist[l:r] is the maximum subarray within
    alist with start <= l < mid <= r < end with sum m. The arguments start, mid,
    end must satisfy start <= mid <= end.""""""
    sum_left = float('-inf')
    sum_temp = 0
    cross_start = mid
    for i in range(mid - 1, start - 1, -1):
        sum_temp = sum_temp + alist[i]
        if sum_temp > sum_left:
            sum_left = sum_temp
            cross_start = i

    sum_right = float('-inf')
    sum_temp = 0
    cross_end = mid + 1
    for i in range(mid, end):
        sum_temp = sum_temp + alist[i]
        if sum_temp > sum_right:
            sum_right = sum_temp
            cross_end = i + 1
    return cross_start, cross_end, sum_left + sum_right

alist = input('Enter the list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
start, end, maximum = find_max_subarray(alist, 0, len(alist))
print('The maximum subarray starts at index {}, ends at index {}'
      ' and has sum {}.'.format(start, end - 1, maximum))","""""""
Brief Description:
------------------
find_max_subarray function performs a specific operation as described below.

Extended Description:
---------------------
This function, `find_max_subarray`, takes 3 parameters: alist,  start,  end. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
start : type
    Description of start.
end : type
    Description of end.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> find_max_subarray(value, value, value)
Expected output
""""""","import unittest

class TestFind_max_subarray(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = find_max_subarray(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = find_max_subarray(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def count_paths(m, n, holes):
    """"""Return number of paths from (0, 0) to (m, n) in an m x n grid.

    holes is a list of tuples (x, y) where each tuple is a coordinate which is
    blocked for a path.
    """"""
    paths = [[-1]*(m + 1) for _ in range(n + 1)]

    if (0, 0) in holes:
        paths[0][0] = 0
    else:
        paths[0][0] = 1

    for x in range(1, n + 1):
        if (x, 0) in holes:
            paths[x][0] = 0
        else:
            paths[x][0] = paths[x - 1][0]

    for y in range(1, m + 1):
        if (0, y) in holes:
            paths[0][y] = 0
        else:
            paths[0][y] = paths[0][y - 1]

    for x in range(1, n + 1):
        for y in range(1, m + 1):
            if (x, y) in holes:
                paths[x][y] = 0
            else:
                paths[x][y] = paths[x - 1][y] + paths[x][y - 1]

    return paths[n][m]


m, n = input('Enter m, n for the size of the m x n grid (m rows and n columns): ').split(',')
m = int(m)
n = int(n)
print('Enter the coordinates of holes on each line (empty line to stop): ')
holes = []
while True:
    hole = input('')
    if not hole.strip():
        break
    hole = hole.split(',')
    hole = (int(hole[0]), int(hole[1]))
    holes.append(hole)

count = count_paths(m, n, holes)
print('Number of paths from (0, 0) to ({}, {}): {}.'.format(n, m, count))","""""""
Brief Description:
------------------
count_paths function performs a specific operation as described below.

Extended Description:
---------------------
This function, `count_paths`, takes 3 parameters: m,  n,  holes. It is designed to perform a certain task using these parameters.

Parameters:
-----------
m : type
    Description of m.
n : type
    Description of n.
holes : type
    Description of holes.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> count_paths(value, value, value)
Expected output
""""""","import unittest

class TestCount_paths(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = count_paths(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = count_paths(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def merge_sort(alist, start, end):
    '''Sorts the list from indexes start to end - 1 inclusive.'''
    if end - start > 1:
        mid = (start + end)//2
        merge_sort(alist, start, mid)
        merge_sort(alist, mid, end)
        merge_list(alist, start, mid, end)

def merge_list(alist, start, mid, end):
    left = alist[start:mid]
    right = alist[mid:end]
    k = start
    i = 0
    j = 0
    while (start + i < mid and mid + j < end):
        if (left[i] <= right[j]):
            alist[k] = left[i]
            i = i + 1
        else:
            alist[k] = right[j]
            j = j + 1
        k = k + 1
    if start + i < mid:
        while k < end:
            alist[k] = left[i]
            i = i + 1
            k = k + 1
    else:
        while k < end:
            alist[k] = right[j]
            j = j + 1
            k = k + 1


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
merge_sort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
merge_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `merge_sort`, takes 3 parameters: alist,  start,  end. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
start : type
    Description of start.
end : type
    Description of end.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> merge_sort(value, value, value)
Expected output
""""""","import unittest

class TestMerge_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = merge_sort(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = merge_sort(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Multiplication(num1,num2):  if num1<num2:    return Multiplication(num2, num1)  elif num2!=0:    return num1 + Multiplication(num1, num2 - 1)  else:    return 0print(""Enter the two Number:"")num1=int(input())num2=int(input())print(""Multiplication of Two Number Using Recursion is: "",Multiplication(num1,num2))","""""""
Brief Description:
------------------
Multiplication function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Multiplication`, takes 2 parameters: num1, num2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num1 : type
    Description of num1.
num2 : type
    Description of num2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Multiplication(value, value)
Expected output
""""""","import unittest

class TestMultiplication(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Multiplication(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Multiplication(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def introsort(alist):
    maxdepth = (len(alist).bit_length() - 1)*2
    introsort_helper(alist, 0, len(alist), maxdepth)

def introsort_helper(alist, start, end, maxdepth):
    if end - start <= 1:
        return
    elif maxdepth == 0:
        heapsort(alist, start, end)
    else:
        p = partition(alist, start, end)
        introsort_helper(alist, start, p + 1, maxdepth - 1)
        introsort_helper(alist, p + 1, end, maxdepth - 1)

def partition(alist, start, end):
    pivot = alist[start]
    i = start - 1
    j = end

    while True:
        i = i + 1
        while alist[i] < pivot:
            i = i + 1
        j = j - 1
        while alist[j] > pivot:
            j = j - 1

        if i >= j:
            return j

        swap(alist, i, j)

def swap(alist, i, j):
    alist[i], alist[j] = alist[j], alist[i]

def heapsort(alist, start, end):
    build_max_heap(alist, start, end)
    for i in range(end - 1, start, -1):
        swap(alist, start, i)
        max_heapify(alist, index=0, start=start, end=i)

def build_max_heap(alist, start, end):
    def parent(i):
        return (i - 1)//2
    length = end - start
    index = parent(length - 1)
    while index >= 0:
        max_heapify(alist, index, start, end)
        index = index - 1

def max_heapify(alist, index, start, end):
    def left(i):
        return 2*i + 1
    def right(i):
        return 2*i + 2

    size = end - start
    l = left(index)
    r = right(index)
    if (l < size and alist[start + l] > alist[start + index]):
        largest = l
    else:
        largest = index
    if (r < size and alist[start + r] > alist[start + largest]):
        largest = r
    if largest != index:
        swap(alist, start + largest, start + index)
        max_heapify(alist, largest, start, end)


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
introsort(alist)
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
introsort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `introsort`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> introsort(value)
Expected output
""""""","import unittest

class TestIntrosort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = introsort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = introsort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Find_median(arr,arr2,size,size2):  m_size = size + size2  merge_arr = [0]*m_size  i=0  k=0  j=0  while k<m_size:   if i<size:     merge_arr[k] = arr[i]     i+=1     k+=1   if j<size2:     merge_arr[k] = arr2[j]     j+=1     k+=1  merge_arr.sort()  if size % 2 == 1:    median = merge_arr[size // 2]    print(""\nMedian= "", median)  else:    median = (merge_arr[m_size // 2] + (merge_arr[(m_size // 2) - 1])) / 2.0    print(""\nMedian= "", median)arr=[]arr2=[]size = int(input(""Enter the size of the 1st array: ""))size2 = int(input(""Enter the size of the 2nd array: ""))print(""Enter the Element of the 1st array:"")for i in range(0,size):  num = int(input())  arr.append(num)print(""Enter the Element of the 2nd array:"")for i in range(0,size2):  num2 = int(input())  arr2.append(num2)Find_median(arr,arr2,size,size2)","""""""
Brief Description:
------------------
Find_median function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Find_median`, takes 4 parameters: arr, arr2, size, size2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
arr2 : type
    Description of arr2.
size : type
    Description of size.
size2 : type
    Description of size2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Find_median(value, value, value, value)
Expected output
""""""","import unittest

class TestFind_median(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Find_median(value, value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Find_median(None, None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Merge_Array(arr,arr2,size,size2):  m_size = size + size2  merge_arr = [0]*m_size  i=0  k=0  j=0  while k<m_size:   if i<size:     merge_arr[k] = arr[i]     i+=1     k+=1   if j<size2:     merge_arr[k] = arr2[j]     j+=1     k+=1  print(""After Merge two Array element are:"")  for p in range(0, m_size):    print(merge_arr[p],end="" "")arr=[]arr2=[]size = int(input(""Enter the size of the 1st array: ""))size2 = int(input(""Enter the size of the 2nd array: ""))print(""Enter the Element of the 1st array:"")for i in range(0,size):  num = int(input())  arr.append(num)print(""Enter the Element of the 2nd array:"")for i in range(0,size2):  num2 = int(input())  arr2.append(num2)Merge_Array(arr,arr2,size,size2)","""""""
Brief Description:
------------------
Merge_Array function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Merge_Array`, takes 4 parameters: arr, arr2, size, size2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
arr2 : type
    Description of arr2.
size : type
    Description of size.
size2 : type
    Description of size2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Merge_Array(value, value, value, value)
Expected output
""""""","import unittest

class TestMerge_array(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Merge_Array(value, value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Merge_Array(None, None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def clear_rightmost_set_bit(n):
    """"""Clear rightmost set bit of n and return it.""""""
    return n & (n - 1)


n = int(input('Enter a number: '))
ans = clear_rightmost_set_bit(n)
print('n with its rightmost set bit cleared equals:', ans)","""""""
Brief Description:
------------------
clear_rightmost_set_bit function performs a specific operation as described below.

Extended Description:
---------------------
This function, `clear_rightmost_set_bit`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> clear_rightmost_set_bit(value)
Expected output
""""""","import unittest

class TestClear_rightmost_set_bit(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = clear_rightmost_set_bit(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = clear_rightmost_set_bit(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def lcm(a,b):
    lcm.multiple=lcm.multiple+b
    if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):
        return lcm.multiple;
    else:
        lcm(a, b)
    return lcm.multiple
lcm.multiple=0
a=int(input(""Enter first number:""))
b=int(input(""Enter second number:""))
if(a>b):
    LCM=lcm(b,a)
else:
    LCM=lcm(a,b)
print(LCM)","""""""
Brief Description:
------------------
lcm function performs a specific operation as described below.

Extended Description:
---------------------
This function, `lcm`, takes 2 parameters: a, b. It is designed to perform a certain task using these parameters.

Parameters:
-----------
a : type
    Description of a.
b : type
    Description of b.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> lcm(value, value)
Expected output
""""""","import unittest

class TestLcm(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = lcm(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = lcm(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def StringLength(str, i):  if (str[i] == '\0'):    return 0  else:    return (1 + StringLength(str, i + 1))str=input(""Enter your String:"")str+='\0'print(""Length of the String is: "",StringLength(str,0))","""""""
Brief Description:
------------------
StringLength function performs a specific operation as described below.

Extended Description:
---------------------
This function, `StringLength`, takes 2 parameters: str,  i. It is designed to perform a certain task using these parameters.

Parameters:
-----------
str : type
    Description of str.
i : type
    Description of i.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> StringLength(value, value)
Expected output
""""""","import unittest

class TestStringlength(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = StringLength(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = StringLength(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def PrintNaturalNumber(n):  if(n<=50):    print(n,end="" "")    PrintNaturalNumber(n + 1)n=1print(""First 50 Natural Numbers are:"")PrintNaturalNumber(n)","""""""
Brief Description:
------------------
PrintNaturalNumber function performs a specific operation as described below.

Extended Description:
---------------------
This function, `PrintNaturalNumber`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> PrintNaturalNumber(value)
Expected output
""""""","import unittest

class TestPrintnaturalnumber(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = PrintNaturalNumber(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = PrintNaturalNumber(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def putNumbers(n):
    i = 0
    while i<n:
        j=i
        i=i+1
        if j%7==0:
            yield j

for i in reverse(100):
    print i
","""""""
Brief Description:
------------------
putNumbers function performs a specific operation as described below.

Extended Description:
---------------------
This function, `putNumbers`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> putNumbers(value)
Expected output
""""""","import unittest

class TestPutnumbers(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = putNumbers(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = putNumbers(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Factorial(num):  if num<=0:    return 1  else:    return num*Factorial(num-1)num=int(input(""Enter the Number:""))print(""Factorial of Given Number Using Recursion is:"",Factorial(num))","""""""
Brief Description:
------------------
Factorial function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Factorial`, takes 1 parameters: num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Factorial(value)
Expected output
""""""","import unittest

class TestFactorial(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Factorial(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Factorial(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def gnome_sort(alist):
    for pos in range(1, len(alist)):
        while (pos != 0 and alist[pos] < alist[pos - 1]):
            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]
            pos = pos - 1


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
gnome_sort(alist)
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
gnome_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `gnome_sort`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> gnome_sort(value)
Expected output
""""""","import unittest

class TestGnome_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = gnome_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = gnome_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def lcs(u, v):
    """"""Return c where c[i][j] contains length of LCS of u[i:] and v[j:].""""""
    c = [[-1]*(len(v) + 1) for _ in range(len(u) + 1)]
    lcs_helper(u, v, c, 0, 0)
    return c


def lcs_helper(u, v, c, i, j):
    """"""Return length of LCS of u[i:] and v[j:] and fill in table c.

    c[i][j] contains the length of LCS of u[i:] and v[j:].
    This function fills in c as smaller subproblems for solving c[i][j] are
    solved.""""""
    if c[i][j] >= 0:
        return c[i][j]

    if i == len(u) or j == len(v):
        q = 0
    else:
        if u[i] == v[j]:
            q = 1 + lcs_helper(u, v, c, i + 1, j + 1)
        else:
            q = max(lcs_helper(u, v, c, i + 1, j),
                    lcs_helper(u, v, c, i, j + 1))
    c[i][j] = q
    return q


def print_lcs(u, v, c):
    """"""Print one LCS of u and v using table c.""""""
    i = j = 0
    while not (i == len(u) or j == len(v)):
        if u[i] == v[j]:
            print(u[i], end='')
            i += 1
            j += 1
        elif c[i][j + 1] > c[i + 1][j]:
            j += 1
        else:
            i += 1


u = input('Enter first string: ')
v = input('Enter second string: ')
c = lcs(u, v)
print('Longest Common Subsequence: ', end='')
print_lcs(u, v, c)","""""""
Brief Description:
------------------
lcs function performs a specific operation as described below.

Extended Description:
---------------------
This function, `lcs`, takes 2 parameters: u,  v. It is designed to perform a certain task using these parameters.

Parameters:
-----------
u : type
    Description of u.
v : type
    Description of v.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> lcs(value, value)
Expected output
""""""","import unittest

class TestLcs(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = lcs(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = lcs(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def swap_Element(arr,i,j):  temp = arr[i]  arr[i] = arr[j]  arr[j] = tempdef sort_element(arr,n):  if(n>0):    for i in range(0,n):      if (arr[i] >= arr[n - 1]):        swap_Element(arr, i, n - 1)    sort_element(arr, n - 1)def printArr(arr,n):  for i in range(0, n):    print(arr[i],end="" "")arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):  num = int(input())  arr.append(num)sort_element(arr,n)print(""After ascending order sort Array Elements are:"")printArr(arr, n)","""""""
Brief Description:
------------------
swap_Element function performs a specific operation as described below.

Extended Description:
---------------------
This function, `swap_Element`, takes 3 parameters: arr, i, j. It is designed to perform a certain task using these parameters.

Parameters:
-----------
arr : type
    Description of arr.
i : type
    Description of i.
j : type
    Description of j.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> swap_Element(value, value, value)
Expected output
""""""","import unittest

class TestSwap_element(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = swap_Element(value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = swap_Element(None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def CheckPrime(i,num):  if num==i:    return 0  else:    if(num%i==0):      return 1    else:      return CheckPrime(i+1,num)num=int(input(""Enter your Number:""))if(CheckPrime(2,num)==0):  print(""It is a Prime Number."")else:  print(""It is not a Prime Number."")","""""""
Brief Description:
------------------
CheckPrime function performs a specific operation as described below.

Extended Description:
---------------------
This function, `CheckPrime`, takes 2 parameters: i, num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
i : type
    Description of i.
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> CheckPrime(value, value)
Expected output
""""""","import unittest

class TestCheckprime(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = CheckPrime(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = CheckPrime(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def insertion_sort(alist):
    for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
insertion_sort(alist)
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
insertion_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `insertion_sort`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> insertion_sort(value)
Expected output
""""""","import unittest

class TestInsertion_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = insertion_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = insertion_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def cut_rod(p, n):
    """"""Take a list p of prices and the rod length n and return lists r and s.
    r[i] is the maximum revenue that you can get and s[i] is the length of the
    first piece to cut from a rod of length i.""""""
    # r[i] is the maximum revenue for rod length i
    # r[i] = -1 means that r[i] has not been calculated yet
    r = [-1]*(n + 1)
    r[0] = 0

    # s[i] is the length of the initial cut needed for rod length i
    # s[0] is not needed
    s = [-1]*(n + 1)

    for i in range(1, n + 1):
        q = -1
        for j in range(1, i + 1):
            temp = p[j] + r[i - j]
            if q < temp:
                q = temp
                s[i] = j
        r[i] = q

    return r, s


n = int(input('Enter the length of the rod in inches: '))

# p[i] is the price of a rod of length i
# p[0] is not needed, so it is set to None
p = [None]
for i in range(1, n + 1):
    price = input('Enter the price of a rod of length {} in: '.format(i))
    p.append(int(price))

r, s = cut_rod(p, n)
print('The maximum revenue that can be obtained:', r[n])
print('The rod needs to be cut into length(s) of ', end='')
while n > 0:
    print(s[n], end=' ')
    n -= s[n]","""""""
Brief Description:
------------------
cut_rod function performs a specific operation as described below.

Extended Description:
---------------------
This function, `cut_rod`, takes 2 parameters: p,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
p : type
    Description of p.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> cut_rod(value, value)
Expected output
""""""","import unittest

class TestCut_rod(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = cut_rod(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = cut_rod(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_palindrome(s):
    if len(s) < 1:
        return True
    else:
        if s[0] == s[-1]:
            return is_palindrome(s[1:-1])
        else:
            return False
a=str(input(""Enter string:""))
if(is_palindrome(a)==True):
    print(""String is a palindrome!"")
else:
    print(""String isn't a palindrome!"")","""""""
Brief Description:
------------------
is_palindrome function performs a specific operation as described below.

Extended Description:
---------------------
This function, `is_palindrome`, takes 1 parameters: s. It is designed to perform a certain task using these parameters.

Parameters:
-----------
s : type
    Description of s.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> is_palindrome(value)
Expected output
""""""","import unittest

class TestIs_palindrome(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = is_palindrome(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = is_palindrome(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def square(num):
    return num ** 2

print square(2)
print square(3)
","""""""
Brief Description:
------------------
square function performs a specific operation as described below.

Extended Description:
---------------------
This function, `square`, takes 1 parameters: num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> square(value)
Expected output
""""""","import unittest

class TestSquare(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = square(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = square(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def is_power_of_two(n):
    """"""Return True if n is a power of two.""""""
    if n <= 0:
        return False
    else:
        return n & (n - 1) == 0


n = int(input('Enter a number: '))

if is_power_of_two(n):
    print('{} is a power of two.'.format(n))
else:
    print('{} is not a power of two.'.format(n))","""""""
Brief Description:
------------------
is_power_of_two function performs a specific operation as described below.

Extended Description:
---------------------
This function, `is_power_of_two`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> is_power_of_two(value)
Expected output
""""""","import unittest

class TestIs_power_of_two(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = is_power_of_two(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = is_power_of_two(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def select(alist, start, end, i):
    """"""Find ith smallest element in alist[start... end-1].""""""
    if end - start <= 1:
        return alist[start]
    pivot = partition(alist, start, end)

    # number of elements in alist[start... pivot]
    k = pivot - start + 1

    if i < k:
        return select(alist, start, pivot, i)
    elif i > k:
        return select(alist, pivot + 1, end, i - k)

    return alist[pivot]

def partition(alist, start, end):
    pivot = alist[start]
    i = start + 1
    j = end - 1

    while True:
        while (i <= j and alist[i] <= pivot):
            i = i + 1
        while (i <= j and alist[j] >= pivot):
            j = j - 1

        if i <= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j


alist = input('Enter the list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
i = int(input('The ith smallest element will be found. Enter i: '))

ith_smallest_item = select(alist, 0, len(alist), i)
print('Result: {}.'.format(ith_smallest_item))","""""""
Brief Description:
------------------
select function performs a specific operation as described below.

Extended Description:
---------------------
This function, `select`, takes 4 parameters: alist,  start,  end,  i. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
start : type
    Description of start.
end : type
    Description of end.
i : type
    Description of i.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> select(value, value, value, value)
Expected output
""""""","import unittest

class TestSelect(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = select(value, value, value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = select(None, None, None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def remove(string, n):  
      first = string[:n]   
      last = string[n+1:]  
      return first + last
string=raw_input(""Enter the sring:"")
n=int(input(""Enter the index of the character to remove:""))
print(""Modified string:"")
print(remove(string, n))","""""""
Brief Description:
------------------
remove function performs a specific operation as described below.

Extended Description:
---------------------
This function, `remove`, takes 2 parameters: string,  n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
string : type
    Description of string.
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> remove(value, value)
Expected output
""""""","import unittest

class TestRemove(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = remove(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = remove(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def linear_search(alist, key):
    """"""Return index of key in alist. Return -1 if key not present.""""""
    for i in range(len(alist)):
        if alist[i] == key:
            return i
    return -1


alist = input('Enter the list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
key = int(input('The number to search for: '))

index = linear_search(alist, key)
if index < 0:
    print('{} was not found.'.format(key))
else:
    print('{} was found at index {}.'.format(key, index))","""""""
Brief Description:
------------------
linear_search function performs a specific operation as described below.

Extended Description:
---------------------
This function, `linear_search`, takes 2 parameters: alist,  key. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.
key : type
    Description of key.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> linear_search(value, value)
Expected output
""""""","import unittest

class TestLinear_search(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = linear_search(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = linear_search(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def SumOfDigits(num):  if num==0:    return 0  else:    return ((num%10) +SumOfDigits(num//10))num=int(input(""Enter the Number:""))print(""Sum of digits of given Number Using Recursion is:"",SumOfDigits(num))","""""""
Brief Description:
------------------
SumOfDigits function performs a specific operation as described below.

Extended Description:
---------------------
This function, `SumOfDigits`, takes 1 parameters: num. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num : type
    Description of num.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> SumOfDigits(value)
Expected output
""""""","import unittest

class TestSumofdigits(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = SumOfDigits(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = SumOfDigits(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def fibonacci(n):
    """"""Return the nth Fibonacci number.""""""
    if n == 0:
        return 0

    # r[i] will contain the ith Fibonacci number
    r = [-1]*(n + 1)
    r[0] = 0
    r[1] = 1

    for i in range(2, n + 1):
        r[i] = r[i - 1] + r[i - 2]

    return r[n]


n = int(input('Enter n: '))

ans = fibonacci(n)
print('The nth Fibonacci number:', ans)","""""""
Brief Description:
------------------
fibonacci function performs a specific operation as described below.

Extended Description:
---------------------
This function, `fibonacci`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> fibonacci(value)
Expected output
""""""","import unittest

class TestFibonacci(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = fibonacci(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = fibonacci(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def MultiplicationTable(num, i):  print(num,"" X "",i,"" = "",num * i)  if (i < 10):    MultiplicationTable(num, i + 1)num=int(input(""Enter a number:""))print(""Multiplication Table of "",num,"" is:"")MultiplicationTable(num, 1)","""""""
Brief Description:
------------------
MultiplicationTable function performs a specific operation as described below.

Extended Description:
---------------------
This function, `MultiplicationTable`, takes 2 parameters: num,  i. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num : type
    Description of num.
i : type
    Description of i.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> MultiplicationTable(value, value)
Expected output
""""""","import unittest

class TestMultiplicationtable(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = MultiplicationTable(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = MultiplicationTable(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def Subtraction(num1,num2):  if num2==0:    return num1  return Subtraction(num1-1, num2-1)print(""Enter the two Number:"")num1=int(input())num2=int(input())print(""Subtraction of Two Number Using Recursion is: "",Subtraction(num1,num2))","""""""
Brief Description:
------------------
Subtraction function performs a specific operation as described below.

Extended Description:
---------------------
This function, `Subtraction`, takes 2 parameters: num1, num2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num1 : type
    Description of num1.
num2 : type
    Description of num2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> Subtraction(value, value)
Expected output
""""""","import unittest

class TestSubtraction(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = Subtraction(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = Subtraction(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def eliminate_non_celebrities(matrix):
    """"""Take an n x n matrix that has m[i][j] = True iff i knows j and return
    person who is maybe a celebrity.""""""
    possible_celeb = 0
    n = len(matrix)
    for p in range(1, n):
        if (matrix[possible_celeb][p]
            or not matrix[p][possible_celeb]):
            possible_celeb = p
    return possible_celeb


def check_if_celebrity(possible_celeb, matrix):
    """"""Take an n x n matrix that has m[i][j] = True iff i knows j and return
    True if possible_celeb is a celebrity.""""""
    for i in range(n):
        if matrix[possible_celeb][i] is True:
            return False

    for i in range(n):
        if matrix[i][possible_celeb] is False:
            if i != possible_celeb:
                return False

    return True


n = int(input('Number of people: '))

# create n x n matrix initialized to False that has m[i][j] = True iff i knows j
m = [[False]*n for _ in range(n)]

for i in range(n):
    people = input('Enter list of people known to {}: '.format(i)).split()
    for p in people:
        p = int(p)
        m[i][p] = True

possible_celeb = eliminate_non_celebrities(m)

if check_if_celebrity(possible_celeb, m):
    print('{} is the celebrity.'.format(possible_celeb))
else:
    print('There is no celebrity.')","""""""
Brief Description:
------------------
eliminate_non_celebrities function performs a specific operation as described below.

Extended Description:
---------------------
This function, `eliminate_non_celebrities`, takes 1 parameters: matrix. It is designed to perform a certain task using these parameters.

Parameters:
-----------
matrix : type
    Description of matrix.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> eliminate_non_celebrities(value)
Expected output
""""""","import unittest

class TestEliminate_non_celebrities(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = eliminate_non_celebrities(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = eliminate_non_celebrities(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def selection_sort(alist):
    for i in range(0, len(alist) - 1):
        smallest = i
        for j in range(i + 1, len(alist)):
            if alist[j] < alist[smallest]:
                smallest = j
        alist[i], alist[smallest] = alist[smallest], alist[i]


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
selection_sort(alist)
print('Sorted list: ', end='')
print(alist)","""""""
Brief Description:
------------------
selection_sort function performs a specific operation as described below.

Extended Description:
---------------------
This function, `selection_sort`, takes 1 parameters: alist. It is designed to perform a certain task using these parameters.

Parameters:
-----------
alist : type
    Description of alist.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> selection_sort(value)
Expected output
""""""","import unittest

class TestSelection_sort(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = selection_sort(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = selection_sort(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def factorial(n):
    if(n <= 1):
        return 1
    else:
        return(n*factorial(n-1))
n = int(input(""Enter number:""))
print(""Factorial:"")
print(factorial(n))","""""""
Brief Description:
------------------
factorial function performs a specific operation as described below.

Extended Description:
---------------------
This function, `factorial`, takes 1 parameters: n. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> factorial(value)
Expected output
""""""","import unittest

class TestFactorial(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = factorial(value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = factorial(None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def check(n, div = None):
    if div is None:
        div = n - 1
    while div >= 2:
        if n % div == 0:
            print(""Number not prime"")
            return False
        else:
            return check(n, div-1)
    else:
        print(""Number is prime"")
        return 'True'
n=int(input(""Enter number: ""))
check(n)","""""""
Brief Description:
------------------
check function performs a specific operation as described below.

Extended Description:
---------------------
This function, `check`, takes 2 parameters: n,  div = None. It is designed to perform a certain task using these parameters.

Parameters:
-----------
n : type
    Description of n.
div = None : type
    Description of div = None.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> check(value, value)
Expected output
""""""","import unittest

class TestCheck(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = check(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = check(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"def sum(num1,num2):  if num2==0:    return num1  return sum(num1, num2-1)+1print(""Enter the two Number:"")num1=int(input())num2=int(input())print(""Sum of Two Number Using Recursion is: "",sum(num1,num2))","""""""
Brief Description:
------------------
sum function performs a specific operation as described below.

Extended Description:
---------------------
This function, `sum`, takes 2 parameters: num1, num2. It is designed to perform a certain task using these parameters.

Parameters:
-----------
num1 : type
    Description of num1.
num2 : type
    Description of num2.

Returns:
--------
Return type
    Description of what the function returns.

Example Usage:
--------------
>>> sum(value, value)
Expected output
""""""","import unittest

class TestSum(unittest.TestCase):
    def test_basic(self):
        # Test with example values
        result = sum(value, value)
        expected = 'Expected output'
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        # Test with edge case values (e.g., empty inputs, extreme values)
        result = sum(None, None)
        expected = 'Expected output for edge case'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()"
"R = 3
C = 3
def min_cost(cost, m, n): 
	tc = [[0 for x in range(C)] for x in range(R)] 
	tc[0][0] = cost[0][0] 
	for i in range(1, m+1): 
		tc[i][0] = tc[i-1][0] + cost[i][0] 
	for j in range(1, n+1): 
		tc[0][j] = tc[0][j-1] + cost[0][j] 
	for i in range(1, m+1): 
		for j in range(1, n+1): 
			tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] 
	return tc[m][n]","This function 'min_cost' performs a specific operation.

The function 'min_cost' takes the following parameters: cost, m, n. It performs operations based on the parameters provided.","def test_min_cost():
    # Add test cases for min_cost
    assert min_cost(...) == expected_output"
"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ","This function 'similar_elements' performs a specific operation.

The function 'similar_elements' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_similar_elements():
    # Add test cases for similar_elements
    assert similar_elements(...) == expected_output"
"import math
def is_not_prime(n):
    result = False
    for i in range(2,int(math.sqrt(n)) + 1):
        if n % i == 0:
            result = True
    return result","This function 'is_not_prime' performs a specific operation.

The function 'is_not_prime' takes the following parameters: n. It performs operations based on the parameters provided.","def test_is_not_prime():
    # Add test cases for is_not_prime
    assert is_not_prime(...) == expected_output"
"import heapq as hq
def heap_queue_largest(nums,n):
  largest_nums = hq.nlargest(n, nums)
  return largest_nums","This function 'heap_queue_largest' performs a specific operation.

The function 'heap_queue_largest' takes the following parameters: nums, n. It performs operations based on the parameters provided.","def test_heap_queue_largest():
    # Add test cases for heap_queue_largest
    assert heap_queue_largest(...) == expected_output"
"def count_ways(n): 
	A = [0] * (n + 1) 
	B = [0] * (n + 1) 
	A[0] = 1
	A[1] = 0
	B[0] = 0
	B[1] = 1
	for i in range(2, n+1): 
		A[i] = A[i - 2] + 2 * B[i - 1] 
		B[i] = A[i - 1] + B[i - 2] 
	return A[n] ","This function 'count_ways' performs a specific operation.

The function 'count_ways' takes the following parameters: n. It performs operations based on the parameters provided.","def test_count_ways():
    # Add test cases for count_ways
    assert count_ways(...) == expected_output"
"def is_Power_Of_Two (x): 
    return x and (not(x & (x - 1))) 
def differ_At_One_Bit_Pos(a,b): 
    return is_Power_Of_Two(a ^ b)","This function 'is_Power_Of_Two' performs a specific operation.

The function 'is_Power_Of_Two' takes the following parameters: x. It performs operations based on the parameters provided.","def test_is_Power_Of_Two():
    # Add test cases for is_Power_Of_Two
    assert is_Power_Of_Two(...) == expected_output"
"import re
def find_char_long(text):
  return (re.findall(r""\b\w{4,}\b"", text))","This function 'find_char_long' performs a specific operation.

The function 'find_char_long' takes the following parameters: text. It performs operations based on the parameters provided.","def test_find_char_long():
    # Add test cases for find_char_long
    assert find_char_long(...) == expected_output"
"def square_nums(nums):
 square_nums = list(map(lambda x: x ** 2, nums))
 return square_nums","This function 'square_nums' performs a specific operation.

The function 'square_nums' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_square_nums():
    # Add test cases for square_nums
    assert square_nums(...) == expected_output"
"def find_Rotations(str): 
    tmp = str + str
    n = len(str) 
    for i in range(1,n + 1): 
        substring = tmp[i: i+n] 
        if (str == substring): 
            return i 
    return n ","This function 'find_Rotations' performs a specific operation.

The function 'find_Rotations' takes the following parameters: str. It performs operations based on the parameters provided.","def test_find_Rotations():
    # Add test cases for find_Rotations
    assert find_Rotations(...) == expected_output"
"import heapq
def small_nnum(list1,n):
  smallest=heapq.nsmallest(n,list1)
  return smallest","This function 'small_nnum' performs a specific operation.

The function 'small_nnum' takes the following parameters: list1, n. It performs operations based on the parameters provided.","def test_small_nnum():
    # Add test cases for small_nnum
    assert small_nnum(...) == expected_output"
"def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ","This function 'remove_Occ' performs a specific operation.

The function 'remove_Occ' takes the following parameters: s, ch. It performs operations based on the parameters provided.","def test_remove_Occ():
    # Add test cases for remove_Occ
    assert remove_Occ(...) == expected_output"
"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result","This function 'sort_matrix' performs a specific operation.

The function 'sort_matrix' takes the following parameters: M. It performs operations based on the parameters provided.","def test_sort_matrix():
    # Add test cases for sort_matrix
    assert sort_matrix(...) == expected_output"
"from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
","This function 'count_common' performs a specific operation.

The function 'count_common' takes the following parameters: words. It performs operations based on the parameters provided.","def test_count_common():
    # Add test cases for count_common
    assert count_common(...) == expected_output"
"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ","This function 'find_Volume' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))","This function 'split_lowerstring' performs a specific operation.

The function 'split_lowerstring' takes the following parameters: text. It performs operations based on the parameters provided.","def test_split_lowerstring():
    # Add test cases for split_lowerstring
    assert split_lowerstring(...) == expected_output"
"import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","This function 'text_lowercase_underscore' performs a specific operation.

The function 'text_lowercase_underscore' takes the following parameters: text. It performs operations based on the parameters provided.","def test_text_lowercase_underscore():
    # Add test cases for text_lowercase_underscore
    assert text_lowercase_underscore(...) == expected_output"
"def square_perimeter(a):
  perimeter=4*a
  return perimeter","This function 'square_perimeter' performs a specific operation.

The function 'square_perimeter' takes the following parameters: a. It performs operations based on the parameters provided.","def test_square_perimeter():
    # Add test cases for square_perimeter
    assert square_perimeter(...) == expected_output"
"NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ","This function 'str_to_list' performs a specific operation.

The function 'str_to_list' takes the following parameters: string. It performs operations based on the parameters provided.","def test_str_to_list():
    # Add test cases for str_to_list
    assert str_to_list(...) == expected_output"
"def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ","This function 'test_duplicate' performs a specific operation.

The function 'test_duplicate' takes the following parameters: arraynums. It performs operations based on the parameters provided.","def test_test_duplicate():
    # Add test cases for test_duplicate
    assert test_duplicate(...) == expected_output"
"def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False","This function 'is_woodall' performs a specific operation.

The function 'is_woodall' takes the following parameters: x. It performs operations based on the parameters provided.","def test_is_woodall():
    # Add test cases for is_woodall
    assert is_woodall(...) == expected_output"
"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)","This function 'multiples_of_num' performs a specific operation.

The function 'multiples_of_num' takes the following parameters: m, n. It performs operations based on the parameters provided.","def test_multiples_of_num():
    # Add test cases for multiples_of_num
    assert multiples_of_num(...) == expected_output"
"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate","This function 'find_first_duplicate' performs a specific operation.

The function 'find_first_duplicate' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_find_first_duplicate():
    # Add test cases for find_first_duplicate
    assert find_first_duplicate(...) == expected_output"
"def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi ","This function 'maximum_Sum' performs a specific operation.

The function 'maximum_Sum' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_maximum_Sum():
    # Add test cases for maximum_Sum
    assert maximum_Sum(...) == expected_output"
"def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)","This function 'binary_to_decimal' performs a specific operation.

The function 'binary_to_decimal' takes the following parameters: binary. It performs operations based on the parameters provided.","def test_binary_to_decimal():
    # Add test cases for binary_to_decimal
    assert binary_to_decimal(...) == expected_output"
"def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; ","This function 'find_Product' performs a specific operation.

The function 'find_Product' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_find_Product():
    # Add test cases for find_Product
    assert find_Product(...) == expected_output"
"def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ","This function 'check_k_elements' performs a specific operation.

The function 'check_k_elements' takes the following parameters: test_list, K. It performs operations based on the parameters provided.","def test_check_k_elements():
    # Add test cases for check_k_elements
    assert check_k_elements(...) == expected_output"
"import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list","This function 'remove' performs a specific operation.

The function 'remove' takes the following parameters: list. It performs operations based on the parameters provided.","def test_remove():
    # Add test cases for remove
    assert remove(...) == expected_output"
"def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ","This function 'binomial_Coeff' performs a specific operation.

The function 'binomial_Coeff' takes the following parameters: n, k. It performs operations based on the parameters provided.","def test_binomial_Coeff():
    # Add test cases for binomial_Coeff
    assert binomial_Coeff(...) == expected_output"
"def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1","This function 'get_Odd_Occurrence' performs a specific operation.

The function 'get_Odd_Occurrence' takes the following parameters: arr, arr_size. It performs operations based on the parameters provided.","def test_get_Odd_Occurrence():
    # Add test cases for get_Odd_Occurrence
    assert get_Odd_Occurrence(...) == expected_output"
"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ","This function 'check_Equality' performs a specific operation.

The function 'check_Equality' takes the following parameters: s. It performs operations based on the parameters provided.","def test_check_Equality():
    # Add test cases for check_Equality
    assert check_Equality(...) == expected_output"
"def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result","This function 'func' performs a specific operation.

The function 'func' takes the following parameters: nums, k. It performs operations based on the parameters provided.","def test_func():
    # Add test cases for func
    assert func(...) == expected_output"
"import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)","This function 'max_Prime_Factors' performs a specific operation.

The function 'max_Prime_Factors' takes the following parameters: n. It performs operations based on the parameters provided.","def test_max_Prime_Factors():
    # Add test cases for max_Prime_Factors
    assert max_Prime_Factors(...) == expected_output"
"def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  ","This function 'decimal_To_Binary' performs a specific operation.

The function 'decimal_To_Binary' takes the following parameters: N. It performs operations based on the parameters provided.","def test_decimal_To_Binary():
    # Add test cases for decimal_To_Binary
    assert decimal_To_Binary(...) == expected_output"
"def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) ","This function 'find_missing' performs a specific operation.

The function 'find_missing' takes the following parameters: ar, N. It performs operations based on the parameters provided.","def test_find_missing():
    # Add test cases for find_missing
    assert find_missing(...) == expected_output"
"def find_rect_num(n):
  return n*(n + 1) ","This function 'find_rect_num' performs a specific operation.

The function 'find_rect_num' takes the following parameters: n. It performs operations based on the parameters provided.","def test_find_rect_num():
    # Add test cases for find_rect_num
    assert find_rect_num(...) == expected_output"
"def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  ","This function 'find_Nth_Digit' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part","This function 'sort_mixed_list' performs a specific operation.

The function 'sort_mixed_list' takes the following parameters: mixed_list. It performs operations based on the parameters provided.","def test_sort_mixed_list():
    # Add test cases for sort_mixed_list
    assert sort_mixed_list(...) == expected_output"
"def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)","This function 'div_even_odd' performs a specific operation.

The function 'div_even_odd' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_div_even_odd():
    # Add test cases for div_even_odd
    assert div_even_odd(...) == expected_output"
"import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")","This function 'rearange_string' performs a specific operation.

The function 'rearange_string' takes the following parameters: S. It performs operations based on the parameters provided.","def test_rearange_string():
    # Add test cases for rearange_string
    assert rearange_string(...) == expected_output"
"from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result","This function 'freq_element' performs a specific operation.

The function 'freq_element' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_freq_element():
    # Add test cases for freq_element
    assert freq_element(...) == expected_output"
"def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums","This function 'filter_evennumbers' performs a specific operation.

The function 'filter_evennumbers' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_filter_evennumbers():
    # Add test cases for filter_evennumbers
    assert filter_evennumbers(...) == expected_output"
"def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])","This function 'find_Sum' performs a specific operation.

The function 'find_Sum' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_find_Sum():
    # Add test cases for find_Sum
    assert find_Sum(...) == expected_output"
"import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')","This function 'text_match' performs a specific operation.

The function 'text_match' takes the following parameters: text. It performs operations based on the parameters provided.","def test_text_match():
    # Add test cases for text_match
    assert text_match(...) == expected_output"
"import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","This function 'text_match_string' performs a specific operation.

The function 'text_match_string' takes the following parameters: text. It performs operations based on the parameters provided.","def test_text_match_string():
    # Add test cases for text_match_string
    assert text_match_string(...) == expected_output"
"def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd","This function 'find_gcd' performs a specific operation.

The function 'find_gcd' takes the following parameters: x, y. It performs operations based on the parameters provided.","def test_find_gcd():
    # Add test cases for find_gcd
    assert find_gcd(...) == expected_output"
"def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;","This function 'test_distinct' performs a specific operation.

The function 'test_distinct' takes the following parameters: data. It performs operations based on the parameters provided.","def test_test_distinct():
    # Add test cases for test_distinct
    assert test_distinct(...) == expected_output"
"def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10","This function 'compute_Last_Digit' performs a specific operation.

The function 'compute_Last_Digit' takes the following parameters: A, B. It performs operations based on the parameters provided.","def test_compute_Last_Digit():
    # Add test cases for compute_Last_Digit
    assert compute_Last_Digit(...) == expected_output"
"def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)","This function 'odd_bit_set_number' performs a specific operation.

The function 'odd_bit_set_number' takes the following parameters: n. It performs operations based on the parameters provided.","def test_odd_bit_set_number():
    # Add test cases for odd_bit_set_number
    assert odd_bit_set_number(...) == expected_output"
"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    ","This function 'specified_element' performs a specific operation.

The function 'specified_element' takes the following parameters: nums, N. It performs operations based on the parameters provided.","def test_specified_element():
    # Add test cases for specified_element
    assert specified_element(...) == expected_output"
"def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)","This function 'min_length_list' performs a specific operation.

The function 'min_length_list' takes the following parameters: input_list. It performs operations based on the parameters provided.","def test_min_length_list():
    # Add test cases for min_length_list
    assert min_length_list(...) == expected_output"
"def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False","This function 'check_equilateral' performs a specific operation.

The function 'check_equilateral' takes the following parameters: x, y, z. It performs operations based on the parameters provided.","def test_check_equilateral():
    # Add test cases for check_equilateral
    assert check_equilateral(...) == expected_output"
"def parallelogram_area(b,h):
  area=b*h
  return area","This function 'parallelogram_area' performs a specific operation.

The function 'parallelogram_area' takes the following parameters: b, h. It performs operations based on the parameters provided.","def test_parallelogram_area():
    # Add test cases for parallelogram_area
    assert parallelogram_area(...) == expected_output"
"def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") ","This function 'check_Equality' performs a specific operation.

The function 'check_Equality' takes the following parameters: str. It performs operations based on the parameters provided.","def test_check_Equality():
    # Add test cases for check_Equality
    assert check_Equality(...) == expected_output"
"def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list","This function 'counting_sort' performs a specific operation.

The function 'counting_sort' takes the following parameters: my_list. It performs operations based on the parameters provided.","def test_counting_sort():
    # Add test cases for counting_sort
    assert counting_sort(...) == expected_output"
"import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn","This function 'tn_gp' performs a specific operation.

The function 'tn_gp' takes the following parameters: a, n, r. It performs operations based on the parameters provided.","def test_tn_gp():
    # Add test cases for tn_gp
    assert tn_gp(...) == expected_output"
"def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ","This function 'rev' performs a specific operation.

The function 'rev' takes the following parameters: num. It performs operations based on the parameters provided.","def test_rev():
    # Add test cases for rev
    assert rev(...) == expected_output"
"def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ","This function 'find_Max_Num' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ","This function 'opposite_Signs' performs a specific operation.

The function 'opposite_Signs' takes the following parameters: x, y. It performs operations based on the parameters provided.","def test_opposite_Signs():
    # Add test cases for opposite_Signs
    assert opposite_Signs(...) == expected_output"
"def is_octagonal(n): 
	return 3 * n * n - 2 * n ","This function 'is_octagonal' performs a specific operation.

The function 'is_octagonal' takes the following parameters: n. It performs operations based on the parameters provided.","def test_is_octagonal():
    # Add test cases for is_octagonal
    assert is_octagonal(...) == expected_output"
"def max_len_sub( arr, n): 
	mls=[] 
	max = 0
	for i in range(n): 
		mls.append(1) 
	for i in range(n): 
		for j in range(i): 
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 
				mls[i] = mls[j] + 1
	for i in range(n): 
		if (max < mls[i]): 
			max = mls[i] 
	return max","This function 'max_len_sub' performs a specific operation.

The function 'max_len_sub' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_max_len_sub():
    # Add test cases for max_len_sub
    assert max_len_sub(...) == expected_output"
"from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count","This function 'count_Substrings' performs a specific operation.

The function 'count_Substrings' takes the following parameters: s, n. It performs operations based on the parameters provided.","def test_count_Substrings():
    # Add test cases for count_Substrings
    assert count_Substrings(...) == expected_output"
"def smallest_num(xs):
  return min(xs)
","This function 'smallest_num' performs a specific operation.

The function 'smallest_num' takes the following parameters: xs. It performs operations based on the parameters provided.","def test_smallest_num():
    # Add test cases for smallest_num
    assert smallest_num(...) == expected_output"
"def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ","This function 'max_difference' performs a specific operation.

The function 'max_difference' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_max_difference():
    # Add test cases for max_difference
    assert max_difference(...) == expected_output"
"def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks","This function 'subject_marks' performs a specific operation.

The function 'subject_marks' takes the following parameters: subjectmarks. It performs operations based on the parameters provided.","def test_subject_marks():
    # Add test cases for subject_marks
    assert subject_marks(...) == expected_output"
"def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total","This function 'recursive_list_sum' performs a specific operation.

The function 'recursive_list_sum' takes the following parameters: data_list. It performs operations based on the parameters provided.","def test_recursive_list_sum():
    # Add test cases for recursive_list_sum
    assert recursive_list_sum(...) == expected_output"
"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ","This function 'pos_count' performs a specific operation.

The function 'pos_count' takes the following parameters: list. It performs operations based on the parameters provided.","def test_pos_count():
    # Add test cases for pos_count
    assert pos_count(...) == expected_output"
"def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ","This function 'bell_number' performs a specific operation.

The function 'bell_number' takes the following parameters: n. It performs operations based on the parameters provided.","def test_bell_number():
    # Add test cases for bell_number
    assert bell_number(...) == expected_output"
"def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ","This function 'is_Monotonic' performs a specific operation.

The function 'is_Monotonic' takes the following parameters: A. It performs operations based on the parameters provided.","def test_is_Monotonic():
    # Add test cases for is_Monotonic
    assert is_Monotonic(...) == expected_output"
"def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set","This function 'is_sublist' performs a specific operation.

The function 'is_sublist' takes the following parameters: l, s. It performs operations based on the parameters provided.","def test_is_sublist():
    # Add test cases for is_sublist
    assert is_sublist(...) == expected_output"
"def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return (""All tuples have same length"")
  else:
    return (""All tuples do not have same length"")","This function 'find_equal_tuple' performs a specific operation.

The function 'find_equal_tuple' takes the following parameters: Input, k. It performs operations based on the parameters provided.","def test_find_equal_tuple():
    # Add test cases for find_equal_tuple
    assert find_equal_tuple(...) == expected_output"
"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums","This function 'comb_sort' performs a specific operation.

The function 'comb_sort' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_comb_sort():
    # Add test cases for comb_sort
    assert comb_sort(...) == expected_output"
"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False","This function 'dif_Square' performs a specific operation.

The function 'dif_Square' takes the following parameters: n. It performs operations based on the parameters provided.","def test_dif_Square():
    # Add test cases for dif_Square
    assert dif_Square(...) == expected_output"
"import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))","This function 'multiple_split' performs a specific operation.

The function 'multiple_split' takes the following parameters: text. It performs operations based on the parameters provided.","def test_multiple_split():
    # Add test cases for multiple_split
    assert multiple_split(...) == expected_output"
"def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True","This function 'is_samepatterns' performs a specific operation.

The function 'is_samepatterns' takes the following parameters: colors, patterns. It performs operations based on the parameters provided.","def test_is_samepatterns():
    # Add test cases for is_samepatterns
    assert is_samepatterns(...) == expected_output"
"def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ","This function 'find_tuples' performs a specific operation.

The function 'find_tuples' takes the following parameters: test_list, K. It performs operations based on the parameters provided.","def test_find_tuples():
    # Add test cases for find_tuples
    assert find_tuples(...) == expected_output"
"def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))","This function 'count_Squares' performs a specific operation.

The function 'count_Squares' takes the following parameters: m, n. It performs operations based on the parameters provided.","def test_count_Squares():
    # Add test cases for count_Squares
    assert count_Squares(...) == expected_output"
"def is_Diff(n): 
    return (n % 11 == 0) ","This function 'is_Diff' performs a specific operation.

The function 'is_Diff' takes the following parameters: n. It performs operations based on the parameters provided.","def test_is_Diff():
    # Add test cases for is_Diff
    assert is_Diff(...) == expected_output"
"def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans ","This function 'count_With_Odd_SetBits' performs a specific operation.

The function 'count_With_Odd_SetBits' takes the following parameters: n. It performs operations based on the parameters provided.","def test_count_With_Odd_SetBits():
    # Add test cases for count_With_Odd_SetBits
    assert count_With_Odd_SetBits(...) == expected_output"
"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False","This function 'word_len' performs a specific operation.

The function 'word_len' takes the following parameters: s. It performs operations based on the parameters provided.","def test_word_len():
    # Add test cases for word_len
    assert word_len(...) == expected_output"
"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6","This function 'tetrahedral_number' performs a specific operation.

The function 'tetrahedral_number' takes the following parameters: n. It performs operations based on the parameters provided.","def test_tetrahedral_number():
    # Add test cases for tetrahedral_number
    assert tetrahedral_number(...) == expected_output"
"def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ","This function 'zip_tuples' performs a specific operation.

The function 'zip_tuples' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_zip_tuples():
    # Add test cases for zip_tuples
    assert zip_tuples(...) == expected_output"
"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume","This function 'volume_sphere' performs a specific operation.

The function 'volume_sphere' takes the following parameters: r. It performs operations based on the parameters provided.","def test_volume_sphere():
    # Add test cases for volume_sphere
    assert volume_sphere(...) == expected_output"
"def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)","This function 'get_Char' performs a specific operation.

The function 'get_Char' takes the following parameters: strr. It performs operations based on the parameters provided.","def test_get_Char():
    # Add test cases for get_Char
    assert get_Char(...) == expected_output"
"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))","This function 'sequence' performs a specific operation.

The function 'sequence' takes the following parameters: n. It performs operations based on the parameters provided.","def test_sequence():
    # Add test cases for sequence
    assert sequence(...) == expected_output"
"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea","This function 'surfacearea_sphere' performs a specific operation.

The function 'surfacearea_sphere' takes the following parameters: r. It performs operations based on the parameters provided.","def test_surfacearea_sphere():
    # Add test cases for surfacearea_sphere
    assert surfacearea_sphere(...) == expected_output"
"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1","This function 'centered_hexagonal_number' performs a specific operation.

The function 'centered_hexagonal_number' takes the following parameters: n. It performs operations based on the parameters provided.","def test_centered_hexagonal_number():
    # Add test cases for centered_hexagonal_number
    assert centered_hexagonal_number(...) == expected_output"
"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict","This function 'merge_dictionaries_three' performs a specific operation.

The function 'merge_dictionaries_three' takes the following parameters: dict1, dict2, dict3. It performs operations based on the parameters provided.","def test_merge_dictionaries_three():
    # Add test cases for merge_dictionaries_three
    assert merge_dictionaries_three(...) == expected_output"
"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count","This function 'freq_count' performs a specific operation.

The function 'freq_count' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_freq_count():
    # Add test cases for freq_count
    assert freq_count(...) == expected_output"
"def closest_num(N):
  return (N - 1)","This function 'closest_num' performs a specific operation.

The function 'closest_num' takes the following parameters: N. It performs operations based on the parameters provided.","def test_closest_num():
    # Add test cases for closest_num
    assert closest_num(...) == expected_output"
"def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max","This function 'len_log' performs a specific operation.

The function 'len_log' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_len_log():
    # Add test cases for len_log
    assert len_log(...) == expected_output"
"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False","This function 'find_substring' performs a specific operation.

The function 'find_substring' takes the following parameters: str1, sub_str. It performs operations based on the parameters provided.","def test_find_substring():
    # Add test cases for find_substring
    assert find_substring(...) == expected_output"
"def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True","This function 'is_undulating' performs a specific operation.

The function 'is_undulating' takes the following parameters: n. It performs operations based on the parameters provided.","def test_is_undulating():
    # Add test cases for is_undulating
    assert is_undulating(...) == expected_output"
"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)","This function 'power' performs a specific operation.

The function 'power' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_power():
    # Add test cases for power
    assert power(...) == expected_output"
"from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ","This function 'index_minimum' performs a specific operation.

The function 'index_minimum' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_index_minimum():
    # Add test cases for index_minimum
    assert index_minimum(...) == expected_output"
"def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ","This function 'Find_Min_Length' performs a specific operation.

The function 'Find_Min_Length' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_Find_Min_Length():
    # Add test cases for Find_Min_Length
    assert Find_Min_Length(...) == expected_output"
"def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x","This function 'divisor' performs a specific operation.

The function 'divisor' takes the following parameters: n. It performs operations based on the parameters provided.","def test_divisor():
    # Add test cases for divisor
    assert divisor(...) == expected_output"
"def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
","This function 'frequency_lists' performs a specific operation.

The function 'frequency_lists' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_frequency_lists():
    # Add test cases for frequency_lists
    assert frequency_lists(...) == expected_output"
"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ","This function 'multiply_num' performs a specific operation.

The function 'multiply_num' takes the following parameters: numbers. It performs operations based on the parameters provided.","def test_multiply_num():
    # Add test cases for multiply_num
    assert multiply_num(...) == expected_output"
"def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ","This function 'decimal_to_binary' performs a specific operation.

The function 'decimal_to_binary' takes the following parameters: n. It performs operations based on the parameters provided.","def test_decimal_to_binary():
    # Add test cases for decimal_to_binary
    assert decimal_to_binary(...) == expected_output"
"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i","This function 'next_smallest_palindrome' performs a specific operation.

The function 'next_smallest_palindrome' takes the following parameters: num. It performs operations based on the parameters provided.","def test_next_smallest_palindrome():
    # Add test cases for next_smallest_palindrome
    assert next_smallest_palindrome(...) == expected_output"
"def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]","This function 'kth_element' performs a specific operation.

The function 'kth_element' takes the following parameters: arr, n, k. It performs operations based on the parameters provided.","def test_kth_element():
    # Add test cases for kth_element
    assert kth_element(...) == expected_output"
"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))","This function 'snake_to_camel' performs a specific operation.

The function 'snake_to_camel' takes the following parameters: word. It performs operations based on the parameters provided.","def test_snake_to_camel():
    # Add test cases for snake_to_camel
    assert snake_to_camel(...) == expected_output"
"def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","This function 'eulerian_num' performs a specific operation.

The function 'eulerian_num' takes the following parameters: n, m. It performs operations based on the parameters provided.","def test_eulerian_num():
    # Add test cases for eulerian_num
    assert eulerian_num(...) == expected_output"
"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result
","This function 'sort_sublists' performs a specific operation.

The function 'sort_sublists' takes the following parameters: input_list. It performs operations based on the parameters provided.","def test_sort_sublists():
    # Add test cases for sort_sublists
    assert sort_sublists(...) == expected_output"
"def count(lst):   
    return sum(lst) ","This function 'count' performs a specific operation.

The function 'count' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_count():
    # Add test cases for count
    assert count(...) == expected_output"
"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ","This function 'add_lists' performs a specific operation.

The function 'add_lists' takes the following parameters: test_list, test_tup. It performs operations based on the parameters provided.","def test_add_lists():
    # Add test cases for add_lists
    assert add_lists(...) == expected_output"
"def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ","This function 'count_Hexadecimal' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)","This function 'merge_sorted_list' performs a specific operation.

The function 'merge_sorted_list' takes the following parameters: num1, num2, num3. It performs operations based on the parameters provided.","def test_merge_sorted_list():
    # Add test cases for merge_sorted_list
    assert merge_sorted_list(...) == expected_output"
"def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ","This function 'odd_Equivalent' performs a specific operation.

The function 'odd_Equivalent' takes the following parameters: s, n. It performs operations based on the parameters provided.","def test_odd_Equivalent():
    # Add test cases for odd_Equivalent
    assert odd_Equivalent(...) == expected_output"
"def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) ","This function 'extract_missing' performs a specific operation.

The function 'extract_missing' takes the following parameters: test_list, strt_val, stop_val. It performs operations based on the parameters provided.","def test_extract_missing():
    # Add test cases for extract_missing
    assert extract_missing(...) == expected_output"
"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result","This function 'common_in_nested_lists' performs a specific operation.

The function 'common_in_nested_lists' takes the following parameters: nestedlist. It performs operations based on the parameters provided.","def test_common_in_nested_lists():
    # Add test cases for common_in_nested_lists
    assert common_in_nested_lists(...) == expected_output"
"def perimeter(diameter,height) : 
    return 2*(diameter+height)  ","This function 'perimeter' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False","This function 'check_integer' performs a specific operation.

The function 'check_integer' takes the following parameters: text. It performs operations based on the parameters provided.","def test_check_integer():
    # Add test cases for check_integer
    assert check_integer(...) == expected_output"
"from collections import Counter 
def assign_freq(test_list):
  res = [(*key, val) for key, val in Counter(test_list).items()]
  return (str(res)) ","This function 'assign_freq' performs a specific operation.

The function 'assign_freq' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_assign_freq():
    # Add test cases for assign_freq
    assert assign_freq(...) == expected_output"
"def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit","This function 'empty_dit' performs a specific operation.

The function 'empty_dit' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_empty_dit():
    # Add test cases for empty_dit
    assert empty_dit(...) == expected_output"
"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result","This function 'tuple_to_int' performs a specific operation.

The function 'tuple_to_int' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_tuple_to_int():
    # Add test cases for tuple_to_int
    assert tuple_to_int(...) == expected_output"
"def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return (str(res)) ","This function 'list_to_float' performs a specific operation.

The function 'list_to_float' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_list_to_float():
    # Add test cases for list_to_float
    assert list_to_float(...) == expected_output"
"def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst","This function 'string_to_list' performs a specific operation.

The function 'string_to_list' takes the following parameters: string. It performs operations based on the parameters provided.","def test_string_to_list():
    # Add test cases for string_to_list
    assert string_to_list(...) == expected_output"
"def search(arr,n) :
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)","This function 'search' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max","This function 'max_product_tuple' performs a specific operation.

The function 'max_product_tuple' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_max_product_tuple():
    # Add test cases for max_product_tuple
    assert max_product_tuple(...) == expected_output"
"def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\
           check_triplet(A, n - 1, sum, count)","This function 'check_triplet' performs a specific operation.

The function 'check_triplet' takes the following parameters: A, n, sum, count. It performs operations based on the parameters provided.","def test_check_triplet():
    # Add test cases for check_triplet
    assert check_triplet(...) == expected_output"
"MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] ","This function 'smartNumber' performs a specific operation.

The function 'smartNumber' takes the following parameters: n. It performs operations based on the parameters provided.","def test_smartNumber():
    # Add test cases for smartNumber
    assert smartNumber(...) == expected_output"
"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)","This function 'amicable_numbers_sum' performs a specific operation.

The function 'amicable_numbers_sum' takes the following parameters: limit. It performs operations based on the parameters provided.","def test_amicable_numbers_sum():
    # Add test cases for amicable_numbers_sum
    assert amicable_numbers_sum(...) == expected_output"
"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle","This function 'angle_complex' performs a specific operation.

The function 'angle_complex' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_angle_complex():
    # Add test cases for angle_complex
    assert angle_complex(...) == expected_output"
"def find_length(string, n): 
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0","This function 'find_length' performs a specific operation.

The function 'find_length' takes the following parameters: string, n. It performs operations based on the parameters provided.","def test_find_length():
    # Add test cases for find_length
    assert find_length(...) == expected_output"
"def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum","This function 'sum' performs a specific operation.

The function 'sum' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_sum():
    # Add test cases for sum
    assert sum(...) == expected_output"
"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)","This function 'multiply_int' performs a specific operation.

The function 'multiply_int' takes the following parameters: x, y. It performs operations based on the parameters provided.","def test_multiply_int():
    # Add test cases for multiply_int
    assert multiply_int(...) == expected_output"
"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	","This function 'long_words' performs a specific operation.

The function 'long_words' takes the following parameters: n, str. It performs operations based on the parameters provided.","def test_long_words():
    # Add test cases for long_words
    assert long_words(...) == expected_output"
"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True","This function 'magic_square_test' performs a specific operation.

The function 'magic_square_test' takes the following parameters: my_matrix. It performs operations based on the parameters provided.","def test_magic_square_test():
    # Add test cases for magic_square_test
    assert magic_square_test(...) == expected_output"
"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result","This function 'max_occurrences' performs a specific operation.

The function 'max_occurrences' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_max_occurrences():
    # Add test cases for max_occurrences
    assert max_occurrences(...) == expected_output"
"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string","This function 'reverse_vowels' performs a specific operation.

The function 'reverse_vowels' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_reverse_vowels():
    # Add test cases for reverse_vowels
    assert reverse_vowels(...) == expected_output"
"def tup_string(tup1):
  str =  ''.join(tup1)
  return str","This function 'tup_string' performs a specific operation.

The function 'tup_string' takes the following parameters: tup1. It performs operations based on the parameters provided.","def test_tup_string():
    # Add test cases for tup_string
    assert tup_string(...) == expected_output"
"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)","This function 'sum_negativenum' performs a specific operation.

The function 'sum_negativenum' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_sum_negativenum():
    # Add test cases for sum_negativenum
    assert sum_negativenum(...) == expected_output"
"def check_last (arr,n,p): 
    _sum = 0
    for i in range(n): 
        _sum = _sum + arr[i] 
    if p == 1: 
        if _sum % 2 == 0: 
            return ""ODD""
        else: 
            return ""EVEN""
    return ""EVEN""
      ","This function 'check_last' performs a specific operation.

The function 'check_last' takes the following parameters: arr, n, p. It performs operations based on the parameters provided.","def test_check_last():
    # Add test cases for check_last
    assert check_last(...) == expected_output"
"def hexagonal_num(n): 
	return n*(2*n - 1) ","This function 'hexagonal_num' performs a specific operation.

The function 'hexagonal_num' takes the following parameters: n. It performs operations based on the parameters provided.","def test_hexagonal_num():
    # Add test cases for hexagonal_num
    assert hexagonal_num(...) == expected_output"
"def cal_electbill(units):
 if(units < 50):
    amount = units * 2.60
    surcharge = 25
 elif(units <= 100):
    amount = 130 + ((units - 50) * 3.25)
    surcharge = 35
 elif(units <= 200):
    amount = 130 + 162.50 + ((units - 100) * 5.26)
    surcharge = 45
 else:
    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)
    surcharge = 75
 total = amount + surcharge
 return total","This function 'cal_electbill' performs a specific operation.

The function 'cal_electbill' takes the following parameters: units. It performs operations based on the parameters provided.","def test_cal_electbill():
    # Add test cases for cal_electbill
    assert cal_electbill(...) == expected_output"
"from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","This function 'zero_count' performs a specific operation.

The function 'zero_count' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_zero_count():
    # Add test cases for zero_count
    assert zero_count(...) == expected_output"
"def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True","This function 'is_Sum_Of_Powers_Of_Two' performs a specific operation.

The function 'is_Sum_Of_Powers_Of_Two' takes the following parameters: n. It performs operations based on the parameters provided.","def test_is_Sum_Of_Powers_Of_Two():
    # Add test cases for is_Sum_Of_Powers_Of_Two
    assert is_Sum_Of_Powers_Of_Two(...) == expected_output"
"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter","This function 'circle_circumference' performs a specific operation.

The function 'circle_circumference' takes the following parameters: r. It performs operations based on the parameters provided.","def test_circle_circumference():
    # Add test cases for circle_circumference
    assert circle_circumference(...) == expected_output"
"def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ","This function 'extract_singly' performs a specific operation.

The function 'extract_singly' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_extract_singly():
    # Add test cases for extract_singly
    assert extract_singly(...) == expected_output"
"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums","This function 'pancake_sort' performs a specific operation.

The function 'pancake_sort' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_pancake_sort():
    # Add test cases for pancake_sort
    assert pancake_sort(...) == expected_output"
"def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result","This function 'count_samepair' performs a specific operation.

The function 'count_samepair' takes the following parameters: list1, list2, list3. It performs operations based on the parameters provided.","def test_count_samepair():
    # Add test cases for count_samepair
    assert count_samepair(...) == expected_output"
"def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ","This function 'find_lists' performs a specific operation.

The function 'find_lists' takes the following parameters: Input. It performs operations based on the parameters provided.","def test_find_lists():
    # Add test cases for find_lists
    assert find_lists(...) == expected_output"
"def sum_Pairs(arr,n): 
    sum = 0
    for i in range(n - 1,-1,-1): 
        sum += i*arr[i] - (n-1-i) * arr[i] 
    return sum","This function 'sum_Pairs' performs a specific operation.

The function 'sum_Pairs' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_sum_Pairs():
    # Add test cases for sum_Pairs
    assert sum_Pairs(...) == expected_output"
"def max_Abs_Diff(arr,n): 
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ","This function 'max_Abs_Diff' performs a specific operation.

The function 'max_Abs_Diff' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_max_Abs_Diff():
    # Add test cases for max_Abs_Diff
    assert max_Abs_Diff(...) == expected_output"
"def ascii_value_string(str1):
  for i in range(len(str1)):
   return ord(str1[i])","This function 'ascii_value_string' performs a specific operation.

The function 'ascii_value_string' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_ascii_value_string():
    # Add test cases for ascii_value_string
    assert ascii_value_string(...) == expected_output"
"def max_path_sum(tri, m, n): 
	for i in range(m-1, -1, -1): 
		for j in range(i+1): 
			if (tri[i+1][j] > tri[i+1][j+1]): 
				tri[i][j] += tri[i+1][j] 
			else: 
				tri[i][j] += tri[i+1][j+1] 
	return tri[0][0]","This function 'max_path_sum' performs a specific operation.

The function 'max_path_sum' takes the following parameters: tri, m, n. It performs operations based on the parameters provided.","def test_max_path_sum():
    # Add test cases for max_path_sum
    assert max_path_sum(...) == expected_output"
"def sum_digits_single(x) : 
    ans = 0
    while x : 
        ans += x % 10
        x //= 10  
    return ans 
def closest(x) : 
    ans = 0
    while (ans * 10 + 9 <= x) : 
        ans = ans * 10 + 9  
    return ans   
def sum_digits_twoparts(N) : 
    A = closest(N)  
    return sum_digits_single(A) + sum_digits_single(N - A) ","This function 'sum_digits_single' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def longest_subseq_with_diff_one(arr, n): 
	dp = [1 for i in range(n)] 
	for i in range(n): 
		for j in range(i): 
			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 
				dp[i] = max(dp[i], dp[j]+1) 
	result = 1
	for i in range(n): 
		if (result < dp[i]): 
			result = dp[i] 
	return result","This function 'longest_subseq_with_diff_one' performs a specific operation.

The function 'longest_subseq_with_diff_one' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_longest_subseq_with_diff_one():
    # Add test cases for longest_subseq_with_diff_one
    assert longest_subseq_with_diff_one(...) == expected_output"
"def does_Contain_B(a,b,c): 
    if (a == b): 
        return True
    if ((b - a) * c > 0 and (b - a) % c == 0): 
        return True
    return False","This function 'does_Contain_B' performs a specific operation.

The function 'does_Contain_B' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_does_Contain_B():
    # Add test cases for does_Contain_B
    assert does_Contain_B(...) == expected_output"
"def gcd(p,q):
    while q != 0:
        p, q = q,p%q
    return p
def is_coprime(x,y):
    return gcd(x,y) == 1","This function 'gcd' performs a specific operation.

The function 'gcd' takes the following parameters: p, q. It performs operations based on the parameters provided.","def test_gcd():
    # Add test cases for gcd
    assert gcd(...) == expected_output"
"def merge(a,b):
    c = []
    while len(a) != 0 and len(b) != 0:
        if a[0] < b[0]:
            c.append(a[0])
            a.remove(a[0])
        else:
            c.append(b[0])
            b.remove(b[0])
    if len(a) == 0:
        c += b
    else:
        c += a
    return c
def merge_sort(x):
    if len(x) == 0 or len(x) == 1:
        return x
    else:
        middle = len(x)//2
        a = merge_sort(x[:middle])
        b = merge_sort(x[middle:])
        return merge(a,b)
","This function 'merge' performs a specific operation.

The function 'merge' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_merge():
    # Add test cases for merge
    assert merge(...) == expected_output"
"def parabola_vertex(a, b, c): 
  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))
  return vertex","This function 'parabola_vertex' performs a specific operation.

The function 'parabola_vertex' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_parabola_vertex():
    # Add test cases for parabola_vertex
    assert parabola_vertex(...) == expected_output"
"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result","This function 'specified_element' performs a specific operation.

The function 'specified_element' takes the following parameters: nums, N. It performs operations based on the parameters provided.","def test_specified_element():
    # Add test cases for specified_element
    assert specified_element(...) == expected_output"
"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n 
    while (temp > 0) :     
        if (count % 2 == 1) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ","This function 'even_bit_toggle_number' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def tuple_int_str(tuple_str):
    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)
    return result","This function 'tuple_int_str' performs a specific operation.

The function 'tuple_int_str' takes the following parameters: tuple_str. It performs operations based on the parameters provided.","def test_tuple_int_str():
    # Add test cases for tuple_int_str
    assert tuple_int_str(...) == expected_output"
"from itertools import groupby
def encode_list(list1):
    return [[len(list(group)), key] for key, group in groupby(list1)]","This function 'encode_list' performs a specific operation.

The function 'encode_list' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_encode_list():
    # Add test cases for encode_list
    assert encode_list(...) == expected_output"
"def min_Ops(arr,n,k): 
    max1 = max(arr) 
    res = 0
    for i in range(0,n):  
        if ((max1 - arr[i]) % k != 0): 
            return -1 
        else: 
            res += (max1 - arr[i]) / k 
    return int(res) ","This function 'min_Ops' performs a specific operation.

The function 'min_Ops' takes the following parameters: arr, n, k. It performs operations based on the parameters provided.","def test_min_Ops():
    # Add test cases for min_Ops
    assert min_Ops(...) == expected_output"
"def month_season(month,days):
 if month in ('January', 'February', 'March'):
	 season = 'winter'
 elif month in ('April', 'May', 'June'):
	 season = 'spring'
 elif month in ('July', 'August', 'September'):
	 season = 'summer'
 else:
	 season = 'autumn'
 if (month == 'March') and (days > 19):
	 season = 'spring'
 elif (month == 'June') and (days > 20):
	 season = 'summer'
 elif (month == 'September') and (days > 21):
	 season = 'autumn'
 elif (month == 'October') and (days > 21):
	 season = 'autumn'
 elif (month == 'November') and (days > 21):
	 season = 'autumn'
 elif (month == 'December') and (days > 20):
	 season = 'winter'
 return season","This function 'month_season' performs a specific operation.

The function 'month_season' takes the following parameters: month, days. It performs operations based on the parameters provided.","def test_month_season():
    # Add test cases for month_season
    assert month_season(...) == expected_output"
"def solution (a, b, n): 
	i = 0
	while i * a <= n: 
		if (n - (i * a)) % b == 0: 
			return (""x = "",i ,"", y = "", 
			int((n - (i * a)) / b)) 
			return 0
		i = i + 1
	return (""No solution"") ","This function 'solution' performs a specific operation.

The function 'solution' takes the following parameters: a, b, n. It performs operations based on the parameters provided.","def test_solution():
    # Add test cases for solution
    assert solution(...) == expected_output"
"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result","This function 'remove_elements' performs a specific operation.

The function 'remove_elements' takes the following parameters: list1, list2. It performs operations based on the parameters provided.","def test_remove_elements():
    # Add test cases for remove_elements
    assert remove_elements(...) == expected_output"
"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)","This function 'sum_series' performs a specific operation.

The function 'sum_series' takes the following parameters: n. It performs operations based on the parameters provided.","def test_sum_series():
    # Add test cases for sum_series
    assert sum_series(...) == expected_output"
"from math import tan, pi
def area_polygon(s,l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area","This function 'area_polygon' performs a specific operation.

The function 'area_polygon' takes the following parameters: s, l. It performs operations based on the parameters provided.","def test_area_polygon():
    # Add test cases for area_polygon
    assert area_polygon(...) == expected_output"
"import math 
def divSum(n): 
    sum = 1; 
    i = 2; 
    while(i * i <= n): 
        if (n % i == 0): 
            sum = (sum + i +math.floor(n / i)); 
        i += 1; 
    return sum; 
def areEquivalent(num1,num2): 
    return divSum(num1) == divSum(num2); ","This function 'divSum' performs a specific operation.

The function 'divSum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_divSum():
    # Add test cases for divSum
    assert divSum(...) == expected_output"
"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars ","This function 'count_char_position' performs a specific operation.

The function 'count_char_position' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_count_char_position():
    # Add test cases for count_char_position
    assert count_char_position(...) == expected_output"
"def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(i+1,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; ","This function 'find_even_Pair' performs a specific operation.

The function 'find_even_Pair' takes the following parameters: A, N. It performs operations based on the parameters provided.","def test_find_even_Pair():
    # Add test cases for find_even_Pair
    assert find_even_Pair(...) == expected_output"
"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ","This function 'next_Power_Of_2' performs a specific operation.

The function 'next_Power_Of_2' takes the following parameters: n. It performs operations based on the parameters provided.","def test_next_Power_Of_2():
    # Add test cases for next_Power_Of_2
    assert next_Power_Of_2(...) == expected_output"
"def frequency(a,x): 
    count = 0  
    for i in a: 
        if i == x: count += 1
    return count ","This function 'frequency' performs a specific operation.

The function 'frequency' takes the following parameters: a, x. It performs operations based on the parameters provided.","def test_frequency():
    # Add test cases for frequency
    assert frequency(...) == expected_output"
"def get_pell(n): 
	if (n <= 2): 
		return n 
	a = 1
	b = 2
	for i in range(3, n+1): 
		c = 2 * b + a 
		a = b 
		b = c 
	return b ","This function 'get_pell' performs a specific operation.

The function 'get_pell' takes the following parameters: n. It performs operations based on the parameters provided.","def test_get_pell():
    # Add test cases for get_pell
    assert get_pell(...) == expected_output"
"def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ","This function 'sum_range_list' performs a specific operation.

The function 'sum_range_list' takes the following parameters: list1, m, n. It performs operations based on the parameters provided.","def test_sum_range_list():
    # Add test cases for sum_range_list
    assert sum_range_list(...) == expected_output"
"import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter","This function 'perimeter_pentagon' performs a specific operation.

The function 'perimeter_pentagon' takes the following parameters: a. It performs operations based on the parameters provided.","def test_perimeter_pentagon():
    # Add test cases for perimeter_pentagon
    assert perimeter_pentagon(...) == expected_output"
"def count_occurance(s):
  count=0
  for i in range(len(s)):
    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):
      count = count + 1
  return count","This function 'count_occurance' performs a specific operation.

The function 'count_occurance' takes the following parameters: s. It performs operations based on the parameters provided.","def test_count_occurance():
    # Add test cases for count_occurance
    assert count_occurance(...) == expected_output"
"import re
def remove_splchar(text): 
 pattern = re.compile('[\W_]+')
 return (pattern.sub('', text))","This function 'remove_splchar' performs a specific operation.

The function 'remove_splchar' takes the following parameters: text. It performs operations based on the parameters provided.","def test_remove_splchar():
    # Add test cases for remove_splchar
    assert remove_splchar(...) == expected_output"
"def group_keyvalue(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result","This function 'group_keyvalue' performs a specific operation.

The function 'group_keyvalue' takes the following parameters: l. It performs operations based on the parameters provided.","def test_group_keyvalue():
    # Add test cases for group_keyvalue
    assert group_keyvalue(...) == expected_output"
"def is_valid_parenthese( str1):
        stack, pchar = [], {""("": "")"", ""{"": ""}"", ""["": ""]""}
        for parenthese in str1:
            if parenthese in pchar:
                stack.append(parenthese)
            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
                return False
        return len(stack) == 0","This function 'is_valid_parenthese' performs a specific operation.

The function 'is_valid_parenthese' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_is_valid_parenthese():
    # Add test cases for is_valid_parenthese
    assert is_valid_parenthese(...) == expected_output"
"def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter","This function 'perimeter_triangle' performs a specific operation.

The function 'perimeter_triangle' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_perimeter_triangle():
    # Add test cases for perimeter_triangle
    assert perimeter_triangle(...) == expected_output"
"def answer(L,R): 
    if (2 * L <= R): 
        return (L ,2*L)
    else: 
        return (-1) ","This function 'answer' performs a specific operation.

The function 'answer' takes the following parameters: L, R. It performs operations based on the parameters provided.","def test_answer():
    # Add test cases for answer
    assert answer(...) == expected_output"
"import re
def string_literals(patterns,text):
  for pattern in patterns:
     if re.search(pattern,  text):
       return ('Matched!')
     else:
       return ('Not Matched!')","This function 'string_literals' performs a specific operation.

The function 'string_literals' takes the following parameters: patterns, text. It performs operations based on the parameters provided.","def test_string_literals():
    # Add test cases for string_literals
    assert string_literals(...) == expected_output"
"def is_num_keith(x): 
	terms = [] 
	temp = x 
	n = 0 
	while (temp > 0): 
		terms.append(temp % 10) 
		temp = int(temp / 10) 
		n+=1 
	terms.reverse() 
	next_term = 0 
	i = n 
	while (next_term < x): 
		next_term = 0 
		for j in range(1,n+1): 
			next_term += terms[i - j] 
		terms.append(next_term) 
		i+=1 
	return (next_term == x) ","This function 'is_num_keith' performs a specific operation.

The function 'is_num_keith' takes the following parameters: x. It performs operations based on the parameters provided.","def test_is_num_keith():
    # Add test cases for is_num_keith
    assert is_num_keith(...) == expected_output"
"from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
 return dist","This function 'distance_lat_long' performs a specific operation.

The function 'distance_lat_long' takes the following parameters: slat, slon, elat, elon. It performs operations based on the parameters provided.","def test_distance_lat_long():
    # Add test cases for distance_lat_long
    assert distance_lat_long(...) == expected_output"
"def common_prefix_util(str1, str2): 
	result = """"; 
	n1 = len(str1) 
	n2 = len(str2) 
	i = 0
	j = 0
	while i <= n1 - 1 and j <= n2 - 1: 
		if (str1[i] != str2[j]): 
			break
		result += str1[i] 
		i += 1
		j += 1
	return (result) 
def common_prefix (arr, n): 
	prefix = arr[0] 
	for i in range (1, n): 
		prefix = common_prefix_util(prefix, arr[i]) 
	return (prefix) ","This function 'common_prefix_util' performs a specific operation.

The function 'common_prefix_util' takes the following parameters: str1, str2. It performs operations based on the parameters provided.","def test_common_prefix_util():
    # Add test cases for common_prefix_util
    assert common_prefix_util(...) == expected_output"
"import re
def find_character(string):
  uppercase_characters = re.findall(r""[A-Z]"", string) 
  lowercase_characters = re.findall(r""[a-z]"", string) 
  numerical_characters = re.findall(r""[0-9]"", string) 
  special_characters = re.findall(r""[, .!?]"", string) 
  return uppercase_characters, lowercase_characters, numerical_characters, special_characters","This function 'find_character' performs a specific operation.

The function 'find_character' takes the following parameters: string. It performs operations based on the parameters provided.","def test_find_character():
    # Add test cases for find_character
    assert find_character(...) == expected_output"
"def count_pairs(arr, n, k):
  count=0;
  for i in range(0,n):
    for j in range(i+1, n):
      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
        count += 1
  return count","This function 'count_pairs' performs a specific operation.

The function 'count_pairs' takes the following parameters: arr, n, k. It performs operations based on the parameters provided.","def test_count_pairs():
    # Add test cases for count_pairs
    assert count_pairs(...) == expected_output"
"def greater_specificnum(list,num):
 greater_specificnum=all(x >= num for x in list)
 return greater_specificnum","This function 'greater_specificnum' performs a specific operation.

The function 'greater_specificnum' takes the following parameters: list, num. It performs operations based on the parameters provided.","def test_greater_specificnum():
    # Add test cases for greater_specificnum
    assert greater_specificnum(...) == expected_output"
"def parabola_focus(a, b, c): 
  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))
  return focus","This function 'parabola_focus' performs a specific operation.

The function 'parabola_focus' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_parabola_focus():
    # Add test cases for parabola_focus
    assert parabola_focus(...) == expected_output"
"import re
def check_literals(text, patterns):
  for pattern in patterns:
    if re.search(pattern,  text):
        return ('Matched!')
    else:
        return ('Not Matched!')","This function 'check_literals' performs a specific operation.

The function 'check_literals' takes the following parameters: text, patterns. It performs operations based on the parameters provided.","def test_check_literals():
    # Add test cases for check_literals
    assert check_literals(...) == expected_output"
"def longest_common_subsequence(X, Y, m, n): 
    if m == 0 or n == 0: 
       return 0 
    elif X[m-1] == Y[n-1]: 
       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
    else: 
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))","This function 'longest_common_subsequence' performs a specific operation.

The function 'longest_common_subsequence' takes the following parameters: X, Y, m, n. It performs operations based on the parameters provided.","def test_longest_common_subsequence():
    # Add test cases for longest_common_subsequence
    assert longest_common_subsequence(...) == expected_output"
"def prod_Square(n):
    for i in range(2,(n) + 1):
        if (i*i < (n+1)):
            for j in range(2,n + 1):
                if ((i*i*j*j) == n):
                    return True;
    return False;","This function 'prod_Square' performs a specific operation.

The function 'prod_Square' takes the following parameters: n. It performs operations based on the parameters provided.","def test_prod_Square():
    # Add test cases for prod_Square
    assert prod_Square(...) == expected_output"
"def first_Missing_Positive(arr,n): 
    ptr = 0
    for i in range(n):
        if arr[i] == 1:
            ptr = 1
            break
    if ptr == 0:
        return(1)
    for i in range(n):
        if arr[i] <= 0 or arr[i] > n:
            arr[i] = 1
    for i in range(n):
        arr[(arr[i] - 1) % n] += n
    for i in range(n):
        if arr[i] <= n:
            return(i + 1)
    return(n + 1)","This function 'first_Missing_Positive' performs a specific operation.

The function 'first_Missing_Positive' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_first_Missing_Positive():
    # Add test cases for first_Missing_Positive
    assert first_Missing_Positive(...) == expected_output"
"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ","This function 'count_Intgral_Points' performs a specific operation.

The function 'count_Intgral_Points' takes the following parameters: x1, y1, x2, y2. It performs operations based on the parameters provided.","def test_count_Intgral_Points():
    # Add test cases for count_Intgral_Points
    assert count_Intgral_Points(...) == expected_output"
"def check_monthnumber(monthname3):
  if monthname3 ==""April"" or monthname3== ""June"" or monthname3== ""September"" or monthname3== ""November"":
    return True
  else:
    return False","This function 'check_monthnumber' performs a specific operation.

The function 'check_monthnumber' takes the following parameters: monthname3. It performs operations based on the parameters provided.","def test_check_monthnumber():
    # Add test cases for check_monthnumber
    assert check_monthnumber(...) == expected_output"
"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ","This function 'check_String' performs a specific operation.

The function 'check_String' takes the following parameters: str. It performs operations based on the parameters provided.","def test_check_String():
    # Add test cases for check_String
    assert check_String(...) == expected_output"
"def remove_tuple(test_tup):
  res = tuple(set(test_tup))
  return (res) ","This function 'remove_tuple' performs a specific operation.

The function 'remove_tuple' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_remove_tuple():
    # Add test cases for remove_tuple
    assert remove_tuple(...) == expected_output"
"def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; ","This function 'octal_To_Decimal' performs a specific operation.

The function 'octal_To_Decimal' takes the following parameters: n. It performs operations based on the parameters provided.","def test_octal_To_Decimal():
    # Add test cases for octal_To_Decimal
    assert octal_To_Decimal(...) == expected_output"
"def first(arr,x,n): 
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            high = mid - 1
    return res","This function 'first' performs a specific operation.

The function 'first' takes the following parameters: arr, x, n. It performs operations based on the parameters provided.","def test_first():
    # Add test cases for first
    assert first(...) == expected_output"
"def remove_tuples(test_list, K):
  res = [ele for ele in test_list if len(ele) != K]
  return (res) ","This function 'remove_tuples' performs a specific operation.

The function 'remove_tuples' takes the following parameters: test_list, K. It performs operations based on the parameters provided.","def test_remove_tuples():
    # Add test cases for remove_tuples
    assert remove_tuples(...) == expected_output"
"def find_exponentio(test_tup1, test_tup2):
  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res)
","This function 'find_exponentio' performs a specific operation.

The function 'find_exponentio' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_find_exponentio():
    # Add test cases for find_exponentio
    assert find_exponentio(...) == expected_output"
"import math
def largest_triangle(a,b): 
    if (a < 0 or b < 0): 
        return -1 
    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  
    return area ","This function 'largest_triangle' performs a specific operation.

The function 'largest_triangle' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_largest_triangle():
    # Add test cases for largest_triangle
    assert largest_triangle(...) == expected_output"
"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; ","This function 'highest_Power_of_2' performs a specific operation.

The function 'highest_Power_of_2' takes the following parameters: n. It performs operations based on the parameters provided.","def test_highest_Power_of_2():
    # Add test cases for highest_Power_of_2
    assert highest_Power_of_2(...) == expected_output"
"def position_max(list1):
    max_val = max(list1)
    max_result = [i for i, j in enumerate(list1) if j == max_val]
    return max_result","This function 'position_max' performs a specific operation.

The function 'position_max' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_position_max():
    # Add test cases for position_max
    assert position_max(...) == expected_output"
"def chkList(lst): 
    return len(set(lst)) == 1","This function 'chkList' performs a specific operation.

The function 'chkList' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_chkList():
    # Add test cases for chkList
    assert chkList(...) == expected_output"
"def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2","This function 'remove_even' performs a specific operation.

The function 'remove_even' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_remove_even():
    # Add test cases for remove_even
    assert remove_even(...) == expected_output"
"def hamming_Distance(n1,n2) : 
    x = n1 ^ n2  
    setBits = 0
    while (x > 0) : 
        setBits += x & 1
        x >>= 1
    return setBits  ","This function 'hamming_Distance' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def count(s,c) : 
    res = 0 
    for i in range(len(s)) : 
        if (s[i] == c): 
            res = res + 1
    return res ","This function 'count' performs a specific operation.

The function 'count' takes the following parameters: s, c) : 
    res = 0 
    for i in range(len(s)) : 
        if (s[i] == c. It performs operations based on the parameters provided.","def test_count():
    # Add test cases for count
    assert count(...) == expected_output"
"def inversion_elements(test_tup):
  res = tuple(list(map(lambda x: ~x, list(test_tup))))
  return (res) ","This function 'inversion_elements' performs a specific operation.

The function 'inversion_elements' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_inversion_elements():
    # Add test cases for inversion_elements
    assert inversion_elements(...) == expected_output"
"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","This function 'concatenate_elements' performs a specific operation.

The function 'concatenate_elements' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_concatenate_elements():
    # Add test cases for concatenate_elements
    assert concatenate_elements(...) == expected_output"
"def find_longest_repeating_subseq(str): 
	n = len(str) 
	dp = [[0 for k in range(n+1)] for l in range(n+1)] 
	for i in range(1, n+1): 
		for j in range(1, n+1): 
			if (str[i-1] == str[j-1] and i != j): 
				dp[i][j] = 1 + dp[i-1][j-1] 
			else: 
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 
	return dp[n][n]","This function 'find_longest_repeating_subseq' performs a specific operation.

The function 'find_longest_repeating_subseq' takes the following parameters: str. It performs operations based on the parameters provided.","def test_find_longest_repeating_subseq():
    # Add test cases for find_longest_repeating_subseq
    assert find_longest_repeating_subseq(...) == expected_output"
"import re
def is_decimal(num):
  num_fetch = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
  result = num_fetch.search(num)
  return bool(result)","This function 'is_decimal' performs a specific operation.

The function 'is_decimal' takes the following parameters: num. It performs operations based on the parameters provided.","def test_is_decimal():
    # Add test cases for is_decimal
    assert is_decimal(...) == expected_output"
"import heapq as hq
def heap_replace(heap,a):
  hq.heapify(heap)
  hq.heapreplace(heap, a)
  return heap","This function 'heap_replace' performs a specific operation.

The function 'heap_replace' takes the following parameters: heap, a. It performs operations based on the parameters provided.","def test_heap_replace():
    # Add test cases for heap_replace
    assert heap_replace(...) == expected_output"
"import re
def is_allowed_specific_char(string):
    get_char = re.compile(r'[^a-zA-Z0-9.]')
    string = get_char.search(string)
    return not bool(string)","This function 'is_allowed_specific_char' performs a specific operation.

The function 'is_allowed_specific_char' takes the following parameters: string. It performs operations based on the parameters provided.","def test_is_allowed_specific_char():
    # Add test cases for is_allowed_specific_char
    assert is_allowed_specific_char(...) == expected_output"
"def count_Num(n): 
    if (n == 1): 
        return 1
    count = pow(2,n - 2) 
    return count ","This function 'count_Num' performs a specific operation.

The function 'count_Num' takes the following parameters: n. It performs operations based on the parameters provided.","def test_count_Num():
    # Add test cases for count_Num
    assert count_Num(...) == expected_output"
"import math  
def fourth_Power_Sum(n): 
    sum = 0
    for i in range(1,n+1) : 
        sum = sum + (i*i*i*i) 
    return sum","This function 'fourth_Power_Sum' performs a specific operation.

The function 'fourth_Power_Sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_fourth_Power_Sum():
    # Add test cases for fourth_Power_Sum
    assert fourth_Power_Sum(...) == expected_output"
"def concatenate_strings(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","This function 'concatenate_strings' performs a specific operation.

The function 'concatenate_strings' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_concatenate_strings():
    # Add test cases for concatenate_strings
    assert concatenate_strings(...) == expected_output"
"import math
def degree_radian(radian):
 degree = radian*(180/math.pi)
 return degree","This function 'degree_radian' performs a specific operation.

The function 'degree_radian' takes the following parameters: radian. It performs operations based on the parameters provided.","def test_degree_radian():
    # Add test cases for degree_radian
    assert degree_radian(...) == expected_output"
"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]","This function 'decode_list' performs a specific operation.

The function 'decode_list' takes the following parameters: alist. It performs operations based on the parameters provided.","def test_decode_list():
    # Add test cases for decode_list
    assert decode_list(...) == expected_output"
"def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist ","This function 'check_subset_list' performs a specific operation.

The function 'check_subset_list' takes the following parameters: list1, list2. It performs operations based on the parameters provided.","def test_check_subset_list():
    # Add test cases for check_subset_list
    assert check_subset_list(...) == expected_output"
"def first_Repeated_Char(str): 
    h = {}
    for ch in str:
        if ch in h: 
            return ch;
        else: 
            h[ch] = 0
    return '\0'","This function 'first_Repeated_Char' performs a specific operation.

The function 'first_Repeated_Char' takes the following parameters: str. It performs operations based on the parameters provided.","def test_first_Repeated_Char():
    # Add test cases for first_Repeated_Char
    assert first_Repeated_Char(...) == expected_output"
"import math   
def min_Operations(A,B):  
    if (A > B): 
        swap(A,B)  
    B = B // math.gcd(A,B);  
    return B - 1","This function 'min_Operations' performs a specific operation.

The function 'min_Operations' takes the following parameters: A, B. It performs operations based on the parameters provided.","def test_min_Operations():
    # Add test cases for min_Operations
    assert min_Operations(...) == expected_output"
"
def extract_min_max(test_tup, K):
  res = []
  test_tup = list(test_tup)
  temp = sorted(test_tup)
  for idx, val in enumerate(temp):
    if idx < K or idx >= len(temp) - K:
      res.append(val)
  res = tuple(res)
  return (res) ","This function 'extract_min_max' performs a specific operation.

The function 'extract_min_max' takes the following parameters: test_tup, K. It performs operations based on the parameters provided.","def test_extract_min_max():
    # Add test cases for extract_min_max
    assert extract_min_max(...) == expected_output"
"import re
def replace_max_specialchar(text,n):
 return (re.sub(""[ ,.]"", "":"", text, n))","This function 'replace_max_specialchar' performs a specific operation.

The function 'replace_max_specialchar' takes the following parameters: text, n. It performs operations based on the parameters provided.","def test_replace_max_specialchar():
    # Add test cases for replace_max_specialchar
    assert replace_max_specialchar(...) == expected_output"
"def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even","This function 'first_even' performs a specific operation.

The function 'first_even' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_first_even():
    # Add test cases for first_even
    assert first_even(...) == expected_output"
"def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ","This function 'check_type' performs a specific operation.

The function 'check_type' takes the following parameters: test_tuple. It performs operations based on the parameters provided.","def test_check_type():
    # Add test cases for check_type
    assert check_type(...) == expected_output"
"def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1","This function 'is_majority' performs a specific operation.

The function 'is_majority' takes the following parameters: arr, n, x. It performs operations based on the parameters provided.","def test_is_majority():
    # Add test cases for is_majority
    assert is_majority(...) == expected_output"
"def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count ","This function 'count_Set_Bits' performs a specific operation.

The function 'count_Set_Bits' takes the following parameters: n. It performs operations based on the parameters provided.","def test_count_Set_Bits():
    # Add test cases for count_Set_Bits
    assert count_Set_Bits(...) == expected_output"
"def find_Min(arr,low,high): 
    while (low < high): 
        mid = low + (high - low) // 2;   
        if (arr[mid] == arr[high]): 
            high -= 1; 
        elif (arr[mid] > arr[high]): 
            low = mid + 1; 
        else: 
            high = mid; 
    return arr[high]; ","This function 'find_Min' performs a specific operation.

The function 'find_Min' takes the following parameters: arr, low, high. It performs operations based on the parameters provided.","def test_find_Min():
    # Add test cases for find_Min
    assert find_Min(...) == expected_output"
"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result","This function 'odd_values_string' performs a specific operation.

The function 'odd_values_string' takes the following parameters: str. It performs operations based on the parameters provided.","def test_odd_values_string():
    # Add test cases for odd_values_string
    assert odd_values_string(...) == expected_output"
"def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest ","This function 'min_of_three' performs a specific operation.

The function 'min_of_three' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_min_of_three():
    # Add test cases for min_of_three
    assert min_of_three(...) == expected_output"
"def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False","This function 'all_Bits_Set_In_The_Given_Range' performs a specific operation.

The function 'all_Bits_Set_In_The_Given_Range' takes the following parameters: n, l, r. It performs operations based on the parameters provided.","def test_all_Bits_Set_In_The_Given_Range():
    # Add test cases for all_Bits_Set_In_The_Given_Range
    assert all_Bits_Set_In_The_Given_Range(...) == expected_output"
"def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr","This function 're_arrange_array' performs a specific operation.

The function 're_arrange_array' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_re_arrange_array():
    # Add test cases for re_arrange_array
    assert re_arrange_array(...) == expected_output"
"def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2","This function 'replace_blank' performs a specific operation.

The function 'replace_blank' takes the following parameters: str1, char. It performs operations based on the parameters provided.","def test_replace_blank():
    # Add test cases for replace_blank
    assert replace_blank(...) == expected_output"
"def max_sum(tri, n): 
	if n > 1: 
		tri[1][1] = tri[1][1]+tri[0][0] 
		tri[1][0] = tri[1][0]+tri[0][0] 
	for i in range(2, n): 
		tri[i][0] = tri[i][0] + tri[i-1][0] 
		tri[i][i] = tri[i][i] + tri[i-1][i-1] 
		for j in range(1, i): 
			if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: 
				tri[i][j] = tri[i][j] + tri[i-1][j-1] 
			else: 
				tri[i][j] = tri[i][j]+tri[i-1][j] 
	return (max(tri[n-1]))","This function 'max_sum' performs a specific operation.

The function 'max_sum' takes the following parameters: tri, n. It performs operations based on the parameters provided.","def test_max_sum():
    # Add test cases for max_sum
    assert max_sum(...) == expected_output"
"import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest","This function 'larg_nnum' performs a specific operation.

The function 'larg_nnum' takes the following parameters: list1, n. It performs operations based on the parameters provided.","def test_larg_nnum():
    # Add test cases for larg_nnum
    assert larg_nnum(...) == expected_output"
"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface","This function 'lateralsuface_cylinder' performs a specific operation.

The function 'lateralsuface_cylinder' takes the following parameters: r, h. It performs operations based on the parameters provided.","def test_lateralsuface_cylinder():
    # Add test cases for lateralsuface_cylinder
    assert lateralsuface_cylinder(...) == expected_output"
"def volume_cube(l):
  volume = l * l * l
  return volume","This function 'volume_cube' performs a specific operation.

The function 'volume_cube' takes the following parameters: l. It performs operations based on the parameters provided.","def test_volume_cube():
    # Add test cases for volume_cube
    assert volume_cube(...) == expected_output"
"def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ","This function 'even_bit_set_number' performs a specific operation.

The function 'even_bit_set_number' takes the following parameters: n. It performs operations based on the parameters provided.","def test_even_bit_set_number():
    # Add test cases for even_bit_set_number
    assert even_bit_set_number(...) == expected_output"
"def No_of_Triangle(N,K):
    if (N < K):
        return -1;
    else:
        Tri_up = 0;
        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;
        Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;
        return Tri_up + Tri_down;","This function 'No_of_Triangle' performs a specific operation.

The function 'No_of_Triangle' takes the following parameters: N, K. It performs operations based on the parameters provided.","def test_No_of_Triangle():
    # Add test cases for No_of_Triangle
    assert No_of_Triangle(...) == expected_output"
"from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ","This function 'check_occurences' performs a specific operation.

The function 'check_occurences' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_check_occurences():
    # Add test cases for check_occurences
    assert check_occurences(...) == expected_output"
"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ","This function 'number_of_substrings' performs a specific operation.

The function 'number_of_substrings' takes the following parameters: str. It performs operations based on the parameters provided.","def test_number_of_substrings():
    # Add test cases for number_of_substrings
    assert number_of_substrings(...) == expected_output"
"def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]","This function 'get_total_number_of_sequences' performs a specific operation.

The function 'get_total_number_of_sequences' takes the following parameters: m, n. It performs operations based on the parameters provided.","def test_get_total_number_of_sequences():
    # Add test cases for get_total_number_of_sequences
    assert get_total_number_of_sequences(...) == expected_output"
"def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
","This function 'replace_list' performs a specific operation.

The function 'replace_list' takes the following parameters: list1, list2. It performs operations based on the parameters provided.","def test_replace_list():
    # Add test cases for replace_list
    assert replace_list(...) == expected_output"
"def array_3d(m,n,o):
 array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]
 return array_3d","This function 'array_3d' performs a specific operation.

The function 'array_3d' takes the following parameters: m, n, o. It performs operations based on the parameters provided.","def test_array_3d():
    # Add test cases for array_3d
    assert array_3d(...) == expected_output"
"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total","This function 'count_charac' performs a specific operation.

The function 'count_charac' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_count_charac():
    # Add test cases for count_charac
    assert count_charac(...) == expected_output"
"def sort_on_occurence(lst): 
	dct = {} 
	for i, j in lst: 
		dct.setdefault(i, []).append(j) 
	return ([(i, *dict.fromkeys(j), len(j)) 
				for i, j in dct.items()]) ","This function 'sort_on_occurence' performs a specific operation.

The function 'sort_on_occurence' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_sort_on_occurence():
    # Add test cases for sort_on_occurence
    assert sort_on_occurence(...) == expected_output"
"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ","This function 'next_Perfect_Square' performs a specific operation.

The function 'next_Perfect_Square' takes the following parameters: N. It performs operations based on the parameters provided.","def test_next_Perfect_Square():
    # Add test cases for next_Perfect_Square
    assert next_Perfect_Square(...) == expected_output"
"def max_sum(arr, n): 
	MSIBS = arr[:] 
	for i in range(n): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, n + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum","This function 'max_sum' performs a specific operation.

The function 'max_sum' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_max_sum():
    # Add test cases for max_sum
    assert max_sum(...) == expected_output"
"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;","This function 'babylonian_squareroot' performs a specific operation.

The function 'babylonian_squareroot' takes the following parameters: number. It performs operations based on the parameters provided.","def test_babylonian_squareroot():
    # Add test cases for babylonian_squareroot
    assert babylonian_squareroot(...) == expected_output"
"def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]","This function 'lps' performs a specific operation.

The function 'lps' takes the following parameters: str. It performs operations based on the parameters provided.","def test_lps():
    # Add test cases for lps
    assert lps(...) == expected_output"
"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ","This function 'harmonic_sum' performs a specific operation.

The function 'harmonic_sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_harmonic_sum():
    # Add test cases for harmonic_sum
    assert harmonic_sum(...) == expected_output"
"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result","This function 'intersection_array' performs a specific operation.

The function 'intersection_array' takes the following parameters: array_nums1, array_nums2. It performs operations based on the parameters provided.","def test_intersection_array():
    # Add test cases for intersection_array
    assert intersection_array(...) == expected_output"
"def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ","This function 'count_X' performs a specific operation.

The function 'count_X' takes the following parameters: tup, x. It performs operations based on the parameters provided.","def test_count_X():
    # Add test cases for count_X
    assert count_X(...) == expected_output"
"def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list","This function 'insert_element' performs a specific operation.

The function 'insert_element' takes the following parameters: list, element. It performs operations based on the parameters provided.","def test_insert_element():
    # Add test cases for insert_element
    assert insert_element(...) == expected_output"
"import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) ","This function 'convert' performs a specific operation.

The function 'convert' takes the following parameters: numbers. It performs operations based on the parameters provided.","def test_convert():
    # Add test cases for convert
    assert convert(...) == expected_output"
"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr","This function 'count_integer' performs a specific operation.

The function 'count_integer' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_count_integer():
    # Add test cases for count_integer
    assert count_integer(...) == expected_output"
"import re
def words_ae(text):
 list = re.findall(""[ae]\w+"", text)
 return list","This function 'words_ae' performs a specific operation.

The function 'words_ae' takes the following parameters: text. It performs operations based on the parameters provided.","def test_words_ae():
    # Add test cases for words_ae
    assert words_ae(...) == expected_output"
"from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))
","This function 'combinations_colors' performs a specific operation.

The function 'combinations_colors' takes the following parameters: l, n. It performs operations based on the parameters provided.","def test_combinations_colors():
    # Add test cases for combinations_colors
    assert combinations_colors(...) == expected_output"
"def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr","This function 'count_Primes_nums' performs a specific operation.

The function 'count_Primes_nums' takes the following parameters: n. It performs operations based on the parameters provided.","def test_count_Primes_nums():
    # Add test cases for count_Primes_nums
    assert count_Primes_nums(...) == expected_output"
"def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)","This function 'swap_numbers' performs a specific operation.

The function 'swap_numbers' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_swap_numbers():
    # Add test cases for swap_numbers
    assert swap_numbers(...) == expected_output"
"def count_odd(array_nums):
   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
   return count_odd","This function 'count_odd' performs a specific operation.

The function 'count_odd' takes the following parameters: array_nums. It performs operations based on the parameters provided.","def test_count_odd():
    # Add test cases for count_odd
    assert count_odd(...) == expected_output"
"def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","This function 'maximize_elements' performs a specific operation.

The function 'maximize_elements' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_maximize_elements():
    # Add test cases for maximize_elements
    assert maximize_elements(...) == expected_output"
"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)","This function 'newman_prime' performs a specific operation.

The function 'newman_prime' takes the following parameters: n. It performs operations based on the parameters provided.","def test_newman_prime():
    # Add test cases for newman_prime
    assert newman_prime(...) == expected_output"
"def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","This function 'division_elements' performs a specific operation.

The function 'division_elements' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_division_elements():
    # Add test cases for division_elements
    assert division_elements(...) == expected_output"
"def split_two_parts(list1, L):
    return list1[:L], list1[L:]","This function 'split_two_parts' performs a specific operation.

The function 'split_two_parts' takes the following parameters: list1, L. It performs operations based on the parameters provided.","def test_split_two_parts():
    # Add test cases for split_two_parts
    assert split_two_parts(...) == expected_output"
"def merge_dict(d1,d2):
 d = d1.copy()
 d.update(d2)
 return d","This function 'merge_dict' performs a specific operation.

The function 'merge_dict' takes the following parameters: d1, d2. It performs operations based on the parameters provided.","def test_merge_dict():
    # Add test cases for merge_dict
    assert merge_dict(...) == expected_output"
"def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age","This function 'dog_age' performs a specific operation.

The function 'dog_age' takes the following parameters: h_age. It performs operations based on the parameters provided.","def test_dog_age():
    # Add test cases for dog_age
    assert dog_age(...) == expected_output"
"def list_split(S, step):
    return [S[i::step] for i in range(step)]","This function 'list_split' performs a specific operation.

The function 'list_split' takes the following parameters: S, step. It performs operations based on the parameters provided.","def test_list_split():
    # Add test cases for list_split
    assert list_split(...) == expected_output"
"def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA","This function 'lateralsurface_cube' performs a specific operation.

The function 'lateralsurface_cube' takes the following parameters: l. It performs operations based on the parameters provided.","def test_lateralsurface_cube():
    # Add test cases for lateralsurface_cube
    assert lateralsurface_cube(...) == expected_output"
"def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ","This function 'square_Sum' performs a specific operation.

The function 'square_Sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_square_Sum():
    # Add test cases for square_Sum
    assert square_Sum(...) == expected_output"
"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ","This function 'find_star_num' performs a specific operation.

The function 'find_star_num' takes the following parameters: n. It performs operations based on the parameters provided.","def test_find_star_num():
    # Add test cases for find_star_num
    assert find_star_num(...) == expected_output"
"def ascii_value(k):
  ch=k
  return ord(ch)","This function 'ascii_value' performs a specific operation.

The function 'ascii_value' takes the following parameters: k. It performs operations based on the parameters provided.","def test_ascii_value():
    # Add test cases for ascii_value
    assert ascii_value(...) == expected_output"
"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum","This function 'sum_even_and_even_index' performs a specific operation.

The function 'sum_even_and_even_index' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_sum_even_and_even_index():
    # Add test cases for sum_even_and_even_index
    assert sum_even_and_even_index(...) == expected_output"
"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ","This function 'even_Power_Sum' performs a specific operation.

The function 'even_Power_Sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_even_Power_Sum():
    # Add test cases for even_Power_Sum
    assert even_Power_Sum(...) == expected_output"
"def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ","This function 'rear_extract' performs a specific operation.

The function 'rear_extract' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_rear_extract():
    # Add test cases for rear_extract
    assert rear_extract(...) == expected_output"
"def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ","This function 'substract_elements' performs a specific operation.

The function 'substract_elements' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_substract_elements():
    # Add test cases for substract_elements
    assert substract_elements(...) == expected_output"
"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ","This function 'even_binomial_Coeff_Sum' performs a specific operation.

The function 'even_binomial_Coeff_Sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_even_binomial_Coeff_Sum():
    # Add test cases for even_binomial_Coeff_Sum
    assert even_binomial_Coeff_Sum(...) == expected_output"
"import math as mt 
def get_Position(a,n,m): 
    for i in range(n): 
        a[i] = (a[i] // m + (a[i] % m != 0))  
    result,maxx = -1,-1
    for i in range(n - 1,-1,-1): 
        if (maxx < a[i]): 
            maxx = a[i] 
            result = i 
    return result + 1","This function 'get_Position' performs a specific operation.

The function 'get_Position' takes the following parameters: a, n, m. It performs operations based on the parameters provided.","def test_get_Position():
    # Add test cases for get_Position
    assert get_Position(...) == expected_output"
"def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume","This function 'volume_cylinder' performs a specific operation.

The function 'volume_cylinder' takes the following parameters: r, h. It performs operations based on the parameters provided.","def test_volume_cylinder():
    # Add test cases for volume_cylinder
    assert volume_cylinder(...) == expected_output"
"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result","This function 'dict_filter' performs a specific operation.

The function 'dict_filter' takes the following parameters: dict, n. It performs operations based on the parameters provided.","def test_dict_filter():
    # Add test cases for dict_filter
    assert dict_filter(...) == expected_output"
"def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ","This function 'count_first_elements' performs a specific operation.

The function 'count_first_elements' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_count_first_elements():
    # Add test cases for count_first_elements
    assert count_first_elements(...) == expected_output"
"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ","This function 'is_num_decagonal' performs a specific operation.

The function 'is_num_decagonal' takes the following parameters: n. It performs operations based on the parameters provided.","def test_is_num_decagonal():
    # Add test cases for is_num_decagonal
    assert is_num_decagonal(...) == expected_output"
"def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos","This function 'sequential_search' performs a specific operation.

The function 'sequential_search' takes the following parameters: dlist, item. It performs operations based on the parameters provided.","def test_sequential_search():
    # Add test cases for sequential_search
    assert sequential_search(...) == expected_output"
"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True","This function 'all_unique' performs a specific operation.

The function 'all_unique' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_all_unique():
    # Add test cases for all_unique
    assert all_unique(...) == expected_output"
"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)","This function 'sub_list' performs a specific operation.

The function 'sub_list' takes the following parameters: nums1, nums2. It performs operations based on the parameters provided.","def test_sub_list():
    # Add test cases for sub_list
    assert sub_list(...) == expected_output"
"def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True","This function 'validate' performs a specific operation.

The function 'validate' takes the following parameters: n. It performs operations based on the parameters provided.","def test_validate():
    # Add test cases for validate
    assert validate(...) == expected_output"
"def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element","This function 'check_element' performs a specific operation.

The function 'check_element' takes the following parameters: list, element. It performs operations based on the parameters provided.","def test_check_element():
    # Add test cases for check_element
    assert check_element(...) == expected_output"
"import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","This function 'text_match_two_three' performs a specific operation.

The function 'text_match_two_three' takes the following parameters: text. It performs operations based on the parameters provided.","def test_text_match_two_three():
    # Add test cases for text_match_two_three
    assert text_match_two_three(...) == expected_output"
"def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far","This function 'max_sub_array_sum_repeated' performs a specific operation.

The function 'max_sub_array_sum_repeated' takes the following parameters: a, n, k. It performs operations based on the parameters provided.","def test_max_sub_array_sum_repeated():
    # Add test cases for max_sub_array_sum_repeated
    assert max_sub_array_sum_repeated(...) == expected_output"
"def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)","This function 'square_Sum' performs a specific operation.

The function 'square_Sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_square_Sum():
    # Add test cases for square_Sum
    assert square_Sum(...) == expected_output"
"def modular_inverse(arr, N, P):
	current_element = 0
	for i in range(0, N):
		if ((arr[i] * arr[i]) % P == 1):
			current_element = current_element + 1
	return current_element","This function 'modular_inverse' performs a specific operation.

The function 'modular_inverse' takes the following parameters: arr, N, P. It performs operations based on the parameters provided.","def test_modular_inverse():
    # Add test cases for modular_inverse
    assert modular_inverse(...) == expected_output"
"def odd_Days(N): 
    hund1 = N // 100
    hund4 = N // 400
    leap = N >> 2
    ordd = N - leap 
    if (hund1): 
        ordd += hund1 
        leap -= hund1 
    if (hund4): 
        ordd -= hund4 
        leap += hund4 
    days = ordd + leap * 2
    odd = days % 7
    return odd ","This function 'odd_Days' performs a specific operation.

The function 'odd_Days' takes the following parameters: N. It performs operations based on the parameters provided.","def test_odd_Days():
    # Add test cases for odd_Days
    assert odd_Days(...) == expected_output"
"def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)","This function 'max_length' performs a specific operation.

The function 'max_length' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_max_length():
    # Add test cases for max_length
    assert max_length(...) == expected_output"
"def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]","This function 'count_no_of_ways' performs a specific operation.

The function 'count_no_of_ways' takes the following parameters: n, k. It performs operations based on the parameters provided.","def test_count_no_of_ways():
    # Add test cases for count_no_of_ways
    assert count_no_of_ways(...) == expected_output"
"def find(n,m):  
    q = n//m 
    return (q)","This function 'find' performs a specific operation.

The function 'find' takes the following parameters: n, m. It performs operations based on the parameters provided.","def test_find():
    # Add test cases for find
    assert find(...) == expected_output"
"import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s","This function 'otherside_rightangle' performs a specific operation.

The function 'otherside_rightangle' takes the following parameters: w, h. It performs operations based on the parameters provided.","def test_otherside_rightangle():
    # Add test cases for otherside_rightangle
    assert otherside_rightangle(...) == expected_output"
"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)","This function 'max_val' performs a specific operation.

The function 'max_val' takes the following parameters: listval. It performs operations based on the parameters provided.","def test_max_val():
    # Add test cases for max_val
    assert max_val(...) == expected_output"
"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)","This function 'sum_div' performs a specific operation.

The function 'sum_div' takes the following parameters: number. It performs operations based on the parameters provided.","def test_sum_div():
    # Add test cases for sum_div
    assert sum_div(...) == expected_output"
"def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ","This function 'get_Inv_Count' performs a specific operation.

The function 'get_Inv_Count' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_get_Inv_Count():
    # Add test cases for get_Inv_Count
    assert get_Inv_Count(...) == expected_output"
"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ","This function 'flatten_list' performs a specific operation.

The function 'flatten_list' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_flatten_list():
    # Add test cases for flatten_list
    assert flatten_list(...) == expected_output"
"def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result","This function 'intersection_nested_lists' performs a specific operation.

The function 'intersection_nested_lists' takes the following parameters: l1, l2. It performs operations based on the parameters provided.","def test_intersection_nested_lists():
    # Add test cases for intersection_nested_lists
    assert intersection_nested_lists(...) == expected_output"
"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])","This function 'max_aggregate' performs a specific operation.

The function 'max_aggregate' takes the following parameters: stdata. It performs operations based on the parameters provided.","def test_max_aggregate():
    # Add test cases for max_aggregate
    assert max_aggregate(...) == expected_output"
"def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res ","This function 'count_binary_seq' performs a specific operation.

The function 'count_binary_seq' takes the following parameters: n. It performs operations based on the parameters provided.","def test_count_binary_seq():
    # Add test cases for count_binary_seq
    assert count_binary_seq(...) == expected_output"
"def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0","This function 'dict_depth' performs a specific operation.

The function 'dict_depth' takes the following parameters: d. It performs operations based on the parameters provided.","def test_dict_depth():
    # Add test cases for dict_depth
    assert dict_depth(...) == expected_output"
"def set_Bit_Number(n): 
    if (n == 0): 
        return 0; 
    msb = 0; 
    n = int(n / 2); 
    while (n > 0): 
        n = int(n / 2); 
        msb += 1; 
    return (1 << msb)","This function 'set_Bit_Number' performs a specific operation.

The function 'set_Bit_Number' takes the following parameters: n. It performs operations based on the parameters provided.","def test_set_Bit_Number():
    # Add test cases for set_Bit_Number
    assert set_Bit_Number(...) == expected_output"
"import sys 
def solve(a,n):   
    mx = -sys.maxsize - 1
    for j in range(1,n):  
        if (mx > a[j]):  
            return False  
        mx = max(mx,a[j - 1])    
    return True","This function 'solve' performs a specific operation.

The function 'solve' takes the following parameters: a, n. It performs operations based on the parameters provided.","def test_solve():
    # Add test cases for solve
    assert solve(...) == expected_output"
"def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] ","This function 'find_Element' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()","This function 'start_withp' performs a specific operation.

The function 'start_withp' takes the following parameters: words. It performs operations based on the parameters provided.","def test_start_withp():
    # Add test cases for start_withp
    assert start_withp(...) == expected_output"
"def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]","This function 'max_sum_increasing_subseq' performs a specific operation.

The function 'max_sum_increasing_subseq' takes the following parameters: a, n, index, k. It performs operations based on the parameters provided.","def test_max_sum_increasing_subseq():
    # Add test cases for max_sum_increasing_subseq
    assert max_sum_increasing_subseq(...) == expected_output"
"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon","This function 'colon_tuplex' performs a specific operation.

The function 'colon_tuplex' takes the following parameters: tuplex, m, n. It performs operations based on the parameters provided.","def test_colon_tuplex():
    # Add test cases for colon_tuplex
    assert colon_tuplex(...) == expected_output"
"def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result","This function 'large_product' performs a specific operation.

The function 'large_product' takes the following parameters: nums1, nums2, N. It performs operations based on the parameters provided.","def test_large_product():
    # Add test cases for large_product
    assert large_product(...) == expected_output"
"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ","This function 'maximum' performs a specific operation.

The function 'maximum' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_maximum():
    # Add test cases for maximum
    assert maximum(...) == expected_output"
"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result","This function 'string_to_tuple' performs a specific operation.

The function 'string_to_tuple' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_string_to_tuple():
    # Add test cases for string_to_tuple
    assert string_to_tuple(...) == expected_output"
"def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) ","This function 'set_left_most_unset_bit' performs a specific operation.

The function 'set_left_most_unset_bit' takes the following parameters: n. It performs operations based on the parameters provided.","def test_set_left_most_unset_bit():
    # Add test cases for set_left_most_unset_bit
    assert set_left_most_unset_bit(...) == expected_output"
"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume","This function 'volume_cone' performs a specific operation.

The function 'volume_cone' takes the following parameters: r, h. It performs operations based on the parameters provided.","def test_volume_cone():
    # Add test cases for volume_cone
    assert volume_cone(...) == expected_output"
"def pos_nos(list1):
  for num in list1: 
    if num >= 0: 
       return num ","This function 'pos_nos' performs a specific operation.

The function 'pos_nos' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_pos_nos():
    # Add test cases for pos_nos
    assert pos_nos(...) == expected_output"
"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)","This function 'max_sum_rectangular_grid' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def find_Max_Len_Even(str): 
    n = len(str) 
    i = 0
    currlen = 0
    maxlen = 0
    st = -1
    while (i < n): 
        if (str[i] == ' '): 
            if (currlen % 2 == 0): 
                if (maxlen < currlen): 
                    maxlen = currlen 
                    st = i - currlen 
            currlen = 0 
        else : 
            currlen += 1
        i += 1
    if (currlen % 2 == 0): 
        if (maxlen < currlen): 
            maxlen = currlen 
            st = i - currlen 
    if (st == -1): 
        return ""-1"" 
    return str[st: st + maxlen] ","This function 'find_Max_Len_Even' performs a specific operation.

The function 'find_Max_Len_Even' takes the following parameters: str. It performs operations based on the parameters provided.","def test_find_Max_Len_Even():
    # Add test cases for find_Max_Len_Even
    assert find_Max_Len_Even(...) == expected_output"
"def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ","This function 'find_last_occurrence' performs a specific operation.

The function 'find_last_occurrence' takes the following parameters: A, x. It performs operations based on the parameters provided.","def test_find_last_occurrence():
    # Add test cases for find_last_occurrence
    assert find_last_occurrence(...) == expected_output"
"from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]","This function 'modified_encode' performs a specific operation.

The function 'modified_encode' takes the following parameters: alist. It performs operations based on the parameters provided.","def test_modified_encode():
    # Add test cases for modified_encode
    assert modified_encode(...) == expected_output"
"def max_volume (s): 
    maxvalue = 0
    i = 1
    for i in range(s - 1): 
        j = 1
        for j in range(s): 
            k = s - i - j 
            maxvalue = max(maxvalue, i * j * k)         
    return maxvalue ","This function 'max_volume' performs a specific operation.

The function 'max_volume' takes the following parameters: s. It performs operations based on the parameters provided.","def test_max_volume():
    # Add test cases for max_volume
    assert max_volume(...) == expected_output"
"import re
def find_long_word(text):
  return (re.findall(r""\b\w{5}\b"", text))","This function 'find_long_word' performs a specific operation.

The function 'find_long_word' takes the following parameters: text. It performs operations based on the parameters provided.","def test_find_long_word():
    # Add test cases for find_long_word
    assert find_long_word(...) == expected_output"
"def sum_difference(n):
    sumofsquares = 0
    squareofsum = 0
    for num in range(1, n+1):
        sumofsquares += num * num
        squareofsum += num
    squareofsum = squareofsum ** 2
    return squareofsum - sumofsquares","This function 'sum_difference' performs a specific operation.

The function 'sum_difference' takes the following parameters: n. It performs operations based on the parameters provided.","def test_sum_difference():
    # Add test cases for sum_difference
    assert sum_difference(...) == expected_output"
"def find_demlo(s): 
	l = len(s) 
	res = """" 
	for i in range(1,l+1): 
		res = res + str(i) 
	for i in range(l-1,0,-1): 
		res = res + str(i) 
	return res 	","This function 'find_demlo' performs a specific operation.

The function 'find_demlo' takes the following parameters: s. It performs operations based on the parameters provided.","def test_find_demlo():
    # Add test cases for find_demlo
    assert find_demlo(...) == expected_output"
"def position_min(list1):
    min_val = min(list1)
    min_result = [i for i, j in enumerate(list1) if j == min_val]
    return min_result","This function 'position_min' performs a specific operation.

The function 'position_min' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_position_min():
    # Add test cases for position_min
    assert position_min(...) == expected_output"
"def right_rotate(arr, n, out_of_place, cur):
	temp = arr[cur]
	for i in range(cur, out_of_place, -1):
		arr[i] = arr[i - 1]
	arr[out_of_place] = temp
	return arr
def re_arrange(arr, n):
	out_of_place = -1
	for index in range(n):
		if (out_of_place >= 0):
			if ((arr[index] >= 0 and arr[out_of_place] < 0) or
			(arr[index] < 0 and arr[out_of_place] >= 0)):
				arr = right_rotate(arr, n, out_of_place, index)
				if (index-out_of_place > 2):
					out_of_place += 2
				else:
					out_of_place = - 1
		if (out_of_place == -1):
			if ((arr[index] >= 0 and index % 2 == 0) or
			 (arr[index] < 0 and index % 2 == 1)):
				out_of_place = index
	return arr","This function 'right_rotate' performs a specific operation.

The function 'right_rotate' takes the following parameters: arr, n, out_of_place, cur. It performs operations based on the parameters provided.","def test_right_rotate():
    # Add test cases for right_rotate
    assert right_rotate(...) == expected_output"
"def sum_of_alternates(test_tuple):
  sum1 = 0
  sum2 = 0
  for idx, ele in enumerate(test_tuple):
    if idx % 2:
      sum1 += ele
    else:
      sum2 += ele
  return ((sum1),(sum2)) ","This function 'sum_of_alternates' performs a specific operation.

The function 'sum_of_alternates' takes the following parameters: test_tuple. It performs operations based on the parameters provided.","def test_sum_of_alternates():
    # Add test cases for sum_of_alternates
    assert sum_of_alternates(...) == expected_output"
"def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n 
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp)) 
    return res;","This function 'get_Min_Squares' performs a specific operation.

The function 'get_Min_Squares' takes the following parameters: n. It performs operations based on the parameters provided.","def test_get_Min_Squares():
    # Add test cases for get_Min_Squares
    assert get_Min_Squares(...) == expected_output"
"from collections import defaultdict 

def most_occurrences(test_list):
  temp = defaultdict(int)
  for sub in test_list:
    for wrd in sub.split():
      temp[wrd] += 1
  res = max(temp, key=temp.get)
  return (str(res)) ","This function 'most_occurrences' performs a specific operation.

The function 'most_occurrences' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_most_occurrences():
    # Add test cases for most_occurrences
    assert most_occurrences(...) == expected_output"
"def check_isosceles(x,y,z):
  if x==y or y==z or z==x:
	   return True
  else:
     return False","This function 'check_isosceles' performs a specific operation.

The function 'check_isosceles' takes the following parameters: x, y, z. It performs operations based on the parameters provided.","def test_check_isosceles():
    # Add test cases for check_isosceles
    assert check_isosceles(...) == expected_output"
"def rotate_left(list1,m,n):
  result =  list1[m:]+list1[:n]
  return result","This function 'rotate_left' performs a specific operation.

The function 'rotate_left' takes the following parameters: list1, m, n. It performs operations based on the parameters provided.","def test_rotate_left():
    # Add test cases for rotate_left
    assert rotate_left(...) == expected_output"
"def neg_count(list):
  neg_count= 0
  for num in list: 
    if num <= 0: 
      neg_count += 1
  return neg_count ","This function 'neg_count' performs a specific operation.

The function 'neg_count' takes the following parameters: list. It performs operations based on the parameters provided.","def test_neg_count():
    # Add test cases for neg_count
    assert neg_count(...) == expected_output"
"import re
def find_char(text):
  return (re.findall(r""\b\w{3,5}\b"", text))","This function 'find_char' performs a specific operation.

The function 'find_char' takes the following parameters: text. It performs operations based on the parameters provided.","def test_find_char():
    # Add test cases for find_char
    assert find_char(...) == expected_output"
"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ","This function 'count_unset_bits' performs a specific operation.

The function 'count_unset_bits' takes the following parameters: n. It performs operations based on the parameters provided.","def test_count_unset_bits():
    # Add test cases for count_unset_bits
    assert count_unset_bits(...) == expected_output"
"def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict","This function 'char_frequency' performs a specific operation.

The function 'char_frequency' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_char_frequency():
    # Add test cases for char_frequency
    assert char_frequency(...) == expected_output"
"def Sort(sub_li): 
    sub_li.sort(key = lambda x: x[1]) 
    return sub_li ","This function 'Sort' performs a specific operation.

The function 'Sort' takes the following parameters: sub_li. It performs operations based on the parameters provided.","def test_Sort():
    # Add test cases for Sort
    assert Sort(...) == expected_output"
"def check_Validity(a,b,c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True        ","This function 'check_Validity' performs a specific operation.

The function 'check_Validity' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_check_Validity():
    # Add test cases for check_Validity
    assert check_Validity(...) == expected_output"
"def ap_sum(a,n,d):
  total = (n * (2 * a + (n - 1) * d)) / 2
  return total","This function 'ap_sum' performs a specific operation.

The function 'ap_sum' takes the following parameters: a, n, d. It performs operations based on the parameters provided.","def test_ap_sum():
    # Add test cases for ap_sum
    assert ap_sum(...) == expected_output"
"def check_monthnum(monthname1):
  if monthname1 == ""February"":
    return True
  else:
    return False","This function 'check_monthnum' performs a specific operation.

The function 'check_monthnum' takes the following parameters: monthname1. It performs operations based on the parameters provided.","def test_check_monthnum():
    # Add test cases for check_monthnum
    assert check_monthnum(...) == expected_output"
"import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","This function 'text_match_word' performs a specific operation.

The function 'text_match_word' takes the following parameters: text. It performs operations based on the parameters provided.","def test_text_match_word():
    # Add test cases for text_match_word
    assert text_match_word(...) == expected_output"
"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n):
        for j in range(1,n-i+1): 
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ","This function 'check_Equality' performs a specific operation.

The function 'check_Equality' takes the following parameters: s. It performs operations based on the parameters provided.","def test_check_Equality():
    # Add test cases for check_Equality
    assert check_Equality(...) == expected_output"
"def find_Divisor(x,y):  
    if (x==y): 
        return y 
    return 2","This function 'find_Divisor' performs a specific operation.

The function 'find_Divisor' takes the following parameters: x, y. It performs operations based on the parameters provided.","def test_find_Divisor():
    # Add test cases for find_Divisor
    assert find_Divisor(...) == expected_output"
"def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])","This function 'sum_three_smallest_nums' performs a specific operation.

The function 'sum_three_smallest_nums' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_sum_three_smallest_nums():
    # Add test cases for sum_three_smallest_nums
    assert sum_three_smallest_nums(...) == expected_output"
"def set_to_tuple(s):
  t = tuple(sorted(s))
  return (t)","This function 'set_to_tuple' performs a specific operation.

The function 'set_to_tuple' takes the following parameters: s. It performs operations based on the parameters provided.","def test_set_to_tuple():
    # Add test cases for set_to_tuple
    assert set_to_tuple(...) == expected_output"
"from heapq import heappop, heappush
class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index
    def __lt__(self, other):
        return self.value < other.value
def find_minimum_range(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heappush(pq, Node(list[i][0], i, 0))
        high = max(high, list[i][0])
    while True:
        top = heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if high - low < p[1] - p[0]:
            p = (low, high)
        if j == len(list[i]) - 1:
            return p
        heappush(pq, Node(list[i][j + 1], i, j + 1))
        high = max(high, list[i][j + 1])","This function '__init__' performs a specific operation.

The function '__init__' takes the following parameters: self, value, list_num, index. It performs operations based on the parameters provided.","def test___init__():
    # Add test cases for __init__
    assert __init__(...) == expected_output"
"def dig_let(s):
 d=l=0
 for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
 return (l,d)","This function 'dig_let' performs a specific operation.

The function 'dig_let' takes the following parameters: s. It performs operations based on the parameters provided.","def test_dig_let():
    # Add test cases for dig_let
    assert dig_let(...) == expected_output"
"def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) ","This function 'count_Odd_Squares' performs a specific operation.

The function 'count_Odd_Squares' takes the following parameters: n, m. It performs operations based on the parameters provided.","def test_count_Odd_Squares():
    # Add test cases for count_Odd_Squares
    assert count_Odd_Squares(...) == expected_output"
"def diff_consecutivenums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result","This function 'diff_consecutivenums' performs a specific operation.

The function 'diff_consecutivenums' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_diff_consecutivenums():
    # Add test cases for diff_consecutivenums
    assert diff_consecutivenums(...) == expected_output"
"def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)","This function 'zigzag' performs a specific operation.

The function 'zigzag' takes the following parameters: n, k. It performs operations based on the parameters provided.","def test_zigzag():
    # Add test cases for zigzag
    assert zigzag(...) == expected_output"
"def count_Squares(m,n): 
    if (n < m): 
        temp = m 
        m = n 
        n = temp 
    return n * (n + 1) * (3 * m - n + 1) // 6","This function 'count_Squares' performs a specific operation.

The function 'count_Squares' takes the following parameters: m, n. It performs operations based on the parameters provided.","def test_count_Squares():
    # Add test cases for count_Squares
    assert count_Squares(...) == expected_output"
"def bin_coff(n, r): 
	val = 1
	if (r > (n - r)): 
		r = (n - r) 
	for i in range(0, r): 
		val *= (n - i) 
		val //= (i + 1) 
	return val 
def find_ways(M): 
	n = M // 2
	a = bin_coff(2 * n, n) 
	b = a // (n + 1) 
	return (b) ","This function 'bin_coff' performs a specific operation.

The function 'bin_coff' takes the following parameters: n, r. It performs operations based on the parameters provided.","def test_bin_coff():
    # Add test cases for bin_coff
    assert bin_coff(...) == expected_output"
"def check(string) :
    p = set(string) 
    s = {'0', '1'} 
    if s == p or p == {'0'} or p == {'1'}: 
        return (""Yes"") 
    else : 
        return (""No"") ","This function 'check' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def minimum_Length(s) : 
    maxOcc = 0
    n = len(s) 
    arr = [0]*26
    for i in range(n) : 
        arr[ord(s[i]) -ord('a')] += 1
    for i in range(26) : 
        if arr[i] > maxOcc : 
            maxOcc = arr[i] 
    return n - maxOcc ","This function 'minimum_Length' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def first_Element(arr,n,k): 
    count_map = {}; 
    for i in range(0, n): 
        if(arr[i] in count_map.keys()): 
            count_map[arr[i]] += 1
        else: 
            count_map[arr[i]] = 1
        i += 1
    for i in range(0, n):  
        if (count_map[arr[i]] == k): 
            return arr[i] 
        i += 1 
    return -1","This function 'first_Element' performs a specific operation.

The function 'first_Element' takes the following parameters: arr, n, k. It performs operations based on the parameters provided.","def test_first_Element():
    # Add test cases for first_Element
    assert first_Element(...) == expected_output"
"def unique_Characters(str):
    for i in range(len(str)):
        for j in range(i + 1,len(str)): 
            if (str[i] == str[j]):
                return False;
    return True;","This function 'unique_Characters' performs a specific operation.

The function 'unique_Characters' takes the following parameters: str. It performs operations based on the parameters provided.","def test_unique_Characters():
    # Add test cases for unique_Characters
    assert unique_Characters(...) == expected_output"
"def remove_column(list1, n):
   for i in list1: 
    del i[n] 
   return list1","This function 'remove_column' performs a specific operation.

The function 'remove_column' takes the following parameters: list1, n. It performs operations based on the parameters provided.","def test_remove_column():
    # Add test cases for remove_column
    assert remove_column(...) == expected_output"
"def tn_ap(a,n,d):
  tn = a + (n - 1) * d
  return tn","This function 'tn_ap' performs a specific operation.

The function 'tn_ap' takes the following parameters: a, n, d. It performs operations based on the parameters provided.","def test_tn_ap():
    # Add test cases for tn_ap
    assert tn_ap(...) == expected_output"
"def count_Rectangles(radius):  
    rectangles = 0 
    diameter = 2 * radius 
    diameterSquare = diameter * diameter 
    for a in range(1, 2 * radius):  
        for b in range(1, 2 * radius): 
            diagnalLengthSquare = (a * a +  b * b)  
            if (diagnalLengthSquare <= diameterSquare) : 
                rectangles += 1
    return rectangles ","This function 'count_Rectangles' performs a specific operation.

The function 'count_Rectangles' takes the following parameters: radius. It performs operations based on the parameters provided.","def test_count_Rectangles():
    # Add test cases for count_Rectangles
    assert count_Rectangles(...) == expected_output"
"def find_angle(a,b):
 c = 180 - (a + b)
 return c
","This function 'find_angle' performs a specific operation.

The function 'find_angle' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_find_angle():
    # Add test cases for find_angle
    assert find_angle(...) == expected_output"
"def find_max(test_list):
  res = max(int(j) for i in test_list for j in i)
  return (res) ","This function 'find_max' performs a specific operation.

The function 'find_max' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_find_max():
    # Add test cases for find_max
    assert find_max(...) == expected_output"
"def moddiv_list(nums1,nums2):
  result = map(lambda x, y: x % y, nums1, nums2)
  return list(result)","This function 'moddiv_list' performs a specific operation.

The function 'moddiv_list' takes the following parameters: nums1, nums2. It performs operations based on the parameters provided.","def test_moddiv_list():
    # Add test cases for moddiv_list
    assert moddiv_list(...) == expected_output"
"def Check_Solution(a,b,c): 
    if (2*b*b == 9*a*c): 
        return (""Yes""); 
    else: 
        return (""No""); ","This function 'Check_Solution' performs a specific operation.

The function 'Check_Solution' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_Check_Solution():
    # Add test cases for Check_Solution
    assert Check_Solution(...) == expected_output"
"def get_carol(n): 
	result = (2**n) - 1
	return result * result - 2","This function 'get_carol' performs a specific operation.

The function 'get_carol' takes the following parameters: n. It performs operations based on the parameters provided.","def test_get_carol():
    # Add test cases for get_carol
    assert get_carol(...) == expected_output"
"def remove_empty(list1):
  remove_empty = [x for x in list1 if x]
  return remove_empty","This function 'remove_empty' performs a specific operation.

The function 'remove_empty' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_remove_empty():
    # Add test cases for remove_empty
    assert remove_empty(...) == expected_output"
"def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result","This function 'max_occurrences' performs a specific operation.

The function 'max_occurrences' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_max_occurrences():
    # Add test cases for max_occurrences
    assert max_occurrences(...) == expected_output"
"def add_K_element(test_list, K):
  res = [tuple(j + K for j in sub ) for sub in test_list]
  return (res) ","This function 'add_K_element' performs a specific operation.

The function 'add_K_element' takes the following parameters: test_list, K. It performs operations based on the parameters provided.","def test_add_K_element():
    # Add test cases for add_K_element
    assert add_K_element(...) == expected_output"
"def make_flip(ch): 
	return '1' if (ch == '0') else '0'
def get_flip_with_starting_charcter(str, expected): 
	flip_count = 0
	for i in range(len( str)): 
		if (str[i] != expected): 
			flip_count += 1
		expected = make_flip(expected) 
	return flip_count 
def min_flip_to_make_string_alternate(str): 
	return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ","This function 'make_flip' performs a specific operation.

The function 'make_flip' takes the following parameters: ch. It performs operations based on the parameters provided.","def test_make_flip():
    # Add test cases for make_flip
    assert make_flip(...) == expected_output"
"def count_Digit(n):
    count = 0
    while n != 0:
        n //= 10
        count += 1
    return count","This function 'count_Digit' performs a specific operation.

The function 'count_Digit' takes the following parameters: n. It performs operations based on the parameters provided.","def test_count_Digit():
    # Add test cases for count_Digit
    assert count_Digit(...) == expected_output"
"def adjacent_num_product(list_nums):
    return max(a*b for a, b in zip(list_nums, list_nums[1:]))","This function 'adjacent_num_product' performs a specific operation.

The function 'adjacent_num_product' takes the following parameters: list_nums. It performs operations based on the parameters provided.","def test_adjacent_num_product():
    # Add test cases for adjacent_num_product
    assert adjacent_num_product(...) == expected_output"
"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False","This function '__init__' performs a specific operation.

The function '__init__' takes the following parameters: self, data. It performs operations based on the parameters provided.","def test___init__():
    # Add test cases for __init__
    assert __init__(...) == expected_output"
"def repeat_tuples(test_tup, N):
  res = ((test_tup, ) * N)
  return (res) ","This function 'repeat_tuples' performs a specific operation.

The function 'repeat_tuples' takes the following parameters: test_tup, N. It performs operations based on the parameters provided.","def test_repeat_tuples():
    # Add test cases for repeat_tuples
    assert repeat_tuples(...) == expected_output"
"def lateralsurface_cuboid(l,w,h):
  LSA = 2*h*(l+w)
  return LSA","This function 'lateralsurface_cuboid' performs a specific operation.

The function 'lateralsurface_cuboid' takes the following parameters: l, w, h. It performs operations based on the parameters provided.","def test_lateralsurface_cuboid():
    # Add test cases for lateralsurface_cuboid
    assert lateralsurface_cuboid(...) == expected_output"
"def float_sort(price):
  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)
  return float_sort","This function 'float_sort' performs a specific operation.

The function 'float_sort' takes the following parameters: price. It performs operations based on the parameters provided.","def test_float_sort():
    # Add test cases for float_sort
    assert float_sort(...) == expected_output"
"def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)","This function 'smallest_missing' performs a specific operation.

The function 'smallest_missing' takes the following parameters: A, left_element, right_element. It performs operations based on the parameters provided.","def test_smallest_missing():
    # Add test cases for smallest_missing
    assert smallest_missing(...) == expected_output"
"import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result","This function 'heap_assending' performs a specific operation.

The function 'heap_assending' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_heap_assending():
    # Add test cases for heap_assending
    assert heap_assending(...) == expected_output"
"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume","This function 'volume_cuboid' performs a specific operation.

The function 'volume_cuboid' takes the following parameters: l, w, h. It performs operations based on the parameters provided.","def test_volume_cuboid():
    # Add test cases for volume_cuboid
    assert volume_cuboid(...) == expected_output"
"def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list","This function 'permute_string' performs a specific operation.

The function 'permute_string' takes the following parameters: str. It performs operations based on the parameters provided.","def test_permute_string():
    # Add test cases for permute_string
    assert permute_string(...) == expected_output"
"def round_num(n,m):
    a = (n //m) * m
    b = a + m
    return (b if n - a > b - n else a)","This function 'round_num' performs a specific operation.

The function 'round_num' takes the following parameters: n, m. It performs operations based on the parameters provided.","def test_round_num():
    # Add test cases for round_num
    assert round_num(...) == expected_output"
"def remove_replica(test_tup):
  temp = set()
  res = tuple(ele if ele not in temp and not temp.add(ele) 
				else 'MSP' for ele in test_tup)
  return (res)","This function 'remove_replica' performs a specific operation.

The function 'remove_replica' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_remove_replica():
    # Add test cases for remove_replica
    assert remove_replica(...) == expected_output"
"def remove_Char(s,c) :  
    counts = s.count(c) 
    s = list(s) 
    while counts :  
        s.remove(c) 
        counts -= 1 
    s = '' . join(s)   
    return (s) ","This function 'remove_Char' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]  
  return test_list","This function 'move_first' performs a specific operation.

The function 'move_first' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_move_first():
    # Add test cases for move_first
    assert move_first(...) == expected_output"
"def surfacearea_cuboid(l,w,h):
  SA = 2*(l*w + l * h + w * h)
  return SA","This function 'surfacearea_cuboid' performs a specific operation.

The function 'surfacearea_cuboid' takes the following parameters: l, w, h. It performs operations based on the parameters provided.","def test_surfacearea_cuboid():
    # Add test cases for surfacearea_cuboid
    assert surfacearea_cuboid(...) == expected_output"
"def multi_list(rownum,colnum):
  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]
  for row in range(rownum):
    for col in range(colnum):
        multi_list[row][col]= row*col
  return multi_list
","This function 'multi_list' performs a specific operation.

The function 'multi_list' takes the following parameters: rownum, colnum. It performs operations based on the parameters provided.","def test_multi_list():
    # Add test cases for multi_list
    assert multi_list(...) == expected_output"
"from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result","This function 'index_on_inner_list' performs a specific operation.

The function 'index_on_inner_list' takes the following parameters: list_data, index_no. It performs operations based on the parameters provided.","def test_index_on_inner_list():
    # Add test cases for index_on_inner_list
    assert index_on_inner_list(...) == expected_output"
"def find_rotation_count(A):
    (left, right) = (0, len(A) - 1)
    while left <= right:
        if A[left] <= A[right]:
            return left
        mid = (left + right) // 2
        next = (mid + 1) % len(A)
        prev = (mid - 1 + len(A)) % len(A)
        if A[mid] <= A[next] and A[mid] <= A[prev]:
            return mid
        elif A[mid] <= A[right]:
            right = mid - 1
        elif A[mid] >= A[left]:
            left = mid + 1
    return -1","This function 'find_rotation_count' performs a specific operation.

The function 'find_rotation_count' takes the following parameters: A. It performs operations based on the parameters provided.","def test_find_rotation_count():
    # Add test cases for find_rotation_count
    assert find_rotation_count(...) == expected_output"
"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n    
    while(temp > 0 ) : 
        if (count % 2 == 0) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ","This function 'even_bit_toggle_number' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def frequency_Of_Smallest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] < mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ","This function 'frequency_Of_Smallest' performs a specific operation.

The function 'frequency_Of_Smallest' takes the following parameters: n, arr. It performs operations based on the parameters provided.","def test_frequency_Of_Smallest():
    # Add test cases for frequency_Of_Smallest
    assert frequency_Of_Smallest(...) == expected_output"
"def get_perrin(n):
  if (n == 0):
    return 3
  if (n == 1):
    return 0
  if (n == 2):
    return 2 
  return get_perrin(n - 2) + get_perrin(n - 3)","This function 'get_perrin' performs a specific operation.

The function 'get_perrin' takes the following parameters: n. It performs operations based on the parameters provided.","def test_get_perrin():
    # Add test cases for get_perrin
    assert get_perrin(...) == expected_output"
"def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap","This function 'swap_count' performs a specific operation.

The function 'swap_count' takes the following parameters: s. It performs operations based on the parameters provided.","def test_swap_count():
    # Add test cases for swap_count
    assert swap_count(...) == expected_output"
"def even_or_odd(N): 
    l = len(N) 
    if (N[l-1] =='0'or N[l-1] =='2'or 
        N[l-1] =='4'or N[l-1] =='6'or 
        N[l-1] =='8'or N[l-1] =='A'or 
        N[l-1] =='C'or N[l-1] =='E'): 
        return (""Even"") 
    else: 
        return (""Odd"") ","This function 'even_or_odd' performs a specific operation.

The function 'even_or_odd' takes the following parameters: N. It performs operations based on the parameters provided.","def test_even_or_odd():
    # Add test cases for even_or_odd
    assert even_or_odd(...) == expected_output"
"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; ","This function 'highest_Power_of_2' performs a specific operation.

The function 'highest_Power_of_2' takes the following parameters: n. It performs operations based on the parameters provided.","def test_highest_Power_of_2():
    # Add test cases for highest_Power_of_2
    assert highest_Power_of_2(...) == expected_output"
"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ","This function 'find_lucas' performs a specific operation.

The function 'find_lucas' takes the following parameters: n. It performs operations based on the parameters provided.","def test_find_lucas():
    # Add test cases for find_lucas
    assert find_lucas(...) == expected_output"
"def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string","This function 'add_string' performs a specific operation.

The function 'add_string' takes the following parameters: list, string. It performs operations based on the parameters provided.","def test_add_string():
    # Add test cases for add_string
    assert add_string(...) == expected_output"
"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result","This function 'convert_list_dictionary' performs a specific operation.

The function 'convert_list_dictionary' takes the following parameters: l1, l2, l3. It performs operations based on the parameters provided.","def test_convert_list_dictionary():
    # Add test cases for convert_list_dictionary
    assert convert_list_dictionary(...) == expected_output"
"def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]","This function 'get_max_sum' performs a specific operation.

The function 'get_max_sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_get_max_sum():
    # Add test cases for get_max_sum
    assert get_max_sum(...) == expected_output"
"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)","This function 'max_length_list' performs a specific operation.

The function 'max_length_list' takes the following parameters: input_list. It performs operations based on the parameters provided.","def test_max_length_list():
    # Add test cases for max_length_list
    assert max_length_list(...) == expected_output"
"def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return (res) ","This function 'check_distinct' performs a specific operation.

The function 'check_distinct' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_check_distinct():
    # Add test cases for check_distinct
    assert check_distinct(...) == expected_output"
"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None","This function 'first_non_repeating_character' performs a specific operation.

The function 'first_non_repeating_character' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_first_non_repeating_character():
    # Add test cases for first_non_repeating_character
    assert first_non_repeating_character(...) == expected_output"
"import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ","This function 'check_char' performs a specific operation.

The function 'check_char' takes the following parameters: string. It performs operations based on the parameters provided.","def test_check_char():
    # Add test cases for check_char
    assert check_char(...) == expected_output"
"def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median","This function 'median_numbers' performs a specific operation.

The function 'median_numbers' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_median_numbers():
    # Add test cases for median_numbers
    assert median_numbers(...) == expected_output"
"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())","This function 'sum_of_digits' performs a specific operation.

The function 'sum_of_digits' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_sum_of_digits():
    # Add test cases for sum_of_digits
    assert sum_of_digits(...) == expected_output"
"def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","This function 'bitwise_xor' performs a specific operation.

The function 'bitwise_xor' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_bitwise_xor():
    # Add test cases for bitwise_xor
    assert bitwise_xor(...) == expected_output"
"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)","This function 'extract_freq' performs a specific operation.

The function 'extract_freq' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_extract_freq():
    # Add test cases for extract_freq
    assert extract_freq(...) == expected_output"
"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","This function 'add_nested_tuples' performs a specific operation.

The function 'add_nested_tuples' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_add_nested_tuples():
    # Add test cases for add_nested_tuples
    assert add_nested_tuples(...) == expected_output"
"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ","This function 'ncr_modp' performs a specific operation.

The function 'ncr_modp' takes the following parameters: n, r, p. It performs operations based on the parameters provided.","def test_ncr_modp():
    # Add test cases for ncr_modp
    assert ncr_modp(...) == expected_output"
"import re
def is_valid_URL(str):
	regex = (""((http|https)://)(www.)?"" +
			""[a-zA-Z0-9@:%._\\+~#?&//=]"" +
			""{2,256}\\.[a-z]"" +
			""{2,6}\\b([-a-zA-Z0-9@:%"" +
			""._\\+~#?&//=]*)"")
	p = re.compile(regex)
	if (str == None):
		return False
	if(re.search(p, str)):
		return True
	else:
		return False","This function 'is_valid_URL' performs a specific operation.

The function 'is_valid_URL' takes the following parameters: str. It performs operations based on the parameters provided.","def test_is_valid_URL():
    # Add test cases for is_valid_URL
    assert is_valid_URL(...) == expected_output"
"def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ","This function 'minimum' performs a specific operation.

The function 'minimum' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_minimum():
    # Add test cases for minimum
    assert minimum(...) == expected_output"
"def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False","This function 'check_tuplex' performs a specific operation.

The function 'check_tuplex' takes the following parameters: tuplex, tuple1. It performs operations based on the parameters provided.","def test_check_tuplex():
    # Add test cases for check_tuplex
    assert check_tuplex(...) == expected_output"
"def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return (""Odd Parity""); 
    return (""Even Parity""); ","This function 'find_Parity' performs a specific operation.

The function 'find_Parity' takes the following parameters: x. It performs operations based on the parameters provided.","def test_find_Parity():
    # Add test cases for find_Parity
    assert find_Parity(...) == expected_output"
"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False","This function 'rearrange_bigger' performs a specific operation.

The function 'rearrange_bigger' takes the following parameters: n. It performs operations based on the parameters provided.","def test_rearrange_bigger():
    # Add test cases for rearrange_bigger
    assert rearrange_bigger(...) == expected_output"
"import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs","This function 'k_smallest_pairs' performs a specific operation.

The function 'k_smallest_pairs' takes the following parameters: nums1, nums2, k. It performs operations based on the parameters provided.","def test_k_smallest_pairs():
    # Add test cases for k_smallest_pairs
    assert k_smallest_pairs(...) == expected_output"
"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min","This function 'min_product_tuple' performs a specific operation.

The function 'min_product_tuple' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_min_product_tuple():
    # Add test cases for min_product_tuple
    assert min_product_tuple(...) == expected_output"
"def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val","This function 'min_val' performs a specific operation.

The function 'min_val' takes the following parameters: listval. It performs operations based on the parameters provided.","def test_min_val():
    # Add test cases for min_val
    assert min_val(...) == expected_output"
"import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))","This function 'snake_to_camel' performs a specific operation.

The function 'snake_to_camel' takes the following parameters: word. It performs operations based on the parameters provided.","def test_snake_to_camel():
    # Add test cases for snake_to_camel
    assert snake_to_camel(...) == expected_output"
"def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l","This function 'remove_odd' performs a specific operation.

The function 'remove_odd' takes the following parameters: l. It performs operations based on the parameters provided.","def test_remove_odd():
    # Add test cases for remove_odd
    assert remove_odd(...) == expected_output"
"def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result","This function 'extract_nth_element' performs a specific operation.

The function 'extract_nth_element' takes the following parameters: list1, n. It performs operations based on the parameters provided.","def test_extract_nth_element():
    # Add test cases for extract_nth_element
    assert extract_nth_element(...) == expected_output"
"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0","This function 'overlapping' performs a specific operation.

The function 'overlapping' takes the following parameters: list1, list2. It performs operations based on the parameters provided.","def test_overlapping():
    # Add test cases for overlapping
    assert overlapping(...) == expected_output"
"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    ","This function 'max_Product' performs a specific operation.

The function 'max_Product' takes the following parameters: arr. It performs operations based on the parameters provided.","def test_max_Product():
    # Add test cases for max_Product
    assert max_Product(...) == expected_output"
"MAX = 1000000
def breakSum(n): 
	dp = [0]*(n+1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 
	return dp[n]","This function 'breakSum' performs a specific operation.

The function 'breakSum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_breakSum():
    # Add test cases for breakSum
    assert breakSum(...) == expected_output"
"def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] ","This function 'group_tuples' performs a specific operation.

The function 'group_tuples' takes the following parameters: Input. It performs operations based on the parameters provided.","def test_group_tuples():
    # Add test cases for group_tuples
    assert group_tuples(...) == expected_output"
"def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList","This function 'Find_Max' performs a specific operation.

The function 'Find_Max' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_Find_Max():
    # Add test cases for Find_Max
    assert Find_Max(...) == expected_output"
"def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum","This function 'round_and_sum' performs a specific operation.

The function 'round_and_sum' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_round_and_sum():
    # Add test cases for round_and_sum
    assert round_and_sum(...) == expected_output"
"def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum","This function 'cube_Sum' performs a specific operation.

The function 'cube_Sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_cube_Sum():
    # Add test cases for cube_Sum
    assert cube_Sum(...) == expected_output"
"def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ","This function 'concatenate_tuple' performs a specific operation.

The function 'concatenate_tuple' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_concatenate_tuple():
    # Add test cases for concatenate_tuple
    assert concatenate_tuple(...) == expected_output"
"def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) ","This function 'find_Average_Of_Cube' performs a specific operation.

The function 'find_Average_Of_Cube' takes the following parameters: n. It performs operations based on the parameters provided.","def test_find_Average_Of_Cube():
    # Add test cases for find_Average_Of_Cube
    assert find_Average_Of_Cube(...) == expected_output"
"def get_maxgold(gold, m, n): 
    goldTable = [[0 for i in range(n)] 
                        for j in range(m)]   
    for col in range(n-1, -1, -1): 
        for row in range(m):  
            if (col == n-1): 
                right = 0
            else: 
                right = goldTable[row][col+1] 
            if (row == 0 or col == n-1): 
                right_up = 0
            else: 
                right_up = goldTable[row-1][col+1] 
            if (row == m-1 or col == n-1): 
                right_down = 0
            else: 
                right_down = goldTable[row+1][col+1] 
            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) 
    res = goldTable[0][0] 
    for i in range(1, m): 
        res = max(res, goldTable[i][0])  
    return res ","This function 'get_maxgold' performs a specific operation.

The function 'get_maxgold' takes the following parameters: gold, m, n. It performs operations based on the parameters provided.","def test_get_maxgold():
    # Add test cases for get_maxgold
    assert get_maxgold(...) == expected_output"
"def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ","This function 'extract_rear' performs a specific operation.

The function 'extract_rear' takes the following parameters: test_tuple. It performs operations based on the parameters provided.","def test_extract_rear():
    # Add test cases for extract_rear
    assert extract_rear(...) == expected_output"
"def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr","This function 'count_element_in_list' performs a specific operation.

The function 'count_element_in_list' takes the following parameters: list1, x. It performs operations based on the parameters provided.","def test_count_element_in_list():
    # Add test cases for count_element_in_list
    assert count_element_in_list(...) == expected_output"
"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums","This function 'filter_oddnumbers' performs a specific operation.

The function 'filter_oddnumbers' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_filter_oddnumbers():
    # Add test cases for filter_oddnumbers
    assert filter_oddnumbers(...) == expected_output"
"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)","This function 'change_date_format' performs a specific operation.

The function 'change_date_format' takes the following parameters: dt. It performs operations based on the parameters provided.","def test_change_date_format():
    # Add test cases for change_date_format
    assert change_date_format(...) == expected_output"
"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list","This function 'shell_sort' performs a specific operation.

The function 'shell_sort' takes the following parameters: my_list. It performs operations based on the parameters provided.","def test_shell_sort():
    # Add test cases for shell_sort
    assert shell_sort(...) == expected_output"
"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","This function 'and_tuples' performs a specific operation.

The function 'and_tuples' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_and_tuples():
    # Add test cases for and_tuples
    assert and_tuples(...) == expected_output"
"def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix","This function 'parabola_directrix' performs a specific operation.

The function 'parabola_directrix' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_parabola_directrix():
    # Add test cases for parabola_directrix
    assert parabola_directrix(...) == expected_output"
"def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result","This function 'common_element' performs a specific operation.

The function 'common_element' takes the following parameters: list1, list2. It performs operations based on the parameters provided.","def test_common_element():
    # Add test cases for common_element
    assert common_element(...) == expected_output"
"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median","This function 'median_trapezium' performs a specific operation.

The function 'median_trapezium' takes the following parameters: base1, base2, height. It performs operations based on the parameters provided.","def test_median_trapezium():
    # Add test cases for median_trapezium
    assert median_trapezium(...) == expected_output"
"def check_greater(arr, number):
  arr.sort()
  if number > arr[-1]:
    return ('Yes, the entered number is greater than those in the array')
  else:
    return ('No, entered number is less than those in the array')","This function 'check_greater' performs a specific operation.

The function 'check_greater' takes the following parameters: arr, number. It performs operations based on the parameters provided.","def test_check_greater():
    # Add test cases for check_greater
    assert check_greater(...) == expected_output"
"import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
","This function 'text_match_one' performs a specific operation.

The function 'text_match_one' takes the following parameters: text. It performs operations based on the parameters provided.","def test_text_match_one():
    # Add test cases for text_match_one
    assert text_match_one(...) == expected_output"
"def last_Digit(n) :
    return (n % 10) ","This function 'last_Digit' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ","This function 'neg_nos' performs a specific operation.

The function 'neg_nos' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_neg_nos():
    # Add test cases for neg_nos
    assert neg_nos(...) == expected_output"
"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2","This function 'remove_odd' performs a specific operation.

The function 'remove_odd' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_remove_odd():
    # Add test cases for remove_odd
    assert remove_odd(...) == expected_output"
"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return (str(res)) ","This function 'count_bidirectional' performs a specific operation.

The function 'count_bidirectional' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_count_bidirectional():
    # Add test cases for count_bidirectional
    assert count_bidirectional(...) == expected_output"
"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x","This function 'multiple_to_single' performs a specific operation.

The function 'multiple_to_single' takes the following parameters: L. It performs operations based on the parameters provided.","def test_multiple_to_single():
    # Add test cases for multiple_to_single
    assert multiple_to_single(...) == expected_output"
"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))","This function 'find_adverb_position' performs a specific operation.

The function 'find_adverb_position' takes the following parameters: text. It performs operations based on the parameters provided.","def test_find_adverb_position():
    # Add test cases for find_adverb_position
    assert find_adverb_position(...) == expected_output"
"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea","This function 'surfacearea_cube' performs a specific operation.

The function 'surfacearea_cube' takes the following parameters: l. It performs operations based on the parameters provided.","def test_surfacearea_cube():
    # Add test cases for surfacearea_cube
    assert surfacearea_cube(...) == expected_output"
"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","This function 'positive_count' performs a specific operation.

The function 'positive_count' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_positive_count():
    # Add test cases for positive_count
    assert positive_count(...) == expected_output"
"def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max","This function 'largest_neg' performs a specific operation.

The function 'largest_neg' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_largest_neg():
    # Add test cases for largest_neg
    assert largest_neg(...) == expected_output"
"def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ","This function 'trim_tuple' performs a specific operation.

The function 'trim_tuple' takes the following parameters: test_list, K. It performs operations based on the parameters provided.","def test_trim_tuple():
    # Add test cases for trim_tuple
    assert trim_tuple(...) == expected_output"
"def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","This function 'index_multiplication' performs a specific operation.

The function 'index_multiplication' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_index_multiplication():
    # Add test cases for index_multiplication
    assert index_multiplication(...) == expected_output"
"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ","This function 'count_Occurrence' performs a specific operation.

The function 'count_Occurrence' takes the following parameters: tup, lst. It performs operations based on the parameters provided.","def test_count_Occurrence():
    # Add test cases for count_Occurrence
    assert count_Occurrence(...) == expected_output"
"def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums","This function 'cube_nums' performs a specific operation.

The function 'cube_nums' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_cube_nums():
    # Add test cases for cube_nums
    assert cube_nums(...) == expected_output"
"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum","This function 'cal_sum' performs a specific operation.

The function 'cal_sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_cal_sum():
    # Add test cases for cal_sum
    assert cal_sum(...) == expected_output"
"def check_Triangle(x1,y1,x2,y2,x3,y3): 
    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   
    if a == 0: 
        return ('No') 
    else: 
        return ('Yes') ","This function 'check_Triangle' performs a specific operation.

The function 'check_Triangle' takes the following parameters: x1, y1, x2, y2, x3, y3. It performs operations based on the parameters provided.","def test_check_Triangle():
    # Add test cases for check_Triangle
    assert check_Triangle(...) == expected_output"
"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result","This function 'extract_string' performs a specific operation.

The function 'extract_string' takes the following parameters: str, l. It performs operations based on the parameters provided.","def test_extract_string():
    # Add test cases for extract_string
    assert extract_string(...) == expected_output"
"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))","This function 'remove_whitespaces' performs a specific operation.

The function 'remove_whitespaces' takes the following parameters: text1. It performs operations based on the parameters provided.","def test_remove_whitespaces():
    # Add test cases for remove_whitespaces
    assert remove_whitespaces(...) == expected_output"
"def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return None","This function 'loss_amount' performs a specific operation.

The function 'loss_amount' takes the following parameters: actual_cost, sale_amount. It performs operations based on the parameters provided.","def test_loss_amount():
    # Add test cases for loss_amount
    assert loss_amount(...) == expected_output"
"import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res ","This function 'sumofFactors' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","This function 'text_match_wordz' performs a specific operation.

The function 'text_match_wordz' takes the following parameters: text. It performs operations based on the parameters provided.","def test_text_match_wordz():
    # Add test cases for text_match_wordz
    assert text_match_wordz(...) == expected_output"
"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False","This function 'check_monthnumb_number' performs a specific operation.

The function 'check_monthnumb_number' takes the following parameters: monthnum2. It performs operations based on the parameters provided.","def test_check_monthnumb_number():
    # Add test cases for check_monthnumb_number
    assert check_monthnumb_number(...) == expected_output"
"def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result","This function 'reverse_string_list' performs a specific operation.

The function 'reverse_string_list' takes the following parameters: stringlist. It performs operations based on the parameters provided.","def test_reverse_string_list():
    # Add test cases for reverse_string_list
    assert reverse_string_list(...) == expected_output"
"def Find_Min(lst): 
    minList = min((x) for x in lst) 
    return minList","This function 'Find_Min' performs a specific operation.

The function 'Find_Min' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_Find_Min():
    # Add test cases for Find_Min
    assert Find_Min(...) == expected_output"
"def rectangle_area(l,b):
  area=l*b
  return area","This function 'rectangle_area' performs a specific operation.

The function 'rectangle_area' takes the following parameters: l, b. It performs operations based on the parameters provided.","def test_rectangle_area():
    # Add test cases for rectangle_area
    assert rectangle_area(...) == expected_output"
"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)","This function 'remove_uppercase' performs a specific operation.

The function 'remove_uppercase' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_remove_uppercase():
    # Add test cases for remove_uppercase
    assert remove_uppercase(...) == expected_output"
"def Extract(lst): 
    return [item[0] for item in lst] ","This function 'Extract' performs a specific operation.

The function 'Extract' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_Extract():
    # Add test cases for Extract
    assert Extract(...) == expected_output"
"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr","This function 'upper_ctr' performs a specific operation.

The function 'upper_ctr' takes the following parameters: str. It performs operations based on the parameters provided.","def test_upper_ctr():
    # Add test cases for upper_ctr
    assert upper_ctr(...) == expected_output"
"def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result","This function 'combinations_list' performs a specific operation.

The function 'combinations_list' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_combinations_list():
    # Add test cases for combinations_list
    assert combinations_list(...) == expected_output"
"def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far","This function 'max_subarray_product' performs a specific operation.

The function 'max_subarray_product' takes the following parameters: arr. It performs operations based on the parameters provided.","def test_max_subarray_product():
    # Add test cases for max_subarray_product
    assert max_subarray_product(...) == expected_output"
"def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result","This function 'check_value' performs a specific operation.

The function 'check_value' takes the following parameters: dict, n. It performs operations based on the parameters provided.","def test_check_value():
    # Add test cases for check_value
    assert check_value(...) == expected_output"
"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1","This function 'drop_empty' performs a specific operation.

The function 'drop_empty' takes the following parameters: dict1. It performs operations based on the parameters provided.","def test_drop_empty():
    # Add test cases for drop_empty
    assert drop_empty(...) == expected_output"
"def find_peak_util(arr, low, high, n): 
	mid = low + (high - low)/2
	mid = int(mid) 
	if ((mid == 0 or arr[mid - 1] <= arr[mid]) and
		(mid == n - 1 or arr[mid + 1] <= arr[mid])): 
		return mid 
	elif (mid > 0 and arr[mid - 1] > arr[mid]): 
		return find_peak_util(arr, low, (mid - 1), n) 
	else: 
		return find_peak_util(arr, (mid + 1), high, n) 
def find_peak(arr, n): 
	return find_peak_util(arr, 0, n - 1, n) ","This function 'find_peak_util' performs a specific operation.

The function 'find_peak_util' takes the following parameters: arr, low, high, n. It performs operations based on the parameters provided.","def test_find_peak_util():
    # Add test cases for find_peak_util
    assert find_peak_util(...) == expected_output"
"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)","This function 'decimal_to_Octal' performs a specific operation.

The function 'decimal_to_Octal' takes the following parameters: deciNum. It performs operations based on the parameters provided.","def test_decimal_to_Octal():
    # Add test cases for decimal_to_Octal
    assert decimal_to_Octal(...) == expected_output"
"def max_product(arr, n ): 
	mpis =[0] * (n) 
	for i in range(n): 
		mpis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
					mpis[i] < (mpis[j] * arr[i])): 
						mpis[i] = mpis[j] * arr[i] 
	return max(mpis)","This function 'max_product' performs a specific operation.

The function 'max_product' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_max_product():
    # Add test cases for max_product
    assert max_product(...) == expected_output"
"def max_profit(price, k):
    n = len(price)
    final_profit = [[None for x in range(n)] for y in range(k + 1)]
    for i in range(k + 1):
        for j in range(n):
            if i == 0 or j == 0:
                final_profit[i][j] = 0
            else:
                max_so_far = 0
                for x in range(j):
                    curr_price = price[j] - price[x] + final_profit[i-1][x]
                    if max_so_far < curr_price:
                        max_so_far = curr_price
                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)
    return final_profit[k][n-1]","This function 'max_profit' performs a specific operation.

The function 'max_profit' takes the following parameters: price, k. It performs operations based on the parameters provided.","def test_max_profit():
    # Add test cases for max_profit
    assert max_profit(...) == expected_output"
"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","This function 'add_pairwise' performs a specific operation.

The function 'add_pairwise' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_add_pairwise():
    # Add test cases for add_pairwise
    assert add_pairwise(...) == expected_output"
"def find_remainder(arr, lens, n): 
    mul = 1
    for i in range(lens):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ","This function 'find_remainder' performs a specific operation.

The function 'find_remainder' takes the following parameters: arr, lens, n. It performs operations based on the parameters provided.","def test_find_remainder():
    # Add test cases for find_remainder
    assert find_remainder(...) == expected_output"
"def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) ","This function 'check_Consecutive' performs a specific operation.

The function 'check_Consecutive' takes the following parameters: l. It performs operations based on the parameters provided.","def test_check_Consecutive():
    # Add test cases for check_Consecutive
    assert check_Consecutive(...) == expected_output"
"def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)","This function 'tuple_intersection' performs a specific operation.

The function 'tuple_intersection' takes the following parameters: test_list1, test_list2. It performs operations based on the parameters provided.","def test_tuple_intersection():
    # Add test cases for tuple_intersection
    assert tuple_intersection(...) == expected_output"
"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2","This function 'replace_char' performs a specific operation.

The function 'replace_char' takes the following parameters: str1, ch, newch. It performs operations based on the parameters provided.","def test_replace_char():
    # Add test cases for replace_char
    assert replace_char(...) == expected_output"
"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter","This function 'sort_counter' performs a specific operation.

The function 'sort_counter' takes the following parameters: dict1. It performs operations based on the parameters provided.","def test_sort_counter():
    # Add test cases for sort_counter
    assert sort_counter(...) == expected_output"
"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum","This function 'big_sum' performs a specific operation.

The function 'big_sum' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_big_sum():
    # Add test cases for big_sum
    assert big_sum(...) == expected_output"
"def is_lower(string):
  return (string.lower())","This function 'is_lower' performs a specific operation.

The function 'is_lower' takes the following parameters: string. It performs operations based on the parameters provided.","def test_is_lower():
    # Add test cases for is_lower
    assert is_lower(...) == expected_output"
"import re
def remove_lowercase(str1):
 remove_lower = lambda text: re.sub('[a-z]', '', text)
 result =  remove_lower(str1)
 return result","This function 'remove_lowercase' performs a specific operation.

The function 'remove_lowercase' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_remove_lowercase():
    # Add test cases for remove_lowercase
    assert remove_lowercase(...) == expected_output"
"def first_Digit(n) :  
    while n >= 10:  
        n = n / 10; 
    return int(n) ","This function 'first_Digit' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch","This function 'get_max_occuring_char' performs a specific operation.

The function 'get_max_occuring_char' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_get_max_occuring_char():
    # Add test cases for get_max_occuring_char
    assert get_max_occuring_char(...) == expected_output"
"def is_subset_sum(set, n, sum):
	if (sum == 0):
		return True
	if (n == 0):
		return False
	if (set[n - 1] > sum):
		return is_subset_sum(set, n - 1, sum)
	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])","This function 'is_subset_sum' performs a specific operation.

The function 'is_subset_sum' takes the following parameters: set, n, sum. It performs operations based on the parameters provided.","def test_is_subset_sum():
    # Add test cases for is_subset_sum
    assert is_subset_sum(...) == expected_output"
"import re 
def match(text): 
		pattern = '[A-Z]+[a-z]+$'
		if re.search(pattern, text): 
				return('Yes') 
		else: 
				return('No') ","This function 'match' performs a specific operation.

The function 'match' takes the following parameters: text. It performs operations based on the parameters provided.","def test_match():
    # Add test cases for match
    assert match(...) == expected_output"
"def first_Factorial_Divisible_Number(x): 
    i = 1;
    fact = 1; 
    for i in range(1,x): 
        fact = fact * i 
        if (fact % x == 0): 
            break
    return i ","This function 'first_Factorial_Divisible_Number' performs a specific operation.

The function 'first_Factorial_Divisible_Number' takes the following parameters: x. It performs operations based on the parameters provided.","def test_first_Factorial_Divisible_Number():
    # Add test cases for first_Factorial_Divisible_Number
    assert first_Factorial_Divisible_Number(...) == expected_output"
"def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) ","This function 'remove_matching_tuple' performs a specific operation.

The function 'remove_matching_tuple' takes the following parameters: test_list1, test_list2. It performs operations based on the parameters provided.","def test_remove_matching_tuple():
    # Add test cases for remove_matching_tuple
    assert remove_matching_tuple(...) == expected_output"
"def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1","This function 'is_palindrome' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def nCr(n, r): 
	if (r > n / 2): 
		r = n - r 
	answer = 1 
	for i in range(1, r + 1): 
		answer *= (n - r + i) 
		answer /= i 
	return answer 
def binomial_probability(n, k, p): 
	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) ","This function 'nCr' performs a specific operation.

The function 'nCr' takes the following parameters: n, r. It performs operations based on the parameters provided.","def test_nCr():
    # Add test cases for nCr
    assert nCr(...) == expected_output"
"def sort_tuple(tup): 
	lst = len(tup) 
	for i in range(0, lst): 
		for j in range(0, lst-i-1): 
			if (tup[j][-1] > tup[j + 1][-1]): 
				temp = tup[j] 
				tup[j]= tup[j + 1] 
				tup[j + 1]= temp 
	return tup","This function 'sort_tuple' performs a specific operation.

The function 'sort_tuple' takes the following parameters: tup. It performs operations based on the parameters provided.","def test_sort_tuple():
    # Add test cases for sort_tuple
    assert sort_tuple(...) == expected_output"
"import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area","This function 'area_pentagon' performs a specific operation.

The function 'area_pentagon' takes the following parameters: a. It performs operations based on the parameters provided.","def test_area_pentagon():
    # Add test cases for area_pentagon
    assert area_pentagon(...) == expected_output"
"def frequency_Of_Largest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] >mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ","This function 'frequency_Of_Largest' performs a specific operation.

The function 'frequency_Of_Largest' takes the following parameters: n, arr. It performs operations based on the parameters provided.","def test_frequency_Of_Largest():
    # Add test cases for frequency_Of_Largest
    assert frequency_Of_Largest(...) == expected_output"
"def extract_symmetric(test_list):
  temp = set(test_list) & {(b, a) for a, b in test_list}
  res = {(a, b) for a, b in temp if a < b}
  return (res) ","This function 'extract_symmetric' performs a specific operation.

The function 'extract_symmetric' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_extract_symmetric():
    # Add test cases for extract_symmetric
    assert extract_symmetric(...) == expected_output"
"import math
def sum_gp(a,n,r):
 total = (a * (1 - math.pow(r, n ))) / (1- r)
 return total","This function 'sum_gp' performs a specific operation.

The function 'sum_gp' takes the following parameters: a, n, r. It performs operations based on the parameters provided.","def test_sum_gp():
    # Add test cases for sum_gp
    assert sum_gp(...) == expected_output"
"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found","This function 'binary_search' performs a specific operation.

The function 'binary_search' takes the following parameters: item_list, item. It performs operations based on the parameters provided.","def test_binary_search():
    # Add test cases for binary_search
    assert binary_search(...) == expected_output"
"import math
def calculate_polygons(startx, starty, endx, endy, radius):
    sl = (2 * radius) * math.tan(math.pi / 6)
    p = sl * 0.5
    b = sl * math.cos(math.radians(30))
    w = b * 2
    h = 2 * sl   
    startx = startx - w
    starty = starty - h
    endx = endx + w
    endy = endy + h
    origx = startx
    origy = starty
    xoffset = b
    yoffset = 3 * p
    polygons = []
    row = 1
    counter = 0
    while starty < endy:
        if row % 2 == 0:
            startx = origx + xoffset
        else:
            startx = origx
        while startx < endx:
            p1x = startx
            p1y = starty + p
            p2x = startx
            p2y = starty + (3 * p)
            p3x = startx + b
            p3y = starty + h
            p4x = startx + w
            p4y = starty + (3 * p)
            p5x = startx + w
            p5y = starty + p
            p6x = startx + b
            p6y = starty
            poly = [
                (p1x, p1y),
                (p2x, p2y),
                (p3x, p3y),
                (p4x, p4y),
                (p5x, p5y),
                (p6x, p6y),
                (p1x, p1y)]
            polygons.append(poly)
            counter += 1
            startx += w
        starty += yoffset
        row += 1
    return polygons","This function 'calculate_polygons' performs a specific operation.

The function 'calculate_polygons' takes the following parameters: startx, starty, endx, endy, radius. It performs operations based on the parameters provided.","def test_calculate_polygons():
    # Add test cases for calculate_polygons
    assert calculate_polygons(...) == expected_output"
"def binary_to_integer(test_tup):
  res = int("""".join(str(ele) for ele in test_tup), 2)
  return (str(res)) ","This function 'binary_to_integer' performs a specific operation.

The function 'binary_to_integer' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_binary_to_integer():
    # Add test cases for binary_to_integer
    assert binary_to_integer(...) == expected_output"
"import re
def remove_lowercase(str1):
  remove_lower = lambda text: re.sub('[a-z]', '', text)
  result =  remove_lower(str1)
  return (result)","This function 'remove_lowercase' performs a specific operation.

The function 'remove_lowercase' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_remove_lowercase():
    # Add test cases for remove_lowercase
    assert remove_lowercase(...) == expected_output"
"import heapq as hq
def heap_queue_smallest(nums,n):
  smallest_nums = hq.nsmallest(n, nums)
  return smallest_nums","This function 'heap_queue_smallest' performs a specific operation.

The function 'heap_queue_smallest' takes the following parameters: nums, n. It performs operations based on the parameters provided.","def test_heap_queue_smallest():
    # Add test cases for heap_queue_smallest
    assert heap_queue_smallest(...) == expected_output"
"import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA","This function 'surfacearea_cone' performs a specific operation.

The function 'surfacearea_cone' takes the following parameters: r, h. It performs operations based on the parameters provided.","def test_surfacearea_cone():
    # Add test cases for surfacearea_cone
    assert surfacearea_cone(...) == expected_output"
"def gcd(x, y):
    gcd = 1
    if x % y == 0:
        return y
    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd = k
            break  
    return gcd","This function 'gcd' performs a specific operation.

The function 'gcd' takes the following parameters: x, y. It performs operations based on the parameters provided.","def test_gcd():
    # Add test cases for gcd
    assert gcd(...) == expected_output"
"def diameter_circle(r):
  diameter=2*r
  return diameter","This function 'diameter_circle' performs a specific operation.

The function 'diameter_circle' takes the following parameters: r. It performs operations based on the parameters provided.","def test_diameter_circle():
    # Add test cases for diameter_circle
    assert diameter_circle(...) == expected_output"
"def concatenate_elements(list):
  ans = ' '
  for i in list:
    ans = ans+ ' '+i
  return (ans) ","This function 'concatenate_elements' performs a specific operation.

The function 'concatenate_elements' takes the following parameters: list. It performs operations based on the parameters provided.","def test_concatenate_elements():
    # Add test cases for concatenate_elements
    assert concatenate_elements(...) == expected_output"
"def ngcd(x,y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i;
        i+=1
    return gcd;
def num_comm_div(x,y):
  n = ngcd(x,y)
  result = 0
  z = int(n**0.5)
  i = 1
  while(i <= z):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result","This function 'ngcd' performs a specific operation.

The function 'ngcd' takes the following parameters: x, y. It performs operations based on the parameters provided.","def test_ngcd():
    # Add test cases for ngcd
    assert ngcd(...) == expected_output"
"def find(n,m):
  r = n%m
  return (r)","This function 'find' performs a specific operation.

The function 'find' takes the following parameters: n, m. It performs operations based on the parameters provided.","def test_find():
    # Add test cases for find
    assert find(...) == expected_output"
"def add_consecutive_nums(nums):
    result = [b+a for a, b in zip(nums[:-1], nums[1:])]
    return result","This function 'add_consecutive_nums' performs a specific operation.

The function 'add_consecutive_nums' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_add_consecutive_nums():
    # Add test cases for add_consecutive_nums
    assert add_consecutive_nums(...) == expected_output"
"def sum_Of_Series(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += i * i*i       
    return sum","This function 'sum_Of_Series' performs a specific operation.

The function 'sum_Of_Series' takes the following parameters: n. It performs operations based on the parameters provided.","def test_sum_Of_Series():
    # Add test cases for sum_Of_Series
    assert sum_Of_Series(...) == expected_output"
"def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A","This function 're_order' performs a specific operation.

The function 're_order' takes the following parameters: A. It performs operations based on the parameters provided.","def test_re_order():
    # Add test cases for re_order
    assert re_order(...) == expected_output"
"def permutation_coefficient(n, k): 
	P = [[0 for i in range(k + 1)] 
			for j in range(n + 1)] 
	for i in range(n + 1): 
		for j in range(min(i, k) + 1): 
			if (j == 0): 
				P[i][j] = 1
			else: 
				P[i][j] = P[i - 1][j] + ( 
						j * P[i - 1][j - 1]) 
			if (j < k): 
				P[i][j + 1] = 0
	return P[n][k] ","This function 'permutation_coefficient' performs a specific operation.

The function 'permutation_coefficient' takes the following parameters: n, k. It performs operations based on the parameters provided.","def test_permutation_coefficient():
    # Add test cases for permutation_coefficient
    assert permutation_coefficient(...) == expected_output"
"def remove_words(list1, removewords):
    for word in list(list1):
        if word in removewords:
            list1.remove(word)
    return list1  ","This function 'remove_words' performs a specific operation.

The function 'remove_words' takes the following parameters: list1, removewords. It performs operations based on the parameters provided.","def test_remove_words():
    # Add test cases for remove_words
    assert remove_words(...) == expected_output"
"def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2","This function 'same_order' performs a specific operation.

The function 'same_order' takes the following parameters: l1, l2. It performs operations based on the parameters provided.","def test_same_order():
    # Add test cases for same_order
    assert same_order(...) == expected_output"
"def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count ","This function 'average_Odd' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def no_of_subsequences(arr, k): 
	n = len(arr) 
	dp = [[0 for i in range(n + 1)] 
			for j in range(k + 1)] 
	for i in range(1, k + 1): 
		for j in range(1, n + 1): 
			dp[i][j] = dp[i][j - 1] 
			if arr[j - 1] <= i and arr[j - 1] > 0: 
				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1
	return dp[k][n]","This function 'no_of_subsequences' performs a specific operation.

The function 'no_of_subsequences' takes the following parameters: arr, k. It performs operations based on the parameters provided.","def test_no_of_subsequences():
    # Add test cases for no_of_subsequences
    assert no_of_subsequences(...) == expected_output"
"def find_Min_Sum(num): 
    sum = 0
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num 
    return sum","This function 'find_Min_Sum' performs a specific operation.

The function 'find_Min_Sum' takes the following parameters: num. It performs operations based on the parameters provided.","def test_find_Min_Sum():
    # Add test cases for find_Min_Sum
    assert find_Min_Sum(...) == expected_output"
"def flatten(test_tuple): 
	for tup in test_tuple: 
		if isinstance(tup, tuple): 
			yield from flatten(tup) 
		else: 
			yield tup 
def count_element_freq(test_tuple):
  res = {}
  for ele in flatten(test_tuple):
    if ele not in res:
      res[ele] = 0
    res[ele] += 1
  return (res) ","This function 'flatten' performs a specific operation.

The function 'flatten' takes the following parameters: test_tuple. It performs operations based on the parameters provided.","def test_flatten():
    # Add test cases for flatten
    assert flatten(...) == expected_output"
"def add_str(test_tup, K):
  res = [ele for sub in test_tup for ele in (sub, K)]
  return (res) ","This function 'add_str' performs a specific operation.

The function 'add_str' takes the following parameters: test_tup, K. It performs operations based on the parameters provided.","def test_add_str():
    # Add test cases for add_str
    assert add_str(...) == expected_output"
"def sum_elements(test_tup):
  res = sum(list(test_tup))
  return (res) ","This function 'sum_elements' performs a specific operation.

The function 'sum_elements' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_sum_elements():
    # Add test cases for sum_elements
    assert sum_elements(...) == expected_output"
"def modular_sum(arr, n, m): 
	if (n > m): 
		return True
	DP = [False for i in range(m)] 
	for i in range(n): 
		if (DP[0]): 
			return True
		temp = [False for i in range(m)] 
		for j in range(m): 
			if (DP[j] == True): 
				if (DP[(j + arr[i]) % m] == False): 
					temp[(j + arr[i]) % m] = True
		for j in range(m): 
			if (temp[j]): 
				DP[j] = True
		DP[arr[i] % m] = True
	return DP[0]","This function 'modular_sum' performs a specific operation.

The function 'modular_sum' takes the following parameters: arr, n, m. It performs operations based on the parameters provided.","def test_modular_sum():
    # Add test cases for modular_sum
    assert modular_sum(...) == expected_output"
"def radix_sort(nums):
    RADIX = 10
    placement = 1
    max_digit = max(nums)

    while placement < max_digit:
      buckets = [list() for _ in range( RADIX )]
      for i in nums:
        tmp = int((i / placement) % RADIX)
        buckets[tmp].append(i)
      a = 0
      for b in range( RADIX ):
        buck = buckets[b]
        for i in buck:
          nums[a] = i
          a += 1
      placement *= RADIX
    return nums","This function 'radix_sort' performs a specific operation.

The function 'radix_sort' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_radix_sort():
    # Add test cases for radix_sort
    assert radix_sort(...) == expected_output"
"def largest_pos(list1): 
    max = list1[0] 
    for x in list1: 
        if x > max : 
             max = x  
    return max","This function 'largest_pos' performs a specific operation.

The function 'largest_pos' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_largest_pos():
    # Add test cases for largest_pos
    assert largest_pos(...) == expected_output"
"import math
def sqrt_root(num):
 sqrt_root = math.pow(num, 0.5)
 return sqrt_root ","This function 'sqrt_root' performs a specific operation.

The function 'sqrt_root' takes the following parameters: num. It performs operations based on the parameters provided.","def test_sqrt_root():
    # Add test cases for sqrt_root
    assert sqrt_root(...) == expected_output"
"import math
def volume_tetrahedron(num):
	volume = (num ** 3 / (6 * math.sqrt(2)))	
	return round(volume, 2)","This function 'volume_tetrahedron' performs a specific operation.

The function 'volume_tetrahedron' takes the following parameters: num. It performs operations based on the parameters provided.","def test_volume_tetrahedron():
    # Add test cases for volume_tetrahedron
    assert volume_tetrahedron(...) == expected_output"
"def find_lcm(num1, num2): 
	if(num1>num2): 
		num = num1 
		den = num2 
	else: 
		num = num2 
		den = num1 
	rem = num % den 
	while (rem != 0): 
		num = den 
		den = rem 
		rem = num % den 
	gcd = den 
	lcm = int(int(num1 * num2)/int(gcd)) 
	return lcm 
def get_lcm(l):
  num1 = l[0]
  num2 = l[1]
  lcm = find_lcm(num1, num2)
  for i in range(2, len(l)):
    lcm = find_lcm(lcm, l[i])
  return lcm ","This function 'find_lcm' performs a specific operation.

The function 'find_lcm' takes the following parameters: num1, num2. It performs operations based on the parameters provided.","def test_find_lcm():
    # Add test cases for find_lcm
    assert find_lcm(...) == expected_output"
"def check_isosceles(x,y,z):
  if x!=y & y!=z & z!=x:
	   return True
  else:
     return False","This function 'check_isosceles' performs a specific operation.

The function 'check_isosceles' takes the following parameters: x, y, z. It performs operations based on the parameters provided.","def test_check_isosceles():
    # Add test cases for check_isosceles
    assert check_isosceles(...) == expected_output"
"def lbs(arr): 
	n = len(arr) 
	lis = [1 for i in range(n+1)] 
	for i in range(1 , n): 
		for j in range(0 , i): 
			if ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): 
				lis[i] = lis[j] + 1
	lds = [1 for i in range(n+1)] 
	for i in reversed(range(n-1)): 
		for j in reversed(range(i-1 ,n)): 
			if(arr[i] > arr[j] and lds[i] < lds[j] + 1): 
				lds[i] = lds[j] + 1
	maximum = lis[0] + lds[0] - 1
	for i in range(1 , n): 
		maximum = max((lis[i] + lds[i]-1), maximum) 
	return maximum","This function 'lbs' performs a specific operation.

The function 'lbs' takes the following parameters: arr. It performs operations based on the parameters provided.","def test_lbs():
    # Add test cases for lbs
    assert lbs(...) == expected_output"
"def check_string(str1):
    messg = [
    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',
    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',
    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',
    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]
    result = [x for x in [i(str1) for i in messg] if x != True]
    if not result:
        result.append('Valid string.')
    return result  ","This function 'check_string' performs a specific operation.

The function 'check_string' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_check_string():
    # Add test cases for check_string
    assert check_string(...) == expected_output"
"def max_sum_increasing_subsequence(arr, n): 
	max = 0
	msis = [0 for x in range(n)] 
	for i in range(n): 
		msis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
				msis[i] < msis[j] + arr[i]): 
				msis[i] = msis[j] + arr[i] 
	for i in range(n): 
		if max < msis[i]: 
			max = msis[i] 
	return max","This function 'max_sum_increasing_subsequence' performs a specific operation.

The function 'max_sum_increasing_subsequence' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_max_sum_increasing_subsequence():
    # Add test cases for max_sum_increasing_subsequence
    assert max_sum_increasing_subsequence(...) == expected_output"
"def parallel_lines(line1, line2):
  return line1[0]/line1[1] == line2[0]/line2[1]","This function 'parallel_lines' performs a specific operation.

The function 'parallel_lines' takes the following parameters: line1, line2. It performs operations based on the parameters provided.","def test_parallel_lines():
    # Add test cases for parallel_lines
    assert parallel_lines(...) == expected_output"
"def capitalize_first_last_letters(str1):
     str1 = result = str1.title()
     result =  """"
     for word in str1.split():
        result += word[:-1] + word[-1].upper() + "" ""
     return result[:-1]  ","This function 'capitalize_first_last_letters' performs a specific operation.

The function 'capitalize_first_last_letters' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_capitalize_first_last_letters():
    # Add test cases for capitalize_first_last_letters
    assert capitalize_first_last_letters(...) == expected_output"
"def get_pairs_count(arr, n, sum):
    count = 0 
    for i in range(0, n):
        for j in range(i + 1, n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count","This function 'get_pairs_count' performs a specific operation.

The function 'get_pairs_count' takes the following parameters: arr, n, sum. It performs operations based on the parameters provided.","def test_get_pairs_count():
    # Add test cases for get_pairs_count
    assert get_pairs_count(...) == expected_output"
"def min_length(list1):
   min_length = min(len(x) for x in  list1 )  
   min_list = min((x) for x in   list1)
   return(min_length, min_list)     ","This function 'min_length' performs a specific operation.

The function 'min_length' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_min_length():
    # Add test cases for min_length
    assert min_length(...) == expected_output"
"def jacobsthal_lucas(n): 
	dp=[0] * (n + 1) 
	dp[0] = 2
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2]; 
	return dp[n]","This function 'jacobsthal_lucas' performs a specific operation.

The function 'jacobsthal_lucas' takes the following parameters: n. It performs operations based on the parameters provided.","def test_jacobsthal_lucas():
    # Add test cases for jacobsthal_lucas
    assert jacobsthal_lucas(...) == expected_output"
"from array import array
def negative_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x < 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","This function 'negative_count' performs a specific operation.

The function 'negative_count' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_negative_count():
    # Add test cases for negative_count
    assert negative_count(...) == expected_output"
"import sys 
def min_coins(coins, m, V): 
    if (V == 0): 
        return 0
    res = sys.maxsize 
    for i in range(0, m): 
        if (coins[i] <= V): 
            sub_res = min_coins(coins, m, V-coins[i]) 
            if (sub_res != sys.maxsize and sub_res + 1 < res): 
                res = sub_res + 1  
    return res ","This function 'min_coins' performs a specific operation.

The function 'min_coins' takes the following parameters: coins, m, V. It performs operations based on the parameters provided.","def test_min_coins():
    # Add test cases for min_coins
    assert min_coins(...) == expected_output"
"def check_permutation(str1, str2):
  n1=len(str1)
  n2=len(str2)
  if(n1!=n2):
    return False
  a=sorted(str1)
  str1="" "".join(a)
  b=sorted(str2)
  str2="" "".join(b)
  for i in range(0, n1, 1):
    if(str1[i] != str2[i]):
      return False
  return True","This function 'check_permutation' performs a specific operation.

The function 'check_permutation' takes the following parameters: str1, str2. It performs operations based on the parameters provided.","def test_check_permutation():
    # Add test cases for check_permutation
    assert check_permutation(...) == expected_output"
"def remove_datatype(test_tuple, data_type):
  res = []
  for ele in test_tuple:
    if not isinstance(ele, data_type):
      res.append(ele)
  return (res) ","This function 'remove_datatype' performs a specific operation.

The function 'remove_datatype' takes the following parameters: test_tuple, data_type. It performs operations based on the parameters provided.","def test_remove_datatype():
    # Add test cases for remove_datatype
    assert remove_datatype(...) == expected_output"
"import re
def search_literal(pattern,text):
 match = re.search(pattern, text)
 s = match.start()
 e = match.end()
 return (s, e)","This function 'search_literal' performs a specific operation.

The function 'search_literal' takes the following parameters: pattern, text. It performs operations based on the parameters provided.","def test_search_literal():
    # Add test cases for search_literal
    assert search_literal(...) == expected_output"
"def topbottom_surfacearea(r):
  toporbottomarea=3.1415*r*r
  return toporbottomarea","This function 'topbottom_surfacearea' performs a specific operation.

The function 'topbottom_surfacearea' takes the following parameters: r. It performs operations based on the parameters provided.","def test_topbottom_surfacearea():
    # Add test cases for topbottom_surfacearea
    assert topbottom_surfacearea(...) == expected_output"
"def nth_items(list,n):
 return list[::n]","This function 'nth_items' performs a specific operation.

The function 'nth_items' takes the following parameters: list, n. It performs operations based on the parameters provided.","def test_nth_items():
    # Add test cases for nth_items
    assert nth_items(...) == expected_output"
"def first_repeated_word(str1):
  temp = set()
  for word in str1.split():
    if word in temp:
      return word;
    else:
      temp.add(word)
  return 'None'","This function 'first_repeated_word' performs a specific operation.

The function 'first_repeated_word' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_first_repeated_word():
    # Add test cases for first_repeated_word
    assert first_repeated_word(...) == expected_output"
"def string_list_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result","This function 'string_list_to_tuple' performs a specific operation.

The function 'string_list_to_tuple' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_string_list_to_tuple():
    # Add test cases for string_list_to_tuple
    assert string_list_to_tuple(...) == expected_output"
"def basesnum_coresspondingnum(bases_num,index):
  result = list(map(pow, bases_num, index))
  return result","This function 'basesnum_coresspondingnum' performs a specific operation.

The function 'basesnum_coresspondingnum' takes the following parameters: bases_num, index. It performs operations based on the parameters provided.","def test_basesnum_coresspondingnum():
    # Add test cases for basesnum_coresspondingnum
    assert basesnum_coresspondingnum(...) == expected_output"
"def find_Diff(arr,n): 
    arr.sort()  
    count = 0; max_count = 0; min_count = n 
    for i in range(0,(n-1)): 
        if arr[i] == arr[i + 1]: 
            count += 1
            continue
        else: 
            max_count = max(max_count,count) 
            min_count = min(min_count,count) 
            count = 0
    return max_count - min_count ","This function 'find_Diff' performs a specific operation.

The function 'find_Diff' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_find_Diff():
    # Add test cases for find_Diff
    assert find_Diff(...) == expected_output"
"import math 
def get_sum(n): 
	sum = 0
	i = 1
	while i <= (math.sqrt(n)): 
		if n%i == 0: 
			if n/i == i : 
				sum = sum + i 
			else: 
				sum = sum + i 
				sum = sum + (n / i ) 
		i = i + 1
	sum = sum - n 
	return sum
def check_abundant(n): 
	if (get_sum(n) > n): 
		return True
	else: 
		return False","This function 'get_sum' performs a specific operation.

The function 'get_sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_get_sum():
    # Add test cases for get_sum
    assert get_sum(...) == expected_output"
"import re
def fill_spaces(text):
  return (re.sub(""[ ,.]"", "":"", text))","This function 'fill_spaces' performs a specific operation.

The function 'fill_spaces' takes the following parameters: text. It performs operations based on the parameters provided.","def test_fill_spaces():
    # Add test cases for fill_spaces
    assert fill_spaces(...) == expected_output"
"def count_digits(num1,num2):
    number=num1+num2
    count = 0
    while(number > 0):
        number = number // 10
        count = count + 1
    return count","This function 'count_digits' performs a specific operation.

The function 'count_digits' takes the following parameters: num1, num2. It performs operations based on the parameters provided.","def test_count_digits():
    # Add test cases for count_digits
    assert count_digits(...) == expected_output"
"def flatten_tuple(test_list):
  res = ' '.join([idx for tup in test_list for idx in tup])
  return (res) ","This function 'flatten_tuple' performs a specific operation.

The function 'flatten_tuple' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_flatten_tuple():
    # Add test cases for flatten_tuple
    assert flatten_tuple(...) == expected_output"
"def take_L_and_F_set_bits(n) : 
    n = n | n >> 1
    n = n | n >> 2
    n = n | n >> 4
    n = n | n >> 8
    n = n | n >> 16 
    return ((n + 1) >> 1) + 1      
def toggle_F_and_L_bits(n) :  
    if (n == 1) : 
        return 0 
    return n ^ take_L_and_F_set_bits(n) ","This function 'take_L_and_F_set_bits' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def last_occurence_char(string,char):
 flag = -1
 for i in range(len(string)):
     if(string[i] == char):
         flag = i
 if(flag == -1):
    return None
 else:
    return flag + 1","This function 'last_occurence_char' performs a specific operation.

The function 'last_occurence_char' takes the following parameters: string, char. It performs operations based on the parameters provided.","def test_last_occurence_char():
    # Add test cases for last_occurence_char
    assert last_occurence_char(...) == expected_output"
"def Total_Hamming_Distance(n):   
    i = 1
    sum = 0
    while (n // i > 0):  
        sum = sum + n // i  
        i = i * 2     
    return sum","This function 'Total_Hamming_Distance' performs a specific operation.

The function 'Total_Hamming_Distance' takes the following parameters: n. It performs operations based on the parameters provided.","def test_Total_Hamming_Distance():
    # Add test cases for Total_Hamming_Distance
    assert Total_Hamming_Distance(...) == expected_output"
"def longest_increasing_subsequence(arr): 
	n = len(arr) 
	longest_increasing_subsequence = [1]*n 
	for i in range (1 , n): 
		for j in range(0 , i): 
			if arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : 
				longest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1
	maximum = 0
	for i in range(n): 
		maximum = max(maximum , longest_increasing_subsequence[i]) 
	return maximum","This function 'longest_increasing_subsequence' performs a specific operation.

The function 'longest_increasing_subsequence' takes the following parameters: arr. It performs operations based on the parameters provided.","def test_longest_increasing_subsequence():
    # Add test cases for longest_increasing_subsequence
    assert longest_increasing_subsequence(...) == expected_output"
"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n+1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j*j)     
    return sm ","This function 'odd_Num_Sum' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def find_Max(arr,low,high): 
    if (high < low): 
        return arr[0] 
    if (high == low): 
        return arr[low] 
    mid = low + (high - low) // 2 
    if (mid < high and arr[mid + 1] < arr[mid]): 
        return arr[mid] 
    if (mid > low and arr[mid] < arr[mid - 1]): 
        return arr[mid - 1]  
    if (arr[low] > arr[mid]): 
        return find_Max(arr,low,mid - 1) 
    else: 
        return find_Max(arr,mid + 1,high) ","This function 'find_Max' performs a specific operation.

The function 'find_Max' takes the following parameters: arr, low, high. It performs operations based on the parameters provided.","def test_find_Max():
    # Add test cases for find_Max
    assert find_Max(...) == expected_output"
"def extract_column(list1, n):
   result = [i.pop(n) for i in list1]
   return result ","This function 'extract_column' performs a specific operation.

The function 'extract_column' takes the following parameters: list1, n. It performs operations based on the parameters provided.","def test_extract_column():
    # Add test cases for extract_column
    assert extract_column(...) == expected_output"
"def Seq_Linear(seq_nums):
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  if len(set(seq_nums)) == 1: 
    return ""Linear Sequence""
  else:
    return ""Non Linear Sequence""","This function 'Seq_Linear' performs a specific operation.

The function 'Seq_Linear' takes the following parameters: seq_nums. It performs operations based on the parameters provided.","def test_Seq_Linear():
    # Add test cases for Seq_Linear
    assert Seq_Linear(...) == expected_output"
"def tuple_to_float(test_tup):
  res = float('.'.join(str(ele) for ele in test_tup))
  return (res) ","This function 'tuple_to_float' performs a specific operation.

The function 'tuple_to_float' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_tuple_to_float():
    # Add test cases for tuple_to_float
    assert tuple_to_float(...) == expected_output"
"def Split(list): 
    od_li = [] 
    for i in list: 
        if (i % 2 != 0): 
            od_li.append(i)  
    return od_li","This function 'Split' performs a specific operation.

The function 'Split' takes the following parameters: list. It performs operations based on the parameters provided.","def test_Split():
    # Add test cases for Split
    assert Split(...) == expected_output"
"def difference(n) :  
    S = (n*(n + 1))//2;  
    res = S*(S-1);  
    return res;  ","This function 'difference' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ","This function 'find_Odd_Pair' performs a specific operation.

The function 'find_Odd_Pair' takes the following parameters: A, N) : 
    oddPair = 0
    for i in range(0, N) :  
        for j in range(i+1, N) :  
            if ((A[i] ^ A[j]) % 2 != 0. It performs operations based on the parameters provided.","def test_find_Odd_Pair():
    # Add test cases for find_Odd_Pair
    assert find_Odd_Pair(...) == expected_output"
"def toggle_string(string):
 string1 = string.swapcase()
 return string1","This function 'toggle_string' performs a specific operation.

The function 'toggle_string' takes the following parameters: string. It performs operations based on the parameters provided.","def test_toggle_string():
    # Add test cases for toggle_string
    assert toggle_string(...) == expected_output"
"def digit_distance_nums(n1, n2):
         return sum(map(int,str(abs(n1-n2))))","This function 'digit_distance_nums' performs a specific operation.

The function 'digit_distance_nums' takes the following parameters: n1, n2. It performs operations based on the parameters provided.","def test_digit_distance_nums():
    # Add test cases for digit_distance_nums
    assert digit_distance_nums(...) == expected_output"
"def max_sub_array_sum(a, size):
  max_so_far = 0
  max_ending_here = 0
  for i in range(0, size):
    max_ending_here = max_ending_here + a[i]
    if max_ending_here < 0:
      max_ending_here = 0
    elif (max_so_far < max_ending_here):
      max_so_far = max_ending_here
  return max_so_far","This function 'max_sub_array_sum' performs a specific operation.

The function 'max_sub_array_sum' takes the following parameters: a, size. It performs operations based on the parameters provided.","def test_max_sub_array_sum():
    # Add test cases for max_sub_array_sum
    assert max_sub_array_sum(...) == expected_output"
"def union_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1 + test_tup2))
  return (res) ","This function 'union_elements' performs a specific operation.

The function 'union_elements' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_union_elements():
    # Add test cases for union_elements
    assert union_elements(...) == expected_output"
"def assign_elements(test_list):
  res = dict()
  for key, val in test_list:
    res.setdefault(val, [])
    res.setdefault(key, []).append(val)
  return (res) ","This function 'assign_elements' performs a specific operation.

The function 'assign_elements' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_assign_elements():
    # Add test cases for assign_elements
    assert assign_elements(...) == expected_output"
"def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength ","This function 'Find_Max_Length' performs a specific operation.

The function 'Find_Max_Length' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_Find_Max_Length():
    # Add test cases for Find_Max_Length
    assert Find_Max_Length(...) == expected_output"
"import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))","This function 'extract_values' performs a specific operation.

The function 'extract_values' takes the following parameters: text. It performs operations based on the parameters provided.","def test_extract_values():
    # Add test cases for extract_values
    assert extract_values(...) == expected_output"
"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] != arr[j]): 
                cnt += 1; 
    return cnt; ","This function 'count_Pairs' performs a specific operation.

The function 'count_Pairs' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_count_Pairs():
    # Add test cases for count_Pairs
    assert count_Pairs(...) == expected_output"
"def split(word): 
    return [char for char in word] ","This function 'split' performs a specific operation.

The function 'split' takes the following parameters: word. It performs operations based on the parameters provided.","def test_split():
    # Add test cases for split
    assert split(...) == expected_output"
"def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))","This function 'sum_digits' performs a specific operation.

The function 'sum_digits' takes the following parameters: n. It performs operations based on the parameters provided.","def test_sum_digits():
    # Add test cases for sum_digits
    assert sum_digits(...) == expected_output"
"def issort_list(list1):
    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))
    return result","This function 'issort_list' performs a specific operation.

The function 'issort_list' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_issort_list():
    # Add test cases for issort_list
    assert issort_list(...) == expected_output"
"def empty_list(length):
 empty_list = [{} for _ in range(length)]
 return empty_list","This function 'empty_list' performs a specific operation.

The function 'empty_list' takes the following parameters: length. It performs operations based on the parameters provided.","def test_empty_list():
    # Add test cases for empty_list
    assert empty_list(...) == expected_output"
"def sort_sublists(list1):
    result = list(map(sorted,list1)) 
    return result","This function 'sort_sublists' performs a specific operation.

The function 'sort_sublists' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_sort_sublists():
    # Add test cases for sort_sublists
    assert sort_sublists(...) == expected_output"
"def remove_words(list1, charlist):
    new_list = []
    for line in list1:
        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])
        new_list.append(new_words)
    return new_list","This function 'remove_words' performs a specific operation.

The function 'remove_words' takes the following parameters: list1, charlist. It performs operations based on the parameters provided.","def test_remove_words():
    # Add test cases for remove_words
    assert remove_words(...) == expected_output"
"def max_sum_pair_diff_lessthan_K(arr, N, K): 
	arr.sort() 
	dp = [0] * N 
	dp[0] = 0
	for i in range(1, N): 
		dp[i] = dp[i-1] 
		if (arr[i] - arr[i-1] < K): 
			if (i >= 2): 
				dp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); 
			else: 
				dp[i] = max(dp[i], arr[i] + arr[i-1]); 
	return dp[N - 1]","This function 'max_sum_pair_diff_lessthan_K' performs a specific operation.

The function 'max_sum_pair_diff_lessthan_K' takes the following parameters: arr, N, K. It performs operations based on the parameters provided.","def test_max_sum_pair_diff_lessthan_K():
    # Add test cases for max_sum_pair_diff_lessthan_K
    assert max_sum_pair_diff_lessthan_K(...) == expected_output"
"def two_unique_nums(nums):
  return [i for i in nums if nums.count(i)==1]","This function 'two_unique_nums' performs a specific operation.

The function 'two_unique_nums' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_two_unique_nums():
    # Add test cases for two_unique_nums
    assert two_unique_nums(...) == expected_output"
"def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p","This function 'unique_product' performs a specific operation.

The function 'unique_product' takes the following parameters: list_data. It performs operations based on the parameters provided.","def test_unique_product():
    # Add test cases for unique_product
    assert unique_product(...) == expected_output"
"def surfacearea_cylinder(r,h):
  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))
  return surfacearea","This function 'surfacearea_cylinder' performs a specific operation.

The function 'surfacearea_cylinder' takes the following parameters: r, h. It performs operations based on the parameters provided.","def test_surfacearea_cylinder():
    # Add test cases for surfacearea_cylinder
    assert surfacearea_cylinder(...) == expected_output"
"def count_no (A,N,L,R): 
    count = 0
    for i in range (L,R + 1): 
        if (i % A != 0): 
            count += 1
        if (count == N): 
            break
    return (i) ","This function 'count_no' performs a specific operation.

The function 'count_no' takes the following parameters: A, N, L, R. It performs operations based on the parameters provided.","def test_count_no():
    # Add test cases for count_no
    assert count_no(...) == expected_output"
"def is_Sub_Array(A,B,n,m): 
    i = 0; j = 0; 
    while (i < n and j < m):  
        if (A[i] == B[j]): 
            i += 1; 
            j += 1; 
            if (j == m): 
                return True;  
        else: 
            i = i - j + 1; 
            j = 0;       
    return False; ","This function 'is_Sub_Array' performs a specific operation.

The function 'is_Sub_Array' takes the following parameters: A, B, n, m. It performs operations based on the parameters provided.","def test_is_Sub_Array():
    # Add test cases for is_Sub_Array
    assert is_Sub_Array(...) == expected_output"
"def last_Digit_Factorial(n): 
    if (n == 0): return 1
    elif (n <= 2): return n  
    elif (n == 3): return 6
    elif (n == 4): return 4 
    else: 
      return 0","This function 'last_Digit_Factorial' performs a specific operation.

The function 'last_Digit_Factorial' takes the following parameters: n. It performs operations based on the parameters provided.","def test_last_Digit_Factorial():
    # Add test cases for last_Digit_Factorial
    assert last_Digit_Factorial(...) == expected_output"
"def interleave_lists(list1,list2,list3):
    result = [el for pair in zip(list1, list2, list3) for el in pair]
    return result","This function 'interleave_lists' performs a specific operation.

The function 'interleave_lists' takes the following parameters: list1, list2, list3. It performs operations based on the parameters provided.","def test_interleave_lists():
    # Add test cases for interleave_lists
    assert interleave_lists(...) == expected_output"
"def find_dissimilar(test_tup1, test_tup2):
  res = tuple(set(test_tup1) ^ set(test_tup2))
  return (res) ","This function 'find_dissimilar' performs a specific operation.

The function 'find_dissimilar' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_find_dissimilar():
    # Add test cases for find_dissimilar
    assert find_dissimilar(...) == expected_output"
"def even_ele(test_tuple, even_fnc): 
	res = tuple() 
	for ele in test_tuple: 
		if isinstance(ele, tuple): 
			res += (even_ele(ele, even_fnc), ) 
		elif even_fnc(ele): 
			res += (ele, ) 
	return res 
def extract_even(test_tuple):
  res = even_ele(test_tuple, lambda x: x % 2 == 0)
  return (res) ","This function 'even_ele' performs a specific operation.

The function 'even_ele' takes the following parameters: test_tuple, even_fnc. It performs operations based on the parameters provided.","def test_even_ele():
    # Add test cases for even_ele
    assert even_ele(...) == expected_output"
"def surface_Area(b,s): 
    return 2 * b * s + pow(b,2) ","This function 'surface_Area' performs a specific operation.

The function 'surface_Area' takes the following parameters: b, s. It performs operations based on the parameters provided.","def test_surface_Area():
    # Add test cases for surface_Area
    assert surface_Area(...) == expected_output"
"def my_dict(dict1):
  if bool(dict1):
     return False
  else:
     return True","This function 'my_dict' performs a specific operation.

The function 'my_dict' takes the following parameters: dict1. It performs operations based on the parameters provided.","def test_my_dict():
    # Add test cases for my_dict
    assert my_dict(...) == expected_output"
"def catalan_number(num):
    if num <=1:
         return 1   
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num-i-1)
    return res_num","This function 'catalan_number' performs a specific operation.

The function 'catalan_number' takes the following parameters: num. It performs operations based on the parameters provided.","def test_catalan_number():
    # Add test cases for catalan_number
    assert catalan_number(...) == expected_output"
"import re
def find_adverbs(text):
  for m in re.finditer(r""\w+ly"", text):
    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))","This function 'find_adverbs' performs a specific operation.

The function 'find_adverbs' takes the following parameters: text. It performs operations based on the parameters provided.","def test_find_adverbs():
    # Add test cases for find_adverbs
    assert find_adverbs(...) == expected_output"
"import heapq
def expensive_items(items,n):
  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])
  return expensive_items","This function 'expensive_items' performs a specific operation.

The function 'expensive_items' takes the following parameters: items, n. It performs operations based on the parameters provided.","def test_expensive_items():
    # Add test cases for expensive_items
    assert expensive_items(...) == expected_output"
"def split_Arr(a,n,k):  
   b = a[:k] 
   return (a[k::]+b[::]) ","This function 'split_Arr' performs a specific operation.

The function 'split_Arr' takes the following parameters: a, n, k. It performs operations based on the parameters provided.","def test_split_Arr():
    # Add test cases for split_Arr
    assert split_Arr(...) == expected_output"
"def list_tuple(listx):
  tuplex = tuple(listx)
  return tuplex","This function 'list_tuple' performs a specific operation.

The function 'list_tuple' takes the following parameters: listx. It performs operations based on the parameters provided.","def test_list_tuple():
    # Add test cases for list_tuple
    assert list_tuple(...) == expected_output"
"def big_diff(nums):
     diff= max(nums)-min(nums)
     return diff","This function 'big_diff' performs a specific operation.

The function 'big_diff' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_big_diff():
    # Add test cases for big_diff
    assert big_diff(...) == expected_output"
"def perfect_squares(a, b):
    lists=[]
    for i in range (a,b+1):
        j = 1;
        while j*j <= i:
            if j*j == i:
                 lists.append(i)  
            j = j+1
        i = i+1
    return lists","This function 'perfect_squares' performs a specific operation.

The function 'perfect_squares' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_perfect_squares():
    # Add test cases for perfect_squares
    assert perfect_squares(...) == expected_output"
"import cmath
def polar_rect(x,y):
 cn = complex(x,y)
 cn=cmath.polar(cn)
 cn1 = cmath.rect(2, cmath.pi)
 return (cn,cn1)","This function 'polar_rect' performs a specific operation.

The function 'polar_rect' takes the following parameters: x, y. It performs operations based on the parameters provided.","def test_polar_rect():
    # Add test cases for polar_rect
    assert polar_rect(...) == expected_output"
"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp  
    return newList ","This function 'swap_List' performs a specific operation.

The function 'swap_List' takes the following parameters: newList. It performs operations based on the parameters provided.","def test_swap_List():
    # Add test cases for swap_List
    assert swap_List(...) == expected_output"
"def binomial_Coeff(n,k): 
    C = [0] * (k + 1); 
    C[0] = 1; # nC0 is 1 
    for i in range(1,n + 1):  
        for j in range(min(i, k),0,-1): 
            C[j] = C[j] + C[j - 1]; 
    return C[k]; 
def sum_Of_product(n): 
    return binomial_Coeff(2 * n,n - 1); ","This function 'binomial_Coeff' performs a specific operation.

The function 'binomial_Coeff' takes the following parameters: n, k. It performs operations based on the parameters provided.","def test_binomial_Coeff():
    # Add test cases for binomial_Coeff
    assert binomial_Coeff(...) == expected_output"
"import re
def removezero_ip(ip):
 string = re.sub('\.[0]*', '.', ip)
 return string
","This function 'removezero_ip' performs a specific operation.

The function 'removezero_ip' takes the following parameters: ip. It performs operations based on the parameters provided.","def test_removezero_ip():
    # Add test cases for removezero_ip
    assert removezero_ip(...) == expected_output"
"def diff_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even-first_odd)","This function 'diff_even_odd' performs a specific operation.

The function 'diff_even_odd' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_diff_even_odd():
    # Add test cases for diff_even_odd
    assert diff_even_odd(...) == expected_output"
"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) :  
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ","This function 'min_Swaps' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"import sys 
def tuple_size(tuple_list):
  return (sys.getsizeof(tuple_list)) ","This function 'tuple_size' performs a specific operation.

The function 'tuple_size' takes the following parameters: tuple_list. It performs operations based on the parameters provided.","def test_tuple_size():
    # Add test cases for tuple_size
    assert tuple_size(...) == expected_output"
"def find_kth(arr1, arr2, m, n, k):
	sorted1 = [0] * (m + n)
	i = 0
	j = 0
	d = 0
	while (i < m and j < n):
		if (arr1[i] < arr2[j]):
			sorted1[d] = arr1[i]
			i += 1
		else:
			sorted1[d] = arr2[j]
			j += 1
		d += 1
	while (i < m):
		sorted1[d] = arr1[i]
		d += 1
		i += 1
	while (j < n):
		sorted1[d] = arr2[j]
		d += 1
		j += 1
	return sorted1[k - 1]","This function 'find_kth' performs a specific operation.

The function 'find_kth' takes the following parameters: arr1, arr2, m, n, k. It performs operations based on the parameters provided.","def test_find_kth():
    # Add test cases for find_kth
    assert find_kth(...) == expected_output"
"def armstrong_number(number):
 sum = 0
 times = 0
 temp = number
 while temp > 0:
           times = times + 1
           temp = temp // 10
 temp = number
 while temp > 0:
           reminder = temp % 10
           sum = sum + (reminder ** times)
           temp //= 10
 if number == sum:
           return True
 else:
           return False","This function 'armstrong_number' performs a specific operation.

The function 'armstrong_number' takes the following parameters: number. It performs operations based on the parameters provided.","def test_armstrong_number():
    # Add test cases for armstrong_number
    assert armstrong_number(...) == expected_output"
"def sum_average(number):
 total = 0
 for value in range(1, number + 1):
    total = total + value
 average = total / number
 return (total,average)","This function 'sum_average' performs a specific operation.

The function 'sum_average' takes the following parameters: number. It performs operations based on the parameters provided.","def test_sum_average():
    # Add test cases for sum_average
    assert sum_average(...) == expected_output"
"def is_Even(n) : 
    if (n^1 == n+1) :
        return True; 
    else :
        return False; ","This function 'is_Even' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"class Pair(object): 
	def __init__(self, a, b): 
		self.a = a 
		self.b = b 
def max_chain_length(arr, n): 
	max = 0
	mcl = [1 for i in range(n)] 
	for i in range(1, n): 
		for j in range(0, i): 
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1): 
				mcl[i] = mcl[j] + 1
	for i in range(n): 
		if (max < mcl[i]): 
			max = mcl[i] 
	return max","This function '__init__' performs a specific operation.

The function '__init__' takes the following parameters: self, a, b. It performs operations based on the parameters provided.","def test___init__():
    # Add test cases for __init__
    assert __init__(...) == expected_output"
"def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c 
  return ""None""","This function 'first_repeated_char' performs a specific operation.

The function 'first_repeated_char' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_first_repeated_char():
    # Add test cases for first_repeated_char
    assert first_repeated_char(...) == expected_output"
"def get_ludic(n):
	ludics = []
	for i in range(1, n + 1):
		ludics.append(i)
	index = 1
	while(index != len(ludics)):
		first_ludic = ludics[index]
		remove_index = index + first_ludic
		while(remove_index < len(ludics)):
			ludics.remove(ludics[remove_index])
			remove_index = remove_index + first_ludic - 1
		index += 1
	return ludics","This function 'get_ludic' performs a specific operation.

The function 'get_ludic' takes the following parameters: n. It performs operations based on the parameters provided.","def test_get_ludic():
    # Add test cases for get_ludic
    assert get_ludic(...) == expected_output"
"def reverse_words(s):
        return ' '.join(reversed(s.split()))","This function 'reverse_words' performs a specific operation.

The function 'reverse_words' takes the following parameters: s. It performs operations based on the parameters provided.","def test_reverse_words():
    # Add test cases for reverse_words
    assert reverse_words(...) == expected_output"
"def prime_num(num):
  if num >=1:
   for i in range(2, num//2):
     if (num % i) == 0:
                return False
     else:
                return True
  else:
          return False","This function 'prime_num' performs a specific operation.

The function 'prime_num' takes the following parameters: num. It performs operations based on the parameters provided.","def test_prime_num():
    # Add test cases for prime_num
    assert prime_num(...) == expected_output"
"import math
def radian_degree(degree):
 radian = degree*(math.pi/180)
 return radian","This function 'radian_degree' performs a specific operation.

The function 'radian_degree' takes the following parameters: degree. It performs operations based on the parameters provided.","def test_radian_degree():
    # Add test cases for radian_degree
    assert radian_degree(...) == expected_output"
"import re
pattern = 'fox'
text = 'The quick brown fox jumps over the lazy dog.'
def find_literals(text, pattern):
  match = re.search(pattern, text)
  s = match.start()
  e = match.end()
  return (match.re.pattern, s, e)","This function 'find_literals' performs a specific operation.

The function 'find_literals' takes the following parameters: text, pattern. It performs operations based on the parameters provided.","def test_find_literals():
    # Add test cases for find_literals
    assert find_literals(...) == expected_output"
"def bell_Number(n): 
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] 
    return bell[n][0] ","This function 'bell_Number' performs a specific operation.

The function 'bell_Number' takes the following parameters: n. It performs operations based on the parameters provided.","def test_bell_Number():
    # Add test cases for bell_Number
    assert bell_Number(...) == expected_output"
"def floor_Min(A,B,N):
    x = max(B - 1,N)
    return (A*x) // B","This function 'floor_Min' performs a specific operation.

The function 'floor_Min' takes the following parameters: A, B, N. It performs operations based on the parameters provided.","def test_floor_Min():
    # Add test cases for floor_Min
    assert floor_Min(...) == expected_output"
"def remove_kth_element(list1, L):
    return  list1[:L-1] + list1[L:]","This function 'remove_kth_element' performs a specific operation.

The function 'remove_kth_element' takes the following parameters: list1, L. It performs operations based on the parameters provided.","def test_remove_kth_element():
    # Add test cases for remove_kth_element
    assert remove_kth_element(...) == expected_output"
"def max_of_nth(test_list, N):
  res = max([sub[N] for sub in test_list])
  return (res) ","This function 'max_of_nth' performs a specific operation.

The function 'max_of_nth' takes the following parameters: test_list, N. It performs operations based on the parameters provided.","def test_max_of_nth():
    # Add test cases for max_of_nth
    assert max_of_nth(...) == expected_output"
"def merge(lst):  
    return [list(ele) for ele in list(zip(*lst))] ","This function 'merge' performs a specific operation.

The function 'merge' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_merge():
    # Add test cases for merge
    assert merge(...) == expected_output"
"def maximum_value(test_list):
  res = [(key, max(lst)) for key, lst in test_list]
  return (res) ","This function 'maximum_value' performs a specific operation.

The function 'maximum_value' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_maximum_value():
    # Add test cases for maximum_value
    assert maximum_value(...) == expected_output"
"def cummulative_sum(test_list):
  res = sum(map(sum, test_list))
  return (res)","This function 'cummulative_sum' performs a specific operation.

The function 'cummulative_sum' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_cummulative_sum():
    # Add test cases for cummulative_sum
    assert cummulative_sum(...) == expected_output"
"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result","This function 'average_tuple' performs a specific operation.

The function 'average_tuple' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_average_tuple():
    # Add test cases for average_tuple
    assert average_tuple(...) == expected_output"
"def tuple_modulo(test_tup1, test_tup2):
  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) 
  return (res) ","This function 'tuple_modulo' performs a specific operation.

The function 'tuple_modulo' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_tuple_modulo():
    # Add test cases for tuple_modulo
    assert tuple_modulo(...) == expected_output"
"def min_Jumps(a, b, d): 
    temp = a 
    a = min(a, b) 
    b = max(temp, b) 
    if (d >= b): 
        return (d + b - 1) / b 
    if (d == 0): 
        return 0
    if (d == a): 
        return 1
    else:
        return 2","This function 'min_Jumps' performs a specific operation.

The function 'min_Jumps' takes the following parameters: a, b, d. It performs operations based on the parameters provided.","def test_min_Jumps():
    # Add test cases for min_Jumps
    assert min_Jumps(...) == expected_output"
"def div_list(nums1,nums2):
  result = map(lambda x, y: x / y, nums1, nums2)
  return list(result)","This function 'div_list' performs a specific operation.

The function 'div_list' takes the following parameters: nums1, nums2. It performs operations based on the parameters provided.","def test_div_list():
    # Add test cases for div_list
    assert div_list(...) == expected_output"
"def move_num(test_str):
  res = ''
  dig = ''
  for ele in test_str:
    if ele.isdigit():
      dig += ele
    else:
      res += ele
  res += dig
  return (res) ","This function 'move_num' performs a specific operation.

The function 'move_num' takes the following parameters: test_str. It performs operations based on the parameters provided.","def test_move_num():
    # Add test cases for move_num
    assert move_num(...) == expected_output"
"def largest_subset(a, n):
	dp = [0 for i in range(n)]
	dp[n - 1] = 1; 
	for i in range(n - 2, -1, -1):
		mxm = 0;
		for j in range(i + 1, n):
			if a[j] % a[i] == 0 or a[i] % a[j] == 0:
				mxm = max(mxm, dp[j])
		dp[i] = 1 + mxm
	return max(dp)","This function 'largest_subset' performs a specific operation.

The function 'largest_subset' takes the following parameters: a, n. It performs operations based on the parameters provided.","def test_largest_subset():
    # Add test cases for largest_subset
    assert largest_subset(...) == expected_output"
"def increment_numerics(test_list, K):
  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]
  return res ","This function 'increment_numerics' performs a specific operation.

The function 'increment_numerics' takes the following parameters: test_list, K. It performs operations based on the parameters provided.","def test_increment_numerics():
    # Add test cases for increment_numerics
    assert increment_numerics(...) == expected_output"
"def get_median(arr1, arr2, n):
  i = 0
  j = 0
  m1 = -1
  m2 = -1
  count = 0
  while count < n + 1:
    count += 1
    if i == n:
      m1 = m2
      m2 = arr2[0]
      break
    elif j == n:
      m1 = m2
      m2 = arr1[0]
      break
    if arr1[i] <= arr2[j]:
      m1 = m2
      m2 = arr1[i]
      i += 1
    else:
      m1 = m2
      m2 = arr2[j]
      j += 1
  return (m1 + m2)/2","This function 'get_median' performs a specific operation.

The function 'get_median' takes the following parameters: arr1, arr2, n. It performs operations based on the parameters provided.","def test_get_median():
    # Add test cases for get_median
    assert get_median(...) == expected_output"
"def nth_nums(nums,n):
 nth_nums = list(map(lambda x: x ** n, nums))
 return nth_nums","This function 'nth_nums' performs a specific operation.

The function 'nth_nums' takes the following parameters: nums, n. It performs operations based on the parameters provided.","def test_nth_nums():
    # Add test cases for nth_nums
    assert nth_nums(...) == expected_output"
"def is_upper(string):
  return (string.upper())","This function 'is_upper' performs a specific operation.

The function 'is_upper' takes the following parameters: string. It performs operations based on the parameters provided.","def test_is_upper():
    # Add test cases for is_upper
    assert is_upper(...) == expected_output"
"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp   
    return newList ","This function 'swap_List' performs a specific operation.

The function 'swap_List' takes the following parameters: newList. It performs operations based on the parameters provided.","def test_swap_List():
    # Add test cases for swap_List
    assert swap_List(...) == expected_output"
"def triangle_area(r) :  
    if r < 0 : 
        return -1
    return r * r ","This function 'triangle_area' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def find_First_Missing(array,start,end): 
    if (start > end): 
        return end + 1
    if (start != array[start]): 
        return start; 
    mid = int((start + end) / 2) 
    if (array[mid] == mid): 
        return find_First_Missing(array,mid+1,end) 
    return find_First_Missing(array,start,mid) ","This function 'find_First_Missing' performs a specific operation.

The function 'find_First_Missing' takes the following parameters: array, start, end. It performs operations based on the parameters provided.","def test_find_First_Missing():
    # Add test cases for find_First_Missing
    assert find_First_Missing(...) == expected_output"
"MAX=1000;
def replace_spaces(string):
  string=string.strip()
  i=len(string)
  space_count=string.count(' ')
  new_length = i + space_count*2
  if new_length > MAX:
    return -1
  index = new_length-1
  string=list(string)
  for f in range(i-2, new_length-2):
    string.append('0')
  for j in range(i-1, 0, -1):
    if string[j] == ' ':
      string[index] = '0'
      string[index-1] = '2'
      string[index-2] = '%'
      index=index-3
    else:
      string[index] = string[j]
      index -= 1
  return ''.join(string)","This function 'replace_spaces' performs a specific operation.

The function 'replace_spaces' takes the following parameters: string. It performs operations based on the parameters provided.","def test_replace_spaces():
    # Add test cases for replace_spaces
    assert replace_spaces(...) == expected_output"
"def Split(list): 
    ev_li = [] 
    for i in list: 
        if (i % 2 == 0): 
            ev_li.append(i)  
    return ev_li","This function 'Split' performs a specific operation.

The function 'Split' takes the following parameters: list. It performs operations based on the parameters provided.","def test_Split():
    # Add test cases for Split
    assert Split(...) == expected_output"
"def adjac(ele, sub = []): 
  if not ele: 
     yield sub 
  else: 
     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) 
                for idx in adjac(ele[1:], sub + [j])] 
def get_coordinates(test_tup):
  res = list(adjac(test_tup))
  return (res) ","This function 'adjac' performs a specific operation.

The function 'adjac' takes the following parameters: ele, sub = []. It performs operations based on the parameters provided.","def test_adjac():
    # Add test cases for adjac
    assert adjac(...) == expected_output"
"import re
text = 'Python Exercises'
def replace_spaces(text):
  text =text.replace ("" "", ""_"")
  return (text)
  text =text.replace (""_"", "" "")
  return (text)","This function 'replace_spaces' performs a specific operation.

The function 'replace_spaces' takes the following parameters: text. It performs operations based on the parameters provided.","def test_replace_spaces():
    # Add test cases for replace_spaces
    assert replace_spaces(...) == expected_output"
"def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return (x)","This function 'move_zero' performs a specific operation.

The function 'move_zero' takes the following parameters: num_list. It performs operations based on the parameters provided.","def test_move_zero():
    # Add test cases for move_zero
    assert move_zero(...) == expected_output"
"def pair_OR_Sum(arr,n) : 
    ans = 0 
    for i in range(0,n) :    
        for j in range(i + 1,n) :   
            ans = ans + (arr[i] ^ arr[j])          
    return ans ","This function 'pair_OR_Sum' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n + 1): 
        j = 2*i; 
        sum = sum + (j*j*j*j); 
    return sum; ","This function 'even_Power_Sum' performs a specific operation.

The function 'even_Power_Sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_even_Power_Sum():
    # Add test cases for even_Power_Sum
    assert even_Power_Sum(...) == expected_output"
"import heapq as hq
def heap_sort(iterable):
    h = []
    for value in iterable:
        hq.heappush(h, value)
    return [hq.heappop(h) for i in range(len(h))]","This function 'heap_sort' performs a specific operation.

The function 'heap_sort' takes the following parameters: iterable. It performs operations based on the parameters provided.","def test_heap_sort():
    # Add test cases for heap_sort
    assert heap_sort(...) == expected_output"
"def Check_Solution(a,b,c): 
    if (a == c): 
        return (""Yes""); 
    else: 
        return (""No""); ","This function 'Check_Solution' performs a specific operation.

The function 'Check_Solution' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_Check_Solution():
    # Add test cases for Check_Solution
    assert Check_Solution(...) == expected_output"
"def noprofit_noloss(actual_cost,sale_amount): 
  if(sale_amount == actual_cost):
    return True
  else:
    return False","This function 'noprofit_noloss' performs a specific operation.

The function 'noprofit_noloss' takes the following parameters: actual_cost, sale_amount. It performs operations based on the parameters provided.","def test_noprofit_noloss():
    # Add test cases for noprofit_noloss
    assert noprofit_noloss(...) == expected_output"
"import math
def wind_chill(v,t):
 windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)
 return int(round(windchill, 0))","This function 'wind_chill' performs a specific operation.

The function 'wind_chill' takes the following parameters: v, t. It performs operations based on the parameters provided.","def test_wind_chill():
    # Add test cases for wind_chill
    assert wind_chill(...) == expected_output"
"def sample_nam(sample_names):
  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
  return len(''.join(sample_names))","This function 'sample_nam' performs a specific operation.

The function 'sample_nam' takes the following parameters: sample_names. It performs operations based on the parameters provided.","def test_sample_nam():
    # Add test cases for sample_nam
    assert sample_nam(...) == expected_output"
"import re
def remove_parenthesis(items):
 for item in items:
    return (re.sub(r"" ?\([^)]+\)"", """", item))","This function 'remove_parenthesis' performs a specific operation.

The function 'remove_parenthesis' takes the following parameters: items. It performs operations based on the parameters provided.","def test_remove_parenthesis():
    # Add test cases for remove_parenthesis
    assert remove_parenthesis(...) == expected_output"
"def is_nonagonal(n): 
	return int(n * (7 * n - 5) / 2) ","This function 'is_nonagonal' performs a specific operation.

The function 'is_nonagonal' takes the following parameters: n. It performs operations based on the parameters provided.","def test_is_nonagonal():
    # Add test cases for is_nonagonal
    assert is_nonagonal(...) == expected_output"
"def remove_similar_row(test_list):
  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))
  return (res) ","This function 'remove_similar_row' performs a specific operation.

The function 'remove_similar_row' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_remove_similar_row():
    # Add test cases for remove_similar_row
    assert remove_similar_row(...) == expected_output"
"import re
def text_match_wordz_middle(text):
        patterns = '\Bz\B'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","This function 'text_match_wordz_middle' performs a specific operation.

The function 'text_match_wordz_middle' takes the following parameters: text. It performs operations based on the parameters provided.","def test_text_match_wordz_middle():
    # Add test cases for text_match_wordz_middle
    assert text_match_wordz_middle(...) == expected_output"
"def reverse_Array_Upto_K(input, k): 
  return (input[k-1::-1] + input[k:]) ","This function 'reverse_Array_Upto_K' performs a specific operation.

The function 'reverse_Array_Upto_K' takes the following parameters: input, k. It performs operations based on the parameters provided.","def test_reverse_Array_Upto_K():
    # Add test cases for reverse_Array_Upto_K
    assert reverse_Array_Upto_K(...) == expected_output"
"def get_product(val) : 
	res = 1
	for ele in val: 
		res *= ele 
	return res 
def find_k_product(test_list, K):
  res = get_product([sub[K] for sub in test_list])
  return (res) ","This function 'get_product' performs a specific operation.

The function 'get_product' takes the following parameters: val) : 
	res = 1
	for ele in val: 
		res *= ele 
	return res 
def find_k_product(test_list, K. It performs operations based on the parameters provided.","def test_get_product():
    # Add test cases for get_product
    assert get_product(...) == expected_output"
"def No_of_cubes(N,K):
    No = 0
    No = (N - K + 1)
    No = pow(No, 3)
    return No","This function 'No_of_cubes' performs a specific operation.

The function 'No_of_cubes' takes the following parameters: N, K. It performs operations based on the parameters provided.","def test_No_of_cubes():
    # Add test cases for No_of_cubes
    assert No_of_cubes(...) == expected_output"
"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))","This function 'split_upperstring' performs a specific operation.

The function 'split_upperstring' takes the following parameters: text. It performs operations based on the parameters provided.","def test_split_upperstring():
    # Add test cases for split_upperstring
    assert split_upperstring(...) == expected_output"
"from itertools import zip_longest, chain, tee
def exchange_elements(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))","This function 'exchange_elements' performs a specific operation.

The function 'exchange_elements' takes the following parameters: lst. It performs operations based on the parameters provided.","def test_exchange_elements():
    # Add test cases for exchange_elements
    assert exchange_elements(...) == expected_output"
"def sum_Range_list(nums, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += nums[i]                                                                                                                                                                                                  
    return sum_range   ","This function 'sum_Range_list' performs a specific operation.

The function 'sum_Range_list' takes the following parameters: nums, m, n. It performs operations based on the parameters provided.","def test_sum_Range_list():
    # Add test cases for sum_Range_list
    assert sum_Range_list(...) == expected_output"
"def are_Equal(arr1,arr2,n,m):
    if (n != m):
        return False
    arr1.sort()
    arr2.sort()
    for i in range(0,n - 1):
        if (arr1[i] != arr2[i]):
            return False
    return True","This function 'are_Equal' performs a specific operation.

The function 'are_Equal' takes the following parameters: arr1, arr2, n, m. It performs operations based on the parameters provided.","def test_are_Equal():
    # Add test cases for are_Equal
    assert are_Equal(...) == expected_output"
"def check_subset(test_tup1, test_tup2):
  res = set(test_tup2).issubset(test_tup1)
  return (res) ","This function 'check_subset' performs a specific operation.

The function 'check_subset' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_check_subset():
    # Add test cases for check_subset
    assert check_subset(...) == expected_output"
"def matrix_to_list(test_list):
  temp = [ele for sub in test_list for ele in sub]
  res = list(zip(*temp))
  return (str(res))","This function 'matrix_to_list' performs a specific operation.

The function 'matrix_to_list' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_matrix_to_list():
    # Add test cases for matrix_to_list
    assert matrix_to_list(...) == expected_output"
"from collections import defaultdict
def grouping_dictionary(l):
    d = defaultdict(list)
    for k, v in l:
        d[k].append(v)
    return d","This function 'grouping_dictionary' performs a specific operation.

The function 'grouping_dictionary' takes the following parameters: l. It performs operations based on the parameters provided.","def test_grouping_dictionary():
    # Add test cases for grouping_dictionary
    assert grouping_dictionary(...) == expected_output"
"def rectangle_perimeter(l,b):
  perimeter=2*(l+b)
  return perimeter","This function 'rectangle_perimeter' performs a specific operation.

The function 'rectangle_perimeter' takes the following parameters: l, b. It performs operations based on the parameters provided.","def test_rectangle_perimeter():
    # Add test cases for rectangle_perimeter
    assert rectangle_perimeter(...) == expected_output"
"def fifth_Power_Sum(n) : 
    sm = 0 
    for i in range(1,n+1) : 
        sm = sm + (i*i*i*i*i) 
    return sm ","This function 'fifth_Power_Sum' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def find_Min_Sum(a,b,n): 
    a.sort() 
    b.sort() 
    sum = 0  
    for i in range(n): 
        sum = sum + abs(a[i] - b[i]) 
    return sum","This function 'find_Min_Sum' performs a specific operation.

The function 'find_Min_Sum' takes the following parameters: a, b, n. It performs operations based on the parameters provided.","def test_find_Min_Sum():
    # Add test cases for find_Min_Sum
    assert find_Min_Sum(...) == expected_output"
"import math 
def first_Digit(n) : 
    fact = 1
    for i in range(2,n + 1) : 
        fact = fact * i 
        while (fact % 10 == 0) :  
            fact = int(fact / 10) 
    while (fact >= 10) : 
        fact = int(fact / 10) 
    return math.floor(fact) ","This function 'first_Digit' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def max_occurrences(list1):
    max_val = 0
    result = list1[0] 
    for i in list1:
        occu = list1.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result","This function 'max_occurrences' performs a specific operation.

The function 'max_occurrences' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_max_occurrences():
    # Add test cases for max_occurrences
    assert max_occurrences(...) == expected_output"
"def Repeat(x): 
    _size = len(x) 
    repeated = [] 
    for i in range(_size): 
        k = i + 1
        for j in range(k, _size): 
            if x[i] == x[j] and x[i] not in repeated: 
                repeated.append(x[i]) 
    return repeated ","This function 'Repeat' performs a specific operation.

The function 'Repeat' takes the following parameters: x. It performs operations based on the parameters provided.","def test_Repeat():
    # Add test cases for Repeat
    assert Repeat(...) == expected_output"
"def find_Points(l1,r1,l2,r2): 
    x = min(l1,l2) if (l1 != l2) else -1
    y = max(r1,r2) if (r1 != r2) else -1
    return (x,y)","This function 'find_Points' performs a specific operation.

The function 'find_Points' takes the following parameters: l1, r1, l2, r2. It performs operations based on the parameters provided.","def test_find_Points():
    # Add test cases for find_Points
    assert find_Points(...) == expected_output"
"def max_sum_of_three_consecutive(arr, n): 
	sum = [0 for k in range(n)] 
	if n >= 1: 
		sum[0] = arr[0] 
	if n >= 2: 
		sum[1] = arr[0] + arr[1] 
	if n > 2: 
		sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) 
	for i in range(3, n): 
		sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) 
	return sum[n-1]","This function 'max_sum_of_three_consecutive' performs a specific operation.

The function 'max_sum_of_three_consecutive' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_max_sum_of_three_consecutive():
    # Add test cases for max_sum_of_three_consecutive
    assert max_sum_of_three_consecutive(...) == expected_output"
"def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict","This function 'sorted_dict' performs a specific operation.

The function 'sorted_dict' takes the following parameters: dict1. It performs operations based on the parameters provided.","def test_sorted_dict():
    # Add test cases for sorted_dict
    assert sorted_dict(...) == expected_output"
"import sys 
def find_max_val(n, x, y): 
	ans = -sys.maxsize 
	for k in range(n + 1): 
		if (k % x == y): 
			ans = max(ans, k) 
	return (ans if (ans >= 0 and
					ans <= n) else -1) ","This function 'find_max_val' performs a specific operation.

The function 'find_max_val' takes the following parameters: n, x, y. It performs operations based on the parameters provided.","def test_find_max_val():
    # Add test cases for find_max_val
    assert find_max_val(...) == expected_output"
"def average_Even(n) : 
    if (n% 2!= 0) : 
        return (""Invalid Input"") 
        return -1  
    sm = 0
    count = 0
    while (n>= 2) : 
        count = count+1
        sm = sm+n 
        n = n-2
    return sm // count ","This function 'average_Even' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def move_last(num_list):
    a = [num_list[0] for i in range(num_list.count(num_list[0]))]
    x = [ i for i in num_list if i != num_list[0]]
    x.extend(a)
    return (x)","This function 'move_last' performs a specific operation.

The function 'move_last' takes the following parameters: num_list. It performs operations based on the parameters provided.","def test_move_last():
    # Add test cases for move_last
    assert move_last(...) == expected_output"
"def count_char(string,char):
 count = 0
 for i in range(len(string)):
    if(string[i] == char):
        count = count + 1
 return count","This function 'count_char' performs a specific operation.

The function 'count_char' takes the following parameters: string, char. It performs operations based on the parameters provided.","def test_count_char():
    # Add test cases for count_char
    assert count_char(...) == expected_output"
"def Check_Vow(string, vowels): 
    final = [each for each in string if each in vowels] 
    return(len(final)) 
","This function 'Check_Vow' performs a specific operation.

The function 'Check_Vow' takes the following parameters: string, vowels. It performs operations based on the parameters provided.","def test_Check_Vow():
    # Add test cases for Check_Vow
    assert Check_Vow(...) == expected_output"
"import re 
def replace(string, char): 
    pattern = char + '{2,}'
    string = re.sub(pattern, char, string) 
    return string ","This function 'replace' performs a specific operation.

The function 'replace' takes the following parameters: string, char. It performs operations based on the parameters provided.","def test_replace():
    # Add test cases for replace
    assert replace(...) == expected_output"
"import re 
regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''
def check_IP(Ip): 
	if(re.search(regex, Ip)): 
		return (""Valid IP address"") 
	else: 
		return (""Invalid IP address"") ","This function 'check_IP' performs a specific operation.

The function 'check_IP' takes the following parameters: Ip. It performs operations based on the parameters provided.","def test_check_IP():
    # Add test cases for check_IP
    assert check_IP(...) == expected_output"
"def decreasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False","This function 'decreasing_trend' performs a specific operation.

The function 'decreasing_trend' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_decreasing_trend():
    # Add test cases for decreasing_trend
    assert decreasing_trend(...) == expected_output"
"import math 
def get_Pos_Of_Right_most_Set_Bit(n): 
    return int(math.log2(n&-n)+1)   
def set_Right_most_Unset_Bit(n): 
    if (n == 0): 
        return 1
    if ((n & (n + 1)) == 0):     
        return n 
    pos = get_Pos_Of_Right_most_Set_Bit(~n)      
    return ((1 << (pos - 1)) | n) ","This function 'get_Pos_Of_Right_most_Set_Bit' performs a specific operation.

The function 'get_Pos_Of_Right_most_Set_Bit' takes the following parameters: n. It performs operations based on the parameters provided.","def test_get_Pos_Of_Right_most_Set_Bit():
    # Add test cases for get_Pos_Of_Right_most_Set_Bit
    assert get_Pos_Of_Right_most_Set_Bit(...) == expected_output"
"def max_of_three(num1,num2,num3): 
    if (num1 >= num2) and (num1 >= num3):
       lnum = num1
    elif (num2 >= num1) and (num2 >= num3):
       lnum = num2
    else:
       lnum = num3
    return lnum","This function 'max_of_three' performs a specific operation.

The function 'max_of_three' takes the following parameters: num1, num2, num3. It performs operations based on the parameters provided.","def test_max_of_three():
    # Add test cases for max_of_three
    assert max_of_three(...) == expected_output"
"def convert(list): 
    s = [str(i) for i in list] 
    res = int("""".join(s))  
    return (res) ","This function 'convert' performs a specific operation.

The function 'convert' takes the following parameters: list. It performs operations based on the parameters provided.","def test_convert():
    # Add test cases for convert
    assert convert(...) == expected_output"
"from collections import OrderedDict
def remove_duplicate(string):
  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())
  return result","This function 'remove_duplicate' performs a specific operation.

The function 'remove_duplicate' takes the following parameters: string. It performs operations based on the parameters provided.","def test_remove_duplicate():
    # Add test cases for remove_duplicate
    assert remove_duplicate(...) == expected_output"
"def sum_nums(x, y,m,n):
    sum_nums= x + y
    if sum_nums in range(m, n):
        return 20
    else:
        return sum_nums","This function 'sum_nums' performs a specific operation.

The function 'sum_nums' takes the following parameters: x, y, m, n. It performs operations based on the parameters provided.","def test_sum_nums():
    # Add test cases for sum_nums
    assert sum_nums(...) == expected_output"
"import re
def remove_extra_char(text1):
  pattern = re.compile('[\W_]+')
  return (pattern.sub('', text1))","This function 'remove_extra_char' performs a specific operation.

The function 'remove_extra_char' takes the following parameters: text1. It performs operations based on the parameters provided.","def test_remove_extra_char():
    # Add test cases for remove_extra_char
    assert remove_extra_char(...) == expected_output"
"def validity_triangle(a,b,c):
 total = a + b + c
 if total == 180:
    return True
 else:
    return False","This function 'validity_triangle' performs a specific operation.

The function 'validity_triangle' takes the following parameters: a, b, c. It performs operations based on the parameters provided.","def test_validity_triangle():
    # Add test cases for validity_triangle
    assert validity_triangle(...) == expected_output"
"def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1","This function 'remove_spaces' performs a specific operation.

The function 'remove_spaces' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_remove_spaces():
    # Add test cases for remove_spaces
    assert remove_spaces(...) == expected_output"
"def access_key(ditionary,key):
  return list(ditionary)[key]","This function 'access_key' performs a specific operation.

The function 'access_key' takes the following parameters: ditionary, key. It performs operations based on the parameters provided.","def test_access_key():
    # Add test cases for access_key
    assert access_key(...) == expected_output"
"def increasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False","This function 'increasing_trend' performs a specific operation.

The function 'increasing_trend' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_increasing_trend():
    # Add test cases for increasing_trend
    assert increasing_trend(...) == expected_output"
"def smallest_Divisor(n): 
    if (n % 2 == 0): 
        return 2; 
    i = 3;  
    while (i*i <= n): 
        if (n % i == 0): 
            return i; 
        i += 2; 
    return n; ","This function 'smallest_Divisor' performs a specific operation.

The function 'smallest_Divisor' takes the following parameters: n. It performs operations based on the parameters provided.","def test_smallest_Divisor():
    # Add test cases for smallest_Divisor
    assert smallest_Divisor(...) == expected_output"
"def mul_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)","This function 'mul_list' performs a specific operation.

The function 'mul_list' takes the following parameters: nums1, nums2. It performs operations based on the parameters provided.","def test_mul_list():
    # Add test cases for mul_list
    assert mul_list(...) == expected_output"
"def sum_Square(n) : 
    i = 1 
    while i*i <= n : 
        j = 1
        while (j*j <= n) : 
            if (i*i+j*j == n) : 
                return True
            j = j+1
        i = i+1     
    return False","This function 'sum_Square' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def count_Char(str,x): 
    count = 0
    for i in range(len(str)):  
        if (str[i] == x) : 
            count += 1
    n = 10
    repititions = n // len(str)  
    count = count * repititions  
    l = n % len(str)  
    for i in range(l): 
        if (str[i] == x):  
            count += 1
    return count  ","This function 'count_Char' performs a specific operation.

The function 'count_Char' takes the following parameters: str, x. It performs operations based on the parameters provided.","def test_count_Char():
    # Add test cases for count_Char
    assert count_Char(...) == expected_output"
"def sum_Of_Primes(n): 
    prime = [True] * (n + 1)  
    p = 2
    while p * p <= n: 
        if prime[p] == True:  
            i = p * 2
            while i <= n: 
                prime[i] = False
                i += p 
        p += 1    
    sum = 0
    for i in range (2,n + 1): 
        if(prime[i]): 
            sum += i 
    return sum","This function 'sum_Of_Primes' performs a specific operation.

The function 'sum_Of_Primes' takes the following parameters: n. It performs operations based on the parameters provided.","def test_sum_Of_Primes():
    # Add test cases for sum_Of_Primes
    assert sum_Of_Primes(...) == expected_output"
"from collections import defaultdict 
def freq_element(test_tup):
  res = defaultdict(int)
  for ele in test_tup:
    res[ele] += 1
  return (str(dict(res))) ","This function 'freq_element' performs a specific operation.

The function 'freq_element' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_freq_element():
    # Add test cases for freq_element
    assert freq_element(...) == expected_output"
"def recur_gcd(a, b):
	low = min(a, b)
	high = max(a, b)
	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return recur_gcd(low, high%low)","This function 'recur_gcd' performs a specific operation.

The function 'recur_gcd' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_recur_gcd():
    # Add test cases for recur_gcd
    assert recur_gcd(...) == expected_output"
"import cmath
def len_complex(a,b):
  cn=complex(a,b)
  length=abs(cn)
  return length","This function 'len_complex' performs a specific operation.

The function 'len_complex' takes the following parameters: a, b. It performs operations based on the parameters provided.","def test_len_complex():
    # Add test cases for len_complex
    assert len_complex(...) == expected_output"
"def min_jumps(arr, n):
	jumps = [0 for i in range(n)]
	if (n == 0) or (arr[0] == 0):
		return float('inf')
	jumps[0] = 0
	for i in range(1, n):
		jumps[i] = float('inf')
		for j in range(i):
			if (i <= j + arr[j]) and (jumps[j] != float('inf')):
				jumps[i] = min(jumps[i], jumps[j] + 1)
				break
	return jumps[n-1]","This function 'min_jumps' performs a specific operation.

The function 'min_jumps' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_min_jumps():
    # Add test cases for min_jumps
    assert min_jumps(...) == expected_output"
"def mul_consecutive_nums(nums):
    result = [b*a for a, b in zip(nums[:-1], nums[1:])]
    return result","This function 'mul_consecutive_nums' performs a specific operation.

The function 'mul_consecutive_nums' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_mul_consecutive_nums():
    # Add test cases for mul_consecutive_nums
    assert mul_consecutive_nums(...) == expected_output"
"from itertools import groupby 
def group_element(test_list):
  res = dict()
  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):
    res[key] = [ele[0] for ele in val] 
  return (res)
","This function 'group_element' performs a specific operation.

The function 'group_element' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_group_element():
    # Add test cases for group_element
    assert group_element(...) == expected_output"
"def last_Two_Digits(N): 
    if (N >= 10): 
        return
    fac = 1
    for i in range(1,N + 1): 
        fac = (fac * i) % 100
    return (fac) ","This function 'last_Two_Digits' performs a specific operation.

The function 'last_Two_Digits' takes the following parameters: N. It performs operations based on the parameters provided.","def test_last_Two_Digits():
    # Add test cases for last_Two_Digits
    assert last_Two_Digits(...) == expected_output"
"import re
def remove_multiple_spaces(text1):
  return (re.sub(' +',' ',text1))","This function 'remove_multiple_spaces' performs a specific operation.

The function 'remove_multiple_spaces' takes the following parameters: text1. It performs operations based on the parameters provided.","def test_remove_multiple_spaces():
    # Add test cases for remove_multiple_spaces
    assert remove_multiple_spaces(...) == expected_output"
"def extract_unique(test_dict):
  res = list(sorted({ele for val in test_dict.values() for ele in val}))
  return res","This function 'extract_unique' performs a specific operation.

The function 'extract_unique' takes the following parameters: test_dict. It performs operations based on the parameters provided.","def test_extract_unique():
    # Add test cases for extract_unique
    assert extract_unique(...) == expected_output"
"def check_greater(test_tup1, test_tup2):
  res = all(x < y for x, y in zip(test_tup1, test_tup2))
  return (res) ","This function 'check_greater' performs a specific operation.

The function 'check_greater' takes the following parameters: test_tup1, test_tup2. It performs operations based on the parameters provided.","def test_check_greater():
    # Add test cases for check_greater
    assert check_greater(...) == expected_output"
"def zip_list(list1,list2):  
 result = list(map(list.__add__, list1, list2)) 
 return result","This function 'zip_list' performs a specific operation.

The function 'zip_list' takes the following parameters: list1, list2. It performs operations based on the parameters provided.","def test_zip_list():
    # Add test cases for zip_list
    assert zip_list(...) == expected_output"
"def count_even(array_nums):
   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))
   return count_even","This function 'count_even' performs a specific operation.

The function 'count_even' takes the following parameters: array_nums. It performs operations based on the parameters provided.","def test_count_even():
    # Add test cases for count_even
    assert count_even(...) == expected_output"
"def sort_dict_item(test_dict):
  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}
  return  (res) 
","This function 'sort_dict_item' performs a specific operation.

The function 'sort_dict_item' takes the following parameters: test_dict. It performs operations based on the parameters provided.","def test_sort_dict_item():
    # Add test cases for sort_dict_item
    assert sort_dict_item(...) == expected_output"
"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) : 
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ","This function 'min_Swaps' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr","This function 'count_range_in_list' performs a specific operation.

The function 'count_range_in_list' takes the following parameters: li, min, max. It performs operations based on the parameters provided.","def test_count_range_in_list():
    # Add test cases for count_range_in_list
    assert count_range_in_list(...) == expected_output"
"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1","This function 'equilibrium_index' performs a specific operation.

The function 'equilibrium_index' takes the following parameters: arr. It performs operations based on the parameters provided.","def test_equilibrium_index():
    # Add test cases for equilibrium_index
    assert equilibrium_index(...) == expected_output"
"def find_ind(key, i, n, 
			k, arr):
	ind = -1
	start = i + 1
	end = n - 1;
	while (start < end):
		mid = int(start +
				(end - start) / 2)
		if (arr[mid] - key <= k):
			ind = mid
			start = mid + 1
		else:
			end = mid
	return ind
def removals(arr, n, k):
	ans = n - 1
	arr.sort()
	for i in range(0, n):
		j = find_ind(arr[i], i, 
					n, k, arr)
		if (j != -1):
			ans = min(ans, n -
						(j - i + 1))
	return ans","This function 'find_ind' performs a specific operation.

The function 'find_ind' takes the following parameters: key, i, n, k, arr. It performs operations based on the parameters provided.","def test_find_ind():
    # Add test cases for find_ind
    assert find_ind(...) == expected_output"
"def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False","This function 'is_key_present' performs a specific operation.

The function 'is_key_present' takes the following parameters: d, x. It performs operations based on the parameters provided.","def test_is_key_present():
    # Add test cases for is_key_present
    assert is_key_present(...) == expected_output"
"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))","This function 'harmonic_sum' performs a specific operation.

The function 'harmonic_sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_harmonic_sum():
    # Add test cases for harmonic_sum
    assert harmonic_sum(...) == expected_output"
"def sort_sublists(list1):
      list1.sort()  
      list1.sort(key=len)
      return  list1","This function 'sort_sublists' performs a specific operation.

The function 'sort_sublists' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_sort_sublists():
    # Add test cases for sort_sublists
    assert sort_sublists(...) == expected_output"
"def is_subset(arr1, m, arr2, n): 
	hashset = set() 
	for i in range(0, m): 
		hashset.add(arr1[i]) 
	for i in range(0, n): 
		if arr2[i] in hashset: 
			continue
		else: 
			return False
	return True		","This function 'is_subset' performs a specific operation.

The function 'is_subset' takes the following parameters: arr1, m, arr2, n. It performs operations based on the parameters provided.","def test_is_subset():
    # Add test cases for is_subset
    assert is_subset(...) == expected_output"
"def count_Set_Bits(n) :  
    n += 1; 
    powerOf2 = 2;   
    cnt = n // 2;  
    while (powerOf2 <= n) : 
        totalPairs = n // powerOf2;  
        cnt += (totalPairs // 2) * powerOf2;  
        if (totalPairs & 1) : 
            cnt += (n % powerOf2) 
        else : 
            cnt += 0
        powerOf2 <<= 1;    
    return cnt;  ","This function 'count_Set_Bits' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"def Convert(string): 
    li = list(string.split("" "")) 
    return li ","This function 'Convert' performs a specific operation.

The function 'Convert' takes the following parameters: string. It performs operations based on the parameters provided.","def test_Convert():
    # Add test cases for Convert
    assert Convert(...) == expected_output"
"from collections import defaultdict 
def get_unique(test_list):
  res = defaultdict(list)
  for sub in test_list:
    res[sub[1]].append(sub[0])
  res = dict(res)
  res_dict = dict()
  for key in res:
    res_dict[key] = len(list(set(res[key])))
  return (str(res_dict)) ","This function 'get_unique' performs a specific operation.

The function 'get_unique' takes the following parameters: test_list. It performs operations based on the parameters provided.","def test_get_unique():
    # Add test cases for get_unique
    assert get_unique(...) == expected_output"
"def front_and_rear(test_tup):
  res = (test_tup[0], test_tup[-1])
  return (res) ","This function 'front_and_rear' performs a specific operation.

The function 'front_and_rear' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_front_and_rear():
    # Add test cases for front_and_rear
    assert front_and_rear(...) == expected_output"
"def product_Equal(n): 
    if n < 10: 
        return False
    prodOdd = 1; prodEven = 1
    while n > 0: 
        digit = n % 10
        prodOdd *= digit 
        n = n//10
        if n == 0: 
            break; 
        digit = n % 10
        prodEven *= digit 
        n = n//10
    if prodOdd == prodEven: 
        return True
    return False","This function 'product_Equal' performs a specific operation.

The function 'product_Equal' takes the following parameters: n. It performs operations based on the parameters provided.","def test_product_Equal():
    # Add test cases for product_Equal
    assert product_Equal(...) == expected_output"
"import itertools
def remove_duplicate(list1):
 list.sort(list1)
 remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))
 return remove_duplicate","This function 'remove_duplicate' performs a specific operation.

The function 'remove_duplicate' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_remove_duplicate():
    # Add test cases for remove_duplicate
    assert remove_duplicate(...) == expected_output"
"def check_valid(test_tup):
  res = not any(map(lambda ele: not ele, test_tup))
  return (res) ","This function 'check_valid' performs a specific operation.

The function 'check_valid' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_check_valid():
    # Add test cases for check_valid
    assert check_valid(...) == expected_output"
"def count_Fac(n):  
    m = n 
    count = 0
    i = 2
    while((i * i) <= m): 
        total = 0
        while (n % i == 0): 
            n /= i 
            total += 1 
        temp = 0
        j = 1
        while((temp + j) <= total): 
            temp += j 
            count += 1
            j += 1 
        i += 1
    if (n != 1): 
        count += 1 
    return count ","This function 'count_Fac' performs a specific operation.

The function 'count_Fac' takes the following parameters: n. It performs operations based on the parameters provided.","def test_count_Fac():
    # Add test cases for count_Fac
    assert count_Fac(...) == expected_output"
"def str_to_tuple(test_str):
  res = tuple(map(int, test_str.split(', ')))
  return (res) ","This function 'str_to_tuple' performs a specific operation.

The function 'str_to_tuple' takes the following parameters: test_str. It performs operations based on the parameters provided.","def test_str_to_tuple():
    # Add test cases for str_to_tuple
    assert str_to_tuple(...) == expected_output"
"def rombus_perimeter(a):
  perimeter=4*a
  return perimeter","This function 'rombus_perimeter' performs a specific operation.

The function 'rombus_perimeter' takes the following parameters: a. It performs operations based on the parameters provided.","def test_rombus_perimeter():
    # Add test cases for rombus_perimeter
    assert rombus_perimeter(...) == expected_output"
"import math
import sys
def sd_calc(data):
    n = len(data)
    if n <= 1:
        return 0.0
    mean, sd = avg_calc(data), 0.0
    for el in data:
        sd += (float(el) - mean)**2
    sd = math.sqrt(sd / float(n-1))
    return sd
def avg_calc(ls):
    n, mean = len(ls), 0.0
    if n <= 1:
        return ls[0]
    for el in ls:
        mean = mean + float(el)
    mean = mean / float(n)
    return mean","This function 'sd_calc' performs a specific operation.

The function 'sd_calc' takes the following parameters: data. It performs operations based on the parameters provided.","def test_sd_calc():
    # Add test cases for sd_calc
    assert sd_calc(...) == expected_output"
"def alternate_elements(list1):
    result=[]
    for item in list1[::2]:
        result.append(item)
    return result ","This function 'alternate_elements' performs a specific operation.

The function 'alternate_elements' takes the following parameters: list1. It performs operations based on the parameters provided.","def test_alternate_elements():
    # Add test cases for alternate_elements
    assert alternate_elements(...) == expected_output"
"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","This function 'text_match' performs a specific operation.

The function 'text_match' takes the following parameters: text. It performs operations based on the parameters provided.","def test_text_match():
    # Add test cases for text_match
    assert text_match(...) == expected_output"
"def add_dict_to_tuple(test_tup, test_dict):
  test_tup = list(test_tup)
  test_tup.append(test_dict)
  test_tup = tuple(test_tup)
  return (test_tup) ","This function 'add_dict_to_tuple' performs a specific operation.

The function 'add_dict_to_tuple' takes the following parameters: test_tup, test_dict. It performs operations based on the parameters provided.","def test_add_dict_to_tuple():
    # Add test cases for add_dict_to_tuple
    assert add_dict_to_tuple(...) == expected_output"
"M = 100
def maxAverageOfPath(cost, N): 
	dp = [[0 for i in range(N + 1)] for j in range(N + 1)] 
	dp[0][0] = cost[0][0] 
	for i in range(1, N): 
		dp[i][0] = dp[i - 1][0] + cost[i][0] 
	for j in range(1, N): 
		dp[0][j] = dp[0][j - 1] + cost[0][j] 
	for i in range(1, N): 
		for j in range(1, N): 
			dp[i][j] = max(dp[i - 1][j], 
						dp[i][j - 1]) + cost[i][j] 
	return dp[N - 1][N - 1] / (2 * N - 1)","This function 'maxAverageOfPath' performs a specific operation.

The function 'maxAverageOfPath' takes the following parameters: cost, N. It performs operations based on the parameters provided.","def test_maxAverageOfPath():
    # Add test cases for maxAverageOfPath
    assert maxAverageOfPath(...) == expected_output"
"def filter_data(students,h,w):
    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}
    return result    ","This function 'filter_data' performs a specific operation.

The function 'filter_data' takes the following parameters: students, h, w. It performs operations based on the parameters provided.","def test_filter_data():
    # Add test cases for filter_data
    assert filter_data(...) == expected_output"
"from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result","This function 'count_same_pair' performs a specific operation.

The function 'count_same_pair' takes the following parameters: nums1, nums2. It performs operations based on the parameters provided.","def test_count_same_pair():
    # Add test cases for count_same_pair
    assert count_same_pair(...) == expected_output"
"def power_base_sum(base, power):
    return sum([int(i) for i in str(pow(base, power))])","This function 'power_base_sum' performs a specific operation.

The function 'power_base_sum' takes the following parameters: base, power. It performs operations based on the parameters provided.","def test_power_base_sum():
    # Add test cases for power_base_sum
    assert power_base_sum(...) == expected_output"
"import re
def extract_quotation(text1):
  return (re.findall(r'""(.*?)""', text1))","This function 'extract_quotation' performs a specific operation.

The function 'extract_quotation' takes the following parameters: text1. It performs operations based on the parameters provided.","def test_extract_quotation():
    # Add test cases for extract_quotation
    assert extract_quotation(...) == expected_output"
"def multiply_elements(test_tup):
  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","This function 'multiply_elements' performs a specific operation.

The function 'multiply_elements' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_multiply_elements():
    # Add test cases for multiply_elements
    assert multiply_elements(...) == expected_output"
"import re 
def remove_char(S):
  result = re.sub('[\W_]+', '', S) 
  return result","This function 'remove_char' performs a specific operation.

The function 'remove_char' takes the following parameters: S. It performs operations based on the parameters provided.","def test_remove_char():
    # Add test cases for remove_char
    assert remove_char(...) == expected_output"
"def sum_list(lst1,lst2):
  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] 
  return res_list","This function 'sum_list' performs a specific operation.

The function 'sum_list' takes the following parameters: lst1, lst2. It performs operations based on the parameters provided.","def test_sum_list():
    # Add test cases for sum_list
    assert sum_list(...) == expected_output"
"def add_list(nums1,nums2):
  result = map(lambda x, y: x + y, nums1, nums2)
  return list(result)","This function 'add_list' performs a specific operation.

The function 'add_list' takes the following parameters: nums1, nums2. It performs operations based on the parameters provided.","def test_add_list():
    # Add test cases for add_list
    assert add_list(...) == expected_output"
"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ","This function 'consecutive_duplicates' performs a specific operation.

The function 'consecutive_duplicates' takes the following parameters: nums. It performs operations based on the parameters provided.","def test_consecutive_duplicates():
    # Add test cases for consecutive_duplicates
    assert consecutive_duplicates(...) == expected_output"
"import math
def lateralsurface_cone(r,h):
  l = math.sqrt(r * r + h * h)
  LSA = math.pi * r  * l
  return LSA","This function 'lateralsurface_cone' performs a specific operation.

The function 'lateralsurface_cone' takes the following parameters: r, h. It performs operations based on the parameters provided.","def test_lateralsurface_cone():
    # Add test cases for lateralsurface_cone
    assert lateralsurface_cone(...) == expected_output"
"import re
def replace_specialchar(text):
 return (re.sub(""[ ,.]"", "":"", text))
","This function 'replace_specialchar' performs a specific operation.

The function 'replace_specialchar' takes the following parameters: text. It performs operations based on the parameters provided.","def test_replace_specialchar():
    # Add test cases for replace_specialchar
    assert replace_specialchar(...) == expected_output"
"def find_first_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result","This function 'find_first_occurrence' performs a specific operation.

The function 'find_first_occurrence' takes the following parameters: A, x. It performs operations based on the parameters provided.","def test_find_first_occurrence():
    # Add test cases for find_first_occurrence
    assert find_first_occurrence(...) == expected_output"
"def sum_Of_Subarray_Prod(arr,n):
    ans = 0
    res = 0
    i = n - 1
    while (i >= 0):
        incr = arr[i]*(1 + res)
        ans += incr
        res = incr
        i -= 1
    return (ans)","This function 'sum_Of_Subarray_Prod' performs a specific operation.

The function 'sum_Of_Subarray_Prod' takes the following parameters: arr, n. It performs operations based on the parameters provided.","def test_sum_Of_Subarray_Prod():
    # Add test cases for sum_Of_Subarray_Prod
    assert sum_Of_Subarray_Prod(...) == expected_output"
"def set_middle_bits(n):  
    n |= n >> 1; 
    n |= n >> 2; 
    n |= n >> 4; 
    n |= n >> 8; 
    n |= n >> 16;  
    return (n >> 1) ^ 1
def toggle_middle_bits(n): 
    if (n == 1): 
        return 1
    return n ^ set_middle_bits(n) ","This function 'set_middle_bits' performs a specific operation.

The function 'set_middle_bits' takes the following parameters: n. It performs operations based on the parameters provided.","def test_set_middle_bits():
    # Add test cases for set_middle_bits
    assert set_middle_bits(...) == expected_output"
"import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i","This function 'left_insertion' performs a specific operation.

The function 'left_insertion' takes the following parameters: a, x. It performs operations based on the parameters provided.","def test_left_insertion():
    # Add test cases for left_insertion
    assert left_insertion(...) == expected_output"
"import re 
regex = '^[aeiouAEIOU][A-Za-z0-9_]*'
def check_str(string): 
	if(re.search(regex, string)): 
		return (""Valid"") 
	else: 
		return (""Invalid"") ","This function 'check_str' performs a specific operation.

The function 'check_str' takes the following parameters: string. It performs operations based on the parameters provided.","def test_check_str():
    # Add test cases for check_str
    assert check_str(...) == expected_output"
"def geometric_sum(n):
  if n < 0:
    return 0
  else:
    return 1 / (pow(2, n)) + geometric_sum(n - 1)","This function 'geometric_sum' performs a specific operation.

The function 'geometric_sum' takes the following parameters: n. It performs operations based on the parameters provided.","def test_geometric_sum():
    # Add test cases for geometric_sum
    assert geometric_sum(...) == expected_output"
"import math 
def find_Index(n): 
    x = math.sqrt(2 * math.pow(10,(n - 1))); 
    return round(x); ","This function 'find_Index' performs a specific operation.

The function 'find_Index' takes the following parameters: n. It performs operations based on the parameters provided.","def test_find_Index():
    # Add test cases for find_Index
    assert find_Index(...) == expected_output"
"def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return (res) ","This function 'tuple_to_dict' performs a specific operation.

The function 'tuple_to_dict' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_tuple_to_dict():
    # Add test cases for tuple_to_dict
    assert tuple_to_dict(...) == expected_output"
"def all_Characters_Same(s) :
    n = len(s)
    for i in range(1,n) :
        if s[i] != s[0] :
            return False
    return True","This function 'all_Characters_Same' performs a specific operation.

This function performs operations based on the parameters provided.","def test_function():
    # Add test cases
    pass"
"import math
def area_tetrahedron(side):
  area = math.sqrt(3)*(side*side)
  return area","This function 'area_tetrahedron' performs a specific operation.

The function 'area_tetrahedron' takes the following parameters: side. It performs operations based on the parameters provided.","def test_area_tetrahedron():
    # Add test cases for area_tetrahedron
    assert area_tetrahedron(...) == expected_output"
"def rotate_right(list1,m,n):
  result =  list1[-(m):]+list1[:-(n)]
  return result","This function 'rotate_right' performs a specific operation.

The function 'rotate_right' takes the following parameters: list1, m, n. It performs operations based on the parameters provided.","def test_rotate_right():
    # Add test cases for rotate_right
    assert rotate_right(...) == expected_output"
"def check_none(test_tup):
  res = any(map(lambda ele: ele is None, test_tup))
  return (res) ","This function 'check_none' performs a specific operation.

The function 'check_none' takes the following parameters: test_tup. It performs operations based on the parameters provided.","def test_check_none():
    # Add test cases for check_none
    assert check_none(...) == expected_output"
"def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]","This function 'divisible_by_digits' performs a specific operation.

The function 'divisible_by_digits' takes the following parameters: startnum, endnum. It performs operations based on the parameters provided.","def test_divisible_by_digits():
    # Add test cases for divisible_by_digits
    assert divisible_by_digits(...) == expected_output"
"def sector_area(r,a):
    pi=22/7
    if a >= 360:
        return None
    sectorarea = (pi*r**2) * (a/360)
    return sectorarea","This function 'sector_area' performs a specific operation.

The function 'sector_area' takes the following parameters: r, a. It performs operations based on the parameters provided.","def test_sector_area():
    # Add test cases for sector_area
    assert sector_area(...) == expected_output"
"def lcs_of_three(X, Y, Z, m, n, o): 
	L = [[[0 for i in range(o+1)] for j in range(n+1)] 
		for k in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			for k in range(o+1): 
				if (i == 0 or j == 0 or k == 0): 
					L[i][j][k] = 0
				elif (X[i-1] == Y[j-1] and
					X[i-1] == Z[k-1]): 
					L[i][j][k] = L[i-1][j-1][k-1] + 1
				else: 
					L[i][j][k] = max(max(L[i-1][j][k], 
					L[i][j-1][k]), 
									L[i][j][k-1]) 
	return L[m][n][o]","This function 'lcs_of_three' performs a specific operation.

The function 'lcs_of_three' takes the following parameters: X, Y, Z, m, n, o. It performs operations based on the parameters provided.","def test_lcs_of_three():
    # Add test cases for lcs_of_three
    assert lcs_of_three(...) == expected_output"
"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)","This function 'capital_words_spaces' performs a specific operation.

The function 'capital_words_spaces' takes the following parameters: str1. It performs operations based on the parameters provided.","def test_capital_words_spaces():
    # Add test cases for capital_words